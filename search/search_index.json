{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to MkDocs For full documentation visit mkdocs.org . Commands mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. Project layout mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. advisor.md # Advisor OpenAPI Docs automation-hub.md # Automation-Hub OpenAPI Docs ... # Other markdown pages, images and other files.","title":"Welcome to MkDocs"},{"location":"#welcome-to-mkdocs","text":"For full documentation visit mkdocs.org .","title":"Welcome to MkDocs"},{"location":"#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"Commands"},{"location":"#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. advisor.md # Advisor OpenAPI Docs automation-hub.md # Automation-Hub OpenAPI Docs ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"advisor/","text":"Insights Advisor API v1.0.0 Scroll down for code samples, example requests and responses. Select a language for code samples from the tabs above or the mobile navigation menu. The API of the Advisor project in Insights Base URLs: https://console.redhat.com/ https://cloud.redhat.com/ kcs kcs_list Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"https://console.redhat.com/api/insights/v1/kcs/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('https://console.redhat.com/api/insights/v1/kcs/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('https://console.redhat.com/api/insights/v1/kcs/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'https://console.redhat.com/api/insights/v1/kcs/', params: { }, headers: headers p JSON.parse(result) GET /api/insights/v1/kcs/ Looks for all active rules with KCS solutions Returns a list of dicts of the C.R.C rule URL and its KCS solution number Parameters Name In Type Required Description node_ids query array[string] false Display the rule urls for the given list of comma separated KCS solution node_ids Example responses 200 Response [ { \"rule_url\": \"http://example.com\", \"node_id\": \"string\" } ] Responses Status Meaning Description Schema 200 OK none Inline Response Schema Status Code 200 Name Type Required Restrictions Description anonymous [ Kcs ] false none [Pairings of C.R.C rule URL and its KCS solution number (node_id)] \u00bb rule_url string(uri) true none Rule URL on C.R.C. \u00bb node_id string true none KCS solution number This operation does not require authentication kcs_retrieve Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"https://console.redhat.com/api/insights/v1/kcs/{node_id}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('https://console.redhat.com/api/insights/v1/kcs/{node_id}/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('https://console.redhat.com/api/insights/v1/kcs/{node_id}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'https://console.redhat.com/api/insights/v1/kcs/{node_id}/', params: { }, headers: headers p JSON.parse(result) GET /api/insights/v1/kcs/{node_id}/ Gets active rule(s) for a particular KCS solution (node_id) Returns a list of C.R.C rule url(s) for that KCS solution Parameters Name In Type Required Description node_id path string true none Example responses 200 Response [ \"http://example.com\" ] Responses Status Meaning Description Schema 200 OK none Inline Response Schema This operation does not require authentication rulecategory rulecategory_list Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"https://console.redhat.com/api/insights/v1/rulecategory/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('https://console.redhat.com/api/insights/v1/rulecategory/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('https://console.redhat.com/api/insights/v1/rulecategory/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'https://console.redhat.com/api/insights/v1/rulecategory/', params: { }, headers: headers p JSON.parse(result) GET /api/insights/v1/rulecategory/ Rules are divided into categories, the usual being Availability, Stability, Security and Performance. Categories are listed in decreasing order of importance. Example responses 200 Response [ { \"id\": 0, \"name\": \"string\" } ] Responses Status Meaning Description Schema 200 OK none Inline Response Schema Status Code 200 Name Type Required Restrictions Description anonymous [ RuleCategory ] false none none \u00bb id integer true read-only none \u00bb name string true none none This operation does not require authentication rulecategory_retrieve Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"https://console.redhat.com/api/insights/v1/rulecategory/{id}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('https://console.redhat.com/api/insights/v1/rulecategory/{id}/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('https://console.redhat.com/api/insights/v1/rulecategory/{id}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'https://console.redhat.com/api/insights/v1/rulecategory/{id}/', params: { }, headers: headers p JSON.parse(result) GET /api/insights/v1/rulecategory/{id}/ Rules are divided into categories, the usual being Availability, Stability, Security and Performance. Categories are listed in decreasing order of importance. Parameters Name In Type Required Description id path integer true A unique integer value identifying this rule category. Example responses 200 Response { \"id\": 0, \"name\": \"string\" } Responses Status Meaning Description Schema 200 OK none RuleCategory This operation does not require authentication status status_retrieve Code samples package main import ( \"bytes\" \"net/http\" ) func main() { data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"https://console.redhat.com/api/insights/v1/status/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } fetch('https://console.redhat.com/api/insights/v1/status/', { method: 'GET' }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests r = requests.get('https://console.redhat.com/api/insights/v1/status/') print(r.json()) require 'rest-client' require 'json' result = RestClient.get 'https://console.redhat.com/api/insights/v1/status/', params: { } p JSON.parse(result) GET /api/insights/v1/status/ Provide a simple list of URLs contained here. A list of statistics views. Responses Status Meaning Description Schema 200 OK No response body None This operation does not require authentication status_live_retrieve Code samples package main import ( \"bytes\" \"net/http\" ) func main() { data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"https://console.redhat.com/api/insights/v1/status/live/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } fetch('https://console.redhat.com/api/insights/v1/status/live/', { method: 'GET' }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests r = requests.get('https://console.redhat.com/api/insights/v1/status/live/') print(r.json()) require 'rest-client' require 'json' result = RestClient.get 'https://console.redhat.com/api/insights/v1/status/live/', params: { } p JSON.parse(result) GET /api/insights/v1/status/live/ Is the Advisor API live and serving requests? This returns a dictionary with properties defining the status of the components Advisor relies on. At the moment this is the same as the Readiness check (see /ready/ ). In the future it may include other checks if we need to, but the properties of /ready/ will always be included. Responses Status Meaning Description Schema 200 OK No response body None This operation does not require authentication status_ready_retrieve Code samples package main import ( \"bytes\" \"net/http\" ) func main() { data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"https://console.redhat.com/api/insights/v1/status/ready/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } fetch('https://console.redhat.com/api/insights/v1/status/ready/', { method: 'GET' }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests r = requests.get('https://console.redhat.com/api/insights/v1/status/ready/') print(r.json()) require 'rest-client' require 'json' result = RestClient.get 'https://console.redhat.com/api/insights/v1/status/ready/', params: { } p JSON.parse(result) GET /api/insights/v1/status/ready/ Is the Advisor API ready to serve requests? This returns a dictionary with properties defining the status of the components Advisor relies on. 'django' should always be True. If Django isn't ready, you can't get this information :-) 'database' is True when a database access returns successfully with valid information. 'rbac' is True when we can make a request to the RBAC API and get a valid response. 'advisor' is True if all of the above are True. Responses Status Meaning Description Schema 200 OK No response body None This operation does not require authentication systemtype systemtype_list Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"https://console.redhat.com/api/insights/v1/systemtype/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('https://console.redhat.com/api/insights/v1/systemtype/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('https://console.redhat.com/api/insights/v1/systemtype/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'https://console.redhat.com/api/insights/v1/systemtype/', params: { }, headers: headers p JSON.parse(result) GET /api/insights/v1/systemtype/ List all system types List all system types by role and product code Example responses 200 Response [ { \"id\": 0, \"role\": \"string\", \"product_code\": \"string\" } ] Responses Status Meaning Description Schema 200 OK none Inline Response Schema Status Code 200 Name Type Required Restrictions Description anonymous [ SystemType ] false none [RHN-based system types classified by role and product code.] \u00bb id integer true read-only none \u00bb role string true none none \u00bb product_code string true none none This operation does not require authentication systemtype_retrieve Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"https://console.redhat.com/api/insights/v1/systemtype/{id}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('https://console.redhat.com/api/insights/v1/systemtype/{id}/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('https://console.redhat.com/api/insights/v1/systemtype/{id}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'https://console.redhat.com/api/insights/v1/systemtype/{id}/', params: { }, headers: headers p JSON.parse(result) GET /api/insights/v1/systemtype/{id}/ Retrieve a system type Retrieve details of a single system type Parameters Name In Type Required Description id path integer true A unique integer value identifying this system type. Example responses 200 Response { \"id\": 0, \"role\": \"string\", \"product_code\": \"string\" } Responses Status Meaning Description Schema 200 OK none SystemType This operation does not require authentication Schemas Kcs { \"rule_url\": \"http://example.com\", \"node_id\": \"string\" } Pairings of C.R.C rule URL and its KCS solution number (node_id) Properties Name Type Required Restrictions Description rule_url string(uri) true none Rule URL on C.R.C. node_id string true none KCS solution number RuleCategory { \"id\": 0, \"name\": \"string\" } Properties Name Type Required Restrictions Description id integer true read-only none name string true none none SystemType { \"id\": 0, \"role\": \"string\", \"product_code\": \"string\" } RHN-based system types classified by role and product code. Properties Name Type Required Restrictions Description id integer true read-only none role string true none none product_code string true none none","title":"Insights Advisor API v1.0.0"},{"location":"advisor/#kcs_list","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"https://console.redhat.com/api/insights/v1/kcs/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('https://console.redhat.com/api/insights/v1/kcs/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('https://console.redhat.com/api/insights/v1/kcs/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'https://console.redhat.com/api/insights/v1/kcs/', params: { }, headers: headers p JSON.parse(result) GET /api/insights/v1/kcs/ Looks for all active rules with KCS solutions Returns a list of dicts of the C.R.C rule URL and its KCS solution number","title":"kcs_list"},{"location":"advisor/#kcs_retrieve","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"https://console.redhat.com/api/insights/v1/kcs/{node_id}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('https://console.redhat.com/api/insights/v1/kcs/{node_id}/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('https://console.redhat.com/api/insights/v1/kcs/{node_id}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'https://console.redhat.com/api/insights/v1/kcs/{node_id}/', params: { }, headers: headers p JSON.parse(result) GET /api/insights/v1/kcs/{node_id}/ Gets active rule(s) for a particular KCS solution (node_id) Returns a list of C.R.C rule url(s) for that KCS solution","title":"kcs_retrieve"},{"location":"advisor/#rulecategory_list","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"https://console.redhat.com/api/insights/v1/rulecategory/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('https://console.redhat.com/api/insights/v1/rulecategory/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('https://console.redhat.com/api/insights/v1/rulecategory/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'https://console.redhat.com/api/insights/v1/rulecategory/', params: { }, headers: headers p JSON.parse(result) GET /api/insights/v1/rulecategory/ Rules are divided into categories, the usual being Availability, Stability, Security and Performance. Categories are listed in decreasing order of importance. Example responses 200 Response [ { \"id\": 0, \"name\": \"string\" } ]","title":"rulecategory_list"},{"location":"advisor/#rulecategory_retrieve","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"https://console.redhat.com/api/insights/v1/rulecategory/{id}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('https://console.redhat.com/api/insights/v1/rulecategory/{id}/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('https://console.redhat.com/api/insights/v1/rulecategory/{id}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'https://console.redhat.com/api/insights/v1/rulecategory/{id}/', params: { }, headers: headers p JSON.parse(result) GET /api/insights/v1/rulecategory/{id}/ Rules are divided into categories, the usual being Availability, Stability, Security and Performance. Categories are listed in decreasing order of importance.","title":"rulecategory_retrieve"},{"location":"advisor/#status_retrieve","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"https://console.redhat.com/api/insights/v1/status/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } fetch('https://console.redhat.com/api/insights/v1/status/', { method: 'GET' }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests r = requests.get('https://console.redhat.com/api/insights/v1/status/') print(r.json()) require 'rest-client' require 'json' result = RestClient.get 'https://console.redhat.com/api/insights/v1/status/', params: { } p JSON.parse(result) GET /api/insights/v1/status/ Provide a simple list of URLs contained here. A list of statistics views.","title":"status_retrieve"},{"location":"advisor/#status_live_retrieve","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"https://console.redhat.com/api/insights/v1/status/live/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } fetch('https://console.redhat.com/api/insights/v1/status/live/', { method: 'GET' }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests r = requests.get('https://console.redhat.com/api/insights/v1/status/live/') print(r.json()) require 'rest-client' require 'json' result = RestClient.get 'https://console.redhat.com/api/insights/v1/status/live/', params: { } p JSON.parse(result) GET /api/insights/v1/status/live/ Is the Advisor API live and serving requests? This returns a dictionary with properties defining the status of the components Advisor relies on. At the moment this is the same as the Readiness check (see /ready/ ). In the future it may include other checks if we need to, but the properties of /ready/ will always be included.","title":"status_live_retrieve"},{"location":"advisor/#status_ready_retrieve","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"https://console.redhat.com/api/insights/v1/status/ready/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } fetch('https://console.redhat.com/api/insights/v1/status/ready/', { method: 'GET' }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests r = requests.get('https://console.redhat.com/api/insights/v1/status/ready/') print(r.json()) require 'rest-client' require 'json' result = RestClient.get 'https://console.redhat.com/api/insights/v1/status/ready/', params: { } p JSON.parse(result) GET /api/insights/v1/status/ready/ Is the Advisor API ready to serve requests? This returns a dictionary with properties defining the status of the components Advisor relies on. 'django' should always be True. If Django isn't ready, you can't get this information :-) 'database' is True when a database access returns successfully with valid information. 'rbac' is True when we can make a request to the RBAC API and get a valid response. 'advisor' is True if all of the above are True.","title":"status_ready_retrieve"},{"location":"advisor/#systemtype_list","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"https://console.redhat.com/api/insights/v1/systemtype/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('https://console.redhat.com/api/insights/v1/systemtype/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('https://console.redhat.com/api/insights/v1/systemtype/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'https://console.redhat.com/api/insights/v1/systemtype/', params: { }, headers: headers p JSON.parse(result) GET /api/insights/v1/systemtype/ List all system types List all system types by role and product code Example responses 200 Response [ { \"id\": 0, \"role\": \"string\", \"product_code\": \"string\" } ]","title":"systemtype_list"},{"location":"advisor/#systemtype_retrieve","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"https://console.redhat.com/api/insights/v1/systemtype/{id}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('https://console.redhat.com/api/insights/v1/systemtype/{id}/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('https://console.redhat.com/api/insights/v1/systemtype/{id}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'https://console.redhat.com/api/insights/v1/systemtype/{id}/', params: { }, headers: headers p JSON.parse(result) GET /api/insights/v1/systemtype/{id}/ Retrieve a system type Retrieve details of a single system type","title":"systemtype_retrieve"},{"location":"advisor/#schemas","text":"","title":"Schemas"},{"location":"advisor/#properties","text":"Name Type Required Restrictions Description rule_url string(uri) true none Rule URL on C.R.C. node_id string true none KCS solution number","title":"Properties"},{"location":"advisor/#properties_1","text":"Name Type Required Restrictions Description id integer true read-only none name string true none none","title":"Properties"},{"location":"advisor/#properties_2","text":"Name Type Required Restrictions Description id integer true read-only none role string true none none product_code string true none none","title":"Properties"},{"location":"automation-hub/","text":"Automation Hub API v3 Scroll down for code samples, example requests and responses. Select a language for code samples from the tabs above or the mobile navigation menu. Fetch, Upload, Organize, and Distribute Ansible Collections Base URLs: http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/ Email: Pulp Team Web: Pulp Team License: GPLv2+ Authentication HTTP Authentication, scheme: basic Ansible: Collections upload_collection Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Content-Type\": []string{\"multipart/form-data\"}, \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"POST\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/ansible/collections/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const inputBody = '{ \"file\": \"string\", \"sha256\": \"string\", \"expected_namespace\": \"string\", \"expected_name\": \"string\", \"expected_version\": \"string\" }'; const headers = { 'Content-Type':'multipart/form-data', 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/ansible/collections/', { method: 'POST', body: inputBody, headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Content-Type': 'multipart/form-data', 'Accept': 'application/json' } r = requests.post('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/ansible/collections/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Content-Type' => 'multipart/form-data', 'Accept' => 'application/json' } result = RestClient.post 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/ansible/collections/', params: { }, headers: headers p JSON.parse(result) POST /ansible/collections/ Upload a collection Create an artifact and trigger an asynchronous task to create Collection content from it. Body parameter file: string sha256: string expected_namespace: string expected_name: string expected_version: string Parameters Name In Type Required Description body body CollectionOneShot true none Example responses 202 Response { \"task\": \"http://example.com\" } Responses Status Meaning Description Schema 202 Accepted none AsyncOperationResponse This operation does not require authentication ansible_collections_list Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/ansible/collections/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/ansible/collections/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/ansible/collections/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/ansible/collections/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/pulp/api/v3/ansible/collections/ List collections Viewset for Ansible Collections. Parameters Name In Type Required Description limit query integer false Number of results to return per page. name query string false none namespace query string false none offset query integer false The initial index from which to return the results. ordering query array[string] false Ordering fields query string false A list of fields to include in the response. exclude_fields query string false A list of fields to exclude from the response. Enumerated Values Parameter Value ordering -group_roles ordering -name ordering -namespace ordering -pk ordering -pulp_created ordering -pulp_id ordering -pulp_labels ordering -pulp_last_updated ordering -synclist ordering -user_roles ordering -versions ordering group_roles ordering name ordering namespace ordering pk ordering pulp_created ordering pulp_id ordering pulp_labels ordering pulp_last_updated ordering synclist ordering user_roles ordering versions Example responses 200 Response { \"count\": 123, \"next\": \"http://api.example.org/accounts/?offset=400&limit=100\", \"previous\": \"http://api.example.org/accounts/?offset=200&limit=100\", \"results\": [ { \"name\": \"string\", \"namespace\": \"string\" } ] } Responses Status Meaning Description Schema 200 OK none Paginatedansible.CollectionResponseList This operation does not require authentication ansible_collections_read Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/ansible/collections/{pulp_id}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/ansible/collections/{pulp_id}/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/ansible/collections/{pulp_id}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/ansible/collections/{pulp_id}/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/pulp/api/v3/ansible/collections/{pulp_id}/ Inspect a collection Viewset for Ansible Collections. Parameters Name In Type Required Description pulp_id path string(uuid) true A UUID string identifying this collection. fields query string false A list of fields to include in the response. exclude_fields query string false A list of fields to exclude from the response. Example responses 200 Response { \"name\": \"string\", \"namespace\": \"string\" } Responses Status Meaning Description Schema 200 OK none ansible.CollectionResponse This operation does not require authentication Api: Automation-Hub api_automation_hub_read Code samples package main import ( \"bytes\" \"net/http\" ) func main() { data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/', { method: 'GET' }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/') print(r.json()) require 'rest-client' require 'json' result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/', params: { } p JSON.parse(result) GET /api/automation-hub/ Responses Status Meaning Description Schema 200 OK No response body None This operation does not require authentication Api: _Ui api_automation_hub__ui_read Code samples package main import ( \"bytes\" \"net/http\" ) func main() { data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/', { method: 'GET' }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/') print(r.json()) require 'rest-client' require 'json' result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/', params: { } p JSON.parse(result) GET /api/automation-hub/_ui/ Responses Status Meaning Description Schema 200 OK No response body None This operation does not require authentication Api: _Ui V1 Auth Login api_automation_hub__ui_v1_auth_login_get Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/auth/login/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/auth/login/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/auth/login/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/auth/login/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/_ui/v1/auth/login/ Example responses 200 Response { \"username\": \"string\", \"password\": \"string\" } Responses Status Meaning Description Schema 200 OK none galaxy.LoginResponse This operation does not require authentication api_automation_hub__ui_v1_auth_login_post Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Content-Type\": []string{\"application/json\"}, \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"POST\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/auth/login/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const inputBody = '{ \"username\": \"string\", \"password\": \"string\" }'; const headers = { 'Content-Type':'application/json', 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/auth/login/', { method: 'POST', body: inputBody, headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Content-Type': 'application/json', 'Accept': 'application/json' } r = requests.post('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/auth/login/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Content-Type' => 'application/json', 'Accept' => 'application/json' } result = RestClient.post 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/auth/login/', params: { }, headers: headers p JSON.parse(result) POST /api/automation-hub/_ui/v1/auth/login/ Body parameter { \"username\": \"string\", \"password\": \"string\" } username: string password: string Parameters Name In Type Required Description body body galaxy.Login true none Example responses 200 Response { \"username\": \"string\", \"password\": \"string\" } Responses Status Meaning Description Schema 200 OK none galaxy.LoginResponse This operation does not require authentication Api: _Ui V1 Auth Logout api_automation_hub__ui_v1_auth_logout_post Code samples package main import ( \"bytes\" \"net/http\" ) func main() { data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"POST\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/auth/logout/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/auth/logout/', { method: 'POST' }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests r = requests.post('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/auth/logout/') print(r.json()) require 'rest-client' require 'json' result = RestClient.post 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/auth/logout/', params: { } p JSON.parse(result) POST /api/automation-hub/_ui/v1/auth/logout/ Responses Status Meaning Description Schema 200 OK No response body None This operation does not require authentication Api: _Ui V1 Collection-Versions api_automation_hub__ui_v1_collection_versions_list Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/collection-versions/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/collection-versions/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/collection-versions/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/collection-versions/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/_ui/v1/collection-versions/ List collection versions Parameters Name In Type Required Description dependency query string false none limit query integer false Number of results to return per page. name query string false none name__contains query string false none name__icontains query string false none name__startswith query string false none namespace query string false none namespace__contains query string false none namespace__icontains query string false none namespace__startswith query string false none offset query integer false The initial index from which to return the results. repository query string false none sort query array[string] false Ordering version query string false none version__contains query string false none version__icontains query string false none version__startswith query string false none fields query string false A list of fields to include in the response. exclude_fields query string false A list of fields to exclude from the response. Enumerated Values Parameter Value sort -collection sort -namespace sort -pulp_created sort -version sort collection sort namespace sort pulp_created sort version Example responses 200 Response { \"meta\": { \"count\": 123 }, \"links\": { \"first\": \"string\", \"previous\": \"string\", \"next\": \"string\", \"last\": \"string\" }, \"data\": [ { \"username\": \"string\", \"password\": \"string\" } ] } Responses Status Meaning Description Schema 200 OK none Paginatedgalaxy.LoginResponseList This operation does not require authentication api_automation_hub__ui_v1_collection_versions_read Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/collection-versions/{version}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/collection-versions/{version}/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/collection-versions/{version}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/collection-versions/{version}/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/_ui/v1/collection-versions/{version}/ Retrieve collection version Parameters Name In Type Required Description version path string true none fields query string false A list of fields to include in the response. exclude_fields query string false A list of fields to exclude from the response. Example responses 200 Response { \"username\": \"string\", \"password\": \"string\" } Responses Status Meaning Description Schema 200 OK none galaxy.LoginResponse This operation does not require authentication Api: _Ui V1 Collection_Signing _api_automation-hub__ui_v1_collection_signing_api_automation_hub__ui_v1_collection_signing_sign Code samples package main import ( \"bytes\" \"net/http\" ) func main() { data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"POST\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/collection_signing/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/collection_signing/', { method: 'POST' }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests r = requests.post('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/collection_signing/') print(r.json()) require 'rest-client' require 'json' result = RestClient.post 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/collection_signing/', params: { } p JSON.parse(result) POST /api/automation-hub/_ui/v1/collection_signing/ Responses Status Meaning Description Schema 200 OK No response body None This operation does not require authentication api_automation-hub__ui_v1_collection_signing {path}_api_automation_hub__ui_v1_collection_signing_sign Code samples package main import ( \"bytes\" \"net/http\" ) func main() { data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"POST\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/collection_signing/{path}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/collection_signing/{path}/', { method: 'POST' }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests r = requests.post('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/collection_signing/{path}/') print(r.json()) require 'rest-client' require 'json' result = RestClient.post 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/collection_signing/{path}/', params: { } p JSON.parse(result) POST /api/automation-hub/_ui/v1/collection_signing/{path}/ Parameters Name In Type Required Description path path string true none Responses Status Meaning Description Schema 200 OK No response body None This operation does not require authentication api_automation-hub__ui_v1_collection_signing {path}_{namespace}_api_automation_hub__ui_v1_collection_signing_sign Code samples package main import ( \"bytes\" \"net/http\" ) func main() { data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"POST\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/collection_signing/{path}/{namespace}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/collection_signing/{path}/{namespace}/', { method: 'POST' }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests r = requests.post('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/collection_signing/{path}/{namespace}/') print(r.json()) require 'rest-client' require 'json' result = RestClient.post 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/collection_signing/{path}/{namespace}/', params: { } p JSON.parse(result) POST /api/automation-hub/_ui/v1/collection_signing/{path}/{namespace}/ Parameters Name In Type Required Description namespace path string true none path path string true none Responses Status Meaning Description Schema 200 OK No response body None This operation does not require authentication api_automation-hub__ui_v1_collection_signing {path} {namespace} {collection}_api_automation_hub__ui_v1_collection_signing_sign Code samples package main import ( \"bytes\" \"net/http\" ) func main() { data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"POST\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/collection_signing/{path}/{namespace}/{collection}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/collection_signing/{path}/{namespace}/{collection}/', { method: 'POST' }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests r = requests.post('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/collection_signing/{path}/{namespace}/{collection}/') print(r.json()) require 'rest-client' require 'json' result = RestClient.post 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/collection_signing/{path}/{namespace}/{collection}/', params: { } p JSON.parse(result) POST /api/automation-hub/_ui/v1/collection_signing/{path}/{namespace}/{collection}/ Parameters Name In Type Required Description collection path string true none namespace path string true none path path string true none Responses Status Meaning Description Schema 200 OK No response body None This operation does not require authentication api_automation-hub__ui_v1_collection_signing {path} {namespace} {collection}_{version}_api_automation_hub__ui_v1_collection_signing_sign Code samples package main import ( \"bytes\" \"net/http\" ) func main() { data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"POST\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/collection_signing/{path}/{namespace}/{collection}/{version}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/collection_signing/{path}/{namespace}/{collection}/{version}/', { method: 'POST' }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests r = requests.post('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/collection_signing/{path}/{namespace}/{collection}/{version}/') print(r.json()) require 'rest-client' require 'json' result = RestClient.post 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/collection_signing/{path}/{namespace}/{collection}/{version}/', params: { } p JSON.parse(result) POST /api/automation-hub/_ui/v1/collection_signing/{path}/{namespace}/{collection}/{version}/ Parameters Name In Type Required Description collection path string true none namespace path string true none path path string true none version path string true none Responses Status Meaning Description Schema 200 OK No response body None This operation does not require authentication Api: _Ui V1 Controllers api_automation_hub__ui_v1_controllers_get Code samples package main import ( \"bytes\" \"net/http\" ) func main() { data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/controllers/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/controllers/', { method: 'GET' }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/controllers/') print(r.json()) require 'rest-client' require 'json' result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/controllers/', params: { } p JSON.parse(result) GET /api/automation-hub/_ui/v1/controllers/ Responses Status Meaning Description Schema 200 OK No response body None This operation does not require authentication Api: _Ui V1 Distributions api_automation_hub__ui_v1_distributions_list Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/distributions/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/distributions/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/distributions/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/distributions/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/_ui/v1/distributions/ List ansible distributions Parameters Name In Type Required Description limit query integer false Number of results to return per page. offset query integer false The initial index from which to return the results. fields query string false A list of fields to include in the response. exclude_fields query string false A list of fields to exclude from the response. Example responses 200 Response { \"meta\": { \"count\": 123 }, \"links\": { \"first\": \"string\", \"previous\": \"string\", \"next\": \"string\", \"last\": \"string\" }, \"data\": [ { \"pulp_id\": \"f3ad2d41-3c12-4e29-ba19-4d3927e49b47\", \"name\": \"string\", \"base_path\": \"string\", \"repository\": { \"name\": \"string\", \"description\": \"string\", \"pulp_id\": \"f3ad2d41-3c12-4e29-ba19-4d3927e49b47\", \"pulp_last_updated\": \"2019-08-24T14:15:22Z\", \"content_count\": 0, \"gpgkey\": \"string\" } } ] } Responses Status Meaning Description Schema 200 OK none PaginatedDistributionResponseList This operation does not require authentication api_automation_hub__ui_v1_distributions_read Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/distributions/{pulp_id}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/distributions/{pulp_id}/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/distributions/{pulp_id}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/distributions/{pulp_id}/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/_ui/v1/distributions/{pulp_id}/ Inspect an ansible distribution Parameters Name In Type Required Description pulp_id path string(uuid) true A UUID string identifying this ansible distribution. fields query string false A list of fields to include in the response. exclude_fields query string false A list of fields to exclude from the response. Example responses 200 Response { \"pulp_id\": \"f3ad2d41-3c12-4e29-ba19-4d3927e49b47\", \"name\": \"string\", \"base_path\": \"string\", \"repository\": { \"name\": \"string\", \"description\": \"string\", \"pulp_id\": \"f3ad2d41-3c12-4e29-ba19-4d3927e49b47\", \"pulp_last_updated\": \"2019-08-24T14:15:22Z\", \"content_count\": 0, \"gpgkey\": \"string\" } } Responses Status Meaning Description Schema 200 OK none DistributionResponse This operation does not require authentication Api: _Ui V1 Feature-Flags api_automation_hub__ui_v1_feature_flags_get Code samples package main import ( \"bytes\" \"net/http\" ) func main() { data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/feature-flags/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/feature-flags/', { method: 'GET' }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/feature-flags/') print(r.json()) require 'rest-client' require 'json' result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/feature-flags/', params: { } p JSON.parse(result) GET /api/automation-hub/_ui/v1/feature-flags/ Responses Status Meaning Description Schema 200 OK No response body None To perform this operation, you must be authenticated by means of one of the following methods: None Groups _api_automation-hub__ui_v1_groups_groups_list Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/groups/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/groups/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/groups/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/groups/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/_ui/v1/groups/ List groups ViewSet for Group. NOTE: This API endpoint is in \"tech preview\" and subject to change Parameters Name In Type Required Description limit query integer false Number of results to return per page. name query string false none name__contains query string false none name__icontains query string false none name__startswith query string false none offset query integer false The initial index from which to return the results. sort query array[string] false Ordering fields query string false A list of fields to include in the response. exclude_fields query string false A list of fields to exclude from the response. Enumerated Values Parameter Value sort -name sort name Example responses 200 Response { \"meta\": { \"count\": 123 }, \"links\": { \"first\": \"string\", \"previous\": \"string\", \"next\": \"string\", \"last\": \"string\" }, \"data\": [ { \"name\": \"string\", \"pulp_href\": \"http://example.com\", \"id\": 0 } ] } Responses Status Meaning Description Schema 200 OK none PaginatedGroupResponseList This operation does not require authentication _api_automation-hub__ui_v1_groups_groups_create Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Content-Type\": []string{\"application/json\"}, \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"POST\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/groups/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const inputBody = '{ \"name\": \"string\" }'; const headers = { 'Content-Type':'application/json', 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/groups/', { method: 'POST', body: inputBody, headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Content-Type': 'application/json', 'Accept': 'application/json' } r = requests.post('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/groups/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Content-Type' => 'application/json', 'Accept' => 'application/json' } result = RestClient.post 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/groups/', params: { }, headers: headers p JSON.parse(result) POST /api/automation-hub/_ui/v1/groups/ Create a group ViewSet for Group. NOTE: This API endpoint is in \"tech preview\" and subject to change Body parameter { \"name\": \"string\" } name: string Parameters Name In Type Required Description body body Group true none Example responses 201 Response { \"name\": \"string\", \"pulp_href\": \"http://example.com\", \"id\": 0 } Responses Status Meaning Description Schema 201 Created none GroupResponse This operation does not require authentication api_automation-hub__ui_v1_groups {id}_groups_read Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/groups/{id}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/groups/{id}/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/groups/{id}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/groups/{id}/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/_ui/v1/groups/{id}/ Inspect a group ViewSet for Group. NOTE: This API endpoint is in \"tech preview\" and subject to change Parameters Name In Type Required Description id path string true none fields query string false A list of fields to include in the response. exclude_fields query string false A list of fields to exclude from the response. Example responses 200 Response { \"name\": \"string\", \"pulp_href\": \"http://example.com\", \"id\": 0 } Responses Status Meaning Description Schema 200 OK none GroupResponse This operation does not require authentication api_automation-hub__ui_v1_groups {id}_groups_delete Code samples package main import ( \"bytes\" \"net/http\" ) func main() { data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"DELETE\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/groups/{id}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/groups/{id}/', { method: 'DELETE' }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests r = requests.delete('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/groups/{id}/') print(r.json()) require 'rest-client' require 'json' result = RestClient.delete 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/groups/{id}/', params: { } p JSON.parse(result) DELETE /api/automation-hub/_ui/v1/groups/{id}/ Delete a group ViewSet for Group. NOTE: This API endpoint is in \"tech preview\" and subject to change Parameters Name In Type Required Description id path string true none Responses Status Meaning Description Schema 204 No Content No response body None This operation does not require authentication _api_automation-hub_pulp_api_v3_groups_groups_list Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/groups/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/groups/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/groups/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/groups/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/pulp/api/v3/groups/ List groups ViewSet for Group. NOTE: This API endpoint is in \"tech preview\" and subject to change Parameters Name In Type Required Description id query integer false Filter results where id matches value id__in query array[integer] false Filter results where id is in a comma-separated list of values limit query integer false Number of results to return per page. name query string false Filter results where name matches value name__contains query string false Filter results where name contains value name__icontains query string false Filter results where name contains value name__iexact query string false Filter results where name matches value name__in query array[string] false Filter results where name is in a comma-separated list of values offset query integer false The initial index from which to return the results. ordering query array[string] false Ordering fields query string false A list of fields to include in the response. exclude_fields query string false A list of fields to exclude from the response. Enumerated Values Parameter Value ordering -id ordering -name ordering -object_roles ordering -permissions ordering -pk ordering -user ordering id ordering name ordering object_roles ordering permissions ordering pk ordering user Example responses 200 Response { \"meta\": { \"count\": 123 }, \"links\": { \"first\": \"string\", \"previous\": \"string\", \"next\": \"string\", \"last\": \"string\" }, \"data\": [ { \"name\": \"string\", \"pulp_href\": \"http://example.com\", \"id\": 0 } ] } Responses Status Meaning Description Schema 200 OK none PaginatedGroupResponseList This operation does not require authentication _api_automation-hub_pulp_api_v3_groups_groups_create Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Content-Type\": []string{\"application/json\"}, \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"POST\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/groups/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const inputBody = '{ \"name\": \"string\" }'; const headers = { 'Content-Type':'application/json', 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/groups/', { method: 'POST', body: inputBody, headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Content-Type': 'application/json', 'Accept': 'application/json' } r = requests.post('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/groups/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Content-Type' => 'application/json', 'Accept' => 'application/json' } result = RestClient.post 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/groups/', params: { }, headers: headers p JSON.parse(result) POST /api/automation-hub/pulp/api/v3/groups/ Create a group ViewSet for Group. NOTE: This API endpoint is in \"tech preview\" and subject to change Body parameter { \"name\": \"string\" } name: string Parameters Name In Type Required Description body body Group true none Example responses 201 Response { \"name\": \"string\", \"pulp_href\": \"http://example.com\", \"id\": 0 } Responses Status Meaning Description Schema 201 Created none GroupResponse This operation does not require authentication api_automation-hub_pulp_api_v3_groups {id}_groups_read Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/groups/{id}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/groups/{id}/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/groups/{id}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/groups/{id}/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/pulp/api/v3/groups/{id}/ Inspect a group ViewSet for Group. NOTE: This API endpoint is in \"tech preview\" and subject to change Parameters Name In Type Required Description id path integer true A unique integer value identifying this group. fields query string false A list of fields to include in the response. exclude_fields query string false A list of fields to exclude from the response. Example responses 200 Response { \"name\": \"string\", \"pulp_href\": \"http://example.com\", \"id\": 0 } Responses Status Meaning Description Schema 200 OK none GroupResponse This operation does not require authentication groups_update Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Content-Type\": []string{\"application/json\"}, \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"PUT\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/groups/{id}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const inputBody = '{ \"name\": \"string\" }'; const headers = { 'Content-Type':'application/json', 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/groups/{id}/', { method: 'PUT', body: inputBody, headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Content-Type': 'application/json', 'Accept': 'application/json' } r = requests.put('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/groups/{id}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Content-Type' => 'application/json', 'Accept' => 'application/json' } result = RestClient.put 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/groups/{id}/', params: { }, headers: headers p JSON.parse(result) PUT /api/automation-hub/pulp/api/v3/groups/{id}/ Update a group ViewSet for Group. NOTE: This API endpoint is in \"tech preview\" and subject to change Body parameter { \"name\": \"string\" } name: string Parameters Name In Type Required Description id path integer true A unique integer value identifying this group. body body Group true none Example responses 200 Response { \"name\": \"string\", \"pulp_href\": \"http://example.com\", \"id\": 0 } Responses Status Meaning Description Schema 200 OK none GroupResponse This operation does not require authentication groups_partial_update Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Content-Type\": []string{\"application/json\"}, \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"PATCH\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/groups/{id}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const inputBody = '{ \"name\": \"string\" }'; const headers = { 'Content-Type':'application/json', 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/groups/{id}/', { method: 'PATCH', body: inputBody, headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Content-Type': 'application/json', 'Accept': 'application/json' } r = requests.patch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/groups/{id}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Content-Type' => 'application/json', 'Accept' => 'application/json' } result = RestClient.patch 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/groups/{id}/', params: { }, headers: headers p JSON.parse(result) PATCH /api/automation-hub/pulp/api/v3/groups/{id}/ Update a group ViewSet for Group. NOTE: This API endpoint is in \"tech preview\" and subject to change Body parameter { \"name\": \"string\" } name: string Parameters Name In Type Required Description id path integer true A unique integer value identifying this group. body body PatchedGroup true none Example responses 200 Response { \"name\": \"string\", \"pulp_href\": \"http://example.com\", \"id\": 0 } Responses Status Meaning Description Schema 200 OK none GroupResponse This operation does not require authentication api_automation-hub_pulp_api_v3_groups {id}_groups_delete Code samples package main import ( \"bytes\" \"net/http\" ) func main() { data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"DELETE\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/groups/{id}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/groups/{id}/', { method: 'DELETE' }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests r = requests.delete('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/groups/{id}/') print(r.json()) require 'rest-client' require 'json' result = RestClient.delete 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/groups/{id}/', params: { } p JSON.parse(result) DELETE /api/automation-hub/pulp/api/v3/groups/{id}/ Delete a group ViewSet for Group. NOTE: This API endpoint is in \"tech preview\" and subject to change Parameters Name In Type Required Description id path integer true A unique integer value identifying this group. Responses Status Meaning Description Schema 204 No Content No response body None This operation does not require authentication groups_add_role Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Content-Type\": []string{\"application/json\"}, \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"POST\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/groups/{id}/add_role/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const inputBody = '{ \"users\": [], \"groups\": [], \"role\": \"string\" }'; const headers = { 'Content-Type':'application/json', 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/groups/{id}/add_role/', { method: 'POST', body: inputBody, headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Content-Type': 'application/json', 'Accept': 'application/json' } r = requests.post('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/groups/{id}/add_role/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Content-Type' => 'application/json', 'Accept' => 'application/json' } result = RestClient.post 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/groups/{id}/add_role/', params: { }, headers: headers p JSON.parse(result) POST /api/automation-hub/pulp/api/v3/groups/{id}/add_role/ Add a role for this object to users/groups. Body parameter { \"users\": [], \"groups\": [], \"role\": \"string\" } users: [] groups: [] role: string Parameters Name In Type Required Description id path integer true A unique integer value identifying this group. body body NestedRole true none Example responses 201 Response { \"users\": [], \"groups\": [], \"role\": \"string\" } Responses Status Meaning Description Schema 201 Created none NestedRoleResponse This operation does not require authentication groups_list_roles Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/groups/{id}/list_roles/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/groups/{id}/list_roles/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/groups/{id}/list_roles/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/groups/{id}/list_roles/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/pulp/api/v3/groups/{id}/list_roles/ List roles assigned to this object. Parameters Name In Type Required Description id path integer true A unique integer value identifying this group. fields query string false A list of fields to include in the response. exclude_fields query string false A list of fields to exclude from the response. Example responses 200 Response { \"roles\": [ { \"users\": [], \"groups\": [], \"role\": \"string\" } ] } Responses Status Meaning Description Schema 200 OK none ObjectRolesResponse This operation does not require authentication groups_my_permissions Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/groups/{id}/my_permissions/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/groups/{id}/my_permissions/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/groups/{id}/my_permissions/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/groups/{id}/my_permissions/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/pulp/api/v3/groups/{id}/my_permissions/ List permissions available to the current user on this object. Parameters Name In Type Required Description id path integer true A unique integer value identifying this group. fields query string false A list of fields to include in the response. exclude_fields query string false A list of fields to exclude from the response. Example responses 200 Response { \"permissions\": [ \"string\" ] } Responses Status Meaning Description Schema 200 OK none MyPermissionsResponse This operation does not require authentication groups_remove_role Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Content-Type\": []string{\"application/json\"}, \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"POST\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/groups/{id}/remove_role/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const inputBody = '{ \"users\": [], \"groups\": [], \"role\": \"string\" }'; const headers = { 'Content-Type':'application/json', 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/groups/{id}/remove_role/', { method: 'POST', body: inputBody, headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Content-Type': 'application/json', 'Accept': 'application/json' } r = requests.post('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/groups/{id}/remove_role/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Content-Type' => 'application/json', 'Accept' => 'application/json' } result = RestClient.post 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/groups/{id}/remove_role/', params: { }, headers: headers p JSON.parse(result) POST /api/automation-hub/pulp/api/v3/groups/{id}/remove_role/ Remove a role for this object from users/groups. Body parameter { \"users\": [], \"groups\": [], \"role\": \"string\" } users: [] groups: [] role: string Parameters Name In Type Required Description id path integer true A unique integer value identifying this group. body body NestedRole true none Example responses 201 Response { \"users\": [], \"groups\": [], \"role\": \"string\" } Responses Status Meaning Description Schema 201 Created none NestedRoleResponse This operation does not require authentication Groups: Users api_automation-hub__ui_v1_groups {group_pk}_users_groups_users_list Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/groups/{group_pk}/users/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/groups/{group_pk}/users/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/groups/{group_pk}/users/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/groups/{group_pk}/users/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/_ui/v1/groups/{group_pk}/users/ List users List group users. Parameters Name In Type Required Description group_pk path string true none limit query integer false Number of results to return per page. offset query integer false The initial index from which to return the results. fields query string false A list of fields to include in the response. exclude_fields query string false A list of fields to exclude from the response. Example responses 200 Response { \"meta\": { \"count\": 123 }, \"links\": { \"first\": \"string\", \"previous\": \"string\", \"next\": \"string\", \"last\": \"string\" }, \"data\": [ { \"username\": \"string\", \"pulp_href\": \"http://example.com\" } ] } Responses Status Meaning Description Schema 200 OK none PaginatedGroupUserResponseList This operation does not require authentication api_automation-hub__ui_v1_groups {group_pk}_users_groups_users_create Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Content-Type\": []string{\"application/json\"}, \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"POST\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/groups/{group_pk}/users/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const inputBody = '{ \"username\": \"string\" }'; const headers = { 'Content-Type':'application/json', 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/groups/{group_pk}/users/', { method: 'POST', body: inputBody, headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Content-Type': 'application/json', 'Accept': 'application/json' } r = requests.post('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/groups/{group_pk}/users/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Content-Type' => 'application/json', 'Accept' => 'application/json' } result = RestClient.post 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/groups/{group_pk}/users/', params: { }, headers: headers p JSON.parse(result) POST /api/automation-hub/_ui/v1/groups/{group_pk}/users/ Create an user Add a user to a group. Body parameter { \"username\": \"string\" } username: string Parameters Name In Type Required Description group_pk path string true none body body GroupUser true none Example responses 201 Response { \"username\": \"string\", \"pulp_href\": \"http://example.com\" } Responses Status Meaning Description Schema 201 Created none GroupUserResponse This operation does not require authentication api_automation-hub__ui_v1_groups {group_pk} users {id}_groups_users_delete Code samples package main import ( \"bytes\" \"net/http\" ) func main() { data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"DELETE\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/groups/{group_pk}/users/{id}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/groups/{group_pk}/users/{id}/', { method: 'DELETE' }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests r = requests.delete('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/groups/{group_pk}/users/{id}/') print(r.json()) require 'rest-client' require 'json' result = RestClient.delete 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/groups/{group_pk}/users/{id}/', params: { } p JSON.parse(result) DELETE /api/automation-hub/_ui/v1/groups/{group_pk}/users/{id}/ Delete an user Remove a user from a group. Parameters Name In Type Required Description group_pk path string true none id path string true none Responses Status Meaning Description Schema 204 No Content No response body None This operation does not require authentication api_automation-hub_pulp_api_v3_groups {group_pk}_users_groups_users_list Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/groups/{group_pk}/users/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/groups/{group_pk}/users/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/groups/{group_pk}/users/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/groups/{group_pk}/users/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/pulp/api/v3/groups/{group_pk}/users/ List users List group users. Parameters Name In Type Required Description group_pk path string true none limit query integer false Number of results to return per page. offset query integer false The initial index from which to return the results. fields query string false A list of fields to include in the response. exclude_fields query string false A list of fields to exclude from the response. Example responses 200 Response { \"meta\": { \"count\": 123 }, \"links\": { \"first\": \"string\", \"previous\": \"string\", \"next\": \"string\", \"last\": \"string\" }, \"data\": [ { \"username\": \"string\", \"pulp_href\": \"http://example.com\" } ] } Responses Status Meaning Description Schema 200 OK none PaginatedGroupUserResponseList This operation does not require authentication api_automation-hub_pulp_api_v3_groups {group_pk}_users_groups_users_create Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Content-Type\": []string{\"application/json\"}, \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"POST\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/groups/{group_pk}/users/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const inputBody = '{ \"username\": \"string\" }'; const headers = { 'Content-Type':'application/json', 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/groups/{group_pk}/users/', { method: 'POST', body: inputBody, headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Content-Type': 'application/json', 'Accept': 'application/json' } r = requests.post('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/groups/{group_pk}/users/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Content-Type' => 'application/json', 'Accept' => 'application/json' } result = RestClient.post 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/groups/{group_pk}/users/', params: { }, headers: headers p JSON.parse(result) POST /api/automation-hub/pulp/api/v3/groups/{group_pk}/users/ Create an user Add a user to a group. Body parameter { \"username\": \"string\" } username: string Parameters Name In Type Required Description group_pk path string true none body body GroupUser true none Example responses 201 Response { \"username\": \"string\", \"pulp_href\": \"http://example.com\" } Responses Status Meaning Description Schema 201 Created none GroupUserResponse This operation does not require authentication api_automation-hub_pulp_api_v3_groups {group_pk} users {id}_groups_users_delete Code samples package main import ( \"bytes\" \"net/http\" ) func main() { data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"DELETE\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/groups/{group_pk}/users/{id}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/groups/{group_pk}/users/{id}/', { method: 'DELETE' }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests r = requests.delete('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/groups/{group_pk}/users/{id}/') print(r.json()) require 'rest-client' require 'json' result = RestClient.delete 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/groups/{group_pk}/users/{id}/', params: { } p JSON.parse(result) DELETE /api/automation-hub/pulp/api/v3/groups/{group_pk}/users/{id}/ Delete an user Remove a user from a group. Parameters Name In Type Required Description group_pk path string true none id path integer true A unique integer value identifying this user. Responses Status Meaning Description Schema 204 No Content No response body None This operation does not require authentication Api: _Ui V1 Imports Collections api_automation_hub__ui_v1_imports_collections_list Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/imports/collections/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/imports/collections/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/imports/collections/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/imports/collections/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/_ui/v1/imports/collections/ List collection imports ViewSet for CollectionImports. Parameters Name In Type Required Description created query string(date) false none keywords query string false none limit query integer false Number of results to return per page. name query string false none namespace query string false none offset query integer false The initial index from which to return the results. sort query array[string] false Ordering state query string false none version query string false none fields query string false A list of fields to include in the response. exclude_fields query string false A list of fields to exclude from the response. Enumerated Values Parameter Value sort -created sort created Example responses 200 Response { \"meta\": { \"count\": 123 }, \"links\": { \"first\": \"string\", \"previous\": \"string\", \"next\": \"string\", \"last\": \"string\" }, \"data\": [ { \"id\": \"497f6eca-6276-4993-bfeb-53cbbbba6f08\", \"state\": \"string\", \"namespace\": \"string\", \"name\": \"string\", \"version\": \"string\", \"created_at\": \"2019-08-24T14:15:22Z\", \"updated_at\": \"2019-08-24T14:15:22Z\", \"started_at\": \"2019-08-24T14:15:22Z\", \"finished_at\": \"2019-08-24T14:15:22Z\" } ] } Responses Status Meaning Description Schema 200 OK none PaginatedImportTaskListResponseList This operation does not require authentication api_automation_hub__ui_v1_imports_collections_read Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/imports/collections/{task_id}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/imports/collections/{task_id}/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/imports/collections/{task_id}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/imports/collections/{task_id}/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/_ui/v1/imports/collections/{task_id}/ Retrieve collection import Returns a CollectionImport object. Parameters Name In Type Required Description task_id path string(uuid) true A unique value identifying this collection import. fields query string false A list of fields to include in the response. exclude_fields query string false A list of fields to exclude from the response. Example responses 200 Response { \"id\": \"497f6eca-6276-4993-bfeb-53cbbbba6f08\", \"state\": \"string\", \"namespace\": \"string\", \"name\": \"string\", \"version\": \"string\", \"created_at\": \"2019-08-24T14:15:22Z\", \"updated_at\": \"2019-08-24T14:15:22Z\", \"started_at\": \"2019-08-24T14:15:22Z\", \"finished_at\": \"2019-08-24T14:15:22Z\", \"error\": {}, \"messages\": {} } Responses Status Meaning Description Schema 200 OK none ImportTaskDetailResponse This operation does not require authentication Api: _Ui V1 Landing-Page api_automation_hub__ui_v1_landing_page_read Code samples package main import ( \"bytes\" \"net/http\" ) func main() { data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/landing-page/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/landing-page/', { method: 'GET' }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/landing-page/') print(r.json()) require 'rest-client' require 'json' result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/landing-page/', params: { } p JSON.parse(result) GET /api/automation-hub/_ui/v1/landing-page/ Responses Status Meaning Description Schema 200 OK No response body None This operation does not require authentication Api: _Ui V1 Me api_automation_hub__ui_v1_me_read Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/me/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/me/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/me/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/me/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/_ui/v1/me/ Example responses 200 Response { \"id\": 0, \"username\": \"string\", \"first_name\": \"string\", \"last_name\": \"string\", \"email\": \"user@example.com\", \"groups\": [ 0 ], \"date_joined\": \"2019-08-24T14:15:22Z\", \"is_superuser\": true, \"auth_provider\": \"string\", \"model_permissions\": {}, \"is_anonymous\": \"string\" } Responses Status Meaning Description Schema 200 OK none CurrentUserResponse This operation does not require authentication api_automation_hub__ui_v1_me_update Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Content-Type\": []string{\"application/json\"}, \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"PUT\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/me/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const inputBody = '{ \"username\": \"string\", \"first_name\": \"string\", \"last_name\": \"string\", \"email\": \"user@example.com\", \"password\": \"string\", \"is_superuser\": true }'; const headers = { 'Content-Type':'application/json', 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/me/', { method: 'PUT', body: inputBody, headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Content-Type': 'application/json', 'Accept': 'application/json' } r = requests.put('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/me/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Content-Type' => 'application/json', 'Accept' => 'application/json' } result = RestClient.put 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/me/', params: { }, headers: headers p JSON.parse(result) PUT /api/automation-hub/_ui/v1/me/ Body parameter { \"username\": \"string\", \"first_name\": \"string\", \"last_name\": \"string\", \"email\": \"user@example.com\", \"password\": \"string\", \"is_superuser\": true } username: string first_name: string last_name: string email: user@example.com password: string is_superuser: true Parameters Name In Type Required Description body body CurrentUser true none Example responses 200 Response { \"id\": 0, \"username\": \"string\", \"first_name\": \"string\", \"last_name\": \"string\", \"email\": \"user@example.com\", \"groups\": [ 0 ], \"date_joined\": \"2019-08-24T14:15:22Z\", \"is_superuser\": true, \"auth_provider\": \"string\", \"model_permissions\": {}, \"is_anonymous\": \"string\" } Responses Status Meaning Description Schema 200 OK none CurrentUserResponse This operation does not require authentication Api: _Ui V1 My-Distributions api_automation_hub__ui_v1_my_distributions_list Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/my-distributions/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/my-distributions/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/my-distributions/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/my-distributions/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/_ui/v1/my-distributions/ List ansible distributions Parameters Name In Type Required Description limit query integer false Number of results to return per page. offset query integer false The initial index from which to return the results. fields query string false A list of fields to include in the response. exclude_fields query string false A list of fields to exclude from the response. Example responses 200 Response { \"meta\": { \"count\": 123 }, \"links\": { \"first\": \"string\", \"previous\": \"string\", \"next\": \"string\", \"last\": \"string\" }, \"data\": [ { \"pulp_id\": \"f3ad2d41-3c12-4e29-ba19-4d3927e49b47\", \"name\": \"string\", \"base_path\": \"string\", \"repository\": { \"name\": \"string\", \"description\": \"string\", \"pulp_id\": \"f3ad2d41-3c12-4e29-ba19-4d3927e49b47\", \"pulp_last_updated\": \"2019-08-24T14:15:22Z\", \"content_count\": 0, \"gpgkey\": \"string\" } } ] } Responses Status Meaning Description Schema 200 OK none PaginatedDistributionResponseList This operation does not require authentication api_automation_hub__ui_v1_my_distributions_read Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/my-distributions/{pulp_id}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/my-distributions/{pulp_id}/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/my-distributions/{pulp_id}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/my-distributions/{pulp_id}/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/_ui/v1/my-distributions/{pulp_id}/ Inspect an ansible distribution Parameters Name In Type Required Description pulp_id path string(uuid) true A UUID string identifying this ansible distribution. fields query string false A list of fields to include in the response. exclude_fields query string false A list of fields to exclude from the response. Example responses 200 Response { \"pulp_id\": \"f3ad2d41-3c12-4e29-ba19-4d3927e49b47\", \"name\": \"string\", \"base_path\": \"string\", \"repository\": { \"name\": \"string\", \"description\": \"string\", \"pulp_id\": \"f3ad2d41-3c12-4e29-ba19-4d3927e49b47\", \"pulp_last_updated\": \"2019-08-24T14:15:22Z\", \"content_count\": 0, \"gpgkey\": \"string\" } } Responses Status Meaning Description Schema 200 OK none DistributionResponse This operation does not require authentication Api: _Ui V1 My-Namespaces api_automation_hub__ui_v1_my_namespaces_list Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/my-namespaces/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/my-namespaces/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/my-namespaces/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/my-namespaces/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/_ui/v1/my-namespaces/ List namespaces Parameters Name In Type Required Description company query string false none keywords query string false none limit query integer false Number of results to return per page. name query string false none offset query integer false The initial index from which to return the results. sort query array[string] false Ordering fields query string false A list of fields to include in the response. exclude_fields query string false A list of fields to exclude from the response. Enumerated Values Parameter Value sort -company sort -id sort -name sort company sort id sort name Example responses 200 Response { \"meta\": { \"count\": 123 }, \"links\": { \"first\": \"string\", \"previous\": \"string\", \"next\": \"string\", \"last\": \"string\" }, \"data\": [ { \"pulp_href\": \"http://example.com\", \"id\": 0, \"name\": \"string\", \"company\": \"string\", \"email\": \"string\", \"avatar_url\": \"http://example.com\", \"description\": \"string\", \"groups\": \"string\", \"related_fields\": { \"my_permissions\": {} } } ] } Responses Status Meaning Description Schema 200 OK none PaginatedNamespaceSummaryResponseList This operation does not require authentication api_automation_hub__ui_v1_my_namespaces_create Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Content-Type\": []string{\"application/json\"}, \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"POST\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/my-namespaces/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const inputBody = '{ \"name\": \"string\", \"company\": \"string\", \"email\": \"string\", \"avatar_url\": \"http://example.com\", \"description\": \"string\", \"links\": [ { \"name\": \"string\", \"url\": \"string\" } ], \"groups\": \"string\", \"resources\": \"string\" }'; const headers = { 'Content-Type':'application/json', 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/my-namespaces/', { method: 'POST', body: inputBody, headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Content-Type': 'application/json', 'Accept': 'application/json' } r = requests.post('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/my-namespaces/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Content-Type' => 'application/json', 'Accept' => 'application/json' } result = RestClient.post 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/my-namespaces/', params: { }, headers: headers p JSON.parse(result) POST /api/automation-hub/_ui/v1/my-namespaces/ Create a namespace Override to validate for name duplication before serializer validation. Body parameter { \"name\": \"string\", \"company\": \"string\", \"email\": \"string\", \"avatar_url\": \"http://example.com\", \"description\": \"string\", \"links\": [ { \"name\": \"string\", \"url\": \"string\" } ], \"groups\": \"string\", \"resources\": \"string\" } name: string company: string email: string avatar_url: http://example.com description: string links: - name: string url: string groups: string resources: string Parameters Name In Type Required Description body body Namespace true none Example responses 201 Response { \"pulp_href\": \"http://example.com\", \"id\": 0, \"name\": \"string\", \"company\": \"string\", \"email\": \"string\", \"avatar_url\": \"http://example.com\", \"description\": \"string\", \"links\": [ { \"name\": \"string\", \"url\": \"string\" } ], \"groups\": \"string\", \"resources\": \"string\", \"related_fields\": { \"my_permissions\": {} } } Responses Status Meaning Description Schema 201 Created none NamespaceResponse This operation does not require authentication api_automation_hub__ui_v1_my_namespaces_read Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/my-namespaces/{name}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/my-namespaces/{name}/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/my-namespaces/{name}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/my-namespaces/{name}/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/_ui/v1/my-namespaces/{name}/ Inspect a namespace Parameters Name In Type Required Description name path string true none fields query string false A list of fields to include in the response. exclude_fields query string false A list of fields to exclude from the response. Example responses 200 Response { \"pulp_href\": \"http://example.com\", \"id\": 0, \"name\": \"string\", \"company\": \"string\", \"email\": \"string\", \"avatar_url\": \"http://example.com\", \"description\": \"string\", \"links\": [ { \"name\": \"string\", \"url\": \"string\" } ], \"groups\": \"string\", \"resources\": \"string\", \"related_fields\": { \"my_permissions\": {} } } Responses Status Meaning Description Schema 200 OK none NamespaceResponse This operation does not require authentication api_automation_hub__ui_v1_my_namespaces_update Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Content-Type\": []string{\"application/json\"}, \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"PUT\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/my-namespaces/{name}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const inputBody = '{ \"name\": \"string\", \"company\": \"string\", \"email\": \"string\", \"avatar_url\": \"http://example.com\", \"description\": \"string\", \"links\": [ { \"name\": \"string\", \"url\": \"string\" } ], \"groups\": \"string\", \"resources\": \"string\" }'; const headers = { 'Content-Type':'application/json', 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/my-namespaces/{name}/', { method: 'PUT', body: inputBody, headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Content-Type': 'application/json', 'Accept': 'application/json' } r = requests.put('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/my-namespaces/{name}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Content-Type' => 'application/json', 'Accept' => 'application/json' } result = RestClient.put 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/my-namespaces/{name}/', params: { }, headers: headers p JSON.parse(result) PUT /api/automation-hub/_ui/v1/my-namespaces/{name}/ Update a namespace Body parameter { \"name\": \"string\", \"company\": \"string\", \"email\": \"string\", \"avatar_url\": \"http://example.com\", \"description\": \"string\", \"links\": [ { \"name\": \"string\", \"url\": \"string\" } ], \"groups\": \"string\", \"resources\": \"string\" } name: string company: string email: string avatar_url: http://example.com description: string links: - name: string url: string groups: string resources: string Parameters Name In Type Required Description name path string true none body body Namespace true none Example responses 200 Response { \"pulp_href\": \"http://example.com\", \"id\": 0, \"name\": \"string\", \"company\": \"string\", \"email\": \"string\", \"avatar_url\": \"http://example.com\", \"description\": \"string\", \"links\": [ { \"name\": \"string\", \"url\": \"string\" } ], \"groups\": \"string\", \"resources\": \"string\", \"related_fields\": { \"my_permissions\": {} } } Responses Status Meaning Description Schema 200 OK none NamespaceResponse This operation does not require authentication api_automation_hub__ui_v1_my_namespaces_partial_update Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Content-Type\": []string{\"application/json\"}, \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"PATCH\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/my-namespaces/{name}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const inputBody = '{ \"name\": \"string\", \"company\": \"string\", \"email\": \"string\", \"avatar_url\": \"http://example.com\", \"description\": \"string\", \"links\": [ { \"name\": \"string\", \"url\": \"string\" } ], \"groups\": \"string\", \"resources\": \"string\" }'; const headers = { 'Content-Type':'application/json', 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/my-namespaces/{name}/', { method: 'PATCH', body: inputBody, headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Content-Type': 'application/json', 'Accept': 'application/json' } r = requests.patch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/my-namespaces/{name}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Content-Type' => 'application/json', 'Accept' => 'application/json' } result = RestClient.patch 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/my-namespaces/{name}/', params: { }, headers: headers p JSON.parse(result) PATCH /api/automation-hub/_ui/v1/my-namespaces/{name}/ Update a namespace Body parameter { \"name\": \"string\", \"company\": \"string\", \"email\": \"string\", \"avatar_url\": \"http://example.com\", \"description\": \"string\", \"links\": [ { \"name\": \"string\", \"url\": \"string\" } ], \"groups\": \"string\", \"resources\": \"string\" } name: string company: string email: string avatar_url: http://example.com description: string links: - name: string url: string groups: string resources: string Parameters Name In Type Required Description name path string true none body body PatchedNamespace true none Example responses 200 Response { \"pulp_href\": \"http://example.com\", \"id\": 0, \"name\": \"string\", \"company\": \"string\", \"email\": \"string\", \"avatar_url\": \"http://example.com\", \"description\": \"string\", \"links\": [ { \"name\": \"string\", \"url\": \"string\" } ], \"groups\": \"string\", \"resources\": \"string\", \"related_fields\": { \"my_permissions\": {} } } Responses Status Meaning Description Schema 200 OK none NamespaceResponse This operation does not require authentication api_automation_hub__ui_v1_my_namespaces_delete Code samples package main import ( \"bytes\" \"net/http\" ) func main() { data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"DELETE\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/my-namespaces/{name}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/my-namespaces/{name}/', { method: 'DELETE' }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests r = requests.delete('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/my-namespaces/{name}/') print(r.json()) require 'rest-client' require 'json' result = RestClient.delete 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/my-namespaces/{name}/', params: { } p JSON.parse(result) DELETE /api/automation-hub/_ui/v1/my-namespaces/{name}/ Delete a namespace Delete a namespace. Perform a check to see if there are any collections in the namespace. If there are, return a failure. Delete the inbound pulp distro and repository Delete the namespace object. return: Response(status=204) Parameters Name In Type Required Description name path string true none Responses Status Meaning Description Schema 204 No Content No response body None This operation does not require authentication Api: _Ui V1 My-Synclists api_automation_hub__ui_v1_my_synclists_list Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/my-synclists/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/my-synclists/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/my-synclists/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/my-synclists/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/_ui/v1/my-synclists/ List sync lists Parameters Name In Type Required Description limit query integer false Number of results to return per page. offset query integer false The initial index from which to return the results. fields query string false A list of fields to include in the response. exclude_fields query string false A list of fields to exclude from the response. Example responses 200 Response { \"meta\": { \"count\": 123 }, \"links\": { \"first\": \"string\", \"previous\": \"string\", \"next\": \"string\", \"last\": \"string\" }, \"data\": [ { \"id\": 0, \"name\": \"string\", \"policy\": \"exclude\", \"upstream_repository\": \"e4806caf-013f-4b45-852d-8383b790be1e\", \"repository\": \"e3d1beef-8819-44ce-aeb0-6d1f16e4ee3b\", \"distribution\": \"bfc61d85-c320-44a0-8e0a-6d4a25594a2d\", \"collections\": [ { \"namespace\": \"string\", \"name\": \"string\" } ], \"namespaces\": [ \"string\" ], \"groups\": \"string\" } ] } Responses Status Meaning Description Schema 200 OK none PaginatedSyncListResponseList This operation does not require authentication api_automation_hub__ui_v1_my_synclists_create Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Content-Type\": []string{\"application/json\"}, \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"POST\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/my-synclists/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const inputBody = '{ \"name\": \"string\", \"policy\": \"exclude\", \"upstream_repository\": \"e4806caf-013f-4b45-852d-8383b790be1e\", \"distribution\": \"bfc61d85-c320-44a0-8e0a-6d4a25594a2d\", \"collections\": [ { \"namespace\": \"string\", \"name\": \"string\" } ], \"namespaces\": [ \"string\" ], \"groups\": \"string\" }'; const headers = { 'Content-Type':'application/json', 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/my-synclists/', { method: 'POST', body: inputBody, headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Content-Type': 'application/json', 'Accept': 'application/json' } r = requests.post('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/my-synclists/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Content-Type' => 'application/json', 'Accept' => 'application/json' } result = RestClient.post 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/my-synclists/', params: { }, headers: headers p JSON.parse(result) POST /api/automation-hub/_ui/v1/my-synclists/ Create a sync list Body parameter { \"name\": \"string\", \"policy\": \"exclude\", \"upstream_repository\": \"e4806caf-013f-4b45-852d-8383b790be1e\", \"distribution\": \"bfc61d85-c320-44a0-8e0a-6d4a25594a2d\", \"collections\": [ { \"namespace\": \"string\", \"name\": \"string\" } ], \"namespaces\": [ \"string\" ], \"groups\": \"string\" } name: string policy: exclude upstream_repository: e4806caf-013f-4b45-852d-8383b790be1e distribution: bfc61d85-c320-44a0-8e0a-6d4a25594a2d collections: - namespace: string name: string namespaces: - string groups: string Parameters Name In Type Required Description body body SyncList true none Example responses 201 Response { \"id\": 0, \"name\": \"string\", \"policy\": \"exclude\", \"upstream_repository\": \"e4806caf-013f-4b45-852d-8383b790be1e\", \"repository\": \"e3d1beef-8819-44ce-aeb0-6d1f16e4ee3b\", \"distribution\": \"bfc61d85-c320-44a0-8e0a-6d4a25594a2d\", \"collections\": [ { \"namespace\": \"string\", \"name\": \"string\" } ], \"namespaces\": [ \"string\" ], \"groups\": \"string\" } Responses Status Meaning Description Schema 201 Created none SyncListResponse This operation does not require authentication api_automation_hub__ui_v1_my_synclists_read Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/my-synclists/{id}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/my-synclists/{id}/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/my-synclists/{id}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/my-synclists/{id}/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/_ui/v1/my-synclists/{id}/ Inspect a sync list Parameters Name In Type Required Description id path integer true A unique integer value identifying this sync list. fields query string false A list of fields to include in the response. exclude_fields query string false A list of fields to exclude from the response. Example responses 200 Response { \"id\": 0, \"name\": \"string\", \"policy\": \"exclude\", \"upstream_repository\": \"e4806caf-013f-4b45-852d-8383b790be1e\", \"repository\": \"e3d1beef-8819-44ce-aeb0-6d1f16e4ee3b\", \"distribution\": \"bfc61d85-c320-44a0-8e0a-6d4a25594a2d\", \"collections\": [ { \"namespace\": \"string\", \"name\": \"string\" } ], \"namespaces\": [ \"string\" ], \"groups\": \"string\" } Responses Status Meaning Description Schema 200 OK none SyncListResponse This operation does not require authentication api_automation_hub__ui_v1_my_synclists_update Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Content-Type\": []string{\"application/json\"}, \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"PUT\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/my-synclists/{id}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const inputBody = '{ \"name\": \"string\", \"policy\": \"exclude\", \"upstream_repository\": \"e4806caf-013f-4b45-852d-8383b790be1e\", \"distribution\": \"bfc61d85-c320-44a0-8e0a-6d4a25594a2d\", \"collections\": [ { \"namespace\": \"string\", \"name\": \"string\" } ], \"namespaces\": [ \"string\" ], \"groups\": \"string\" }'; const headers = { 'Content-Type':'application/json', 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/my-synclists/{id}/', { method: 'PUT', body: inputBody, headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Content-Type': 'application/json', 'Accept': 'application/json' } r = requests.put('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/my-synclists/{id}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Content-Type' => 'application/json', 'Accept' => 'application/json' } result = RestClient.put 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/my-synclists/{id}/', params: { }, headers: headers p JSON.parse(result) PUT /api/automation-hub/_ui/v1/my-synclists/{id}/ Update a sync list Body parameter { \"name\": \"string\", \"policy\": \"exclude\", \"upstream_repository\": \"e4806caf-013f-4b45-852d-8383b790be1e\", \"distribution\": \"bfc61d85-c320-44a0-8e0a-6d4a25594a2d\", \"collections\": [ { \"namespace\": \"string\", \"name\": \"string\" } ], \"namespaces\": [ \"string\" ], \"groups\": \"string\" } name: string policy: exclude upstream_repository: e4806caf-013f-4b45-852d-8383b790be1e distribution: bfc61d85-c320-44a0-8e0a-6d4a25594a2d collections: - namespace: string name: string namespaces: - string groups: string Parameters Name In Type Required Description id path integer true A unique integer value identifying this sync list. body body SyncList true none Example responses 200 Response { \"id\": 0, \"name\": \"string\", \"policy\": \"exclude\", \"upstream_repository\": \"e4806caf-013f-4b45-852d-8383b790be1e\", \"repository\": \"e3d1beef-8819-44ce-aeb0-6d1f16e4ee3b\", \"distribution\": \"bfc61d85-c320-44a0-8e0a-6d4a25594a2d\", \"collections\": [ { \"namespace\": \"string\", \"name\": \"string\" } ], \"namespaces\": [ \"string\" ], \"groups\": \"string\" } Responses Status Meaning Description Schema 200 OK none SyncListResponse This operation does not require authentication api_automation_hub__ui_v1_my_synclists_partial_update Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Content-Type\": []string{\"application/json\"}, \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"PATCH\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/my-synclists/{id}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const inputBody = '{ \"name\": \"string\", \"policy\": \"exclude\", \"upstream_repository\": \"e4806caf-013f-4b45-852d-8383b790be1e\", \"distribution\": \"bfc61d85-c320-44a0-8e0a-6d4a25594a2d\", \"collections\": [ { \"namespace\": \"string\", \"name\": \"string\" } ], \"namespaces\": [ \"string\" ], \"groups\": \"string\" }'; const headers = { 'Content-Type':'application/json', 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/my-synclists/{id}/', { method: 'PATCH', body: inputBody, headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Content-Type': 'application/json', 'Accept': 'application/json' } r = requests.patch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/my-synclists/{id}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Content-Type' => 'application/json', 'Accept' => 'application/json' } result = RestClient.patch 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/my-synclists/{id}/', params: { }, headers: headers p JSON.parse(result) PATCH /api/automation-hub/_ui/v1/my-synclists/{id}/ Update a sync list Body parameter { \"name\": \"string\", \"policy\": \"exclude\", \"upstream_repository\": \"e4806caf-013f-4b45-852d-8383b790be1e\", \"distribution\": \"bfc61d85-c320-44a0-8e0a-6d4a25594a2d\", \"collections\": [ { \"namespace\": \"string\", \"name\": \"string\" } ], \"namespaces\": [ \"string\" ], \"groups\": \"string\" } name: string policy: exclude upstream_repository: e4806caf-013f-4b45-852d-8383b790be1e distribution: bfc61d85-c320-44a0-8e0a-6d4a25594a2d collections: - namespace: string name: string namespaces: - string groups: string Parameters Name In Type Required Description id path integer true A unique integer value identifying this sync list. body body PatchedSyncList true none Example responses 200 Response { \"id\": 0, \"name\": \"string\", \"policy\": \"exclude\", \"upstream_repository\": \"e4806caf-013f-4b45-852d-8383b790be1e\", \"repository\": \"e3d1beef-8819-44ce-aeb0-6d1f16e4ee3b\", \"distribution\": \"bfc61d85-c320-44a0-8e0a-6d4a25594a2d\", \"collections\": [ { \"namespace\": \"string\", \"name\": \"string\" } ], \"namespaces\": [ \"string\" ], \"groups\": \"string\" } Responses Status Meaning Description Schema 200 OK none SyncListResponse This operation does not require authentication api_automation_hub__ui_v1_my_synclists_delete Code samples package main import ( \"bytes\" \"net/http\" ) func main() { data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"DELETE\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/my-synclists/{id}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/my-synclists/{id}/', { method: 'DELETE' }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests r = requests.delete('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/my-synclists/{id}/') print(r.json()) require 'rest-client' require 'json' result = RestClient.delete 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/my-synclists/{id}/', params: { } p JSON.parse(result) DELETE /api/automation-hub/_ui/v1/my-synclists/{id}/ Delete a sync list Parameters Name In Type Required Description id path integer true A unique integer value identifying this sync list. Responses Status Meaning Description Schema 204 No Content No response body None This operation does not require authentication Api: _Ui V1 My-Synclists Curate api_automation_hub__ui_v1_my_synclists_curate_curate Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Content-Type\": []string{\"application/json\"}, \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"POST\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/my-synclists/{id}/curate/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const inputBody = '{ \"name\": \"string\", \"policy\": \"exclude\", \"upstream_repository\": \"e4806caf-013f-4b45-852d-8383b790be1e\", \"distribution\": \"bfc61d85-c320-44a0-8e0a-6d4a25594a2d\", \"collections\": [ { \"namespace\": \"string\", \"name\": \"string\" } ], \"namespaces\": [ \"string\" ], \"groups\": \"string\" }'; const headers = { 'Content-Type':'application/json', 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/my-synclists/{id}/curate/', { method: 'POST', body: inputBody, headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Content-Type': 'application/json', 'Accept': 'application/json' } r = requests.post('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/my-synclists/{id}/curate/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Content-Type' => 'application/json', 'Accept' => 'application/json' } result = RestClient.post 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/my-synclists/{id}/curate/', params: { }, headers: headers p JSON.parse(result) POST /api/automation-hub/_ui/v1/my-synclists/{id}/curate/ Body parameter { \"name\": \"string\", \"policy\": \"exclude\", \"upstream_repository\": \"e4806caf-013f-4b45-852d-8383b790be1e\", \"distribution\": \"bfc61d85-c320-44a0-8e0a-6d4a25594a2d\", \"collections\": [ { \"namespace\": \"string\", \"name\": \"string\" } ], \"namespaces\": [ \"string\" ], \"groups\": \"string\" } name: string policy: exclude upstream_repository: e4806caf-013f-4b45-852d-8383b790be1e distribution: bfc61d85-c320-44a0-8e0a-6d4a25594a2d collections: - namespace: string name: string namespaces: - string groups: string Parameters Name In Type Required Description id path integer true A unique integer value identifying this sync list. body body SyncList true none Example responses 201 Response { \"id\": 0, \"name\": \"string\", \"policy\": \"exclude\", \"upstream_repository\": \"e4806caf-013f-4b45-852d-8383b790be1e\", \"repository\": \"e3d1beef-8819-44ce-aeb0-6d1f16e4ee3b\", \"distribution\": \"bfc61d85-c320-44a0-8e0a-6d4a25594a2d\", \"collections\": [ { \"namespace\": \"string\", \"name\": \"string\" } ], \"namespaces\": [ \"string\" ], \"groups\": \"string\" } Responses Status Meaning Description Schema 201 Created none SyncListResponse This operation does not require authentication Api: _Ui V1 Namespaces api_automation_hub__ui_v1_namespaces_list Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/namespaces/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/namespaces/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/namespaces/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/namespaces/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/_ui/v1/namespaces/ List namespaces Parameters Name In Type Required Description company query string false none keywords query string false none limit query integer false Number of results to return per page. name query string false none offset query integer false The initial index from which to return the results. sort query array[string] false Ordering fields query string false A list of fields to include in the response. exclude_fields query string false A list of fields to exclude from the response. Enumerated Values Parameter Value sort -company sort -id sort -name sort company sort id sort name Example responses 200 Response { \"meta\": { \"count\": 123 }, \"links\": { \"first\": \"string\", \"previous\": \"string\", \"next\": \"string\", \"last\": \"string\" }, \"data\": [ { \"pulp_href\": \"http://example.com\", \"id\": 0, \"name\": \"string\", \"company\": \"string\", \"email\": \"string\", \"avatar_url\": \"http://example.com\", \"description\": \"string\", \"groups\": \"string\", \"related_fields\": { \"my_permissions\": {} } } ] } Responses Status Meaning Description Schema 200 OK none PaginatedNamespaceSummaryResponseList This operation does not require authentication api_automation_hub__ui_v1_namespaces_create Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Content-Type\": []string{\"application/json\"}, \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"POST\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/namespaces/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const inputBody = '{ \"name\": \"string\", \"company\": \"string\", \"email\": \"string\", \"avatar_url\": \"http://example.com\", \"description\": \"string\", \"links\": [ { \"name\": \"string\", \"url\": \"string\" } ], \"groups\": \"string\", \"resources\": \"string\" }'; const headers = { 'Content-Type':'application/json', 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/namespaces/', { method: 'POST', body: inputBody, headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Content-Type': 'application/json', 'Accept': 'application/json' } r = requests.post('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/namespaces/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Content-Type' => 'application/json', 'Accept' => 'application/json' } result = RestClient.post 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/namespaces/', params: { }, headers: headers p JSON.parse(result) POST /api/automation-hub/_ui/v1/namespaces/ Create a namespace Override to validate for name duplication before serializer validation. Body parameter { \"name\": \"string\", \"company\": \"string\", \"email\": \"string\", \"avatar_url\": \"http://example.com\", \"description\": \"string\", \"links\": [ { \"name\": \"string\", \"url\": \"string\" } ], \"groups\": \"string\", \"resources\": \"string\" } name: string company: string email: string avatar_url: http://example.com description: string links: - name: string url: string groups: string resources: string Parameters Name In Type Required Description body body Namespace true none Example responses 201 Response { \"pulp_href\": \"http://example.com\", \"id\": 0, \"name\": \"string\", \"company\": \"string\", \"email\": \"string\", \"avatar_url\": \"http://example.com\", \"description\": \"string\", \"links\": [ { \"name\": \"string\", \"url\": \"string\" } ], \"groups\": \"string\", \"resources\": \"string\", \"related_fields\": { \"my_permissions\": {} } } Responses Status Meaning Description Schema 201 Created none NamespaceResponse This operation does not require authentication api_automation_hub__ui_v1_namespaces_read Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/namespaces/{name}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/namespaces/{name}/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/namespaces/{name}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/namespaces/{name}/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/_ui/v1/namespaces/{name}/ Inspect a namespace Parameters Name In Type Required Description name path string true none fields query string false A list of fields to include in the response. exclude_fields query string false A list of fields to exclude from the response. Example responses 200 Response { \"pulp_href\": \"http://example.com\", \"id\": 0, \"name\": \"string\", \"company\": \"string\", \"email\": \"string\", \"avatar_url\": \"http://example.com\", \"description\": \"string\", \"links\": [ { \"name\": \"string\", \"url\": \"string\" } ], \"groups\": \"string\", \"resources\": \"string\", \"related_fields\": { \"my_permissions\": {} } } Responses Status Meaning Description Schema 200 OK none NamespaceResponse This operation does not require authentication api_automation_hub__ui_v1_namespaces_update Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Content-Type\": []string{\"application/json\"}, \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"PUT\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/namespaces/{name}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const inputBody = '{ \"name\": \"string\", \"company\": \"string\", \"email\": \"string\", \"avatar_url\": \"http://example.com\", \"description\": \"string\", \"links\": [ { \"name\": \"string\", \"url\": \"string\" } ], \"groups\": \"string\", \"resources\": \"string\" }'; const headers = { 'Content-Type':'application/json', 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/namespaces/{name}/', { method: 'PUT', body: inputBody, headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Content-Type': 'application/json', 'Accept': 'application/json' } r = requests.put('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/namespaces/{name}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Content-Type' => 'application/json', 'Accept' => 'application/json' } result = RestClient.put 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/namespaces/{name}/', params: { }, headers: headers p JSON.parse(result) PUT /api/automation-hub/_ui/v1/namespaces/{name}/ Update a namespace Body parameter { \"name\": \"string\", \"company\": \"string\", \"email\": \"string\", \"avatar_url\": \"http://example.com\", \"description\": \"string\", \"links\": [ { \"name\": \"string\", \"url\": \"string\" } ], \"groups\": \"string\", \"resources\": \"string\" } name: string company: string email: string avatar_url: http://example.com description: string links: - name: string url: string groups: string resources: string Parameters Name In Type Required Description name path string true none body body Namespace true none Example responses 200 Response { \"pulp_href\": \"http://example.com\", \"id\": 0, \"name\": \"string\", \"company\": \"string\", \"email\": \"string\", \"avatar_url\": \"http://example.com\", \"description\": \"string\", \"links\": [ { \"name\": \"string\", \"url\": \"string\" } ], \"groups\": \"string\", \"resources\": \"string\", \"related_fields\": { \"my_permissions\": {} } } Responses Status Meaning Description Schema 200 OK none NamespaceResponse This operation does not require authentication api_automation_hub__ui_v1_namespaces_partial_update Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Content-Type\": []string{\"application/json\"}, \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"PATCH\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/namespaces/{name}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const inputBody = '{ \"name\": \"string\", \"company\": \"string\", \"email\": \"string\", \"avatar_url\": \"http://example.com\", \"description\": \"string\", \"links\": [ { \"name\": \"string\", \"url\": \"string\" } ], \"groups\": \"string\", \"resources\": \"string\" }'; const headers = { 'Content-Type':'application/json', 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/namespaces/{name}/', { method: 'PATCH', body: inputBody, headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Content-Type': 'application/json', 'Accept': 'application/json' } r = requests.patch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/namespaces/{name}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Content-Type' => 'application/json', 'Accept' => 'application/json' } result = RestClient.patch 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/namespaces/{name}/', params: { }, headers: headers p JSON.parse(result) PATCH /api/automation-hub/_ui/v1/namespaces/{name}/ Update a namespace Body parameter { \"name\": \"string\", \"company\": \"string\", \"email\": \"string\", \"avatar_url\": \"http://example.com\", \"description\": \"string\", \"links\": [ { \"name\": \"string\", \"url\": \"string\" } ], \"groups\": \"string\", \"resources\": \"string\" } name: string company: string email: string avatar_url: http://example.com description: string links: - name: string url: string groups: string resources: string Parameters Name In Type Required Description name path string true none body body PatchedNamespace true none Example responses 200 Response { \"pulp_href\": \"http://example.com\", \"id\": 0, \"name\": \"string\", \"company\": \"string\", \"email\": \"string\", \"avatar_url\": \"http://example.com\", \"description\": \"string\", \"links\": [ { \"name\": \"string\", \"url\": \"string\" } ], \"groups\": \"string\", \"resources\": \"string\", \"related_fields\": { \"my_permissions\": {} } } Responses Status Meaning Description Schema 200 OK none NamespaceResponse This operation does not require authentication api_automation_hub__ui_v1_namespaces_delete Code samples package main import ( \"bytes\" \"net/http\" ) func main() { data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"DELETE\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/namespaces/{name}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/namespaces/{name}/', { method: 'DELETE' }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests r = requests.delete('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/namespaces/{name}/') print(r.json()) require 'rest-client' require 'json' result = RestClient.delete 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/namespaces/{name}/', params: { } p JSON.parse(result) DELETE /api/automation-hub/_ui/v1/namespaces/{name}/ Delete a namespace Delete a namespace. Perform a check to see if there are any collections in the namespace. If there are, return a failure. Delete the inbound pulp distro and repository Delete the namespace object. return: Response(status=204) Parameters Name In Type Required Description name path string true none Responses Status Meaning Description Schema 204 No Content No response body None This operation does not require authentication Api: _Ui V1 Remotes api_automation_hub__ui_v1_remotes_list Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/remotes/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/remotes/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/remotes/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/remotes/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/_ui/v1/remotes/ List collection remotes Parameters Name In Type Required Description limit query integer false Number of results to return per page. offset query integer false The initial index from which to return the results. fields query string false A list of fields to include in the response. exclude_fields query string false A list of fields to exclude from the response. Example responses 200 Response { \"meta\": { \"count\": 123 }, \"links\": { \"first\": \"string\", \"previous\": \"string\", \"next\": \"string\", \"last\": \"string\" }, \"data\": [ { \"pk\": \"4af43191-2f37-4a16-8471-4e8e40c314af\", \"name\": \"string\", \"url\": \"string\", \"auth_url\": \"string\", \"policy\": \"immediate\", \"requirements_file\": \"string\", \"created_at\": \"2019-08-24T14:15:22Z\", \"updated_at\": \"2019-08-24T14:15:22Z\", \"username\": \"string\", \"tls_validation\": true, \"client_cert\": \"string\", \"ca_cert\": \"string\", \"last_sync_task\": \"string\", \"repositories\": [ { \"name\": \"string\", \"description\": \"string\", \"next_version\": 2147483647, \"distributions\": [ { \"name\": \"string\", \"base_path\": \"string\", \"content_guard\": \"75e6b91e-c196-4627-9383-ce2e1e08d705\", \"created_at\": \"2019-08-24T14:15:22Z\", \"updated_at\": \"2019-08-24T14:15:22Z\" } ], \"created_at\": \"2019-08-24T14:15:22Z\", \"updated_at\": \"2019-08-24T14:15:22Z\", \"last_sync_task\": \"string\" } ], \"pulp_href\": \"http://example.com\", \"download_concurrency\": 1, \"proxy_url\": \"string\", \"proxy_username\": \"string\", \"write_only_fields\": [ null ], \"rate_limit\": 0, \"signed_only\": false } ] } Responses Status Meaning Description Schema 200 OK none Paginatedansible.CollectionRemoteResponseList This operation does not require authentication api_automation_hub__ui_v1_remotes_create Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Content-Type\": []string{\"application/json\"}, \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"POST\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/remotes/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const inputBody = '{ \"url\": \"string\", \"auth_url\": \"string\", \"token\": \"string\", \"policy\": \"immediate\", \"requirements_file\": \"string\", \"created_at\": \"2019-08-24T14:15:22Z\", \"updated_at\": \"2019-08-24T14:15:22Z\", \"username\": \"string\", \"password\": \"string\", \"tls_validation\": true, \"client_key\": \"string\", \"client_cert\": \"string\", \"ca_cert\": \"string\", \"download_concurrency\": 1, \"proxy_url\": \"string\", \"proxy_username\": \"string\", \"proxy_password\": \"string\", \"rate_limit\": 0, \"signed_only\": false }'; const headers = { 'Content-Type':'application/json', 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/remotes/', { method: 'POST', body: inputBody, headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Content-Type': 'application/json', 'Accept': 'application/json' } r = requests.post('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/remotes/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Content-Type' => 'application/json', 'Accept' => 'application/json' } result = RestClient.post 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/remotes/', params: { }, headers: headers p JSON.parse(result) POST /api/automation-hub/_ui/v1/remotes/ Create a collection remote Body parameter { \"url\": \"string\", \"auth_url\": \"string\", \"token\": \"string\", \"policy\": \"immediate\", \"requirements_file\": \"string\", \"created_at\": \"2019-08-24T14:15:22Z\", \"updated_at\": \"2019-08-24T14:15:22Z\", \"username\": \"string\", \"password\": \"string\", \"tls_validation\": true, \"client_key\": \"string\", \"client_cert\": \"string\", \"ca_cert\": \"string\", \"download_concurrency\": 1, \"proxy_url\": \"string\", \"proxy_username\": \"string\", \"proxy_password\": \"string\", \"rate_limit\": 0, \"signed_only\": false } url: string auth_url: string token: string policy: immediate requirements_file: string created_at: 2019-08-24T14:15:22Z updated_at: 2019-08-24T14:15:22Z username: string password: string tls_validation: true client_key: string client_cert: string ca_cert: string download_concurrency: 1 proxy_url: string proxy_username: string proxy_password: string rate_limit: 0 signed_only: false Parameters Name In Type Required Description body body ansible.CollectionRemote true none Example responses 201 Response { \"pk\": \"4af43191-2f37-4a16-8471-4e8e40c314af\", \"name\": \"string\", \"url\": \"string\", \"auth_url\": \"string\", \"policy\": \"immediate\", \"requirements_file\": \"string\", \"created_at\": \"2019-08-24T14:15:22Z\", \"updated_at\": \"2019-08-24T14:15:22Z\", \"username\": \"string\", \"tls_validation\": true, \"client_cert\": \"string\", \"ca_cert\": \"string\", \"last_sync_task\": \"string\", \"repositories\": [ { \"name\": \"string\", \"description\": \"string\", \"next_version\": 2147483647, \"distributions\": [ { \"name\": \"string\", \"base_path\": \"string\", \"content_guard\": \"75e6b91e-c196-4627-9383-ce2e1e08d705\", \"created_at\": \"2019-08-24T14:15:22Z\", \"updated_at\": \"2019-08-24T14:15:22Z\" } ], \"created_at\": \"2019-08-24T14:15:22Z\", \"updated_at\": \"2019-08-24T14:15:22Z\", \"last_sync_task\": \"string\" } ], \"pulp_href\": \"http://example.com\", \"download_concurrency\": 1, \"proxy_url\": \"string\", \"proxy_username\": \"string\", \"write_only_fields\": [ null ], \"rate_limit\": 0, \"signed_only\": false } Responses Status Meaning Description Schema 201 Created none ansible.CollectionRemoteResponse This operation does not require authentication api_automation_hub__ui_v1_remotes_read Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/remotes/{pulp_id}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/remotes/{pulp_id}/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/remotes/{pulp_id}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/remotes/{pulp_id}/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/_ui/v1/remotes/{pulp_id}/ Inspect a collection remote Parameters Name In Type Required Description pulp_id path string(uuid) true A UUID string identifying this collection remote. fields query string false A list of fields to include in the response. exclude_fields query string false A list of fields to exclude from the response. Example responses 200 Response { \"pk\": \"4af43191-2f37-4a16-8471-4e8e40c314af\", \"name\": \"string\", \"url\": \"string\", \"auth_url\": \"string\", \"policy\": \"immediate\", \"requirements_file\": \"string\", \"created_at\": \"2019-08-24T14:15:22Z\", \"updated_at\": \"2019-08-24T14:15:22Z\", \"username\": \"string\", \"tls_validation\": true, \"client_cert\": \"string\", \"ca_cert\": \"string\", \"last_sync_task\": \"string\", \"repositories\": [ { \"name\": \"string\", \"description\": \"string\", \"next_version\": 2147483647, \"distributions\": [ { \"name\": \"string\", \"base_path\": \"string\", \"content_guard\": \"75e6b91e-c196-4627-9383-ce2e1e08d705\", \"created_at\": \"2019-08-24T14:15:22Z\", \"updated_at\": \"2019-08-24T14:15:22Z\" } ], \"created_at\": \"2019-08-24T14:15:22Z\", \"updated_at\": \"2019-08-24T14:15:22Z\", \"last_sync_task\": \"string\" } ], \"pulp_href\": \"http://example.com\", \"download_concurrency\": 1, \"proxy_url\": \"string\", \"proxy_username\": \"string\", \"write_only_fields\": [ null ], \"rate_limit\": 0, \"signed_only\": false } Responses Status Meaning Description Schema 200 OK none ansible.CollectionRemoteResponse This operation does not require authentication api_automation_hub__ui_v1_remotes_update Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Content-Type\": []string{\"application/json\"}, \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"PUT\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/remotes/{pulp_id}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const inputBody = '{ \"url\": \"string\", \"auth_url\": \"string\", \"token\": \"string\", \"policy\": \"immediate\", \"requirements_file\": \"string\", \"created_at\": \"2019-08-24T14:15:22Z\", \"updated_at\": \"2019-08-24T14:15:22Z\", \"username\": \"string\", \"password\": \"string\", \"tls_validation\": true, \"client_key\": \"string\", \"client_cert\": \"string\", \"ca_cert\": \"string\", \"download_concurrency\": 1, \"proxy_url\": \"string\", \"proxy_username\": \"string\", \"proxy_password\": \"string\", \"rate_limit\": 0, \"signed_only\": false }'; const headers = { 'Content-Type':'application/json', 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/remotes/{pulp_id}/', { method: 'PUT', body: inputBody, headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Content-Type': 'application/json', 'Accept': 'application/json' } r = requests.put('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/remotes/{pulp_id}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Content-Type' => 'application/json', 'Accept' => 'application/json' } result = RestClient.put 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/remotes/{pulp_id}/', params: { }, headers: headers p JSON.parse(result) PUT /api/automation-hub/_ui/v1/remotes/{pulp_id}/ Update a collection remote Body parameter { \"url\": \"string\", \"auth_url\": \"string\", \"token\": \"string\", \"policy\": \"immediate\", \"requirements_file\": \"string\", \"created_at\": \"2019-08-24T14:15:22Z\", \"updated_at\": \"2019-08-24T14:15:22Z\", \"username\": \"string\", \"password\": \"string\", \"tls_validation\": true, \"client_key\": \"string\", \"client_cert\": \"string\", \"ca_cert\": \"string\", \"download_concurrency\": 1, \"proxy_url\": \"string\", \"proxy_username\": \"string\", \"proxy_password\": \"string\", \"rate_limit\": 0, \"signed_only\": false } url: string auth_url: string token: string policy: immediate requirements_file: string created_at: 2019-08-24T14:15:22Z updated_at: 2019-08-24T14:15:22Z username: string password: string tls_validation: true client_key: string client_cert: string ca_cert: string download_concurrency: 1 proxy_url: string proxy_username: string proxy_password: string rate_limit: 0 signed_only: false Parameters Name In Type Required Description pulp_id path string(uuid) true A UUID string identifying this collection remote. body body ansible.CollectionRemote true none Example responses 200 Response { \"pk\": \"4af43191-2f37-4a16-8471-4e8e40c314af\", \"name\": \"string\", \"url\": \"string\", \"auth_url\": \"string\", \"policy\": \"immediate\", \"requirements_file\": \"string\", \"created_at\": \"2019-08-24T14:15:22Z\", \"updated_at\": \"2019-08-24T14:15:22Z\", \"username\": \"string\", \"tls_validation\": true, \"client_cert\": \"string\", \"ca_cert\": \"string\", \"last_sync_task\": \"string\", \"repositories\": [ { \"name\": \"string\", \"description\": \"string\", \"next_version\": 2147483647, \"distributions\": [ { \"name\": \"string\", \"base_path\": \"string\", \"content_guard\": \"75e6b91e-c196-4627-9383-ce2e1e08d705\", \"created_at\": \"2019-08-24T14:15:22Z\", \"updated_at\": \"2019-08-24T14:15:22Z\" } ], \"created_at\": \"2019-08-24T14:15:22Z\", \"updated_at\": \"2019-08-24T14:15:22Z\", \"last_sync_task\": \"string\" } ], \"pulp_href\": \"http://example.com\", \"download_concurrency\": 1, \"proxy_url\": \"string\", \"proxy_username\": \"string\", \"write_only_fields\": [ null ], \"rate_limit\": 0, \"signed_only\": false } Responses Status Meaning Description Schema 200 OK none ansible.CollectionRemoteResponse This operation does not require authentication api_automation_hub__ui_v1_remotes_partial_update Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Content-Type\": []string{\"application/json\"}, \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"PATCH\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/remotes/{pulp_id}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const inputBody = '{ \"url\": \"string\", \"auth_url\": \"string\", \"token\": \"string\", \"policy\": \"immediate\", \"requirements_file\": \"string\", \"created_at\": \"2019-08-24T14:15:22Z\", \"updated_at\": \"2019-08-24T14:15:22Z\", \"username\": \"string\", \"password\": \"string\", \"tls_validation\": true, \"client_key\": \"string\", \"client_cert\": \"string\", \"ca_cert\": \"string\", \"download_concurrency\": 1, \"proxy_url\": \"string\", \"proxy_username\": \"string\", \"proxy_password\": \"string\", \"rate_limit\": 0, \"signed_only\": false }'; const headers = { 'Content-Type':'application/json', 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/remotes/{pulp_id}/', { method: 'PATCH', body: inputBody, headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Content-Type': 'application/json', 'Accept': 'application/json' } r = requests.patch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/remotes/{pulp_id}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Content-Type' => 'application/json', 'Accept' => 'application/json' } result = RestClient.patch 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/remotes/{pulp_id}/', params: { }, headers: headers p JSON.parse(result) PATCH /api/automation-hub/_ui/v1/remotes/{pulp_id}/ Update a collection remote Body parameter { \"url\": \"string\", \"auth_url\": \"string\", \"token\": \"string\", \"policy\": \"immediate\", \"requirements_file\": \"string\", \"created_at\": \"2019-08-24T14:15:22Z\", \"updated_at\": \"2019-08-24T14:15:22Z\", \"username\": \"string\", \"password\": \"string\", \"tls_validation\": true, \"client_key\": \"string\", \"client_cert\": \"string\", \"ca_cert\": \"string\", \"download_concurrency\": 1, \"proxy_url\": \"string\", \"proxy_username\": \"string\", \"proxy_password\": \"string\", \"rate_limit\": 0, \"signed_only\": false } url: string auth_url: string token: string policy: immediate requirements_file: string created_at: 2019-08-24T14:15:22Z updated_at: 2019-08-24T14:15:22Z username: string password: string tls_validation: true client_key: string client_cert: string ca_cert: string download_concurrency: 1 proxy_url: string proxy_username: string proxy_password: string rate_limit: 0 signed_only: false Parameters Name In Type Required Description pulp_id path string(uuid) true A UUID string identifying this collection remote. body body Patchedansible.CollectionRemote true none Example responses 200 Response { \"pk\": \"4af43191-2f37-4a16-8471-4e8e40c314af\", \"name\": \"string\", \"url\": \"string\", \"auth_url\": \"string\", \"policy\": \"immediate\", \"requirements_file\": \"string\", \"created_at\": \"2019-08-24T14:15:22Z\", \"updated_at\": \"2019-08-24T14:15:22Z\", \"username\": \"string\", \"tls_validation\": true, \"client_cert\": \"string\", \"ca_cert\": \"string\", \"last_sync_task\": \"string\", \"repositories\": [ { \"name\": \"string\", \"description\": \"string\", \"next_version\": 2147483647, \"distributions\": [ { \"name\": \"string\", \"base_path\": \"string\", \"content_guard\": \"75e6b91e-c196-4627-9383-ce2e1e08d705\", \"created_at\": \"2019-08-24T14:15:22Z\", \"updated_at\": \"2019-08-24T14:15:22Z\" } ], \"created_at\": \"2019-08-24T14:15:22Z\", \"updated_at\": \"2019-08-24T14:15:22Z\", \"last_sync_task\": \"string\" } ], \"pulp_href\": \"http://example.com\", \"download_concurrency\": 1, \"proxy_url\": \"string\", \"proxy_username\": \"string\", \"write_only_fields\": [ null ], \"rate_limit\": 0, \"signed_only\": false } Responses Status Meaning Description Schema 200 OK none ansible.CollectionRemoteResponse This operation does not require authentication api_automation_hub__ui_v1_remotes_delete Code samples package main import ( \"bytes\" \"net/http\" ) func main() { data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"DELETE\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/remotes/{pulp_id}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/remotes/{pulp_id}/', { method: 'DELETE' }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests r = requests.delete('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/remotes/{pulp_id}/') print(r.json()) require 'rest-client' require 'json' result = RestClient.delete 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/remotes/{pulp_id}/', params: { } p JSON.parse(result) DELETE /api/automation-hub/_ui/v1/remotes/{pulp_id}/ Delete a collection remote Parameters Name In Type Required Description pulp_id path string(uuid) true A UUID string identifying this collection remote. Responses Status Meaning Description Schema 204 No Content No response body None This operation does not require authentication Api: _Ui V1 Repo api_automation_hub__ui_v1_repo_list Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/repo/{distro_base_path}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/repo/{distro_base_path}/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/repo/{distro_base_path}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/repo/{distro_base_path}/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/_ui/v1/repo/{distro_base_path}/ Viewset that uses CollectionVersion's within distribution to display data for Collection's. Collection list is filterable by FilterSet and includes latest CollectionVersion. Collection detail includes CollectionVersion that is latest or via query param 'version'. Parameters Name In Type Required Description deprecated query boolean false none distro_base_path path string true none include_related query string false none is_highest query boolean false none keywords query string false none limit query integer false Number of results to return per page. name query string false none namespace query string false none offset query integer false The initial index from which to return the results. ordering query array[string] false Ordering q query string false none repository_version query string false Repository Version referenced by HREF repository_version_added query string false Repository Version referenced by HREF repository_version_removed query string false Repository Version referenced by HREF sign_state query string false none tags query string false Filter by comma separate list of tags that must all be matched version query string false Filter results where version matches value fields query string false A list of fields to include in the response. exclude_fields query string false A list of fields to exclude from the response. Enumerated Values Parameter Value ordering -_artifacts ordering -authors ordering -collection ordering -content_ptr ordering -contentartifact ordering -contents ordering -dependencies ordering -description ordering -docs_blob ordering -documentation ordering -download_logs ordering -files ordering -group_roles ordering -homepage ordering -is_highest ordering -issues ordering -license ordering -manifest ordering -name ordering -namespace ordering -pk ordering -pulp_created ordering -pulp_id ordering -pulp_labels ordering -pulp_last_updated ordering -pulp_type ordering -repositories ordering -repository ordering -requires_ansible ordering -search_vector ordering -signatures ordering -tags ordering -timestamp_of_interest ordering -upstream_id ordering -user_roles ordering -version ordering -version_memberships ordering _artifacts ordering authors ordering collection ordering content_ptr ordering contentartifact ordering contents ordering dependencies ordering description ordering docs_blob ordering documentation ordering download_logs ordering files ordering group_roles ordering homepage ordering is_highest ordering issues ordering license ordering manifest ordering name ordering namespace ordering pk ordering pulp_created ordering pulp_id ordering pulp_labels ordering pulp_last_updated ordering pulp_type ordering repositories ordering repository ordering requires_ansible ordering search_vector ordering signatures ordering tags ordering timestamp_of_interest ordering upstream_id ordering user_roles ordering version ordering version_memberships Example responses 200 Response { \"meta\": { \"count\": 123 }, \"links\": { \"first\": \"string\", \"previous\": \"string\", \"next\": \"string\", \"last\": \"string\" }, \"data\": [ { \"username\": \"string\", \"password\": \"string\" } ] } Responses Status Meaning Description Schema 200 OK none Paginatedgalaxy.LoginResponseList This operation does not require authentication api_automation_hub__ui_v1_repo_read Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/repo/{distro_base_path}/{namespace}/{name}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/repo/{distro_base_path}/{namespace}/{name}/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/repo/{distro_base_path}/{namespace}/{name}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/repo/{distro_base_path}/{namespace}/{name}/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/_ui/v1/repo/{distro_base_path}/{namespace}/{name}/ Viewset that uses CollectionVersion's within distribution to display data for Collection's. Collection list is filterable by FilterSet and includes latest CollectionVersion. Collection detail includes CollectionVersion that is latest or via query param 'version'. Parameters Name In Type Required Description distro_base_path path string true none name path string true none namespace path string true none fields query string false A list of fields to include in the response. exclude_fields query string false A list of fields to exclude from the response. Example responses 200 Response { \"username\": \"string\", \"password\": \"string\" } Responses Status Meaning Description Schema 200 OK none galaxy.LoginResponse This operation does not require authentication Api: _Ui V1 Settings api_automation_hub__ui_v1_settings_get Code samples package main import ( \"bytes\" \"net/http\" ) func main() { data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/settings/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/settings/', { method: 'GET' }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/settings/') print(r.json()) require 'rest-client' require 'json' result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/settings/', params: { } p JSON.parse(result) GET /api/automation-hub/_ui/v1/settings/ Responses Status Meaning Description Schema 200 OK No response body None To perform this operation, you must be authenticated by means of one of the following methods: None Api: _Ui V1 Synclists api_automation_hub__ui_v1_synclists_list Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/synclists/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/synclists/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/synclists/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/synclists/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/_ui/v1/synclists/ List sync lists Parameters Name In Type Required Description limit query integer false Number of results to return per page. offset query integer false The initial index from which to return the results. fields query string false A list of fields to include in the response. exclude_fields query string false A list of fields to exclude from the response. Example responses 200 Response { \"meta\": { \"count\": 123 }, \"links\": { \"first\": \"string\", \"previous\": \"string\", \"next\": \"string\", \"last\": \"string\" }, \"data\": [ { \"id\": 0, \"name\": \"string\", \"policy\": \"exclude\", \"upstream_repository\": \"e4806caf-013f-4b45-852d-8383b790be1e\", \"repository\": \"e3d1beef-8819-44ce-aeb0-6d1f16e4ee3b\", \"distribution\": \"bfc61d85-c320-44a0-8e0a-6d4a25594a2d\", \"collections\": [ { \"namespace\": \"string\", \"name\": \"string\" } ], \"namespaces\": [ \"string\" ], \"groups\": \"string\" } ] } Responses Status Meaning Description Schema 200 OK none PaginatedSyncListResponseList This operation does not require authentication api_automation_hub__ui_v1_synclists_create Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Content-Type\": []string{\"application/json\"}, \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"POST\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/synclists/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const inputBody = '{ \"name\": \"string\", \"policy\": \"exclude\", \"upstream_repository\": \"e4806caf-013f-4b45-852d-8383b790be1e\", \"distribution\": \"bfc61d85-c320-44a0-8e0a-6d4a25594a2d\", \"collections\": [ { \"namespace\": \"string\", \"name\": \"string\" } ], \"namespaces\": [ \"string\" ], \"groups\": \"string\" }'; const headers = { 'Content-Type':'application/json', 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/synclists/', { method: 'POST', body: inputBody, headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Content-Type': 'application/json', 'Accept': 'application/json' } r = requests.post('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/synclists/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Content-Type' => 'application/json', 'Accept' => 'application/json' } result = RestClient.post 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/synclists/', params: { }, headers: headers p JSON.parse(result) POST /api/automation-hub/_ui/v1/synclists/ Create a sync list Body parameter { \"name\": \"string\", \"policy\": \"exclude\", \"upstream_repository\": \"e4806caf-013f-4b45-852d-8383b790be1e\", \"distribution\": \"bfc61d85-c320-44a0-8e0a-6d4a25594a2d\", \"collections\": [ { \"namespace\": \"string\", \"name\": \"string\" } ], \"namespaces\": [ \"string\" ], \"groups\": \"string\" } name: string policy: exclude upstream_repository: e4806caf-013f-4b45-852d-8383b790be1e distribution: bfc61d85-c320-44a0-8e0a-6d4a25594a2d collections: - namespace: string name: string namespaces: - string groups: string Parameters Name In Type Required Description body body SyncList true none Example responses 201 Response { \"id\": 0, \"name\": \"string\", \"policy\": \"exclude\", \"upstream_repository\": \"e4806caf-013f-4b45-852d-8383b790be1e\", \"repository\": \"e3d1beef-8819-44ce-aeb0-6d1f16e4ee3b\", \"distribution\": \"bfc61d85-c320-44a0-8e0a-6d4a25594a2d\", \"collections\": [ { \"namespace\": \"string\", \"name\": \"string\" } ], \"namespaces\": [ \"string\" ], \"groups\": \"string\" } Responses Status Meaning Description Schema 201 Created none SyncListResponse This operation does not require authentication api_automation_hub__ui_v1_synclists_read Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/synclists/{id}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/synclists/{id}/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/synclists/{id}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/synclists/{id}/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/_ui/v1/synclists/{id}/ Inspect a sync list Parameters Name In Type Required Description id path integer true A unique integer value identifying this sync list. fields query string false A list of fields to include in the response. exclude_fields query string false A list of fields to exclude from the response. Example responses 200 Response { \"id\": 0, \"name\": \"string\", \"policy\": \"exclude\", \"upstream_repository\": \"e4806caf-013f-4b45-852d-8383b790be1e\", \"repository\": \"e3d1beef-8819-44ce-aeb0-6d1f16e4ee3b\", \"distribution\": \"bfc61d85-c320-44a0-8e0a-6d4a25594a2d\", \"collections\": [ { \"namespace\": \"string\", \"name\": \"string\" } ], \"namespaces\": [ \"string\" ], \"groups\": \"string\" } Responses Status Meaning Description Schema 200 OK none SyncListResponse This operation does not require authentication api_automation_hub__ui_v1_synclists_update Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Content-Type\": []string{\"application/json\"}, \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"PUT\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/synclists/{id}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const inputBody = '{ \"name\": \"string\", \"policy\": \"exclude\", \"upstream_repository\": \"e4806caf-013f-4b45-852d-8383b790be1e\", \"distribution\": \"bfc61d85-c320-44a0-8e0a-6d4a25594a2d\", \"collections\": [ { \"namespace\": \"string\", \"name\": \"string\" } ], \"namespaces\": [ \"string\" ], \"groups\": \"string\" }'; const headers = { 'Content-Type':'application/json', 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/synclists/{id}/', { method: 'PUT', body: inputBody, headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Content-Type': 'application/json', 'Accept': 'application/json' } r = requests.put('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/synclists/{id}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Content-Type' => 'application/json', 'Accept' => 'application/json' } result = RestClient.put 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/synclists/{id}/', params: { }, headers: headers p JSON.parse(result) PUT /api/automation-hub/_ui/v1/synclists/{id}/ Update a sync list Body parameter { \"name\": \"string\", \"policy\": \"exclude\", \"upstream_repository\": \"e4806caf-013f-4b45-852d-8383b790be1e\", \"distribution\": \"bfc61d85-c320-44a0-8e0a-6d4a25594a2d\", \"collections\": [ { \"namespace\": \"string\", \"name\": \"string\" } ], \"namespaces\": [ \"string\" ], \"groups\": \"string\" } name: string policy: exclude upstream_repository: e4806caf-013f-4b45-852d-8383b790be1e distribution: bfc61d85-c320-44a0-8e0a-6d4a25594a2d collections: - namespace: string name: string namespaces: - string groups: string Parameters Name In Type Required Description id path integer true A unique integer value identifying this sync list. body body SyncList true none Example responses 200 Response { \"id\": 0, \"name\": \"string\", \"policy\": \"exclude\", \"upstream_repository\": \"e4806caf-013f-4b45-852d-8383b790be1e\", \"repository\": \"e3d1beef-8819-44ce-aeb0-6d1f16e4ee3b\", \"distribution\": \"bfc61d85-c320-44a0-8e0a-6d4a25594a2d\", \"collections\": [ { \"namespace\": \"string\", \"name\": \"string\" } ], \"namespaces\": [ \"string\" ], \"groups\": \"string\" } Responses Status Meaning Description Schema 200 OK none SyncListResponse This operation does not require authentication api_automation_hub__ui_v1_synclists_partial_update Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Content-Type\": []string{\"application/json\"}, \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"PATCH\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/synclists/{id}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const inputBody = '{ \"name\": \"string\", \"policy\": \"exclude\", \"upstream_repository\": \"e4806caf-013f-4b45-852d-8383b790be1e\", \"distribution\": \"bfc61d85-c320-44a0-8e0a-6d4a25594a2d\", \"collections\": [ { \"namespace\": \"string\", \"name\": \"string\" } ], \"namespaces\": [ \"string\" ], \"groups\": \"string\" }'; const headers = { 'Content-Type':'application/json', 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/synclists/{id}/', { method: 'PATCH', body: inputBody, headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Content-Type': 'application/json', 'Accept': 'application/json' } r = requests.patch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/synclists/{id}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Content-Type' => 'application/json', 'Accept' => 'application/json' } result = RestClient.patch 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/synclists/{id}/', params: { }, headers: headers p JSON.parse(result) PATCH /api/automation-hub/_ui/v1/synclists/{id}/ Update a sync list Body parameter { \"name\": \"string\", \"policy\": \"exclude\", \"upstream_repository\": \"e4806caf-013f-4b45-852d-8383b790be1e\", \"distribution\": \"bfc61d85-c320-44a0-8e0a-6d4a25594a2d\", \"collections\": [ { \"namespace\": \"string\", \"name\": \"string\" } ], \"namespaces\": [ \"string\" ], \"groups\": \"string\" } name: string policy: exclude upstream_repository: e4806caf-013f-4b45-852d-8383b790be1e distribution: bfc61d85-c320-44a0-8e0a-6d4a25594a2d collections: - namespace: string name: string namespaces: - string groups: string Parameters Name In Type Required Description id path integer true A unique integer value identifying this sync list. body body PatchedSyncList true none Example responses 200 Response { \"id\": 0, \"name\": \"string\", \"policy\": \"exclude\", \"upstream_repository\": \"e4806caf-013f-4b45-852d-8383b790be1e\", \"repository\": \"e3d1beef-8819-44ce-aeb0-6d1f16e4ee3b\", \"distribution\": \"bfc61d85-c320-44a0-8e0a-6d4a25594a2d\", \"collections\": [ { \"namespace\": \"string\", \"name\": \"string\" } ], \"namespaces\": [ \"string\" ], \"groups\": \"string\" } Responses Status Meaning Description Schema 200 OK none SyncListResponse This operation does not require authentication api_automation_hub__ui_v1_synclists_delete Code samples package main import ( \"bytes\" \"net/http\" ) func main() { data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"DELETE\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/synclists/{id}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/synclists/{id}/', { method: 'DELETE' }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests r = requests.delete('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/synclists/{id}/') print(r.json()) require 'rest-client' require 'json' result = RestClient.delete 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/synclists/{id}/', params: { } p JSON.parse(result) DELETE /api/automation-hub/_ui/v1/synclists/{id}/ Delete a sync list Parameters Name In Type Required Description id path integer true A unique integer value identifying this sync list. Responses Status Meaning Description Schema 204 No Content No response body None This operation does not require authentication Api: _Ui V1 Tags api_automation_hub__ui_v1_tags_list Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/tags/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/tags/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/tags/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/tags/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/_ui/v1/tags/ List tags Parameters Name In Type Required Description limit query integer false Number of results to return per page. offset query integer false The initial index from which to return the results. fields query string false A list of fields to include in the response. exclude_fields query string false A list of fields to exclude from the response. Example responses 200 Response { \"meta\": { \"count\": 123 }, \"links\": { \"first\": \"string\", \"previous\": \"string\", \"next\": \"string\", \"last\": \"string\" }, \"data\": [ { \"name\": \"string\" } ] } Responses Status Meaning Description Schema 200 OK none PaginatedTagResponseList This operation does not require authentication Api: _Ui V1 Users api_automation_hub__ui_v1_users_list Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/users/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/users/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/users/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/users/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/_ui/v1/users/ List users Parameters Name In Type Required Description date_joined query string(date-time) false none email query string false none email__contains query string false none email__startswith query string false none first_name query string false none first_name__contains query string false none first_name__startswith query string false none groups query array[integer] false none groups__name query string false none last_name query string false none last_name__contains query string false none last_name__startswith query string false none limit query integer false Number of results to return per page. offset query integer false The initial index from which to return the results. sort query array[string] false Ordering username query string false none username__contains query string false none username__startswith query string false none fields query string false A list of fields to include in the response. exclude_fields query string false A list of fields to exclude from the response. Enumerated Values Parameter Value sort -date_joined sort -email sort -first_name sort -last_name sort -username sort date_joined sort email sort first_name sort last_name sort username Example responses 200 Response { \"meta\": { \"count\": 123 }, \"links\": { \"first\": \"string\", \"previous\": \"string\", \"next\": \"string\", \"last\": \"string\" }, \"data\": [ { \"id\": 0, \"username\": \"string\", \"first_name\": \"string\", \"last_name\": \"string\", \"email\": \"user@example.com\", \"groups\": [ 0 ], \"date_joined\": \"2019-08-24T14:15:22Z\", \"is_superuser\": true, \"auth_provider\": \"string\" } ] } Responses Status Meaning Description Schema 200 OK none PaginatedUserResponseList This operation does not require authentication api_automation_hub__ui_v1_users_create Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Content-Type\": []string{\"application/json\"}, \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"POST\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/users/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const inputBody = '{ \"username\": \"string\", \"first_name\": \"string\", \"last_name\": \"string\", \"email\": \"user@example.com\", \"groups\": [ 0 ], \"password\": \"string\", \"is_superuser\": true }'; const headers = { 'Content-Type':'application/json', 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/users/', { method: 'POST', body: inputBody, headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Content-Type': 'application/json', 'Accept': 'application/json' } r = requests.post('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/users/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Content-Type' => 'application/json', 'Accept' => 'application/json' } result = RestClient.post 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/users/', params: { }, headers: headers p JSON.parse(result) POST /api/automation-hub/_ui/v1/users/ Create an user Body parameter { \"username\": \"string\", \"first_name\": \"string\", \"last_name\": \"string\", \"email\": \"user@example.com\", \"groups\": [ 0 ], \"password\": \"string\", \"is_superuser\": true } username: string first_name: string last_name: string email: user@example.com groups: - 0 password: string is_superuser: true Parameters Name In Type Required Description body body User true none Example responses 201 Response { \"id\": 0, \"username\": \"string\", \"first_name\": \"string\", \"last_name\": \"string\", \"email\": \"user@example.com\", \"groups\": [ 0 ], \"date_joined\": \"2019-08-24T14:15:22Z\", \"is_superuser\": true, \"auth_provider\": \"string\" } Responses Status Meaning Description Schema 201 Created none UserResponse This operation does not require authentication api_automation_hub__ui_v1_users_read Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/users/{id}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/users/{id}/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/users/{id}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/users/{id}/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/_ui/v1/users/{id}/ Inspect an user Parameters Name In Type Required Description id path integer true A unique integer value identifying this user. fields query string false A list of fields to include in the response. exclude_fields query string false A list of fields to exclude from the response. Example responses 200 Response { \"id\": 0, \"username\": \"string\", \"first_name\": \"string\", \"last_name\": \"string\", \"email\": \"user@example.com\", \"groups\": [ 0 ], \"date_joined\": \"2019-08-24T14:15:22Z\", \"is_superuser\": true, \"auth_provider\": \"string\" } Responses Status Meaning Description Schema 200 OK none UserResponse This operation does not require authentication api_automation_hub__ui_v1_users_update Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Content-Type\": []string{\"application/json\"}, \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"PUT\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/users/{id}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const inputBody = '{ \"username\": \"string\", \"first_name\": \"string\", \"last_name\": \"string\", \"email\": \"user@example.com\", \"groups\": [ 0 ], \"password\": \"string\", \"is_superuser\": true }'; const headers = { 'Content-Type':'application/json', 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/users/{id}/', { method: 'PUT', body: inputBody, headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Content-Type': 'application/json', 'Accept': 'application/json' } r = requests.put('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/users/{id}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Content-Type' => 'application/json', 'Accept' => 'application/json' } result = RestClient.put 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/users/{id}/', params: { }, headers: headers p JSON.parse(result) PUT /api/automation-hub/_ui/v1/users/{id}/ Update an user Body parameter { \"username\": \"string\", \"first_name\": \"string\", \"last_name\": \"string\", \"email\": \"user@example.com\", \"groups\": [ 0 ], \"password\": \"string\", \"is_superuser\": true } username: string first_name: string last_name: string email: user@example.com groups: - 0 password: string is_superuser: true Parameters Name In Type Required Description id path integer true A unique integer value identifying this user. body body User true none Example responses 200 Response { \"id\": 0, \"username\": \"string\", \"first_name\": \"string\", \"last_name\": \"string\", \"email\": \"user@example.com\", \"groups\": [ 0 ], \"date_joined\": \"2019-08-24T14:15:22Z\", \"is_superuser\": true, \"auth_provider\": \"string\" } Responses Status Meaning Description Schema 200 OK none UserResponse This operation does not require authentication api_automation_hub__ui_v1_users_partial_update Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Content-Type\": []string{\"application/json\"}, \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"PATCH\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/users/{id}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const inputBody = '{ \"username\": \"string\", \"first_name\": \"string\", \"last_name\": \"string\", \"email\": \"user@example.com\", \"groups\": [ 0 ], \"password\": \"string\", \"is_superuser\": true }'; const headers = { 'Content-Type':'application/json', 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/users/{id}/', { method: 'PATCH', body: inputBody, headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Content-Type': 'application/json', 'Accept': 'application/json' } r = requests.patch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/users/{id}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Content-Type' => 'application/json', 'Accept' => 'application/json' } result = RestClient.patch 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/users/{id}/', params: { }, headers: headers p JSON.parse(result) PATCH /api/automation-hub/_ui/v1/users/{id}/ Update an user Body parameter { \"username\": \"string\", \"first_name\": \"string\", \"last_name\": \"string\", \"email\": \"user@example.com\", \"groups\": [ 0 ], \"password\": \"string\", \"is_superuser\": true } username: string first_name: string last_name: string email: user@example.com groups: - 0 password: string is_superuser: true Parameters Name In Type Required Description id path integer true A unique integer value identifying this user. body body PatchedUser true none Example responses 200 Response { \"id\": 0, \"username\": \"string\", \"first_name\": \"string\", \"last_name\": \"string\", \"email\": \"user@example.com\", \"groups\": [ 0 ], \"date_joined\": \"2019-08-24T14:15:22Z\", \"is_superuser\": true, \"auth_provider\": \"string\" } Responses Status Meaning Description Schema 200 OK none UserResponse This operation does not require authentication api_automation_hub__ui_v1_users_delete Code samples package main import ( \"bytes\" \"net/http\" ) func main() { data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"DELETE\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/users/{id}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/users/{id}/', { method: 'DELETE' }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests r = requests.delete('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/users/{id}/') print(r.json()) require 'rest-client' require 'json' result = RestClient.delete 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/users/{id}/', params: { } p JSON.parse(result) DELETE /api/automation-hub/_ui/v1/users/{id}/ Delete an user Parameters Name In Type Required Description id path integer true A unique integer value identifying this user. Responses Status Meaning Description Schema 204 No Content No response body None This operation does not require authentication Api: Api api_automation_hub_api_read Code samples package main import ( \"bytes\" \"net/http\" ) func main() { data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/api/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/api/', { method: 'GET' }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/api/') print(r.json()) require 'rest-client' require 'json' result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/api/', params: { } p JSON.parse(result) GET /api/automation-hub/api/ Responses Status Meaning Description Schema 200 OK No response body None This operation does not require authentication Api: Content api_automation_hub_content_read Code samples package main import ( \"bytes\" \"net/http\" ) func main() { data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/content/{path}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/content/{path}/', { method: 'GET' }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/content/{path}/') print(r.json()) require 'rest-client' require 'json' result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/content/{path}/', params: { } p JSON.parse(result) GET /api/automation-hub/content/{path}/ Parameters Name In Type Required Description path path string true none fields query string false A list of fields to include in the response. exclude_fields query string false A list of fields to exclude from the response. Responses Status Meaning Description Schema 200 OK No response body None This operation does not require authentication Api: Content Api api_automation_hub_content_api_read Code samples package main import ( \"bytes\" \"net/http\" ) func main() { data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/content/{path}/api/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/content/{path}/api/', { method: 'GET' }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/content/{path}/api/') print(r.json()) require 'rest-client' require 'json' result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/content/{path}/api/', params: { } p JSON.parse(result) GET /api/automation-hub/content/{path}/api/ Parameters Name In Type Required Description path path string true none fields query string false A list of fields to include in the response. exclude_fields query string false A list of fields to exclude from the response. Responses Status Meaning Description Schema 200 OK No response body None This operation does not require authentication Api: Content V3 api_automation_hub_content_v3_read Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/content/{path}/v3/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/content/{path}/v3/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/content/{path}/v3/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/content/{path}/v3/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/content/{path}/v3/ Legacy v3 endpoint. Parameters Name In Type Required Description path path string true none fields query string false A list of fields to include in the response. exclude_fields query string false A list of fields to exclude from the response. Example responses 202 Response { \"published\": \"2019-08-24T14:15:22Z\" } Responses Status Meaning Description Schema 202 Accepted none RepoMetadataResponse 302 Found No response body None This operation does not require authentication Pulp_Ansible: Artifacts Collections V3 api_automation_hub_content_v3_artifacts_collections_create Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Content-Type\": []string{\"multipart/form-data\"}, \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"POST\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/content/{path}/v3/artifacts/collections/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const inputBody = '{ \"file\": \"string\", \"sha256\": \"string\" }'; const headers = { 'Content-Type':'multipart/form-data', 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/content/{path}/v3/artifacts/collections/', { method: 'POST', body: inputBody, headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Content-Type': 'multipart/form-data', 'Accept': 'application/json' } r = requests.post('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/content/{path}/v3/artifacts/collections/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Content-Type' => 'multipart/form-data', 'Accept' => 'application/json' } result = RestClient.post 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/content/{path}/v3/artifacts/collections/', params: { }, headers: headers p JSON.parse(result) POST /api/automation-hub/content/{path}/v3/artifacts/collections/ Upload a collection Create an artifact and trigger an asynchronous task to create Collection content from it. Body parameter file: string sha256: string Parameters Name In Type Required Description path path string true none body body CollectionUploadWithDownloadUrl true none Example responses 202 Response { \"task\": \"http://example.com\" } Responses Status Meaning Description Schema 202 Accepted none AsyncOperationResponse This operation does not require authentication api_automation_hub_content_v3_plugin_ansible_content_collections_artifacts_create Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Content-Type\": []string{\"multipart/form-data\"}, \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"POST\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/content/{path}/v3/plugin/ansible/content/{distro_base_path}/collections/artifacts/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const inputBody = '{ \"file\": \"string\", \"sha256\": \"string\" }'; const headers = { 'Content-Type':'multipart/form-data', 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/content/{path}/v3/plugin/ansible/content/{distro_base_path}/collections/artifacts/', { method: 'POST', body: inputBody, headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Content-Type': 'multipart/form-data', 'Accept': 'application/json' } r = requests.post('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/content/{path}/v3/plugin/ansible/content/{distro_base_path}/collections/artifacts/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Content-Type' => 'multipart/form-data', 'Accept' => 'application/json' } result = RestClient.post 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/content/{path}/v3/plugin/ansible/content/{distro_base_path}/collections/artifacts/', params: { }, headers: headers p JSON.parse(result) POST /api/automation-hub/content/{path}/v3/plugin/ansible/content/{distro_base_path}/collections/artifacts/ Upload a collection Create an artifact and trigger an asynchronous task to create Collection content from it. Body parameter file: string sha256: string Parameters Name In Type Required Description distro_base_path path string true none path path string true none body body CollectionUploadWithDownloadUrl true none Example responses 202 Response { \"task\": \"http://example.com\" } Responses Status Meaning Description Schema 202 Accepted none AsyncOperationResponse This operation does not require authentication api_automation_hub_v3_artifacts_collections_create Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Content-Type\": []string{\"multipart/form-data\"}, \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"POST\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/artifacts/collections/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const inputBody = '{ \"file\": \"string\", \"sha256\": \"string\" }'; const headers = { 'Content-Type':'multipart/form-data', 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/artifacts/collections/', { method: 'POST', body: inputBody, headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Content-Type': 'multipart/form-data', 'Accept': 'application/json' } r = requests.post('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/artifacts/collections/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Content-Type' => 'multipart/form-data', 'Accept' => 'application/json' } result = RestClient.post 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/artifacts/collections/', params: { }, headers: headers p JSON.parse(result) POST /api/automation-hub/v3/artifacts/collections/ Upload a collection Create an artifact and trigger an asynchronous task to create Collection content from it. Body parameter file: string sha256: string Parameters Name In Type Required Description body body CollectionUploadWithDownloadUrl true none Example responses 202 Response { \"task\": \"http://example.com\" } Responses Status Meaning Description Schema 202 Accepted none AsyncOperationResponse This operation does not require authentication api_automation_hub_v3_plugin_ansible_content_collections_artifacts_create Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Content-Type\": []string{\"multipart/form-data\"}, \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"POST\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/plugin/ansible/content/{distro_base_path}/collections/artifacts/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const inputBody = '{ \"file\": \"string\", \"sha256\": \"string\" }'; const headers = { 'Content-Type':'multipart/form-data', 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/plugin/ansible/content/{distro_base_path}/collections/artifacts/', { method: 'POST', body: inputBody, headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Content-Type': 'multipart/form-data', 'Accept': 'application/json' } r = requests.post('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/plugin/ansible/content/{distro_base_path}/collections/artifacts/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Content-Type' => 'multipart/form-data', 'Accept' => 'application/json' } result = RestClient.post 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/plugin/ansible/content/{distro_base_path}/collections/artifacts/', params: { }, headers: headers p JSON.parse(result) POST /api/automation-hub/v3/plugin/ansible/content/{distro_base_path}/collections/artifacts/ Upload a collection Create an artifact and trigger an asynchronous task to create Collection content from it. Body parameter file: string sha256: string Parameters Name In Type Required Description distro_base_path path string true none body body CollectionUploadWithDownloadUrl true none Example responses 202 Response { \"task\": \"http://example.com\" } Responses Status Meaning Description Schema 202 Accepted none AsyncOperationResponse This operation does not require authentication pulp_ansible_galaxy_api_v3_artifacts_collections_create Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Content-Type\": []string{\"multipart/form-data\"}, \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"POST\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/{path}/api/v3/artifacts/collections/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const inputBody = '{ \"file\": \"string\", \"sha256\": \"string\", \"expected_namespace\": \"string\", \"expected_name\": \"string\", \"expected_version\": \"string\" }'; const headers = { 'Content-Type':'multipart/form-data', 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/{path}/api/v3/artifacts/collections/', { method: 'POST', body: inputBody, headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Content-Type': 'multipart/form-data', 'Accept': 'application/json' } r = requests.post('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/{path}/api/v3/artifacts/collections/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Content-Type' => 'multipart/form-data', 'Accept' => 'application/json' } result = RestClient.post 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/{path}/api/v3/artifacts/collections/', params: { }, headers: headers p JSON.parse(result) POST /pulp_ansible/galaxy/{path}/api/v3/artifacts/collections/ Upload a collection Create an artifact and trigger an asynchronous task to create Collection content from it. Body parameter file: string sha256: string expected_namespace: string expected_name: string expected_version: string Parameters Name In Type Required Description path path string true none body body CollectionOneShot true none Example responses 202 Response { \"task\": \"http://example.com\" } Responses Status Meaning Description Schema 202 Accepted none AsyncOperationResponse This operation does not require authentication pulp_ansible_galaxy_api_v3_plugin_ansible_content_collections_artifacts_create Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Content-Type\": []string{\"multipart/form-data\"}, \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"POST\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/{path}/api/v3/plugin/ansible/content/{distro_base_path}/collections/artifacts/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const inputBody = '{ \"file\": \"string\", \"sha256\": \"string\", \"expected_namespace\": \"string\", \"expected_name\": \"string\", \"expected_version\": \"string\" }'; const headers = { 'Content-Type':'multipart/form-data', 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/{path}/api/v3/plugin/ansible/content/{distro_base_path}/collections/artifacts/', { method: 'POST', body: inputBody, headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Content-Type': 'multipart/form-data', 'Accept': 'application/json' } r = requests.post('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/{path}/api/v3/plugin/ansible/content/{distro_base_path}/collections/artifacts/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Content-Type' => 'multipart/form-data', 'Accept' => 'application/json' } result = RestClient.post 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/{path}/api/v3/plugin/ansible/content/{distro_base_path}/collections/artifacts/', params: { }, headers: headers p JSON.parse(result) POST /pulp_ansible/galaxy/{path}/api/v3/plugin/ansible/content/{distro_base_path}/collections/artifacts/ Upload a collection Create an artifact and trigger an asynchronous task to create Collection content from it. Body parameter file: string sha256: string expected_namespace: string expected_name: string expected_version: string Parameters Name In Type Required Description distro_base_path path string true none path path string true none body body CollectionOneShot true none Example responses 202 Response { \"task\": \"http://example.com\" } Responses Status Meaning Description Schema 202 Accepted none AsyncOperationResponse This operation does not require authentication pulp_ansible_galaxy_default_api_v3_artifacts_collections_create Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Content-Type\": []string{\"multipart/form-data\"}, \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"POST\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/default/api/v3/artifacts/collections/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const inputBody = '{ \"file\": \"string\", \"sha256\": \"string\", \"expected_namespace\": \"string\", \"expected_name\": \"string\", \"expected_version\": \"string\" }'; const headers = { 'Content-Type':'multipart/form-data', 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/default/api/v3/artifacts/collections/', { method: 'POST', body: inputBody, headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Content-Type': 'multipart/form-data', 'Accept': 'application/json' } r = requests.post('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/default/api/v3/artifacts/collections/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Content-Type' => 'multipart/form-data', 'Accept' => 'application/json' } result = RestClient.post 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/default/api/v3/artifacts/collections/', params: { }, headers: headers p JSON.parse(result) POST /pulp_ansible/galaxy/default/api/v3/artifacts/collections/ Upload a collection Create an artifact and trigger an asynchronous task to create Collection content from it. Body parameter file: string sha256: string expected_namespace: string expected_name: string expected_version: string Parameters Name In Type Required Description body body CollectionOneShot true none Example responses 202 Response { \"task\": \"http://example.com\" } Responses Status Meaning Description Schema 202 Accepted none AsyncOperationResponse This operation does not require authentication pulp_ansible_galaxy_default_api_v3_plugin_ansible_content_collections_artifacts_create Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Content-Type\": []string{\"multipart/form-data\"}, \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"POST\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/default/api/v3/plugin/ansible/content/{distro_base_path}/collections/artifacts/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const inputBody = '{ \"file\": \"string\", \"sha256\": \"string\", \"expected_namespace\": \"string\", \"expected_name\": \"string\", \"expected_version\": \"string\" }'; const headers = { 'Content-Type':'multipart/form-data', 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/default/api/v3/plugin/ansible/content/{distro_base_path}/collections/artifacts/', { method: 'POST', body: inputBody, headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Content-Type': 'multipart/form-data', 'Accept': 'application/json' } r = requests.post('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/default/api/v3/plugin/ansible/content/{distro_base_path}/collections/artifacts/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Content-Type' => 'multipart/form-data', 'Accept' => 'application/json' } result = RestClient.post 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/default/api/v3/plugin/ansible/content/{distro_base_path}/collections/artifacts/', params: { }, headers: headers p JSON.parse(result) POST /pulp_ansible/galaxy/default/api/v3/plugin/ansible/content/{distro_base_path}/collections/artifacts/ Upload a collection Create an artifact and trigger an asynchronous task to create Collection content from it. Body parameter file: string sha256: string expected_namespace: string expected_name: string expected_version: string Parameters Name In Type Required Description distro_base_path path string true none body body CollectionOneShot true none Example responses 202 Response { \"task\": \"http://example.com\" } Responses Status Meaning Description Schema 202 Accepted none AsyncOperationResponse This operation does not require authentication Api: Content V3 Artifacts Collections api_automation_hub_content_v3_artifacts_collections_get Code samples package main import ( \"bytes\" \"net/http\" ) func main() { data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/content/{path}/v3/artifacts/collections/{path}/{filename}\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/content/{path}/v3/artifacts/collections/{path}/{filename}', { method: 'GET' }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/content/{path}/v3/artifacts/collections/{path}/{filename}') print(r.json()) require 'rest-client' require 'json' result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/content/{path}/v3/artifacts/collections/{path}/{filename}', params: { } p JSON.parse(result) GET /api/automation-hub/content/{path}/v3/artifacts/collections/{path}/{filename} Download collection. Parameters Name In Type Required Description filename path string true none path path string true none fields query string false A list of fields to include in the response. exclude_fields query string false A list of fields to exclude from the response. Responses Status Meaning Description Schema 200 OK No response body None This operation does not require authentication Api: Content V3 Collection_Versions All api_automation_hub_content_v3_collection_versions_all_get Code samples package main import ( \"bytes\" \"net/http\" ) func main() { data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/content/{path}/v3/collection_versions/all/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/content/{path}/v3/collection_versions/all/', { method: 'GET' }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/content/{path}/v3/collection_versions/all/') print(r.json()) require 'rest-client' require 'json' result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/content/{path}/v3/collection_versions/all/', params: { } p JSON.parse(result) GET /api/automation-hub/content/{path}/v3/collection_versions/all/ Parameters Name In Type Required Description path path string true none fields query string false A list of fields to include in the response. exclude_fields query string false A list of fields to exclude from the response. Responses Status Meaning Description Schema 200 OK No response body None This operation does not require authentication Api: Content V3 Collections api_automation_hub_content_v3_collections_list Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/content/{path}/v3/collections/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/content/{path}/v3/collections/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/content/{path}/v3/collections/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/content/{path}/v3/collections/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/content/{path}/v3/collections/ Legacy v3 endpoint. Parameters Name In Type Required Description deprecated query boolean false none limit query integer false Number of results to return per page. name query string false none namespace query string false none offset query integer false The initial index from which to return the results. ordering query array[string] false Ordering path path string true none fields query string false A list of fields to include in the response. exclude_fields query string false A list of fields to exclude from the response. Enumerated Values Parameter Value ordering -group_roles ordering -name ordering -namespace ordering -pk ordering -pulp_created ordering -pulp_id ordering -pulp_labels ordering -pulp_last_updated ordering -synclist ordering -user_roles ordering -versions ordering group_roles ordering name ordering namespace ordering pk ordering pulp_created ordering pulp_id ordering pulp_labels ordering pulp_last_updated ordering synclist ordering user_roles ordering versions Example responses 202 Response { \"meta\": { \"count\": 123 }, \"links\": { \"first\": \"string\", \"previous\": \"string\", \"next\": \"string\", \"last\": \"string\" }, \"data\": [ { \"href\": \"string\", \"namespace\": \"string\", \"name\": \"string\", \"deprecated\": true, \"versions_url\": \"string\", \"highest_version\": {}, \"created_at\": \"2019-08-24T14:15:22Z\", \"updated_at\": \"2019-08-24T14:15:22Z\" } ] } Responses Status Meaning Description Schema 202 Accepted none PaginatedCollectionResponseList 302 Found No response body None This operation does not require authentication api_automation_hub_content_v3_collections_read Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/content/{path}/v3/collections/{namespace}/{name}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/content/{path}/v3/collections/{namespace}/{name}/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/content/{path}/v3/collections/{namespace}/{name}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/content/{path}/v3/collections/{namespace}/{name}/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/content/{path}/v3/collections/{namespace}/{name}/ Legacy v3 endpoint. Parameters Name In Type Required Description name path string true none namespace path string true none path path string true none fields query string false A list of fields to include in the response. exclude_fields query string false A list of fields to exclude from the response. Example responses 202 Response { \"href\": \"string\", \"namespace\": \"string\", \"name\": \"string\", \"deprecated\": true, \"versions_url\": \"string\", \"highest_version\": {}, \"created_at\": \"2019-08-24T14:15:22Z\", \"updated_at\": \"2019-08-24T14:15:22Z\" } Responses Status Meaning Description Schema 202 Accepted none CollectionResponse 302 Found No response body None This operation does not require authentication api_automation_hub_content_v3_collections_update Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Content-Type\": []string{\"application/json\"}, \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"PATCH\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/content/{path}/v3/collections/{namespace}/{name}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const inputBody = '{}'; const headers = { 'Content-Type':'application/json', 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/content/{path}/v3/collections/{namespace}/{name}/', { method: 'PATCH', body: inputBody, headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Content-Type': 'application/json', 'Accept': 'application/json' } r = requests.patch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/content/{path}/v3/collections/{namespace}/{name}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Content-Type' => 'application/json', 'Accept' => 'application/json' } result = RestClient.patch 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/content/{path}/v3/collections/{namespace}/{name}/', params: { }, headers: headers p JSON.parse(result) PATCH /api/automation-hub/content/{path}/v3/collections/{namespace}/{name}/ Legacy v3 endpoint. Body parameter {} {} Parameters Name In Type Required Description name path string true none namespace path string true none path path string true none body body PatchedCollection true none Example responses 202 Response { \"task\": \"http://example.com\" } Responses Status Meaning Description Schema 202 Accepted none AsyncOperationResponse 302 Found No response body None This operation does not require authentication api_automation_hub_content_v3_collections_delete Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"DELETE\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/content/{path}/v3/collections/{namespace}/{name}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/content/{path}/v3/collections/{namespace}/{name}/', { method: 'DELETE', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.delete('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/content/{path}/v3/collections/{namespace}/{name}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.delete 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/content/{path}/v3/collections/{namespace}/{name}/', params: { }, headers: headers p JSON.parse(result) DELETE /api/automation-hub/content/{path}/v3/collections/{namespace}/{name}/ Legacy v3 endpoint. Parameters Name In Type Required Description name path string true none namespace path string true none path path string true none Example responses 202 Response { \"task\": \"http://example.com\" } Responses Status Meaning Description Schema 202 Accepted none AsyncOperationResponse 302 Found No response body None This operation does not require authentication Api: Content V3 Collections Versions api_automation_hub_content_v3_collections_versions_list Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/content/{path}/v3/collections/{namespace}/{name}/versions/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/content/{path}/v3/collections/{namespace}/{name}/versions/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/content/{path}/v3/collections/{namespace}/{name}/versions/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/content/{path}/v3/collections/{namespace}/{name}/versions/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/content/{path}/v3/collections/{namespace}/{name}/versions/ Legacy v3 endpoint. Parameters Name In Type Required Description is_highest query boolean false none limit query integer false Number of results to return per page. name path string true none name query string false none namespace path string true none namespace query string false none offset query integer false The initial index from which to return the results. ordering query array[string] false Ordering path path string true none q query string false none repository_version query string false Repository Version referenced by HREF repository_version_added query string false Repository Version referenced by HREF repository_version_removed query string false Repository Version referenced by HREF tags query string false Filter by comma separate list of tags that must all be matched version query string false Filter results where version matches value fields query string false A list of fields to include in the response. exclude_fields query string false A list of fields to exclude from the response. Enumerated Values Parameter Value ordering -_artifacts ordering -authors ordering -collection ordering -content_ptr ordering -contentartifact ordering -contents ordering -dependencies ordering -description ordering -docs_blob ordering -documentation ordering -download_logs ordering -files ordering -group_roles ordering -homepage ordering -is_highest ordering -issues ordering -license ordering -manifest ordering -name ordering -namespace ordering -pk ordering -pulp_created ordering -pulp_id ordering -pulp_labels ordering -pulp_last_updated ordering -pulp_type ordering -repositories ordering -repository ordering -requires_ansible ordering -search_vector ordering -signatures ordering -tags ordering -timestamp_of_interest ordering -upstream_id ordering -user_roles ordering -version ordering -version_memberships ordering _artifacts ordering authors ordering collection ordering content_ptr ordering contentartifact ordering contents ordering dependencies ordering description ordering docs_blob ordering documentation ordering download_logs ordering files ordering group_roles ordering homepage ordering is_highest ordering issues ordering license ordering manifest ordering name ordering namespace ordering pk ordering pulp_created ordering pulp_id ordering pulp_labels ordering pulp_last_updated ordering pulp_type ordering repositories ordering repository ordering requires_ansible ordering search_vector ordering signatures ordering tags ordering timestamp_of_interest ordering upstream_id ordering user_roles ordering version ordering version_memberships Example responses 202 Response { \"meta\": { \"count\": 123 }, \"links\": { \"first\": \"string\", \"previous\": \"string\", \"next\": \"string\", \"last\": \"string\" }, \"data\": [ { \"version\": \"string\", \"href\": \"string\", \"created_at\": \"2019-08-24T14:15:22Z\", \"updated_at\": \"2019-08-24T14:15:22Z\", \"requires_ansible\": \"string\" } ] } Responses Status Meaning Description Schema 202 Accepted none PaginatedCollectionVersionListResponseList 302 Found No response body None This operation does not require authentication api_automation_hub_content_v3_collections_versions_read Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/content/{path}/v3/collections/{namespace}/{name}/versions/{version}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/content/{path}/v3/collections/{namespace}/{name}/versions/{version}/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/content/{path}/v3/collections/{namespace}/{name}/versions/{version}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/content/{path}/v3/collections/{namespace}/{name}/versions/{version}/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/content/{path}/v3/collections/{namespace}/{name}/versions/{version}/ Legacy v3 endpoint. Parameters Name In Type Required Description name path string true none namespace path string true none path path string true none version path string true none fields query string false A list of fields to include in the response. exclude_fields query string false A list of fields to exclude from the response. Example responses 202 Response { \"version\": \"string\", \"href\": \"string\", \"created_at\": \"2019-08-24T14:15:22Z\", \"updated_at\": \"2019-08-24T14:15:22Z\", \"requires_ansible\": \"string\", \"artifact\": { \"filename\": \"string\", \"sha256\": \"string\", \"size\": 0 }, \"collection\": { \"id\": \"string\", \"name\": \"string\", \"href\": \"string\" }, \"download_url\": \"string\", \"name\": \"string\", \"namespace\": { \"name\": \"string\" }, \"signatures\": \"string\", \"metadata\": { \"authors\": [ \"string\" ], \"contents\": {}, \"dependencies\": {}, \"description\": \"string\", \"documentation\": \"string\", \"homepage\": \"string\", \"issues\": \"string\", \"license\": [ \"string\" ], \"repository\": \"string\", \"tags\": [ \"string\" ] }, \"git_url\": \"string\", \"git_commit_sha\": \"string\", \"manifest\": {}, \"files\": {} } Responses Status Meaning Description Schema 202 Accepted none CollectionVersionResponse 302 Found No response body None This operation does not require authentication api_automation_hub_content_v3_collections_versions_delete Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"DELETE\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/content/{path}/v3/collections/{namespace}/{name}/versions/{version}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/content/{path}/v3/collections/{namespace}/{name}/versions/{version}/', { method: 'DELETE', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.delete('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/content/{path}/v3/collections/{namespace}/{name}/versions/{version}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.delete 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/content/{path}/v3/collections/{namespace}/{name}/versions/{version}/', params: { }, headers: headers p JSON.parse(result) DELETE /api/automation-hub/content/{path}/v3/collections/{namespace}/{name}/versions/{version}/ Legacy v3 endpoint. Parameters Name In Type Required Description name path string true none namespace path string true none path path string true none version path string true none Example responses 202 Response { \"task\": \"http://example.com\" } Responses Status Meaning Description Schema 202 Accepted none AsyncOperationResponse 302 Found No response body None This operation does not require authentication Api: Content V3 Collections Versions Copy api_automation_hub_content_v3_collections_versions_copy_copy_content Code samples package main import ( \"bytes\" \"net/http\" ) func main() { data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"POST\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/content/{path}/v3/collections/{namespace}/{name}/versions/{version}/copy/{source_path}/{dest_path}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/content/{path}/v3/collections/{namespace}/{name}/versions/{version}/copy/{source_path}/{dest_path}/', { method: 'POST' }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests r = requests.post('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/content/{path}/v3/collections/{namespace}/{name}/versions/{version}/copy/{source_path}/{dest_path}/') print(r.json()) require 'rest-client' require 'json' result = RestClient.post 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/content/{path}/v3/collections/{namespace}/{name}/versions/{version}/copy/{source_path}/{dest_path}/', params: { } p JSON.parse(result) POST /api/automation-hub/content/{path}/v3/collections/{namespace}/{name}/versions/{version}/copy/{source_path}/{dest_path}/ Copy collection version from one repository to another. Parameters Name In Type Required Description dest_path path string true none name path string true none namespace path string true none path path string true none source_path path string true none version path string true none Responses Status Meaning Description Schema 200 OK No response body None This operation does not require authentication Api: Content V3 Collections Versions Docs-Blob api_automation_hub_content_v3_collections_versions_docs_blob_read Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/content/{path}/v3/collections/{namespace}/{name}/versions/{version}/docs-blob/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/content/{path}/v3/collections/{namespace}/{name}/versions/{version}/docs-blob/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/content/{path}/v3/collections/{namespace}/{name}/versions/{version}/docs-blob/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/content/{path}/v3/collections/{namespace}/{name}/versions/{version}/docs-blob/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/content/{path}/v3/collections/{namespace}/{name}/versions/{version}/docs-blob/ Legacy v3 endpoint. Parameters Name In Type Required Description name path string true none namespace path string true none path path string true none version path string true none fields query string false A list of fields to include in the response. exclude_fields query string false A list of fields to exclude from the response. Example responses 202 Response { \"docs_blob\": {} } Responses Status Meaning Description Schema 202 Accepted none CollectionVersionDocsResponse 302 Found No response body None This operation does not require authentication Api: Content V3 Collections Versions Move api_automation_hub_content_v3_collections_versions_move_move_content Code samples package main import ( \"bytes\" \"net/http\" ) func main() { data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"POST\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/content/{path}/v3/collections/{namespace}/{name}/versions/{version}/move/{source_path}/{dest_path}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/content/{path}/v3/collections/{namespace}/{name}/versions/{version}/move/{source_path}/{dest_path}/', { method: 'POST' }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests r = requests.post('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/content/{path}/v3/collections/{namespace}/{name}/versions/{version}/move/{source_path}/{dest_path}/') print(r.json()) require 'rest-client' require 'json' result = RestClient.post 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/content/{path}/v3/collections/{namespace}/{name}/versions/{version}/move/{source_path}/{dest_path}/', params: { } p JSON.parse(result) POST /api/automation-hub/content/{path}/v3/collections/{namespace}/{name}/versions/{version}/move/{source_path}/{dest_path}/ Remove content from source repo and add to destination repo. Creates new RepositoryVersion of source repo without content included. Creates new RepositoryVersion of destination repo with content included. Parameters Name In Type Required Description dest_path path string true none name path string true none namespace path string true none path path string true none source_path path string true none version path string true none Responses Status Meaning Description Schema 200 OK No response body None This operation does not require authentication Api: Content V3 Collections All api_automation_hub_content_v3_collections_all_get Code samples package main import ( \"bytes\" \"net/http\" ) func main() { data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/content/{path}/v3/collections/all/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/content/{path}/v3/collections/all/', { method: 'GET' }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/content/{path}/v3/collections/all/') print(r.json()) require 'rest-client' require 'json' result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/content/{path}/v3/collections/all/', params: { } p JSON.parse(result) GET /api/automation-hub/content/{path}/v3/collections/all/ Parameters Name In Type Required Description path path string true none fields query string false A list of fields to include in the response. exclude_fields query string false A list of fields to exclude from the response. Responses Status Meaning Description Schema 200 OK No response body None This operation does not require authentication Api: Content V3 Excludes api_automation_hub_content_v3_excludes_read Code samples package main import ( \"bytes\" \"net/http\" ) func main() { data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/content/{path}/v3/excludes/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/content/{path}/v3/excludes/', { method: 'GET' }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/content/{path}/v3/excludes/') print(r.json()) require 'rest-client' require 'json' result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/content/{path}/v3/excludes/', params: { } p JSON.parse(result) GET /api/automation-hub/content/{path}/v3/excludes/ Parameters Name In Type Required Description format query string false none path path string true none fields query string false A list of fields to include in the response. exclude_fields query string false A list of fields to exclude from the response. Enumerated Values Parameter Value format json format yaml Responses Status Meaning Description Schema 200 OK No response body None This operation does not require authentication Api: Content V3 Imports Collections api_automation_hub_content_v3_imports_collections_read Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/content/{path}/v3/imports/collections/{task}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/content/{path}/v3/imports/collections/{task}/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/content/{path}/v3/imports/collections/{task}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/content/{path}/v3/imports/collections/{task}/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/content/{path}/v3/imports/collections/{task}/ Inspect a collection import Legacy v3 endpoint. Parameters Name In Type Required Description path path string true none task path string(uuid) true A unique value identifying this collection import. fields query string false A list of fields to include in the response. exclude_fields query string false A list of fields to exclude from the response. Example responses 202 Response { \"id\": \"497f6eca-6276-4993-bfeb-53cbbbba6f08\", \"state\": \"string\", \"created_at\": \"2019-08-24T14:15:22Z\", \"updated_at\": \"2019-08-24T14:15:22Z\", \"started_at\": \"2019-08-24T14:15:22Z\", \"finished_at\": \"2019-08-24T14:15:22Z\", \"error\": {}, \"messages\": {} } Responses Status Meaning Description Schema 202 Accepted none CollectionImportDetailResponse 302 Found No response body None This operation does not require authentication Api: Content V3 Plugin Ansible Client-Configuration api_automation_hub_content_v3_plugin_ansible_client_configuration_get Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/content/{path}/v3/plugin/ansible/client-configuration/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/content/{path}/v3/plugin/ansible/client-configuration/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/content/{path}/v3/plugin/ansible/client-configuration/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/content/{path}/v3/plugin/ansible/client-configuration/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/content/{path}/v3/plugin/ansible/client-configuration/ Get the client configs. Parameters Name In Type Required Description path path string true none fields query string false A list of fields to include in the response. exclude_fields query string false A list of fields to exclude from the response. Example responses 200 Response { \"default_distribution_path\": \"string\" } Responses Status Meaning Description Schema 200 OK none ClientConfigurationResponse This operation does not require authentication Api: Content V3 Plugin Ansible Content Collections api_automation_hub_content_v3_plugin_ansible_content_collections_read Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/content/{path}/v3/plugin/ansible/content/{distro_base_path}/collections/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/content/{path}/v3/plugin/ansible/content/{distro_base_path}/collections/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/content/{path}/v3/plugin/ansible/content/{distro_base_path}/collections/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/content/{path}/v3/plugin/ansible/content/{distro_base_path}/collections/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/content/{path}/v3/plugin/ansible/content/{distro_base_path}/collections/ ViewSet for Repository Metadata. Parameters Name In Type Required Description distro_base_path path string true none path path string true none fields query string false A list of fields to include in the response. exclude_fields query string false A list of fields to exclude from the response. Example responses 200 Response { \"published\": \"2019-08-24T14:15:22Z\" } Responses Status Meaning Description Schema 200 OK none RepoMetadataResponse This operation does not require authentication Api: Content V3 Plugin Ansible Content Collections All-Collections api_automation_hub_content_v3_plugin_ansible_content_collections_all_collections_list Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/content/{path}/v3/plugin/ansible/content/{distro_base_path}/collections/all-collections/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/content/{path}/v3/plugin/ansible/content/{distro_base_path}/collections/all-collections/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/content/{path}/v3/plugin/ansible/content/{distro_base_path}/collections/all-collections/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/content/{path}/v3/plugin/ansible/content/{distro_base_path}/collections/all-collections/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/content/{path}/v3/plugin/ansible/content/{distro_base_path}/collections/all-collections/ Unpaginated ViewSet for Collections. Parameters Name In Type Required Description deprecated query boolean false none distro_base_path path string true none name query string false none namespace query string false none ordering query array[string] false Ordering path path string true none fields query string false A list of fields to include in the response. exclude_fields query string false A list of fields to exclude from the response. Enumerated Values Parameter Value ordering -group_roles ordering -name ordering -namespace ordering -pk ordering -pulp_created ordering -pulp_id ordering -pulp_labels ordering -pulp_last_updated ordering -synclist ordering -user_roles ordering -versions ordering group_roles ordering name ordering namespace ordering pk ordering pulp_created ordering pulp_id ordering pulp_labels ordering pulp_last_updated ordering synclist ordering user_roles ordering versions Example responses 200 Response [ { \"href\": \"string\", \"namespace\": \"string\", \"name\": \"string\", \"deprecated\": true, \"versions_url\": \"string\", \"highest_version\": {}, \"created_at\": \"2019-08-24T14:15:22Z\", \"updated_at\": \"2019-08-24T14:15:22Z\" } ] Responses Status Meaning Description Schema 200 OK none Inline Response Schema Status Code 200 Name Type Required Restrictions Description anonymous [ CollectionResponse ] false none [A serializer for a Collection.] \u00bb href string false read-only none \u00bb namespace string false read-only none \u00bb name string false read-only none \u00bb deprecated boolean false read-only none \u00bb versions_url string false read-only none \u00bb highest_version object false read-only none \u00bb created_at string(date-time) false read-only none \u00bb updated_at string(date-time) false read-only none This operation does not require authentication Api: Content V3 Plugin Ansible Content Collections All-Versions api_automation_hub_content_v3_plugin_ansible_content_collections_all_versions_list Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/content/{path}/v3/plugin/ansible/content/{distro_base_path}/collections/all-versions/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/content/{path}/v3/plugin/ansible/content/{distro_base_path}/collections/all-versions/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/content/{path}/v3/plugin/ansible/content/{distro_base_path}/collections/all-versions/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/content/{path}/v3/plugin/ansible/content/{distro_base_path}/collections/all-versions/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/content/{path}/v3/plugin/ansible/content/{distro_base_path}/collections/all-versions/ Returns paginated CollectionVersions list. Parameters Name In Type Required Description distro_base_path path string true none path path string true none fields query string false A list of fields to include in the response. exclude_fields query string false A list of fields to exclude from the response. Example responses 202 Response [ { \"version\": \"string\", \"href\": \"string\", \"created_at\": \"2019-08-24T14:15:22Z\", \"updated_at\": \"2019-08-24T14:15:22Z\", \"requires_ansible\": \"string\", \"artifact\": { \"filename\": \"string\", \"sha256\": \"string\", \"size\": 0 }, \"collection\": { \"id\": \"string\", \"name\": \"string\", \"href\": \"string\" }, \"download_url\": \"string\", \"name\": \"string\", \"namespace\": { \"name\": \"string\" }, \"signatures\": \"string\", \"metadata\": { \"authors\": [ \"string\" ], \"contents\": {}, \"dependencies\": {}, \"description\": \"string\", \"documentation\": \"string\", \"homepage\": \"string\", \"issues\": \"string\", \"license\": [ \"string\" ], \"repository\": \"string\", \"tags\": [ \"string\" ] }, \"git_url\": \"string\", \"git_commit_sha\": \"string\" } ] Responses Status Meaning Description Schema 202 Accepted none Inline Response Schema Status Code 202 Name Type Required Restrictions Description anonymous [ UnpaginatedCollectionVersionResponse ] false none [A serializer for unpaginated CollectionVersion.] \u00bb version string false read-only none \u00bb href string false read-only none \u00bb created_at string(date-time) true none none \u00bb updated_at string(date-time) true none none \u00bb requires_ansible string\u00a6null false none none \u00bb artifact ArtifactRefResponse false read-only A serializer for an Artifact reference. \u00bb\u00bb filename string true none none \u00bb\u00bb sha256 string true none none \u00bb\u00bb size integer true none none \u00bb collection CollectionRefResponse false read-only A serializer for a Collection reference. \u00bb\u00bb id string true none none \u00bb\u00bb name string true none none \u00bb\u00bb href string false read-only none \u00bb download_url string false read-only none \u00bb name string false read-only none \u00bb namespace CollectionNamespaceResponse false read-only A serializer for a Collection Version namespace field. \u00bb\u00bb name string true none none \u00bb signatures string false read-only none \u00bb metadata CollectionMetadataResponse false read-only A serializer for a CollectionVersion metadata. \u00bb\u00bb authors [string] false read-only none \u00bb\u00bb contents object false read-only none \u00bb\u00bb dependencies object false read-only none \u00bb\u00bb description string false read-only none \u00bb\u00bb documentation string false read-only none \u00bb\u00bb homepage string false read-only none \u00bb\u00bb issues string false read-only none \u00bb\u00bb license [string] false read-only none \u00bb\u00bb repository string false read-only none \u00bb\u00bb tags [string] true none none \u00bb git_url string false read-only none \u00bb git_commit_sha string false read-only none This operation does not require authentication Api: Content V3 Plugin Ansible Content Collections Artifacts api_automation_hub_content_v3_plugin_ansible_content_collections_artifacts_download Code samples package main import ( \"bytes\" \"net/http\" ) func main() { data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/content/{path}/v3/plugin/ansible/content/{distro_base_path}/collections/artifacts/{filename}\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/content/{path}/v3/plugin/ansible/content/{distro_base_path}/collections/artifacts/{filename}', { method: 'GET' }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/content/{path}/v3/plugin/ansible/content/{distro_base_path}/collections/artifacts/{filename}') print(r.json()) require 'rest-client' require 'json' result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/content/{path}/v3/plugin/ansible/content/{distro_base_path}/collections/artifacts/{filename}', params: { } p JSON.parse(result) GET /api/automation-hub/content/{path}/v3/plugin/ansible/content/{distro_base_path}/collections/artifacts/{filename} Parameters Name In Type Required Description distro_base_path path string true none filename path string true none path path string true none fields query string false A list of fields to include in the response. exclude_fields query string false A list of fields to exclude from the response. Responses Status Meaning Description Schema 200 OK No response body None This operation does not require authentication Api: Content V3 Plugin Ansible Content Collections Index api_automation_hub_content_v3_plugin_ansible_content_collections_index_list Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/content/{path}/v3/plugin/ansible/content/{distro_base_path}/collections/index/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/content/{path}/v3/plugin/ansible/content/{distro_base_path}/collections/index/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/content/{path}/v3/plugin/ansible/content/{distro_base_path}/collections/index/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/content/{path}/v3/plugin/ansible/content/{distro_base_path}/collections/index/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/content/{path}/v3/plugin/ansible/content/{distro_base_path}/collections/index/ ViewSet for Collections. Parameters Name In Type Required Description deprecated query boolean false none distro_base_path path string true none limit query integer false Number of results to return per page. name query string false none namespace query string false none offset query integer false The initial index from which to return the results. ordering query array[string] false Ordering path path string true none fields query string false A list of fields to include in the response. exclude_fields query string false A list of fields to exclude from the response. Enumerated Values Parameter Value ordering -group_roles ordering -name ordering -namespace ordering -pk ordering -pulp_created ordering -pulp_id ordering -pulp_labels ordering -pulp_last_updated ordering -synclist ordering -user_roles ordering -versions ordering group_roles ordering name ordering namespace ordering pk ordering pulp_created ordering pulp_id ordering pulp_labels ordering pulp_last_updated ordering synclist ordering user_roles ordering versions Example responses 200 Response { \"meta\": { \"count\": 123 }, \"links\": { \"first\": \"string\", \"previous\": \"string\", \"next\": \"string\", \"last\": \"string\" }, \"data\": [ { \"href\": \"string\", \"namespace\": \"string\", \"name\": \"string\", \"deprecated\": true, \"versions_url\": \"string\", \"highest_version\": {}, \"created_at\": \"2019-08-24T14:15:22Z\", \"updated_at\": \"2019-08-24T14:15:22Z\" } ] } Responses Status Meaning Description Schema 200 OK none PaginatedCollectionResponseList This operation does not require authentication api_automation_hub_content_v3_plugin_ansible_content_collections_index_read Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/content/{path}/v3/plugin/ansible/content/{distro_base_path}/collections/index/{namespace}/{name}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/content/{path}/v3/plugin/ansible/content/{distro_base_path}/collections/index/{namespace}/{name}/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/content/{path}/v3/plugin/ansible/content/{distro_base_path}/collections/index/{namespace}/{name}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/content/{path}/v3/plugin/ansible/content/{distro_base_path}/collections/index/{namespace}/{name}/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/content/{path}/v3/plugin/ansible/content/{distro_base_path}/collections/index/{namespace}/{name}/ ViewSet for Collections. Parameters Name In Type Required Description distro_base_path path string true none name path string true none namespace path string true none path path string true none fields query string false A list of fields to include in the response. exclude_fields query string false A list of fields to exclude from the response. Example responses 200 Response { \"href\": \"string\", \"namespace\": \"string\", \"name\": \"string\", \"deprecated\": true, \"versions_url\": \"string\", \"highest_version\": {}, \"created_at\": \"2019-08-24T14:15:22Z\", \"updated_at\": \"2019-08-24T14:15:22Z\" } Responses Status Meaning Description Schema 200 OK none CollectionResponse This operation does not require authentication api_automation_hub_content_v3_plugin_ansible_content_collections_index_update Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Content-Type\": []string{\"application/json\"}, \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"PATCH\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/content/{path}/v3/plugin/ansible/content/{distro_base_path}/collections/index/{namespace}/{name}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const inputBody = '{}'; const headers = { 'Content-Type':'application/json', 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/content/{path}/v3/plugin/ansible/content/{distro_base_path}/collections/index/{namespace}/{name}/', { method: 'PATCH', body: inputBody, headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Content-Type': 'application/json', 'Accept': 'application/json' } r = requests.patch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/content/{path}/v3/plugin/ansible/content/{distro_base_path}/collections/index/{namespace}/{name}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Content-Type' => 'application/json', 'Accept' => 'application/json' } result = RestClient.patch 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/content/{path}/v3/plugin/ansible/content/{distro_base_path}/collections/index/{namespace}/{name}/', params: { }, headers: headers p JSON.parse(result) PATCH /api/automation-hub/content/{path}/v3/plugin/ansible/content/{distro_base_path}/collections/index/{namespace}/{name}/ Trigger an asynchronous update task Body parameter {} {} Parameters Name In Type Required Description distro_base_path path string true none name path string true none namespace path string true none path path string true none body body PatchedCollection true none Example responses 202 Response { \"task\": \"http://example.com\" } Responses Status Meaning Description Schema 202 Accepted none AsyncOperationResponse This operation does not require authentication api_automation_hub_content_v3_plugin_ansible_content_collections_index_delete Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"DELETE\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/content/{path}/v3/plugin/ansible/content/{distro_base_path}/collections/index/{namespace}/{name}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/content/{path}/v3/plugin/ansible/content/{distro_base_path}/collections/index/{namespace}/{name}/', { method: 'DELETE', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.delete('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/content/{path}/v3/plugin/ansible/content/{distro_base_path}/collections/index/{namespace}/{name}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.delete 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/content/{path}/v3/plugin/ansible/content/{distro_base_path}/collections/index/{namespace}/{name}/', params: { }, headers: headers p JSON.parse(result) DELETE /api/automation-hub/content/{path}/v3/plugin/ansible/content/{distro_base_path}/collections/index/{namespace}/{name}/ Trigger an asynchronous delete task Parameters Name In Type Required Description distro_base_path path string true none name path string true none namespace path string true none path path string true none Example responses 202 Response { \"task\": \"http://example.com\" } Responses Status Meaning Description Schema 202 Accepted none AsyncOperationResponse This operation does not require authentication Api: Content V3 Plugin Ansible Content Collections Index Versions api_automation_hub_content_v3_plugin_ansible_content_collections_index_versions_list Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/content/{path}/v3/plugin/ansible/content/{distro_base_path}/collections/index/{namespace}/{name}/versions/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/content/{path}/v3/plugin/ansible/content/{distro_base_path}/collections/index/{namespace}/{name}/versions/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/content/{path}/v3/plugin/ansible/content/{distro_base_path}/collections/index/{namespace}/{name}/versions/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/content/{path}/v3/plugin/ansible/content/{distro_base_path}/collections/index/{namespace}/{name}/versions/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/content/{path}/v3/plugin/ansible/content/{distro_base_path}/collections/index/{namespace}/{name}/versions/ Returns paginated CollectionVersions list. Parameters Name In Type Required Description distro_base_path path string true none is_highest query boolean false none limit query integer false Number of results to return per page. name path string true none name query string false none namespace path string true none namespace query string false none offset query integer false The initial index from which to return the results. ordering query array[string] false Ordering path path string true none q query string false none repository_version query string false Repository Version referenced by HREF repository_version_added query string false Repository Version referenced by HREF repository_version_removed query string false Repository Version referenced by HREF tags query string false Filter by comma separate list of tags that must all be matched version query string false Filter results where version matches value fields query string false A list of fields to include in the response. exclude_fields query string false A list of fields to exclude from the response. Enumerated Values Parameter Value ordering -_artifacts ordering -authors ordering -collection ordering -content_ptr ordering -contentartifact ordering -contents ordering -dependencies ordering -description ordering -docs_blob ordering -documentation ordering -download_logs ordering -files ordering -group_roles ordering -homepage ordering -is_highest ordering -issues ordering -license ordering -manifest ordering -name ordering -namespace ordering -pk ordering -pulp_created ordering -pulp_id ordering -pulp_labels ordering -pulp_last_updated ordering -pulp_type ordering -repositories ordering -repository ordering -requires_ansible ordering -search_vector ordering -signatures ordering -tags ordering -timestamp_of_interest ordering -upstream_id ordering -user_roles ordering -version ordering -version_memberships ordering _artifacts ordering authors ordering collection ordering content_ptr ordering contentartifact ordering contents ordering dependencies ordering description ordering docs_blob ordering documentation ordering download_logs ordering files ordering group_roles ordering homepage ordering is_highest ordering issues ordering license ordering manifest ordering name ordering namespace ordering pk ordering pulp_created ordering pulp_id ordering pulp_labels ordering pulp_last_updated ordering pulp_type ordering repositories ordering repository ordering requires_ansible ordering search_vector ordering signatures ordering tags ordering timestamp_of_interest ordering upstream_id ordering user_roles ordering version ordering version_memberships Example responses 202 Response { \"meta\": { \"count\": 123 }, \"links\": { \"first\": \"string\", \"previous\": \"string\", \"next\": \"string\", \"last\": \"string\" }, \"data\": [ { \"version\": \"string\", \"href\": \"string\", \"created_at\": \"2019-08-24T14:15:22Z\", \"updated_at\": \"2019-08-24T14:15:22Z\", \"requires_ansible\": \"string\" } ] } Responses Status Meaning Description Schema 202 Accepted none PaginatedCollectionVersionListResponseList This operation does not require authentication api_automation_hub_content_v3_plugin_ansible_content_collections_index_versions_read Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/content/{path}/v3/plugin/ansible/content/{distro_base_path}/collections/index/{namespace}/{name}/versions/{version}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/content/{path}/v3/plugin/ansible/content/{distro_base_path}/collections/index/{namespace}/{name}/versions/{version}/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/content/{path}/v3/plugin/ansible/content/{distro_base_path}/collections/index/{namespace}/{name}/versions/{version}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/content/{path}/v3/plugin/ansible/content/{distro_base_path}/collections/index/{namespace}/{name}/versions/{version}/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/content/{path}/v3/plugin/ansible/content/{distro_base_path}/collections/index/{namespace}/{name}/versions/{version}/ Returns a CollectionVersion object. Parameters Name In Type Required Description distro_base_path path string true none name path string true none namespace path string true none path path string true none version path string true none fields query string false A list of fields to include in the response. exclude_fields query string false A list of fields to exclude from the response. Example responses 200 Response { \"version\": \"string\", \"href\": \"string\", \"created_at\": \"2019-08-24T14:15:22Z\", \"updated_at\": \"2019-08-24T14:15:22Z\", \"requires_ansible\": \"string\", \"artifact\": { \"filename\": \"string\", \"sha256\": \"string\", \"size\": 0 }, \"collection\": { \"id\": \"string\", \"name\": \"string\", \"href\": \"string\" }, \"download_url\": \"string\", \"name\": \"string\", \"namespace\": { \"name\": \"string\" }, \"signatures\": \"string\", \"metadata\": { \"authors\": [ \"string\" ], \"contents\": {}, \"dependencies\": {}, \"description\": \"string\", \"documentation\": \"string\", \"homepage\": \"string\", \"issues\": \"string\", \"license\": [ \"string\" ], \"repository\": \"string\", \"tags\": [ \"string\" ] }, \"git_url\": \"string\", \"git_commit_sha\": \"string\", \"manifest\": {}, \"files\": {} } Responses Status Meaning Description Schema 200 OK none CollectionVersionResponse This operation does not require authentication api_automation_hub_content_v3_plugin_ansible_content_collections_index_versions_delete Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"DELETE\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/content/{path}/v3/plugin/ansible/content/{distro_base_path}/collections/index/{namespace}/{name}/versions/{version}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/content/{path}/v3/plugin/ansible/content/{distro_base_path}/collections/index/{namespace}/{name}/versions/{version}/', { method: 'DELETE', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.delete('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/content/{path}/v3/plugin/ansible/content/{distro_base_path}/collections/index/{namespace}/{name}/versions/{version}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.delete 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/content/{path}/v3/plugin/ansible/content/{distro_base_path}/collections/index/{namespace}/{name}/versions/{version}/', params: { }, headers: headers p JSON.parse(result) DELETE /api/automation-hub/content/{path}/v3/plugin/ansible/content/{distro_base_path}/collections/index/{namespace}/{name}/versions/{version}/ Trigger an asynchronous delete task Parameters Name In Type Required Description distro_base_path path string true none name path string true none namespace path string true none path path string true none version path string true none Example responses 202 Response { \"task\": \"http://example.com\" } Responses Status Meaning Description Schema 202 Accepted none AsyncOperationResponse This operation does not require authentication Api: Content V3 Plugin Ansible Content Collections Index Versions Docs-Blob api_automation_hub_content_v3_plugin_ansible_content_collections_index_versions_docs_blob_read Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/content/{path}/v3/plugin/ansible/content/{distro_base_path}/collections/index/{namespace}/{name}/versions/{version}/docs-blob/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/content/{path}/v3/plugin/ansible/content/{distro_base_path}/collections/index/{namespace}/{name}/versions/{version}/docs-blob/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/content/{path}/v3/plugin/ansible/content/{distro_base_path}/collections/index/{namespace}/{name}/versions/{version}/docs-blob/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/content/{path}/v3/plugin/ansible/content/{distro_base_path}/collections/index/{namespace}/{name}/versions/{version}/docs-blob/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/content/{path}/v3/plugin/ansible/content/{distro_base_path}/collections/index/{namespace}/{name}/versions/{version}/docs-blob/ Returns a CollectionVersion object. Parameters Name In Type Required Description distro_base_path path string true none name path string true none namespace path string true none path path string true none version path string true none fields query string false A list of fields to include in the response. exclude_fields query string false A list of fields to exclude from the response. Example responses 200 Response { \"docs_blob\": {} } Responses Status Meaning Description Schema 200 OK none CollectionVersionDocsResponse This operation does not require authentication Api: Content V3 Plugin Ansible Imports Collections api_automation_hub_content_v3_plugin_ansible_imports_collections_read Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/content/{path}/v3/plugin/ansible/imports/collections/{task}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/content/{path}/v3/plugin/ansible/imports/collections/{task}/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/content/{path}/v3/plugin/ansible/imports/collections/{task}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/content/{path}/v3/plugin/ansible/imports/collections/{task}/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/content/{path}/v3/plugin/ansible/imports/collections/{task}/ Inspect a collection import Returns a CollectionImport object. Parameters Name In Type Required Description path path string true none since query string false Filter messages since a given timestamp task path string(uuid) true A unique value identifying this collection import. fields query string false A list of fields to include in the response. exclude_fields query string false A list of fields to exclude from the response. Example responses 200 Response { \"id\": \"497f6eca-6276-4993-bfeb-53cbbbba6f08\", \"state\": \"string\", \"created_at\": \"2019-08-24T14:15:22Z\", \"updated_at\": \"2019-08-24T14:15:22Z\", \"started_at\": \"2019-08-24T14:15:22Z\", \"finished_at\": \"2019-08-24T14:15:22Z\", \"error\": {}, \"messages\": {} } Responses Status Meaning Description Schema 200 OK none CollectionImportDetailResponse This operation does not require authentication Api: Content V3 Sync api_automation_hub_content_v3_sync_sync Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"POST\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/content/{path}/v3/sync/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/content/{path}/v3/sync/', { method: 'POST', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.post('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/content/{path}/v3/sync/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.post 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/content/{path}/v3/sync/', params: { }, headers: headers p JSON.parse(result) POST /api/automation-hub/content/{path}/v3/sync/ Trigger an asynchronous sync task Parameters Name In Type Required Description path path string true none Example responses 202 Response { \"task\": \"http://example.com\" } Responses Status Meaning Description Schema 202 Accepted none AsyncOperationResponse This operation does not require authentication Api: Content V3 Sync Config api_automation_hub_content_v3_sync_config_read Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/content/{path}/v3/sync/config/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/content/{path}/v3/sync/config/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/content/{path}/v3/sync/config/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/content/{path}/v3/sync/config/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/content/{path}/v3/sync/config/ Parameters Name In Type Required Description path path string true none fields query string false A list of fields to include in the response. exclude_fields query string false A list of fields to exclude from the response. Example responses 200 Response { \"pk\": \"4af43191-2f37-4a16-8471-4e8e40c314af\", \"name\": \"string\", \"url\": \"string\", \"auth_url\": \"string\", \"policy\": \"immediate\", \"requirements_file\": \"string\", \"created_at\": \"2019-08-24T14:15:22Z\", \"updated_at\": \"2019-08-24T14:15:22Z\", \"username\": \"string\", \"tls_validation\": true, \"client_cert\": \"string\", \"ca_cert\": \"string\", \"last_sync_task\": \"string\", \"repositories\": [ { \"name\": \"string\", \"description\": \"string\", \"next_version\": 2147483647, \"distributions\": [ { \"name\": \"string\", \"base_path\": \"string\", \"content_guard\": \"75e6b91e-c196-4627-9383-ce2e1e08d705\", \"created_at\": \"2019-08-24T14:15:22Z\", \"updated_at\": \"2019-08-24T14:15:22Z\" } ], \"created_at\": \"2019-08-24T14:15:22Z\", \"updated_at\": \"2019-08-24T14:15:22Z\", \"last_sync_task\": \"string\" } ], \"pulp_href\": \"http://example.com\", \"download_concurrency\": 1, \"proxy_url\": \"string\", \"proxy_username\": \"string\", \"write_only_fields\": [ null ], \"rate_limit\": 0, \"signed_only\": false } Responses Status Meaning Description Schema 200 OK none ansible.CollectionRemoteResponse This operation does not require authentication api_automation_hub_content_v3_sync_config_update Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Content-Type\": []string{\"application/json\"}, \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"PUT\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/content/{path}/v3/sync/config/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const inputBody = '{ \"url\": \"string\", \"auth_url\": \"string\", \"token\": \"string\", \"policy\": \"immediate\", \"requirements_file\": \"string\", \"created_at\": \"2019-08-24T14:15:22Z\", \"updated_at\": \"2019-08-24T14:15:22Z\", \"username\": \"string\", \"password\": \"string\", \"tls_validation\": true, \"client_key\": \"string\", \"client_cert\": \"string\", \"ca_cert\": \"string\", \"download_concurrency\": 1, \"proxy_url\": \"string\", \"proxy_username\": \"string\", \"proxy_password\": \"string\", \"rate_limit\": 0, \"signed_only\": false }'; const headers = { 'Content-Type':'application/json', 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/content/{path}/v3/sync/config/', { method: 'PUT', body: inputBody, headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Content-Type': 'application/json', 'Accept': 'application/json' } r = requests.put('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/content/{path}/v3/sync/config/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Content-Type' => 'application/json', 'Accept' => 'application/json' } result = RestClient.put 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/content/{path}/v3/sync/config/', params: { }, headers: headers p JSON.parse(result) PUT /api/automation-hub/content/{path}/v3/sync/config/ Body parameter { \"url\": \"string\", \"auth_url\": \"string\", \"token\": \"string\", \"policy\": \"immediate\", \"requirements_file\": \"string\", \"created_at\": \"2019-08-24T14:15:22Z\", \"updated_at\": \"2019-08-24T14:15:22Z\", \"username\": \"string\", \"password\": \"string\", \"tls_validation\": true, \"client_key\": \"string\", \"client_cert\": \"string\", \"ca_cert\": \"string\", \"download_concurrency\": 1, \"proxy_url\": \"string\", \"proxy_username\": \"string\", \"proxy_password\": \"string\", \"rate_limit\": 0, \"signed_only\": false } url: string auth_url: string token: string policy: immediate requirements_file: string created_at: 2019-08-24T14:15:22Z updated_at: 2019-08-24T14:15:22Z username: string password: string tls_validation: true client_key: string client_cert: string ca_cert: string download_concurrency: 1 proxy_url: string proxy_username: string proxy_password: string rate_limit: 0 signed_only: false Parameters Name In Type Required Description path path string true none body body ansible.CollectionRemote true none Example responses 200 Response { \"pk\": \"4af43191-2f37-4a16-8471-4e8e40c314af\", \"name\": \"string\", \"url\": \"string\", \"auth_url\": \"string\", \"policy\": \"immediate\", \"requirements_file\": \"string\", \"created_at\": \"2019-08-24T14:15:22Z\", \"updated_at\": \"2019-08-24T14:15:22Z\", \"username\": \"string\", \"tls_validation\": true, \"client_cert\": \"string\", \"ca_cert\": \"string\", \"last_sync_task\": \"string\", \"repositories\": [ { \"name\": \"string\", \"description\": \"string\", \"next_version\": 2147483647, \"distributions\": [ { \"name\": \"string\", \"base_path\": \"string\", \"content_guard\": \"75e6b91e-c196-4627-9383-ce2e1e08d705\", \"created_at\": \"2019-08-24T14:15:22Z\", \"updated_at\": \"2019-08-24T14:15:22Z\" } ], \"created_at\": \"2019-08-24T14:15:22Z\", \"updated_at\": \"2019-08-24T14:15:22Z\", \"last_sync_task\": \"string\" } ], \"pulp_href\": \"http://example.com\", \"download_concurrency\": 1, \"proxy_url\": \"string\", \"proxy_username\": \"string\", \"write_only_fields\": [ null ], \"rate_limit\": 0, \"signed_only\": false } Responses Status Meaning Description Schema 200 OK none ansible.CollectionRemoteResponse This operation does not require authentication Tasks api_automation-hub_content {path}_v3_tasks_tasks_list Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/content/{path}/v3/tasks/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/content/{path}/v3/tasks/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/content/{path}/v3/tasks/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/content/{path}/v3/tasks/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/content/{path}/v3/tasks/ List tasks A customized named ModelViewSet that knows how to register itself with the Pulp API router. This viewset is discoverable by its name. \"Normal\" Django Models and Master/Detail models are supported by the register_with method. Attributes: lookup_field (str): The name of the field by which an object should be looked up, in addition to any parent lookups if this ViewSet is nested. Defaults to 'pk' endpoint_name (str): The name of the final path segment that should identify the ViewSet's collection endpoint. nest_prefix (str): Optional prefix under which this ViewSet should be nested. This must correspond to the \"parent_prefix\" of a router with rest_framework_nested.NestedMixin. None indicates this ViewSet should not be nested. parent_lookup_kwargs (dict): Optional mapping of key names that would appear in self.kwargs to django model filter expressions that can be used with the corresponding value from self.kwargs, used only by a nested ViewSet to filter based on the parent object's identity. schema (DefaultSchema): The schema class to use by default in a viewset. Parameters Name In Type Required Description child_tasks query string(uuid) false Foreign Key referenced by HREF created_resources query string(uuid) false none finished_at query string(date-time) false ISO 8601 formatted dates are supported finished_at__gt query string(date-time) false Filter results where finished_at is greater than value finished_at__gte query string(date-time) false Filter results where finished_at is greater than or equal to value finished_at__lt query string(date-time) false Filter results where finished_at is less than value finished_at__lte query string(date-time) false Filter results where finished_at is less than or equal to value finished_at__range query array[string] false Filter results where finished_at is between two comma separated values limit query integer false Number of results to return per page. logging_cid query string false none logging_cid__contains query string false Filter results where logging_cid contains value name query string false none name__contains query string false Filter results where name contains value offset query integer false The initial index from which to return the results. ordering query array[string] false Ordering parent_task query string(uuid) false Foreign Key referenced by HREF path path string true none reserved_resources_record query array[string] false none started_at query string(date-time) false ISO 8601 formatted dates are supported started_at__gt query string(date-time) false Filter results where started_at is greater than value started_at__gte query string(date-time) false Filter results where started_at is greater than or equal to value started_at__lt query string(date-time) false Filter results where started_at is less than value started_at__lte query string(date-time) false Filter results where started_at is less than or equal to value started_at__range query array[string] false Filter results where started_at is between two comma separated values state query string false none state__in query array[string] false Filter results where state is in a comma-separated list of values task_group query string(uuid) false Foreign Key referenced by HREF worker query string(uuid) false Foreign Key referenced by HREF worker__in query array[string] false Filter results where worker is in a comma-separated list of values fields query string false A list of fields to include in the response. exclude_fields query string false A list of fields to exclude from the response. Enumerated Values Parameter Value ordering -args ordering -child_tasks ordering -created_resources ordering -error ordering -export ordering -finished_at ordering -group_roles ordering -import ordering -kwargs ordering -logging_cid ordering -name ordering -parent_task ordering -pk ordering -progress_reports ordering -pulp_created ordering -pulp_id ordering -pulp_labels ordering -pulp_last_updated ordering -reserved_resources_record ordering -started_at ordering -state ordering -task_group ordering -taskschedule ordering -user_roles ordering -worker ordering args ordering child_tasks ordering created_resources ordering error ordering export ordering finished_at ordering group_roles ordering import ordering kwargs ordering logging_cid ordering name ordering parent_task ordering pk ordering progress_reports ordering pulp_created ordering pulp_id ordering pulp_labels ordering pulp_last_updated ordering reserved_resources_record ordering started_at ordering state ordering task_group ordering taskschedule ordering user_roles ordering worker state canceled state canceling state completed state failed state running state skipped state waiting Example responses 200 Response { \"meta\": { \"count\": 123 }, \"links\": { \"first\": \"string\", \"previous\": \"string\", \"next\": \"string\", \"last\": \"string\" }, \"data\": [ { \"pulp_id\": \"f3ad2d41-3c12-4e29-ba19-4d3927e49b47\", \"name\": \"string\", \"state\": \"string\", \"started_at\": \"2019-08-24T14:15:22Z\", \"finished_at\": \"2019-08-24T14:15:22Z\", \"href\": \"string\" } ] } Responses Status Meaning Description Schema 200 OK none PaginatedTaskSummaryResponseList This operation does not require authentication api_automation-hub_content {path} v3_tasks {pulp_id}_tasks_read Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/content/{path}/v3/tasks/{pulp_id}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/content/{path}/v3/tasks/{pulp_id}/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/content/{path}/v3/tasks/{pulp_id}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/content/{path}/v3/tasks/{pulp_id}/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/content/{path}/v3/tasks/{pulp_id}/ Inspect a task A customized named ModelViewSet that knows how to register itself with the Pulp API router. This viewset is discoverable by its name. \"Normal\" Django Models and Master/Detail models are supported by the register_with method. Attributes: lookup_field (str): The name of the field by which an object should be looked up, in addition to any parent lookups if this ViewSet is nested. Defaults to 'pk' endpoint_name (str): The name of the final path segment that should identify the ViewSet's collection endpoint. nest_prefix (str): Optional prefix under which this ViewSet should be nested. This must correspond to the \"parent_prefix\" of a router with rest_framework_nested.NestedMixin. None indicates this ViewSet should not be nested. parent_lookup_kwargs (dict): Optional mapping of key names that would appear in self.kwargs to django model filter expressions that can be used with the corresponding value from self.kwargs, used only by a nested ViewSet to filter based on the parent object's identity. schema (DefaultSchema): The schema class to use by default in a viewset. Parameters Name In Type Required Description path path string true none pulp_id path string(uuid) true A UUID string identifying this task. fields query string false A list of fields to include in the response. exclude_fields query string false A list of fields to exclude from the response. Example responses 200 Response { \"pulp_id\": \"f3ad2d41-3c12-4e29-ba19-4d3927e49b47\", \"name\": \"string\", \"created_at\": \"2019-08-24T14:15:22Z\", \"updated_at\": \"2019-08-24T14:15:22Z\", \"finished_at\": \"2019-08-24T14:15:22Z\", \"started_at\": \"2019-08-24T14:15:22Z\", \"state\": \"string\", \"error\": {}, \"worker\": {}, \"parent_task\": \"a47d3c72-d323-4ab8-b986-8424d3a63720\", \"child_tasks\": [ \"497f6eca-6276-4993-bfeb-53cbbbba6f08\" ], \"progress_reports\": [ { \"message\": \"string\", \"code\": \"string\", \"state\": \"string\", \"total\": 0, \"done\": 0, \"suffix\": \"string\" } ] } Responses Status Meaning Description Schema 200 OK none TaskResponse This operation does not require authentication _api_automation-hub_pulp_api_v3_tasks_tasks_list Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/tasks/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/tasks/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/tasks/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/tasks/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/pulp/api/v3/tasks/ List tasks A customized named ModelViewSet that knows how to register itself with the Pulp API router. This viewset is discoverable by its name. \"Normal\" Django Models and Master/Detail models are supported by the register_with method. Attributes: lookup_field (str): The name of the field by which an object should be looked up, in addition to any parent lookups if this ViewSet is nested. Defaults to 'pk' endpoint_name (str): The name of the final path segment that should identify the ViewSet's collection endpoint. nest_prefix (str): Optional prefix under which this ViewSet should be nested. This must correspond to the \"parent_prefix\" of a router with rest_framework_nested.NestedMixin. None indicates this ViewSet should not be nested. parent_lookup_kwargs (dict): Optional mapping of key names that would appear in self.kwargs to django model filter expressions that can be used with the corresponding value from self.kwargs, used only by a nested ViewSet to filter based on the parent object's identity. schema (DefaultSchema): The schema class to use by default in a viewset. Parameters Name In Type Required Description child_tasks query string(uuid) false Foreign Key referenced by HREF created_resources query string(uuid) false none finished_at query string(date-time) false ISO 8601 formatted dates are supported finished_at__gt query string(date-time) false Filter results where finished_at is greater than value finished_at__gte query string(date-time) false Filter results where finished_at is greater than or equal to value finished_at__lt query string(date-time) false Filter results where finished_at is less than value finished_at__lte query string(date-time) false Filter results where finished_at is less than or equal to value finished_at__range query array[string] false Filter results where finished_at is between two comma separated values limit query integer false Number of results to return per page. logging_cid query string false none logging_cid__contains query string false Filter results where logging_cid contains value name query string false none name__contains query string false Filter results where name contains value offset query integer false The initial index from which to return the results. ordering query array[string] false Ordering parent_task query string(uuid) false Foreign Key referenced by HREF reserved_resources_record query array[string] false none started_at query string(date-time) false ISO 8601 formatted dates are supported started_at__gt query string(date-time) false Filter results where started_at is greater than value started_at__gte query string(date-time) false Filter results where started_at is greater than or equal to value started_at__lt query string(date-time) false Filter results where started_at is less than value started_at__lte query string(date-time) false Filter results where started_at is less than or equal to value started_at__range query array[string] false Filter results where started_at is between two comma separated values state query string false none state__in query array[string] false Filter results where state is in a comma-separated list of values task_group query string(uuid) false Foreign Key referenced by HREF worker query string(uuid) false Foreign Key referenced by HREF worker__in query array[string] false Filter results where worker is in a comma-separated list of values fields query string false A list of fields to include in the response. exclude_fields query string false A list of fields to exclude from the response. Enumerated Values Parameter Value ordering -args ordering -child_tasks ordering -created_resources ordering -error ordering -export ordering -finished_at ordering -group_roles ordering -import ordering -kwargs ordering -logging_cid ordering -name ordering -parent_task ordering -pk ordering -progress_reports ordering -pulp_created ordering -pulp_id ordering -pulp_labels ordering -pulp_last_updated ordering -reserved_resources_record ordering -started_at ordering -state ordering -task_group ordering -taskschedule ordering -user_roles ordering -worker ordering args ordering child_tasks ordering created_resources ordering error ordering export ordering finished_at ordering group_roles ordering import ordering kwargs ordering logging_cid ordering name ordering parent_task ordering pk ordering progress_reports ordering pulp_created ordering pulp_id ordering pulp_labels ordering pulp_last_updated ordering reserved_resources_record ordering started_at ordering state ordering task_group ordering taskschedule ordering user_roles ordering worker state canceled state canceling state completed state failed state running state skipped state waiting Example responses 200 Response { \"count\": 123, \"next\": \"http://api.example.org/accounts/?offset=400&limit=100\", \"previous\": \"http://api.example.org/accounts/?offset=200&limit=100\", \"results\": [ { \"pulp_id\": \"f3ad2d41-3c12-4e29-ba19-4d3927e49b47\", \"name\": \"string\", \"created_at\": \"2019-08-24T14:15:22Z\", \"updated_at\": \"2019-08-24T14:15:22Z\", \"finished_at\": \"2019-08-24T14:15:22Z\", \"started_at\": \"2019-08-24T14:15:22Z\", \"state\": \"string\", \"error\": {}, \"worker\": {}, \"parent_task\": \"a47d3c72-d323-4ab8-b986-8424d3a63720\", \"child_tasks\": [ \"497f6eca-6276-4993-bfeb-53cbbbba6f08\" ], \"progress_reports\": [ { \"message\": \"string\", \"code\": \"string\", \"state\": \"string\", \"total\": 0, \"done\": 0, \"suffix\": \"string\" } ] } ] } Responses Status Meaning Description Schema 200 OK none PaginatedTaskResponseList This operation does not require authentication api_automation-hub_pulp_api_v3_tasks {pulp_id}_tasks_read Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/tasks/{pulp_id}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/tasks/{pulp_id}/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/tasks/{pulp_id}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/tasks/{pulp_id}/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/pulp/api/v3/tasks/{pulp_id}/ Inspect a task A customized named ModelViewSet that knows how to register itself with the Pulp API router. This viewset is discoverable by its name. \"Normal\" Django Models and Master/Detail models are supported by the register_with method. Attributes: lookup_field (str): The name of the field by which an object should be looked up, in addition to any parent lookups if this ViewSet is nested. Defaults to 'pk' endpoint_name (str): The name of the final path segment that should identify the ViewSet's collection endpoint. nest_prefix (str): Optional prefix under which this ViewSet should be nested. This must correspond to the \"parent_prefix\" of a router with rest_framework_nested.NestedMixin. None indicates this ViewSet should not be nested. parent_lookup_kwargs (dict): Optional mapping of key names that would appear in self.kwargs to django model filter expressions that can be used with the corresponding value from self.kwargs, used only by a nested ViewSet to filter based on the parent object's identity. schema (DefaultSchema): The schema class to use by default in a viewset. Parameters Name In Type Required Description pulp_id path string(uuid) true A UUID string identifying this task. fields query string false A list of fields to include in the response. exclude_fields query string false A list of fields to exclude from the response. Example responses 200 Response { \"pulp_id\": \"f3ad2d41-3c12-4e29-ba19-4d3927e49b47\", \"name\": \"string\", \"created_at\": \"2019-08-24T14:15:22Z\", \"updated_at\": \"2019-08-24T14:15:22Z\", \"finished_at\": \"2019-08-24T14:15:22Z\", \"started_at\": \"2019-08-24T14:15:22Z\", \"state\": \"string\", \"error\": {}, \"worker\": {}, \"parent_task\": \"a47d3c72-d323-4ab8-b986-8424d3a63720\", \"child_tasks\": [ \"497f6eca-6276-4993-bfeb-53cbbbba6f08\" ], \"progress_reports\": [ { \"message\": \"string\", \"code\": \"string\", \"state\": \"string\", \"total\": 0, \"done\": 0, \"suffix\": \"string\" } ] } Responses Status Meaning Description Schema 200 OK none TaskResponse This operation does not require authentication tasks_cancel Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Content-Type\": []string{\"application/json\"}, \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"PATCH\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/tasks/{pulp_id}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const inputBody = '{ \"state\": \"string\" }'; const headers = { 'Content-Type':'application/json', 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/tasks/{pulp_id}/', { method: 'PATCH', body: inputBody, headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Content-Type': 'application/json', 'Accept': 'application/json' } r = requests.patch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/tasks/{pulp_id}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Content-Type' => 'application/json', 'Accept' => 'application/json' } result = RestClient.patch 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/tasks/{pulp_id}/', params: { }, headers: headers p JSON.parse(result) PATCH /api/automation-hub/pulp/api/v3/tasks/{pulp_id}/ Cancel a task This operation cancels a task. Body parameter { \"state\": \"string\" } state: string Parameters Name In Type Required Description pulp_id path string(uuid) true A UUID string identifying this task. body body PatchedTaskCancel true none Example responses 200 Response { \"pulp_id\": \"f3ad2d41-3c12-4e29-ba19-4d3927e49b47\", \"name\": \"string\", \"created_at\": \"2019-08-24T14:15:22Z\", \"updated_at\": \"2019-08-24T14:15:22Z\", \"finished_at\": \"2019-08-24T14:15:22Z\", \"started_at\": \"2019-08-24T14:15:22Z\", \"state\": \"string\", \"error\": {}, \"worker\": {}, \"parent_task\": \"a47d3c72-d323-4ab8-b986-8424d3a63720\", \"child_tasks\": [ \"497f6eca-6276-4993-bfeb-53cbbbba6f08\" ], \"progress_reports\": [ { \"message\": \"string\", \"code\": \"string\", \"state\": \"string\", \"total\": 0, \"done\": 0, \"suffix\": \"string\" } ] } Responses Status Meaning Description Schema 200 OK none TaskResponse 409 Conflict none TaskResponse This operation does not require authentication tasks_delete Code samples package main import ( \"bytes\" \"net/http\" ) func main() { data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"DELETE\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/tasks/{pulp_id}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/tasks/{pulp_id}/', { method: 'DELETE' }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests r = requests.delete('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/tasks/{pulp_id}/') print(r.json()) require 'rest-client' require 'json' result = RestClient.delete 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/tasks/{pulp_id}/', params: { } p JSON.parse(result) DELETE /api/automation-hub/pulp/api/v3/tasks/{pulp_id}/ Delete a task A customized named ModelViewSet that knows how to register itself with the Pulp API router. This viewset is discoverable by its name. \"Normal\" Django Models and Master/Detail models are supported by the register_with method. Attributes: lookup_field (str): The name of the field by which an object should be looked up, in addition to any parent lookups if this ViewSet is nested. Defaults to 'pk' endpoint_name (str): The name of the final path segment that should identify the ViewSet's collection endpoint. nest_prefix (str): Optional prefix under which this ViewSet should be nested. This must correspond to the \"parent_prefix\" of a router with rest_framework_nested.NestedMixin. None indicates this ViewSet should not be nested. parent_lookup_kwargs (dict): Optional mapping of key names that would appear in self.kwargs to django model filter expressions that can be used with the corresponding value from self.kwargs, used only by a nested ViewSet to filter based on the parent object's identity. schema (DefaultSchema): The schema class to use by default in a viewset. Parameters Name In Type Required Description pulp_id path string(uuid) true A UUID string identifying this task. Responses Status Meaning Description Schema 204 No Content No response body None This operation does not require authentication tasks_add_role Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Content-Type\": []string{\"application/json\"}, \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"POST\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/tasks/{pulp_id}/add_role/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const inputBody = '{ \"users\": [], \"groups\": [], \"role\": \"string\" }'; const headers = { 'Content-Type':'application/json', 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/tasks/{pulp_id}/add_role/', { method: 'POST', body: inputBody, headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Content-Type': 'application/json', 'Accept': 'application/json' } r = requests.post('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/tasks/{pulp_id}/add_role/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Content-Type' => 'application/json', 'Accept' => 'application/json' } result = RestClient.post 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/tasks/{pulp_id}/add_role/', params: { }, headers: headers p JSON.parse(result) POST /api/automation-hub/pulp/api/v3/tasks/{pulp_id}/add_role/ Add a role for this object to users/groups. Body parameter { \"users\": [], \"groups\": [], \"role\": \"string\" } users: [] groups: [] role: string Parameters Name In Type Required Description pulp_id path string(uuid) true A UUID string identifying this task. body body NestedRole true none Example responses 201 Response { \"users\": [], \"groups\": [], \"role\": \"string\" } Responses Status Meaning Description Schema 201 Created none NestedRoleResponse This operation does not require authentication tasks_list_roles Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/tasks/{pulp_id}/list_roles/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/tasks/{pulp_id}/list_roles/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/tasks/{pulp_id}/list_roles/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/tasks/{pulp_id}/list_roles/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/pulp/api/v3/tasks/{pulp_id}/list_roles/ List roles assigned to this object. Parameters Name In Type Required Description pulp_id path string(uuid) true A UUID string identifying this task. fields query string false A list of fields to include in the response. exclude_fields query string false A list of fields to exclude from the response. Example responses 200 Response { \"roles\": [ { \"users\": [], \"groups\": [], \"role\": \"string\" } ] } Responses Status Meaning Description Schema 200 OK none ObjectRolesResponse This operation does not require authentication tasks_my_permissions Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/tasks/{pulp_id}/my_permissions/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/tasks/{pulp_id}/my_permissions/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/tasks/{pulp_id}/my_permissions/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/tasks/{pulp_id}/my_permissions/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/pulp/api/v3/tasks/{pulp_id}/my_permissions/ List permissions available to the current user on this object. Parameters Name In Type Required Description pulp_id path string(uuid) true A UUID string identifying this task. fields query string false A list of fields to include in the response. exclude_fields query string false A list of fields to exclude from the response. Example responses 200 Response { \"permissions\": [ \"string\" ] } Responses Status Meaning Description Schema 200 OK none MyPermissionsResponse This operation does not require authentication tasks_remove_role Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Content-Type\": []string{\"application/json\"}, \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"POST\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/tasks/{pulp_id}/remove_role/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const inputBody = '{ \"users\": [], \"groups\": [], \"role\": \"string\" }'; const headers = { 'Content-Type':'application/json', 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/tasks/{pulp_id}/remove_role/', { method: 'POST', body: inputBody, headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Content-Type': 'application/json', 'Accept': 'application/json' } r = requests.post('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/tasks/{pulp_id}/remove_role/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Content-Type' => 'application/json', 'Accept' => 'application/json' } result = RestClient.post 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/tasks/{pulp_id}/remove_role/', params: { }, headers: headers p JSON.parse(result) POST /api/automation-hub/pulp/api/v3/tasks/{pulp_id}/remove_role/ Remove a role for this object from users/groups. Body parameter { \"users\": [], \"groups\": [], \"role\": \"string\" } users: [] groups: [] role: string Parameters Name In Type Required Description pulp_id path string(uuid) true A UUID string identifying this task. body body NestedRole true none Example responses 201 Response { \"users\": [], \"groups\": [], \"role\": \"string\" } Responses Status Meaning Description Schema 201 Created none NestedRoleResponse This operation does not require authentication tasks_purge Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Content-Type\": []string{\"application/json\"}, \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"POST\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/tasks/purge/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const inputBody = '{ \"finished_before\": \"2022-10-16\", \"states\": [ \"completed\" ] }'; const headers = { 'Content-Type':'application/json', 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/tasks/purge/', { method: 'POST', body: inputBody, headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Content-Type': 'application/json', 'Accept': 'application/json' } r = requests.post('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/tasks/purge/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Content-Type' => 'application/json', 'Accept' => 'application/json' } result = RestClient.post 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/tasks/purge/', params: { }, headers: headers p JSON.parse(result) POST /api/automation-hub/pulp/api/v3/tasks/purge/ Purge Completed Tasks Trigger an asynchronous task that deletes completed tasks that finished prior to a specified timestamp (tech-preview, may change in the future). Body parameter { \"finished_before\": \"2022-10-16\", \"states\": [ \"completed\" ] } finished_before: 2022-10-16 states: - completed Parameters Name In Type Required Description body body Purge true none Example responses 202 Response { \"task\": \"http://example.com\" } Responses Status Meaning Description Schema 202 Accepted none AsyncOperationResponse This operation does not require authentication _api_automation-hub_v3_tasks_tasks_list Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/tasks/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/tasks/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/tasks/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/tasks/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/v3/tasks/ List tasks A customized named ModelViewSet that knows how to register itself with the Pulp API router. This viewset is discoverable by its name. \"Normal\" Django Models and Master/Detail models are supported by the register_with method. Attributes: lookup_field (str): The name of the field by which an object should be looked up, in addition to any parent lookups if this ViewSet is nested. Defaults to 'pk' endpoint_name (str): The name of the final path segment that should identify the ViewSet's collection endpoint. nest_prefix (str): Optional prefix under which this ViewSet should be nested. This must correspond to the \"parent_prefix\" of a router with rest_framework_nested.NestedMixin. None indicates this ViewSet should not be nested. parent_lookup_kwargs (dict): Optional mapping of key names that would appear in self.kwargs to django model filter expressions that can be used with the corresponding value from self.kwargs, used only by a nested ViewSet to filter based on the parent object's identity. schema (DefaultSchema): The schema class to use by default in a viewset. Parameters Name In Type Required Description child_tasks query string(uuid) false Foreign Key referenced by HREF created_resources query string(uuid) false none finished_at query string(date-time) false ISO 8601 formatted dates are supported finished_at__gt query string(date-time) false Filter results where finished_at is greater than value finished_at__gte query string(date-time) false Filter results where finished_at is greater than or equal to value finished_at__lt query string(date-time) false Filter results where finished_at is less than value finished_at__lte query string(date-time) false Filter results where finished_at is less than or equal to value finished_at__range query array[string] false Filter results where finished_at is between two comma separated values limit query integer false Number of results to return per page. logging_cid query string false none logging_cid__contains query string false Filter results where logging_cid contains value name query string false none name__contains query string false Filter results where name contains value offset query integer false The initial index from which to return the results. ordering query array[string] false Ordering parent_task query string(uuid) false Foreign Key referenced by HREF reserved_resources_record query array[string] false none started_at query string(date-time) false ISO 8601 formatted dates are supported started_at__gt query string(date-time) false Filter results where started_at is greater than value started_at__gte query string(date-time) false Filter results where started_at is greater than or equal to value started_at__lt query string(date-time) false Filter results where started_at is less than value started_at__lte query string(date-time) false Filter results where started_at is less than or equal to value started_at__range query array[string] false Filter results where started_at is between two comma separated values state query string false none state__in query array[string] false Filter results where state is in a comma-separated list of values task_group query string(uuid) false Foreign Key referenced by HREF worker query string(uuid) false Foreign Key referenced by HREF worker__in query array[string] false Filter results where worker is in a comma-separated list of values fields query string false A list of fields to include in the response. exclude_fields query string false A list of fields to exclude from the response. Enumerated Values Parameter Value ordering -args ordering -child_tasks ordering -created_resources ordering -error ordering -export ordering -finished_at ordering -group_roles ordering -import ordering -kwargs ordering -logging_cid ordering -name ordering -parent_task ordering -pk ordering -progress_reports ordering -pulp_created ordering -pulp_id ordering -pulp_labels ordering -pulp_last_updated ordering -reserved_resources_record ordering -started_at ordering -state ordering -task_group ordering -taskschedule ordering -user_roles ordering -worker ordering args ordering child_tasks ordering created_resources ordering error ordering export ordering finished_at ordering group_roles ordering import ordering kwargs ordering logging_cid ordering name ordering parent_task ordering pk ordering progress_reports ordering pulp_created ordering pulp_id ordering pulp_labels ordering pulp_last_updated ordering reserved_resources_record ordering started_at ordering state ordering task_group ordering taskschedule ordering user_roles ordering worker state canceled state canceling state completed state failed state running state skipped state waiting Example responses 200 Response { \"meta\": { \"count\": 123 }, \"links\": { \"first\": \"string\", \"previous\": \"string\", \"next\": \"string\", \"last\": \"string\" }, \"data\": [ { \"pulp_id\": \"f3ad2d41-3c12-4e29-ba19-4d3927e49b47\", \"name\": \"string\", \"state\": \"string\", \"started_at\": \"2019-08-24T14:15:22Z\", \"finished_at\": \"2019-08-24T14:15:22Z\", \"href\": \"string\" } ] } Responses Status Meaning Description Schema 200 OK none PaginatedTaskSummaryResponseList This operation does not require authentication api_automation-hub_v3_tasks {pulp_id}_tasks_read Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/tasks/{pulp_id}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/tasks/{pulp_id}/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/tasks/{pulp_id}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/tasks/{pulp_id}/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/v3/tasks/{pulp_id}/ Inspect a task A customized named ModelViewSet that knows how to register itself with the Pulp API router. This viewset is discoverable by its name. \"Normal\" Django Models and Master/Detail models are supported by the register_with method. Attributes: lookup_field (str): The name of the field by which an object should be looked up, in addition to any parent lookups if this ViewSet is nested. Defaults to 'pk' endpoint_name (str): The name of the final path segment that should identify the ViewSet's collection endpoint. nest_prefix (str): Optional prefix under which this ViewSet should be nested. This must correspond to the \"parent_prefix\" of a router with rest_framework_nested.NestedMixin. None indicates this ViewSet should not be nested. parent_lookup_kwargs (dict): Optional mapping of key names that would appear in self.kwargs to django model filter expressions that can be used with the corresponding value from self.kwargs, used only by a nested ViewSet to filter based on the parent object's identity. schema (DefaultSchema): The schema class to use by default in a viewset. Parameters Name In Type Required Description pulp_id path string(uuid) true A UUID string identifying this task. fields query string false A list of fields to include in the response. exclude_fields query string false A list of fields to exclude from the response. Example responses 200 Response { \"pulp_id\": \"f3ad2d41-3c12-4e29-ba19-4d3927e49b47\", \"name\": \"string\", \"created_at\": \"2019-08-24T14:15:22Z\", \"updated_at\": \"2019-08-24T14:15:22Z\", \"finished_at\": \"2019-08-24T14:15:22Z\", \"started_at\": \"2019-08-24T14:15:22Z\", \"state\": \"string\", \"error\": {}, \"worker\": {}, \"parent_task\": \"a47d3c72-d323-4ab8-b986-8424d3a63720\", \"child_tasks\": [ \"497f6eca-6276-4993-bfeb-53cbbbba6f08\" ], \"progress_reports\": [ { \"message\": \"string\", \"code\": \"string\", \"state\": \"string\", \"total\": 0, \"done\": 0, \"suffix\": \"string\" } ] } Responses Status Meaning Description Schema 200 OK none TaskResponse This operation does not require authentication Access_Policies access_policies_list Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/access_policies/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/access_policies/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/access_policies/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/access_policies/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/pulp/api/v3/access_policies/ List access policys ViewSet for AccessPolicy. NOTE: This API endpoint is in \"tech preview\" and subject to change Parameters Name In Type Required Description customized query boolean false none limit query integer false Number of results to return per page. offset query integer false The initial index from which to return the results. ordering query array[string] false Ordering viewset_name query string false Filter results where viewset_name matches value viewset_name__contains query string false Filter results where viewset_name contains value viewset_name__icontains query string false Filter results where viewset_name contains value viewset_name__in query array[string] false Filter results where viewset_name is in a comma-separated list of values viewset_name__startswith query string false Filter results where viewset_name starts with value fields query string false A list of fields to include in the response. exclude_fields query string false A list of fields to exclude from the response. Enumerated Values Parameter Value ordering -creation_hooks ordering -customized ordering -group_roles ordering -pk ordering -pulp_created ordering -pulp_id ordering -pulp_labels ordering -pulp_last_updated ordering -queryset_scoping ordering -statements ordering -user_roles ordering -viewset_name ordering creation_hooks ordering customized ordering group_roles ordering pk ordering pulp_created ordering pulp_id ordering pulp_labels ordering pulp_last_updated ordering queryset_scoping ordering statements ordering user_roles ordering viewset_name Example responses 200 Response { \"count\": 123, \"next\": \"http://api.example.org/accounts/?offset=400&limit=100\", \"previous\": \"http://api.example.org/accounts/?offset=200&limit=100\", \"results\": [ { \"pulp_href\": \"http://example.com\", \"pulp_created\": \"2019-08-24T14:15:22Z\", \"permissions_assignment\": [ {} ], \"creation_hooks\": [ {} ], \"statements\": [ {} ], \"viewset_name\": \"string\", \"customized\": true, \"queryset_scoping\": {} } ] } Responses Status Meaning Description Schema 200 OK none PaginatedAccessPolicyResponseList This operation does not require authentication access_policies_read Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/access_policies/{pulp_id}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/access_policies/{pulp_id}/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/access_policies/{pulp_id}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/access_policies/{pulp_id}/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/pulp/api/v3/access_policies/{pulp_id}/ Inspect an access policy ViewSet for AccessPolicy. NOTE: This API endpoint is in \"tech preview\" and subject to change Parameters Name In Type Required Description pulp_id path string(uuid) true A UUID string identifying this access policy. fields query string false A list of fields to include in the response. exclude_fields query string false A list of fields to exclude from the response. Example responses 200 Response { \"pulp_href\": \"http://example.com\", \"pulp_created\": \"2019-08-24T14:15:22Z\", \"permissions_assignment\": [ {} ], \"creation_hooks\": [ {} ], \"statements\": [ {} ], \"viewset_name\": \"string\", \"customized\": true, \"queryset_scoping\": {} } Responses Status Meaning Description Schema 200 OK none AccessPolicyResponse This operation does not require authentication access_policies_update Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Content-Type\": []string{\"application/json\"}, \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"PUT\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/access_policies/{pulp_id}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const inputBody = '{ \"permissions_assignment\": [ {} ], \"creation_hooks\": [ {} ], \"statements\": [ {} ], \"queryset_scoping\": {} }'; const headers = { 'Content-Type':'application/json', 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/access_policies/{pulp_id}/', { method: 'PUT', body: inputBody, headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Content-Type': 'application/json', 'Accept': 'application/json' } r = requests.put('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/access_policies/{pulp_id}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Content-Type' => 'application/json', 'Accept' => 'application/json' } result = RestClient.put 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/access_policies/{pulp_id}/', params: { }, headers: headers p JSON.parse(result) PUT /api/automation-hub/pulp/api/v3/access_policies/{pulp_id}/ Update an access policy ViewSet for AccessPolicy. NOTE: This API endpoint is in \"tech preview\" and subject to change Body parameter { \"permissions_assignment\": [ {} ], \"creation_hooks\": [ {} ], \"statements\": [ {} ], \"queryset_scoping\": {} } permissions_assignment: - {} creation_hooks: - {} statements: - {} queryset_scoping: {} Parameters Name In Type Required Description pulp_id path string(uuid) true A UUID string identifying this access policy. body body AccessPolicy true none Example responses 200 Response { \"pulp_href\": \"http://example.com\", \"pulp_created\": \"2019-08-24T14:15:22Z\", \"permissions_assignment\": [ {} ], \"creation_hooks\": [ {} ], \"statements\": [ {} ], \"viewset_name\": \"string\", \"customized\": true, \"queryset_scoping\": {} } Responses Status Meaning Description Schema 200 OK none AccessPolicyResponse This operation does not require authentication access_policies_partial_update Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Content-Type\": []string{\"application/json\"}, \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"PATCH\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/access_policies/{pulp_id}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const inputBody = '{ \"permissions_assignment\": [ {} ], \"creation_hooks\": [ {} ], \"statements\": [ {} ], \"queryset_scoping\": {} }'; const headers = { 'Content-Type':'application/json', 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/access_policies/{pulp_id}/', { method: 'PATCH', body: inputBody, headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Content-Type': 'application/json', 'Accept': 'application/json' } r = requests.patch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/access_policies/{pulp_id}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Content-Type' => 'application/json', 'Accept' => 'application/json' } result = RestClient.patch 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/access_policies/{pulp_id}/', params: { }, headers: headers p JSON.parse(result) PATCH /api/automation-hub/pulp/api/v3/access_policies/{pulp_id}/ Update an access policy ViewSet for AccessPolicy. NOTE: This API endpoint is in \"tech preview\" and subject to change Body parameter { \"permissions_assignment\": [ {} ], \"creation_hooks\": [ {} ], \"statements\": [ {} ], \"queryset_scoping\": {} } permissions_assignment: - {} creation_hooks: - {} statements: - {} queryset_scoping: {} Parameters Name In Type Required Description pulp_id path string(uuid) true A UUID string identifying this access policy. body body PatchedAccessPolicy true none Example responses 200 Response { \"pulp_href\": \"http://example.com\", \"pulp_created\": \"2019-08-24T14:15:22Z\", \"permissions_assignment\": [ {} ], \"creation_hooks\": [ {} ], \"statements\": [ {} ], \"viewset_name\": \"string\", \"customized\": true, \"queryset_scoping\": {} } Responses Status Meaning Description Schema 200 OK none AccessPolicyResponse This operation does not require authentication access_policies_reset Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"POST\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/access_policies/{pulp_id}/reset/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/access_policies/{pulp_id}/reset/', { method: 'POST', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.post('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/access_policies/{pulp_id}/reset/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.post 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/access_policies/{pulp_id}/reset/', params: { }, headers: headers p JSON.parse(result) POST /api/automation-hub/pulp/api/v3/access_policies/{pulp_id}/reset/ Reset the access policy to its uncustomized default value. Parameters Name In Type Required Description pulp_id path string(uuid) true A UUID string identifying this access policy. Example responses 200 Response { \"pulp_href\": \"http://example.com\", \"pulp_created\": \"2019-08-24T14:15:22Z\", \"permissions_assignment\": [ {} ], \"creation_hooks\": [ {} ], \"statements\": [ {} ], \"viewset_name\": \"string\", \"customized\": true, \"queryset_scoping\": {} } Responses Status Meaning Description Schema 200 OK none AccessPolicyResponse This operation does not require authentication Artifacts artifacts_list Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/artifacts/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/artifacts/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/artifacts/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/artifacts/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/pulp/api/v3/artifacts/ List artifacts A customized named ModelViewSet that knows how to register itself with the Pulp API router. This viewset is discoverable by its name. \"Normal\" Django Models and Master/Detail models are supported by the register_with method. Attributes: lookup_field (str): The name of the field by which an object should be looked up, in addition to any parent lookups if this ViewSet is nested. Defaults to 'pk' endpoint_name (str): The name of the final path segment that should identify the ViewSet's collection endpoint. nest_prefix (str): Optional prefix under which this ViewSet should be nested. This must correspond to the \"parent_prefix\" of a router with rest_framework_nested.NestedMixin. None indicates this ViewSet should not be nested. parent_lookup_kwargs (dict): Optional mapping of key names that would appear in self.kwargs to django model filter expressions that can be used with the corresponding value from self.kwargs, used only by a nested ViewSet to filter based on the parent object's identity. schema (DefaultSchema): The schema class to use by default in a viewset. Parameters Name In Type Required Description limit query integer false Number of results to return per page. md5 query string false Filter results where md5 matches value offset query integer false The initial index from which to return the results. ordering query array[string] false Ordering repository_version query string false Repository Version referenced by HREF sha1 query string false Filter results where sha1 matches value sha224 query string false Filter results where sha224 matches value sha256 query string false Filter results where sha256 matches value sha384 query string false Filter results where sha384 matches value sha512 query string false Filter results where sha512 matches value fields query string false A list of fields to include in the response. exclude_fields query string false A list of fields to exclude from the response. Enumerated Values Parameter Value ordering -content ordering -content_memberships ordering -file ordering -group_roles ordering -md5 ordering -pk ordering -pulp_created ordering -pulp_id ordering -pulp_labels ordering -pulp_last_updated ordering -sha1 ordering -sha224 ordering -sha256 ordering -sha384 ordering -sha512 ordering -size ordering -timestamp_of_interest ordering -uploads ordering -user_roles ordering content ordering content_memberships ordering file ordering group_roles ordering md5 ordering pk ordering pulp_created ordering pulp_id ordering pulp_labels ordering pulp_last_updated ordering sha1 ordering sha224 ordering sha256 ordering sha384 ordering sha512 ordering size ordering timestamp_of_interest ordering uploads ordering user_roles Example responses 200 Response { \"count\": 123, \"next\": \"http://api.example.org/accounts/?offset=400&limit=100\", \"previous\": \"http://api.example.org/accounts/?offset=200&limit=100\", \"results\": [ { \"pulp_href\": \"http://example.com\", \"pulp_created\": \"2019-08-24T14:15:22Z\", \"file\": \"string\", \"size\": 0, \"md5\": \"string\", \"sha1\": \"string\", \"sha224\": \"string\", \"sha256\": \"string\", \"sha384\": \"string\", \"sha512\": \"string\" } ] } Responses Status Meaning Description Schema 200 OK none PaginatedArtifactResponseList This operation does not require authentication artifacts_create Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Content-Type\": []string{\"multipart/form-data\"}, \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"POST\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/artifacts/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const inputBody = '{ \"file\": \"string\", \"size\": 0, \"md5\": \"string\", \"sha1\": \"string\", \"sha224\": \"string\", \"sha256\": \"string\", \"sha384\": \"string\", \"sha512\": \"string\" }'; const headers = { 'Content-Type':'multipart/form-data', 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/artifacts/', { method: 'POST', body: inputBody, headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Content-Type': 'multipart/form-data', 'Accept': 'application/json' } r = requests.post('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/artifacts/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Content-Type' => 'multipart/form-data', 'Accept' => 'application/json' } result = RestClient.post 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/artifacts/', params: { }, headers: headers p JSON.parse(result) POST /api/automation-hub/pulp/api/v3/artifacts/ Create an artifact A customized named ModelViewSet that knows how to register itself with the Pulp API router. This viewset is discoverable by its name. \"Normal\" Django Models and Master/Detail models are supported by the register_with method. Attributes: lookup_field (str): The name of the field by which an object should be looked up, in addition to any parent lookups if this ViewSet is nested. Defaults to 'pk' endpoint_name (str): The name of the final path segment that should identify the ViewSet's collection endpoint. nest_prefix (str): Optional prefix under which this ViewSet should be nested. This must correspond to the \"parent_prefix\" of a router with rest_framework_nested.NestedMixin. None indicates this ViewSet should not be nested. parent_lookup_kwargs (dict): Optional mapping of key names that would appear in self.kwargs to django model filter expressions that can be used with the corresponding value from self.kwargs, used only by a nested ViewSet to filter based on the parent object's identity. schema (DefaultSchema): The schema class to use by default in a viewset. Body parameter file: string size: 0 md5: string sha1: string sha224: string sha256: string sha384: string sha512: string Parameters Name In Type Required Description body body Artifact true none Example responses 201 Response { \"pulp_href\": \"http://example.com\", \"pulp_created\": \"2019-08-24T14:15:22Z\", \"file\": \"string\", \"size\": 0, \"md5\": \"string\", \"sha1\": \"string\", \"sha224\": \"string\", \"sha256\": \"string\", \"sha384\": \"string\", \"sha512\": \"string\" } Responses Status Meaning Description Schema 201 Created none ArtifactResponse This operation does not require authentication artifacts_read Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/artifacts/{pulp_id}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/artifacts/{pulp_id}/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/artifacts/{pulp_id}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/artifacts/{pulp_id}/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/pulp/api/v3/artifacts/{pulp_id}/ Inspect an artifact A customized named ModelViewSet that knows how to register itself with the Pulp API router. This viewset is discoverable by its name. \"Normal\" Django Models and Master/Detail models are supported by the register_with method. Attributes: lookup_field (str): The name of the field by which an object should be looked up, in addition to any parent lookups if this ViewSet is nested. Defaults to 'pk' endpoint_name (str): The name of the final path segment that should identify the ViewSet's collection endpoint. nest_prefix (str): Optional prefix under which this ViewSet should be nested. This must correspond to the \"parent_prefix\" of a router with rest_framework_nested.NestedMixin. None indicates this ViewSet should not be nested. parent_lookup_kwargs (dict): Optional mapping of key names that would appear in self.kwargs to django model filter expressions that can be used with the corresponding value from self.kwargs, used only by a nested ViewSet to filter based on the parent object's identity. schema (DefaultSchema): The schema class to use by default in a viewset. Parameters Name In Type Required Description pulp_id path string(uuid) true A UUID string identifying this artifact. fields query string false A list of fields to include in the response. exclude_fields query string false A list of fields to exclude from the response. Example responses 200 Response { \"pulp_href\": \"http://example.com\", \"pulp_created\": \"2019-08-24T14:15:22Z\", \"file\": \"string\", \"size\": 0, \"md5\": \"string\", \"sha1\": \"string\", \"sha224\": \"string\", \"sha256\": \"string\", \"sha384\": \"string\", \"sha512\": \"string\" } Responses Status Meaning Description Schema 200 OK none ArtifactResponse This operation does not require authentication artifacts_delete Code samples package main import ( \"bytes\" \"net/http\" ) func main() { data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"DELETE\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/artifacts/{pulp_id}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/artifacts/{pulp_id}/', { method: 'DELETE' }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests r = requests.delete('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/artifacts/{pulp_id}/') print(r.json()) require 'rest-client' require 'json' result = RestClient.delete 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/artifacts/{pulp_id}/', params: { } p JSON.parse(result) DELETE /api/automation-hub/pulp/api/v3/artifacts/{pulp_id}/ Delete an artifact Remove Artifact only if it is not associated with any Content. Parameters Name In Type Required Description pulp_id path string(uuid) true A UUID string identifying this artifact. Responses Status Meaning Description Schema 204 No Content No response body None This operation does not require authentication Content content_list Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/content/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/content/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/content/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/content/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/pulp/api/v3/content/ List content Endpoint to list all content. Parameters Name In Type Required Description limit query integer false Number of results to return per page. offset query integer false The initial index from which to return the results. ordering query array[string] false Ordering repository_version query string false Repository Version referenced by HREF repository_version_added query string false Repository Version referenced by HREF repository_version_removed query string false Repository Version referenced by HREF fields query string false A list of fields to include in the response. exclude_fields query string false A list of fields to exclude from the response. Enumerated Values Parameter Value ordering -pk ordering pk Example responses 200 Response { \"count\": 123, \"next\": \"http://api.example.org/accounts/?offset=400&limit=100\", \"previous\": \"http://api.example.org/accounts/?offset=200&limit=100\", \"results\": [ { \"pulp_href\": \"http://example.com\", \"pulp_created\": \"2019-08-24T14:15:22Z\", \"artifacts\": {} } ] } Responses Status Meaning Description Schema 200 OK none PaginatedMultipleArtifactContentResponseList This operation does not require authentication Content: Collection_Deprecations content_ansible_collection_deprecations_list Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/content/ansible/collection_deprecations/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/content/ansible/collection_deprecations/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/content/ansible/collection_deprecations/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/content/ansible/collection_deprecations/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/pulp/api/v3/content/ansible/collection_deprecations/ List ansible collection deprecateds ViewSet for AnsibleCollectionDeprecated. Parameters Name In Type Required Description limit query integer false Number of results to return per page. offset query integer false The initial index from which to return the results. ordering query array[string] false Ordering repository_version query string false Repository Version referenced by HREF repository_version_added query string false Repository Version referenced by HREF repository_version_removed query string false Repository Version referenced by HREF fields query string false A list of fields to include in the response. exclude_fields query string false A list of fields to exclude from the response. Enumerated Values Parameter Value ordering -pk ordering pk Example responses 200 Response { \"count\": 123, \"next\": \"http://api.example.org/accounts/?offset=400&limit=100\", \"previous\": \"http://api.example.org/accounts/?offset=200&limit=100\", \"results\": [ { \"name\": \"string\", \"namespace\": \"string\" } ] } Responses Status Meaning Description Schema 200 OK none Paginatedansible.CollectionResponseList This operation does not require authentication content_ansible_collection_deprecations_create Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Content-Type\": []string{\"application/json\"}, \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"POST\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/content/ansible/collection_deprecations/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const inputBody = '{ \"name\": \"string\", \"namespace\": \"string\" }'; const headers = { 'Content-Type':'application/json', 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/content/ansible/collection_deprecations/', { method: 'POST', body: inputBody, headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Content-Type': 'application/json', 'Accept': 'application/json' } r = requests.post('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/content/ansible/collection_deprecations/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Content-Type' => 'application/json', 'Accept' => 'application/json' } result = RestClient.post 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/content/ansible/collection_deprecations/', params: { }, headers: headers p JSON.parse(result) POST /api/automation-hub/pulp/api/v3/content/ansible/collection_deprecations/ Create an ansible collection deprecated ViewSet for AnsibleCollectionDeprecated. Body parameter { \"name\": \"string\", \"namespace\": \"string\" } name: string namespace: string Parameters Name In Type Required Description body body ansible.Collection true none Example responses 201 Response { \"name\": \"string\", \"namespace\": \"string\" } Responses Status Meaning Description Schema 201 Created none ansible.CollectionResponse This operation does not require authentication content_ansible_collection_deprecations_read Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/content/ansible/collection_deprecations/{pulp_id}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/content/ansible/collection_deprecations/{pulp_id}/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/content/ansible/collection_deprecations/{pulp_id}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/content/ansible/collection_deprecations/{pulp_id}/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/pulp/api/v3/content/ansible/collection_deprecations/{pulp_id}/ Inspect an ansible collection deprecated ViewSet for AnsibleCollectionDeprecated. Parameters Name In Type Required Description pulp_id path string(uuid) true A UUID string identifying this ansible collection deprecated. fields query string false A list of fields to include in the response. exclude_fields query string false A list of fields to exclude from the response. Example responses 200 Response { \"name\": \"string\", \"namespace\": \"string\" } Responses Status Meaning Description Schema 200 OK none ansible.CollectionResponse This operation does not require authentication Content: Collection_Signatures content_ansible_collection_signatures_list Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/content/ansible/collection_signatures/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/content/ansible/collection_signatures/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/content/ansible/collection_signatures/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/content/ansible/collection_signatures/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/pulp/api/v3/content/ansible/collection_signatures/ List collection version signatures ViewSet for looking at signature objects for CollectionVersion content. Parameters Name In Type Required Description limit query integer false Number of results to return per page. offset query integer false The initial index from which to return the results. ordering query array[string] false Ordering pubkey_fingerprint query string false Filter results where pubkey_fingerprint matches value pubkey_fingerprint__in query array[string] false Filter results where pubkey_fingerprint is in a comma-separated list of values repository_version query string false Repository Version referenced by HREF repository_version_added query string false Repository Version referenced by HREF repository_version_removed query string false Repository Version referenced by HREF signed_collection query string(uuid) false Filter signatures for collection version signing_service query string(uuid) false Filter signatures produced by signature service fields query string false A list of fields to include in the response. exclude_fields query string false A list of fields to exclude from the response. Enumerated Values Parameter Value ordering -_artifacts ordering -content_ptr ordering -contentartifact ordering -data ordering -digest ordering -download_logs ordering -group_roles ordering -pk ordering -pubkey_fingerprint ordering -pulp_created ordering -pulp_id ordering -pulp_labels ordering -pulp_last_updated ordering -pulp_type ordering -repositories ordering -signed_collection ordering -signing_service ordering -timestamp_of_interest ordering -upstream_id ordering -user_roles ordering -version_memberships ordering _artifacts ordering content_ptr ordering contentartifact ordering data ordering digest ordering download_logs ordering group_roles ordering pk ordering pubkey_fingerprint ordering pulp_created ordering pulp_id ordering pulp_labels ordering pulp_last_updated ordering pulp_type ordering repositories ordering signed_collection ordering signing_service ordering timestamp_of_interest ordering upstream_id ordering user_roles ordering version_memberships Example responses 200 Response { \"count\": 123, \"next\": \"http://api.example.org/accounts/?offset=400&limit=100\", \"previous\": \"http://api.example.org/accounts/?offset=200&limit=100\", \"results\": [ { \"pulp_href\": \"http://example.com\", \"pulp_created\": \"2019-08-24T14:15:22Z\", \"signed_collection\": \"http://example.com\", \"pubkey_fingerprint\": \"string\", \"signing_service\": \"http://example.com\" } ] } Responses Status Meaning Description Schema 200 OK none Paginatedansible.CollectionVersionSignatureResponseList This operation does not require authentication content_ansible_collection_signatures_create Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Content-Type\": []string{\"multipart/form-data\"}, \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"POST\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/content/ansible/collection_signatures/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const inputBody = '{ \"file\": \"string\", \"repository\": \"http://example.com\", \"signed_collection\": \"http://example.com\" }'; const headers = { 'Content-Type':'multipart/form-data', 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/content/ansible/collection_signatures/', { method: 'POST', body: inputBody, headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Content-Type': 'multipart/form-data', 'Accept': 'application/json' } r = requests.post('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/content/ansible/collection_signatures/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Content-Type' => 'multipart/form-data', 'Accept' => 'application/json' } result = RestClient.post 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/content/ansible/collection_signatures/', params: { }, headers: headers p JSON.parse(result) POST /api/automation-hub/pulp/api/v3/content/ansible/collection_signatures/ Create a collection version signature Trigger an asynchronous task to create content,optionally create new repository version. Body parameter file: string repository: http://example.com signed_collection: http://example.com Parameters Name In Type Required Description body body ansible.CollectionVersionSignature true none Example responses 202 Response { \"task\": \"http://example.com\" } Responses Status Meaning Description Schema 202 Accepted none AsyncOperationResponse This operation does not require authentication content_ansible_collection_signatures_read Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/content/ansible/collection_signatures/{pulp_id}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/content/ansible/collection_signatures/{pulp_id}/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/content/ansible/collection_signatures/{pulp_id}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/content/ansible/collection_signatures/{pulp_id}/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/pulp/api/v3/content/ansible/collection_signatures/{pulp_id}/ Inspect a collection version signature ViewSet for looking at signature objects for CollectionVersion content. Parameters Name In Type Required Description pulp_id path string(uuid) true A UUID string identifying this collection version signature. fields query string false A list of fields to include in the response. exclude_fields query string false A list of fields to exclude from the response. Example responses 200 Response { \"pulp_href\": \"http://example.com\", \"pulp_created\": \"2019-08-24T14:15:22Z\", \"signed_collection\": \"http://example.com\", \"pubkey_fingerprint\": \"string\", \"signing_service\": \"http://example.com\" } Responses Status Meaning Description Schema 200 OK none ansible.CollectionVersionSignatureResponse This operation does not require authentication Content: Collection_Versions content_ansible_collection_versions_list Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/content/ansible/collection_versions/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/content/ansible/collection_versions/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/content/ansible/collection_versions/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/content/ansible/collection_versions/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/pulp/api/v3/content/ansible/collection_versions/ List collection versions ViewSet for Ansible Collection. Parameters Name In Type Required Description is_highest query boolean false none limit query integer false Number of results to return per page. name query string false none namespace query string false none offset query integer false The initial index from which to return the results. ordering query array[string] false Ordering q query string false none repository_version query string false Repository Version referenced by HREF repository_version_added query string false Repository Version referenced by HREF repository_version_removed query string false Repository Version referenced by HREF tags query string false Filter by comma separate list of tags that must all be matched version query string false Filter results where version matches value fields query string false A list of fields to include in the response. exclude_fields query string false A list of fields to exclude from the response. Enumerated Values Parameter Value ordering -_artifacts ordering -authors ordering -collection ordering -content_ptr ordering -contentartifact ordering -contents ordering -dependencies ordering -description ordering -docs_blob ordering -documentation ordering -download_logs ordering -files ordering -group_roles ordering -homepage ordering -is_highest ordering -issues ordering -license ordering -manifest ordering -name ordering -namespace ordering -pk ordering -pulp_created ordering -pulp_id ordering -pulp_labels ordering -pulp_last_updated ordering -pulp_type ordering -repositories ordering -repository ordering -requires_ansible ordering -search_vector ordering -signatures ordering -tags ordering -timestamp_of_interest ordering -upstream_id ordering -user_roles ordering -version ordering -version_memberships ordering _artifacts ordering authors ordering collection ordering content_ptr ordering contentartifact ordering contents ordering dependencies ordering description ordering docs_blob ordering documentation ordering download_logs ordering files ordering group_roles ordering homepage ordering is_highest ordering issues ordering license ordering manifest ordering name ordering namespace ordering pk ordering pulp_created ordering pulp_id ordering pulp_labels ordering pulp_last_updated ordering pulp_type ordering repositories ordering repository ordering requires_ansible ordering search_vector ordering signatures ordering tags ordering timestamp_of_interest ordering upstream_id ordering user_roles ordering version ordering version_memberships Example responses 200 Response { \"count\": 123, \"next\": \"http://api.example.org/accounts/?offset=400&limit=100\", \"previous\": \"http://api.example.org/accounts/?offset=200&limit=100\", \"results\": [ { \"pulp_href\": \"http://example.com\", \"artifact\": \"http://example.com\", \"pulp_created\": \"2019-08-24T14:15:22Z\", \"md5\": \"string\", \"sha1\": \"string\", \"sha224\": \"string\", \"sha256\": \"string\", \"sha384\": \"string\", \"sha512\": \"string\", \"id\": \"497f6eca-6276-4993-bfeb-53cbbbba6f08\", \"authors\": [ \"string\" ], \"contents\": {}, \"dependencies\": {}, \"description\": \"string\", \"docs_blob\": {}, \"manifest\": {}, \"files\": {}, \"documentation\": \"string\", \"homepage\": \"string\", \"issues\": \"string\", \"license\": [ \"string\" ], \"name\": \"string\", \"namespace\": \"string\", \"repository\": \"string\", \"tags\": [ { \"name\": \"string\" } ], \"version\": \"string\", \"requires_ansible\": \"string\" } ] } Responses Status Meaning Description Schema 200 OK none Paginatedansible.CollectionVersionResponseList This operation does not require authentication content_ansible_collection_versions_create Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Content-Type\": []string{\"multipart/form-data\"}, \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"POST\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/content/ansible/collection_versions/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const inputBody = '{ \"upload\": \"http://example.com\", \"repository\": \"http://example.com\", \"file\": \"string\", \"name\": \"string\", \"namespace\": \"string\", \"version\": \"string\" }'; const headers = { 'Content-Type':'multipart/form-data', 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/content/ansible/collection_versions/', { method: 'POST', body: inputBody, headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Content-Type': 'multipart/form-data', 'Accept': 'application/json' } r = requests.post('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/content/ansible/collection_versions/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Content-Type' => 'multipart/form-data', 'Accept' => 'application/json' } result = RestClient.post 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/content/ansible/collection_versions/', params: { }, headers: headers p JSON.parse(result) POST /api/automation-hub/pulp/api/v3/content/ansible/collection_versions/ Create a collection version Trigger an asynchronous task to create content,optionally create new repository version. Body parameter upload: http://example.com repository: http://example.com file: string name: string namespace: string version: string Parameters Name In Type Required Description body body ansible.CollectionVersion true none Example responses 202 Response { \"task\": \"http://example.com\" } Responses Status Meaning Description Schema 202 Accepted none AsyncOperationResponse This operation does not require authentication content_ansible_collection_versions_read Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/content/ansible/collection_versions/{pulp_id}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/content/ansible/collection_versions/{pulp_id}/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/content/ansible/collection_versions/{pulp_id}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/content/ansible/collection_versions/{pulp_id}/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/pulp/api/v3/content/ansible/collection_versions/{pulp_id}/ Inspect a collection version ViewSet for Ansible Collection. Parameters Name In Type Required Description pulp_id path string(uuid) true A UUID string identifying this collection version. fields query string false A list of fields to include in the response. exclude_fields query string false A list of fields to exclude from the response. Example responses 200 Response { \"pulp_href\": \"http://example.com\", \"artifact\": \"http://example.com\", \"pulp_created\": \"2019-08-24T14:15:22Z\", \"md5\": \"string\", \"sha1\": \"string\", \"sha224\": \"string\", \"sha256\": \"string\", \"sha384\": \"string\", \"sha512\": \"string\", \"id\": \"497f6eca-6276-4993-bfeb-53cbbbba6f08\", \"authors\": [ \"string\" ], \"contents\": {}, \"dependencies\": {}, \"description\": \"string\", \"docs_blob\": {}, \"manifest\": {}, \"files\": {}, \"documentation\": \"string\", \"homepage\": \"string\", \"issues\": \"string\", \"license\": [ \"string\" ], \"name\": \"string\", \"namespace\": \"string\", \"repository\": \"string\", \"tags\": [ { \"name\": \"string\" } ], \"version\": \"string\", \"requires_ansible\": \"string\" } Responses Status Meaning Description Schema 200 OK none ansible.CollectionVersionResponse This operation does not require authentication Content: Roles content_ansible_roles_list Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/content/ansible/roles/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/content/ansible/roles/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/content/ansible/roles/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/content/ansible/roles/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/pulp/api/v3/content/ansible/roles/ List roles ViewSet for Role. Parameters Name In Type Required Description limit query integer false Number of results to return per page. name query string false Filter results where name matches value namespace query string false Filter results where namespace matches value offset query integer false The initial index from which to return the results. ordering query array[string] false Ordering repository_version query string false Repository Version referenced by HREF repository_version_added query string false Repository Version referenced by HREF repository_version_removed query string false Repository Version referenced by HREF version query string false Filter results where version matches value fields query string false A list of fields to include in the response. exclude_fields query string false A list of fields to exclude from the response. Enumerated Values Parameter Value ordering -_artifacts ordering -content_ptr ordering -contentartifact ordering -download_logs ordering -group_roles ordering -name ordering -namespace ordering -pk ordering -pulp_created ordering -pulp_id ordering -pulp_labels ordering -pulp_last_updated ordering -pulp_type ordering -repositories ordering -timestamp_of_interest ordering -upstream_id ordering -user_roles ordering -version ordering -version_memberships ordering _artifacts ordering content_ptr ordering contentartifact ordering download_logs ordering group_roles ordering name ordering namespace ordering pk ordering pulp_created ordering pulp_id ordering pulp_labels ordering pulp_last_updated ordering pulp_type ordering repositories ordering timestamp_of_interest ordering upstream_id ordering user_roles ordering version ordering version_memberships Example responses 200 Response { \"count\": 123, \"next\": \"http://api.example.org/accounts/?offset=400&limit=100\", \"previous\": \"http://api.example.org/accounts/?offset=200&limit=100\", \"results\": [ { \"pulp_href\": \"http://example.com\", \"artifact\": \"http://example.com\", \"pulp_created\": \"2019-08-24T14:15:22Z\", \"version\": \"string\", \"name\": \"string\", \"namespace\": \"string\" } ] } Responses Status Meaning Description Schema 200 OK none Paginatedansible.RoleResponseList This operation does not require authentication content_ansible_roles_create Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Content-Type\": []string{\"application/json\"}, \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"POST\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/content/ansible/roles/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const inputBody = '{ \"artifact\": \"http://example.com\", \"version\": \"string\", \"name\": \"string\", \"namespace\": \"string\" }'; const headers = { 'Content-Type':'application/json', 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/content/ansible/roles/', { method: 'POST', body: inputBody, headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Content-Type': 'application/json', 'Accept': 'application/json' } r = requests.post('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/content/ansible/roles/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Content-Type' => 'application/json', 'Accept' => 'application/json' } result = RestClient.post 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/content/ansible/roles/', params: { }, headers: headers p JSON.parse(result) POST /api/automation-hub/pulp/api/v3/content/ansible/roles/ Create a role ViewSet for Role. Body parameter { \"artifact\": \"http://example.com\", \"version\": \"string\", \"name\": \"string\", \"namespace\": \"string\" } artifact: http://example.com version: string name: string namespace: string Parameters Name In Type Required Description body body ansible.Role true none Example responses 201 Response { \"pulp_href\": \"http://example.com\", \"artifact\": \"http://example.com\", \"pulp_created\": \"2019-08-24T14:15:22Z\", \"version\": \"string\", \"name\": \"string\", \"namespace\": \"string\" } Responses Status Meaning Description Schema 201 Created none ansible.RoleResponse This operation does not require authentication content_ansible_roles_read Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/content/ansible/roles/{pulp_id}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/content/ansible/roles/{pulp_id}/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/content/ansible/roles/{pulp_id}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/content/ansible/roles/{pulp_id}/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/pulp/api/v3/content/ansible/roles/{pulp_id}/ Inspect a role ViewSet for Role. Parameters Name In Type Required Description pulp_id path string(uuid) true A UUID string identifying this role. fields query string false A list of fields to include in the response. exclude_fields query string false A list of fields to exclude from the response. Example responses 200 Response { \"pulp_href\": \"http://example.com\", \"artifact\": \"http://example.com\", \"pulp_created\": \"2019-08-24T14:15:22Z\", \"version\": \"string\", \"name\": \"string\", \"namespace\": \"string\" } Responses Status Meaning Description Schema 200 OK none ansible.RoleResponse This operation does not require authentication Content: Blobs content_container_blobs_list Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/content/container/blobs/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/content/container/blobs/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/content/container/blobs/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/content/container/blobs/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/pulp/api/v3/content/container/blobs/ List blobs ViewSet for Blobs. Parameters Name In Type Required Description digest query string false Filter results where digest matches value digest__in query array[string] false Filter results where digest is in a comma-separated list of values limit query integer false Number of results to return per page. offset query integer false The initial index from which to return the results. ordering query array[string] false Ordering repository_version query string false Repository Version referenced by HREF repository_version_added query string false Repository Version referenced by HREF repository_version_removed query string false Repository Version referenced by HREF fields query string false A list of fields to include in the response. exclude_fields query string false A list of fields to exclude from the response. Enumerated Values Parameter Value ordering -_artifacts ordering -config_blob ordering -container_manifest ordering -content_ptr ordering -contentartifact ordering -digest ordering -download_logs ordering -group_roles ordering -manifest_blobs ordering -pk ordering -pulp_created ordering -pulp_id ordering -pulp_labels ordering -pulp_last_updated ordering -pulp_type ordering -repositories ordering -timestamp_of_interest ordering -upstream_id ordering -user_roles ordering -version_memberships ordering _artifacts ordering config_blob ordering container_manifest ordering content_ptr ordering contentartifact ordering digest ordering download_logs ordering group_roles ordering manifest_blobs ordering pk ordering pulp_created ordering pulp_id ordering pulp_labels ordering pulp_last_updated ordering pulp_type ordering repositories ordering timestamp_of_interest ordering upstream_id ordering user_roles ordering version_memberships Example responses 200 Response { \"count\": 123, \"next\": \"http://api.example.org/accounts/?offset=400&limit=100\", \"previous\": \"http://api.example.org/accounts/?offset=200&limit=100\", \"results\": [ { \"pulp_href\": \"http://example.com\", \"pulp_created\": \"2019-08-24T14:15:22Z\", \"artifact\": \"http://example.com\", \"digest\": \"string\" } ] } Responses Status Meaning Description Schema 200 OK none Paginatedcontainer.BlobResponseList This operation does not require authentication content_container_blobs_read Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/content/container/blobs/{pulp_id}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/content/container/blobs/{pulp_id}/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/content/container/blobs/{pulp_id}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/content/container/blobs/{pulp_id}/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/pulp/api/v3/content/container/blobs/{pulp_id}/ Inspect a blob ViewSet for Blobs. Parameters Name In Type Required Description pulp_id path string(uuid) true A UUID string identifying this blob. fields query string false A list of fields to include in the response. exclude_fields query string false A list of fields to exclude from the response. Example responses 200 Response { \"pulp_href\": \"http://example.com\", \"pulp_created\": \"2019-08-24T14:15:22Z\", \"artifact\": \"http://example.com\", \"digest\": \"string\" } Responses Status Meaning Description Schema 200 OK none container.BlobResponse This operation does not require authentication Content: Manifests content_container_manifests_list Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/content/container/manifests/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/content/container/manifests/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/content/container/manifests/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/content/container/manifests/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/pulp/api/v3/content/container/manifests/ List manifests ViewSet for Manifest. Parameters Name In Type Required Description digest query string false Filter results where digest matches value digest__in query array[string] false Filter results where digest is in a comma-separated list of values limit query integer false Number of results to return per page. media_type query array[string] false none offset query integer false The initial index from which to return the results. ordering query array[string] false Ordering repository_version query string false Repository Version referenced by HREF repository_version_added query string false Repository Version referenced by HREF repository_version_removed query string false Repository Version referenced by HREF fields query string false A list of fields to include in the response. exclude_fields query string false A list of fields to exclude from the response. Enumerated Values Parameter Value media_type application/vnd.docker.distribution.manifest.list.v2+json media_type application/vnd.docker.distribution.manifest.v1+json media_type application/vnd.docker.distribution.manifest.v2+json media_type application/vnd.oci.image.index.v1+json media_type application/vnd.oci.image.manifest.v1+json ordering -_artifacts ordering -blob_manifests ordering -blobs ordering -config_blob ordering -container_manifest ordering -content_ptr ordering -contentartifact ordering -digest ordering -download_logs ordering -group_roles ordering -image_manifests ordering -listed_manifests ordering -manifest_lists ordering -media_type ordering -pk ordering -pulp_created ordering -pulp_id ordering -pulp_labels ordering -pulp_last_updated ordering -pulp_type ordering -repositories ordering -schema_version ordering -signed_manifests ordering -tagged_manifests ordering -timestamp_of_interest ordering -upstream_id ordering -user_roles ordering -version_memberships ordering _artifacts ordering blob_manifests ordering blobs ordering config_blob ordering container_manifest ordering content_ptr ordering contentartifact ordering digest ordering download_logs ordering group_roles ordering image_manifests ordering listed_manifests ordering manifest_lists ordering media_type ordering pk ordering pulp_created ordering pulp_id ordering pulp_labels ordering pulp_last_updated ordering pulp_type ordering repositories ordering schema_version ordering signed_manifests ordering tagged_manifests ordering timestamp_of_interest ordering upstream_id ordering user_roles ordering version_memberships Example responses 200 Response { \"count\": 123, \"next\": \"http://api.example.org/accounts/?offset=400&limit=100\", \"previous\": \"http://api.example.org/accounts/?offset=200&limit=100\", \"results\": [ { \"pulp_href\": \"http://example.com\", \"pulp_created\": \"2019-08-24T14:15:22Z\", \"artifact\": \"http://example.com\", \"digest\": \"string\", \"schema_version\": 0, \"media_type\": \"string\", \"listed_manifests\": [ \"http://example.com\" ], \"config_blob\": \"http://example.com\", \"blobs\": [ \"http://example.com\" ] } ] } Responses Status Meaning Description Schema 200 OK none Paginatedcontainer.ManifestResponseList This operation does not require authentication content_container_manifests_read Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/content/container/manifests/{pulp_id}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/content/container/manifests/{pulp_id}/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/content/container/manifests/{pulp_id}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/content/container/manifests/{pulp_id}/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/pulp/api/v3/content/container/manifests/{pulp_id}/ Inspect a manifest ViewSet for Manifest. Parameters Name In Type Required Description pulp_id path string(uuid) true A UUID string identifying this manifest. fields query string false A list of fields to include in the response. exclude_fields query string false A list of fields to exclude from the response. Example responses 200 Response { \"pulp_href\": \"http://example.com\", \"pulp_created\": \"2019-08-24T14:15:22Z\", \"artifact\": \"http://example.com\", \"digest\": \"string\", \"schema_version\": 0, \"media_type\": \"string\", \"listed_manifests\": [ \"http://example.com\" ], \"config_blob\": \"http://example.com\", \"blobs\": [ \"http://example.com\" ] } Responses Status Meaning Description Schema 200 OK none container.ManifestResponse This operation does not require authentication Content: Signatures content_container_signatures_list Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/content/container/signatures/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/content/container/signatures/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/content/container/signatures/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/content/container/signatures/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/pulp/api/v3/content/container/signatures/ List manifest signatures ViewSet for image signatures. Parameters Name In Type Required Description digest query string false Filter results where digest matches value digest__in query array[string] false Filter results where digest is in a comma-separated list of values key_id query string false Filter results where key_id matches value key_id__in query array[string] false Filter results where key_id is in a comma-separated list of values limit query integer false Number of results to return per page. manifest query array[string] false Multiple values may be separated by commas. name query string false Filter results where name matches value name__contains query string false Filter results where name contains value name__icontains query string false Filter results where name contains value name__in query array[string] false Filter results where name is in a comma-separated list of values name__startswith query string false Filter results where name starts with value offset query integer false The initial index from which to return the results. ordering query array[string] false Ordering repository_version query string false Repository Version referenced by HREF repository_version_added query string false Repository Version referenced by HREF repository_version_removed query string false Repository Version referenced by HREF fields query string false A list of fields to include in the response. exclude_fields query string false A list of fields to exclude from the response. Enumerated Values Parameter Value ordering -_artifacts ordering -content_ptr ordering -contentartifact ordering -creator ordering -data ordering -digest ordering -download_logs ordering -group_roles ordering -key_id ordering -name ordering -pk ordering -pulp_created ordering -pulp_id ordering -pulp_labels ordering -pulp_last_updated ordering -pulp_type ordering -repositories ordering -signed_manifest ordering -timestamp ordering -timestamp_of_interest ordering -type ordering -upstream_id ordering -user_roles ordering -version_memberships ordering _artifacts ordering content_ptr ordering contentartifact ordering creator ordering data ordering digest ordering download_logs ordering group_roles ordering key_id ordering name ordering pk ordering pulp_created ordering pulp_id ordering pulp_labels ordering pulp_last_updated ordering pulp_type ordering repositories ordering signed_manifest ordering timestamp ordering timestamp_of_interest ordering type ordering upstream_id ordering user_roles ordering version_memberships Example responses 200 Response { \"count\": 123, \"next\": \"http://api.example.org/accounts/?offset=400&limit=100\", \"previous\": \"http://api.example.org/accounts/?offset=200&limit=100\", \"results\": [ { \"pulp_href\": \"http://example.com\", \"pulp_created\": \"2019-08-24T14:15:22Z\", \"name\": \"string\", \"digest\": \"string\", \"type\": \"string\", \"key_id\": \"string\", \"timestamp\": 0, \"creator\": \"string\", \"signed_manifest\": \"http://example.com\" } ] } Responses Status Meaning Description Schema 200 OK none Paginatedcontainer.ManifestSignatureResponseList This operation does not require authentication content_container_signatures_read Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/content/container/signatures/{pulp_id}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/content/container/signatures/{pulp_id}/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/content/container/signatures/{pulp_id}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/content/container/signatures/{pulp_id}/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/pulp/api/v3/content/container/signatures/{pulp_id}/ Inspect a manifest signature ViewSet for image signatures. Parameters Name In Type Required Description pulp_id path string(uuid) true A UUID string identifying this manifest signature. fields query string false A list of fields to include in the response. exclude_fields query string false A list of fields to exclude from the response. Example responses 200 Response { \"pulp_href\": \"http://example.com\", \"pulp_created\": \"2019-08-24T14:15:22Z\", \"name\": \"string\", \"digest\": \"string\", \"type\": \"string\", \"key_id\": \"string\", \"timestamp\": 0, \"creator\": \"string\", \"signed_manifest\": \"http://example.com\" } Responses Status Meaning Description Schema 200 OK none container.ManifestSignatureResponse This operation does not require authentication Content: Tags content_container_tags_list Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/content/container/tags/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/content/container/tags/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/content/container/tags/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/content/container/tags/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/pulp/api/v3/content/container/tags/ List tags ViewSet for Tag. Parameters Name In Type Required Description digest query array[string] false Multiple values may be separated by commas. limit query integer false Number of results to return per page. media_type query array[string] false none name query string false Filter results where name matches value name__in query array[string] false Filter results where name is in a comma-separated list of values offset query integer false The initial index from which to return the results. ordering query array[string] false Ordering repository_version query string false Repository Version referenced by HREF repository_version_added query string false Repository Version referenced by HREF repository_version_removed query string false Repository Version referenced by HREF fields query string false A list of fields to include in the response. exclude_fields query string false A list of fields to exclude from the response. Enumerated Values Parameter Value media_type application/vnd.docker.distribution.manifest.list.v2+json media_type application/vnd.docker.distribution.manifest.v1+json media_type application/vnd.docker.distribution.manifest.v2+json media_type application/vnd.oci.image.index.v1+json media_type application/vnd.oci.image.manifest.v1+json ordering -_artifacts ordering -content_ptr ordering -contentartifact ordering -download_logs ordering -group_roles ordering -name ordering -pk ordering -pulp_created ordering -pulp_id ordering -pulp_labels ordering -pulp_last_updated ordering -pulp_type ordering -repositories ordering -tagged_manifest ordering -timestamp_of_interest ordering -upstream_id ordering -user_roles ordering -version_memberships ordering _artifacts ordering content_ptr ordering contentartifact ordering download_logs ordering group_roles ordering name ordering pk ordering pulp_created ordering pulp_id ordering pulp_labels ordering pulp_last_updated ordering pulp_type ordering repositories ordering tagged_manifest ordering timestamp_of_interest ordering upstream_id ordering user_roles ordering version_memberships Example responses 200 Response { \"count\": 123, \"next\": \"http://api.example.org/accounts/?offset=400&limit=100\", \"previous\": \"http://api.example.org/accounts/?offset=200&limit=100\", \"results\": [ { \"pulp_href\": \"http://example.com\", \"pulp_created\": \"2019-08-24T14:15:22Z\", \"name\": \"string\", \"tagged_manifest\": \"http://example.com\" } ] } Responses Status Meaning Description Schema 200 OK none Paginatedcontainer.TagResponseList This operation does not require authentication content_container_tags_read Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/content/container/tags/{pulp_id}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/content/container/tags/{pulp_id}/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/content/container/tags/{pulp_id}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/content/container/tags/{pulp_id}/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/pulp/api/v3/content/container/tags/{pulp_id}/ Inspect a tag ViewSet for Tag. Parameters Name In Type Required Description pulp_id path string(uuid) true A UUID string identifying this tag. fields query string false A list of fields to include in the response. exclude_fields query string false A list of fields to exclude from the response. Example responses 200 Response { \"pulp_href\": \"http://example.com\", \"pulp_created\": \"2019-08-24T14:15:22Z\", \"name\": \"string\", \"tagged_manifest\": \"http://example.com\" } Responses Status Meaning Description Schema 200 OK none container.TagResponse This operation does not require authentication Contentguards contentguards_list Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/contentguards/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/contentguards/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/contentguards/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/contentguards/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/pulp/api/v3/contentguards/ List content guards Endpoint to list all contentguards. Parameters Name In Type Required Description limit query integer false Number of results to return per page. name query string false none name__contains query string false Filter results where name contains value name__icontains query string false Filter results where name contains value name__in query array[string] false Filter results where name is in a comma-separated list of values name__startswith query string false Filter results where name starts with value offset query integer false The initial index from which to return the results. ordering query array[string] false Ordering fields query string false A list of fields to include in the response. exclude_fields query string false A list of fields to exclude from the response. Enumerated Values Parameter Value ordering -basedistribution ordering -core_contentredirectcontentguard ordering -core_rbaccontentguard ordering -description ordering -distribution ordering -group_roles ordering -name ordering -pk ordering -pulp_created ordering -pulp_id ordering -pulp_labels ordering -pulp_last_updated ordering -pulp_type ordering -user_roles ordering basedistribution ordering core_contentredirectcontentguard ordering core_rbaccontentguard ordering description ordering distribution ordering group_roles ordering name ordering pk ordering pulp_created ordering pulp_id ordering pulp_labels ordering pulp_last_updated ordering pulp_type ordering user_roles Example responses 200 Response { \"count\": 123, \"next\": \"http://api.example.org/accounts/?offset=400&limit=100\", \"previous\": \"http://api.example.org/accounts/?offset=200&limit=100\", \"results\": [ { \"pulp_href\": \"http://example.com\", \"pulp_created\": \"2019-08-24T14:15:22Z\", \"name\": \"string\", \"description\": \"string\" } ] } Responses Status Meaning Description Schema 200 OK none PaginatedContentGuardResponseList This operation does not require authentication Contentguards: Content_Redirect contentguards_core_content_redirect_list Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/contentguards/core/content_redirect/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/contentguards/core/content_redirect/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/contentguards/core/content_redirect/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/contentguards/core/content_redirect/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/pulp/api/v3/contentguards/core/content_redirect/ List content redirect content guards Content guard to protect preauthenticated redirects to the content app. Parameters Name In Type Required Description limit query integer false Number of results to return per page. name query string false none name__contains query string false Filter results where name contains value name__icontains query string false Filter results where name contains value name__in query array[string] false Filter results where name is in a comma-separated list of values name__startswith query string false Filter results where name starts with value offset query integer false The initial index from which to return the results. ordering query array[string] false Ordering fields query string false A list of fields to include in the response. exclude_fields query string false A list of fields to exclude from the response. Enumerated Values Parameter Value ordering -basedistribution ordering -core_contentredirectcontentguard ordering -core_rbaccontentguard ordering -description ordering -distribution ordering -group_roles ordering -name ordering -pk ordering -pulp_created ordering -pulp_id ordering -pulp_labels ordering -pulp_last_updated ordering -pulp_type ordering -user_roles ordering basedistribution ordering core_contentredirectcontentguard ordering core_rbaccontentguard ordering description ordering distribution ordering group_roles ordering name ordering pk ordering pulp_created ordering pulp_id ordering pulp_labels ordering pulp_last_updated ordering pulp_type ordering user_roles Example responses 200 Response { \"count\": 123, \"next\": \"http://api.example.org/accounts/?offset=400&limit=100\", \"previous\": \"http://api.example.org/accounts/?offset=200&limit=100\", \"results\": [ { \"pulp_href\": \"http://example.com\", \"pulp_created\": \"2019-08-24T14:15:22Z\", \"name\": \"string\", \"description\": \"string\" } ] } Responses Status Meaning Description Schema 200 OK none PaginatedContentRedirectContentGuardResponseList This operation does not require authentication contentguards_core_content_redirect_create Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Content-Type\": []string{\"application/json\"}, \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"POST\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/contentguards/core/content_redirect/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const inputBody = '{ \"name\": \"string\", \"description\": \"string\" }'; const headers = { 'Content-Type':'application/json', 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/contentguards/core/content_redirect/', { method: 'POST', body: inputBody, headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Content-Type': 'application/json', 'Accept': 'application/json' } r = requests.post('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/contentguards/core/content_redirect/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Content-Type' => 'application/json', 'Accept' => 'application/json' } result = RestClient.post 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/contentguards/core/content_redirect/', params: { }, headers: headers p JSON.parse(result) POST /api/automation-hub/pulp/api/v3/contentguards/core/content_redirect/ Create a content redirect content guard Content guard to protect preauthenticated redirects to the content app. Body parameter { \"name\": \"string\", \"description\": \"string\" } name: string description: string Parameters Name In Type Required Description body body ContentRedirectContentGuard true none Example responses 201 Response { \"pulp_href\": \"http://example.com\", \"pulp_created\": \"2019-08-24T14:15:22Z\", \"name\": \"string\", \"description\": \"string\" } Responses Status Meaning Description Schema 201 Created none ContentRedirectContentGuardResponse This operation does not require authentication contentguards_core_content_redirect_read Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/contentguards/core/content_redirect/{pulp_id}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/contentguards/core/content_redirect/{pulp_id}/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/contentguards/core/content_redirect/{pulp_id}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/contentguards/core/content_redirect/{pulp_id}/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/pulp/api/v3/contentguards/core/content_redirect/{pulp_id}/ Inspect a content redirect content guard Content guard to protect preauthenticated redirects to the content app. Parameters Name In Type Required Description pulp_id path string(uuid) true A UUID string identifying this content redirect content guard. fields query string false A list of fields to include in the response. exclude_fields query string false A list of fields to exclude from the response. Example responses 200 Response { \"pulp_href\": \"http://example.com\", \"pulp_created\": \"2019-08-24T14:15:22Z\", \"name\": \"string\", \"description\": \"string\" } Responses Status Meaning Description Schema 200 OK none ContentRedirectContentGuardResponse This operation does not require authentication contentguards_core_content_redirect_update Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Content-Type\": []string{\"application/json\"}, \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"PUT\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/contentguards/core/content_redirect/{pulp_id}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const inputBody = '{ \"name\": \"string\", \"description\": \"string\" }'; const headers = { 'Content-Type':'application/json', 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/contentguards/core/content_redirect/{pulp_id}/', { method: 'PUT', body: inputBody, headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Content-Type': 'application/json', 'Accept': 'application/json' } r = requests.put('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/contentguards/core/content_redirect/{pulp_id}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Content-Type' => 'application/json', 'Accept' => 'application/json' } result = RestClient.put 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/contentguards/core/content_redirect/{pulp_id}/', params: { }, headers: headers p JSON.parse(result) PUT /api/automation-hub/pulp/api/v3/contentguards/core/content_redirect/{pulp_id}/ Update a content redirect content guard Content guard to protect preauthenticated redirects to the content app. Body parameter { \"name\": \"string\", \"description\": \"string\" } name: string description: string Parameters Name In Type Required Description pulp_id path string(uuid) true A UUID string identifying this content redirect content guard. body body ContentRedirectContentGuard true none Example responses 200 Response { \"pulp_href\": \"http://example.com\", \"pulp_created\": \"2019-08-24T14:15:22Z\", \"name\": \"string\", \"description\": \"string\" } Responses Status Meaning Description Schema 200 OK none ContentRedirectContentGuardResponse This operation does not require authentication contentguards_core_content_redirect_partial_update Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Content-Type\": []string{\"application/json\"}, \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"PATCH\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/contentguards/core/content_redirect/{pulp_id}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const inputBody = '{ \"name\": \"string\", \"description\": \"string\" }'; const headers = { 'Content-Type':'application/json', 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/contentguards/core/content_redirect/{pulp_id}/', { method: 'PATCH', body: inputBody, headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Content-Type': 'application/json', 'Accept': 'application/json' } r = requests.patch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/contentguards/core/content_redirect/{pulp_id}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Content-Type' => 'application/json', 'Accept' => 'application/json' } result = RestClient.patch 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/contentguards/core/content_redirect/{pulp_id}/', params: { }, headers: headers p JSON.parse(result) PATCH /api/automation-hub/pulp/api/v3/contentguards/core/content_redirect/{pulp_id}/ Update a content redirect content guard Content guard to protect preauthenticated redirects to the content app. Body parameter { \"name\": \"string\", \"description\": \"string\" } name: string description: string Parameters Name In Type Required Description pulp_id path string(uuid) true A UUID string identifying this content redirect content guard. body body PatchedContentRedirectContentGuard true none Example responses 200 Response { \"pulp_href\": \"http://example.com\", \"pulp_created\": \"2019-08-24T14:15:22Z\", \"name\": \"string\", \"description\": \"string\" } Responses Status Meaning Description Schema 200 OK none ContentRedirectContentGuardResponse This operation does not require authentication contentguards_core_content_redirect_delete Code samples package main import ( \"bytes\" \"net/http\" ) func main() { data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"DELETE\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/contentguards/core/content_redirect/{pulp_id}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/contentguards/core/content_redirect/{pulp_id}/', { method: 'DELETE' }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests r = requests.delete('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/contentguards/core/content_redirect/{pulp_id}/') print(r.json()) require 'rest-client' require 'json' result = RestClient.delete 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/contentguards/core/content_redirect/{pulp_id}/', params: { } p JSON.parse(result) DELETE /api/automation-hub/pulp/api/v3/contentguards/core/content_redirect/{pulp_id}/ Delete a content redirect content guard Content guard to protect preauthenticated redirects to the content app. Parameters Name In Type Required Description pulp_id path string(uuid) true A UUID string identifying this content redirect content guard. Responses Status Meaning Description Schema 204 No Content No response body None This operation does not require authentication contentguards_core_content_redirect_add_role Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Content-Type\": []string{\"application/json\"}, \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"POST\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/contentguards/core/content_redirect/{pulp_id}/add_role/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const inputBody = '{ \"users\": [], \"groups\": [], \"role\": \"string\" }'; const headers = { 'Content-Type':'application/json', 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/contentguards/core/content_redirect/{pulp_id}/add_role/', { method: 'POST', body: inputBody, headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Content-Type': 'application/json', 'Accept': 'application/json' } r = requests.post('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/contentguards/core/content_redirect/{pulp_id}/add_role/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Content-Type' => 'application/json', 'Accept' => 'application/json' } result = RestClient.post 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/contentguards/core/content_redirect/{pulp_id}/add_role/', params: { }, headers: headers p JSON.parse(result) POST /api/automation-hub/pulp/api/v3/contentguards/core/content_redirect/{pulp_id}/add_role/ Add a role for this object to users/groups. Body parameter { \"users\": [], \"groups\": [], \"role\": \"string\" } users: [] groups: [] role: string Parameters Name In Type Required Description pulp_id path string(uuid) true A UUID string identifying this content redirect content guard. body body NestedRole true none Example responses 201 Response { \"users\": [], \"groups\": [], \"role\": \"string\" } Responses Status Meaning Description Schema 201 Created none NestedRoleResponse This operation does not require authentication contentguards_core_content_redirect_list_roles Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/contentguards/core/content_redirect/{pulp_id}/list_roles/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/contentguards/core/content_redirect/{pulp_id}/list_roles/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/contentguards/core/content_redirect/{pulp_id}/list_roles/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/contentguards/core/content_redirect/{pulp_id}/list_roles/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/pulp/api/v3/contentguards/core/content_redirect/{pulp_id}/list_roles/ List roles assigned to this object. Parameters Name In Type Required Description pulp_id path string(uuid) true A UUID string identifying this content redirect content guard. fields query string false A list of fields to include in the response. exclude_fields query string false A list of fields to exclude from the response. Example responses 200 Response { \"roles\": [ { \"users\": [], \"groups\": [], \"role\": \"string\" } ] } Responses Status Meaning Description Schema 200 OK none ObjectRolesResponse This operation does not require authentication contentguards_core_content_redirect_my_permissions Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/contentguards/core/content_redirect/{pulp_id}/my_permissions/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/contentguards/core/content_redirect/{pulp_id}/my_permissions/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/contentguards/core/content_redirect/{pulp_id}/my_permissions/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/contentguards/core/content_redirect/{pulp_id}/my_permissions/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/pulp/api/v3/contentguards/core/content_redirect/{pulp_id}/my_permissions/ List permissions available to the current user on this object. Parameters Name In Type Required Description pulp_id path string(uuid) true A UUID string identifying this content redirect content guard. fields query string false A list of fields to include in the response. exclude_fields query string false A list of fields to exclude from the response. Example responses 200 Response { \"permissions\": [ \"string\" ] } Responses Status Meaning Description Schema 200 OK none MyPermissionsResponse This operation does not require authentication contentguards_core_content_redirect_remove_role Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Content-Type\": []string{\"application/json\"}, \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"POST\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/contentguards/core/content_redirect/{pulp_id}/remove_role/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const inputBody = '{ \"users\": [], \"groups\": [], \"role\": \"string\" }'; const headers = { 'Content-Type':'application/json', 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/contentguards/core/content_redirect/{pulp_id}/remove_role/', { method: 'POST', body: inputBody, headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Content-Type': 'application/json', 'Accept': 'application/json' } r = requests.post('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/contentguards/core/content_redirect/{pulp_id}/remove_role/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Content-Type' => 'application/json', 'Accept' => 'application/json' } result = RestClient.post 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/contentguards/core/content_redirect/{pulp_id}/remove_role/', params: { }, headers: headers p JSON.parse(result) POST /api/automation-hub/pulp/api/v3/contentguards/core/content_redirect/{pulp_id}/remove_role/ Remove a role for this object from users/groups. Body parameter { \"users\": [], \"groups\": [], \"role\": \"string\" } users: [] groups: [] role: string Parameters Name In Type Required Description pulp_id path string(uuid) true A UUID string identifying this content redirect content guard. body body NestedRole true none Example responses 201 Response { \"users\": [], \"groups\": [], \"role\": \"string\" } Responses Status Meaning Description Schema 201 Created none NestedRoleResponse This operation does not require authentication Contentguards: Rbac contentguards_core_rbac_list Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/contentguards/core/rbac/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/contentguards/core/rbac/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/contentguards/core/rbac/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/contentguards/core/rbac/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/pulp/api/v3/contentguards/core/rbac/ List rbac content guards Viewset for creating contentguards that use RBAC to protect content. Has add and remove actions for managing permission for users and groups to download content protected by this guard. Parameters Name In Type Required Description limit query integer false Number of results to return per page. name query string false none name__contains query string false Filter results where name contains value name__icontains query string false Filter results where name contains value name__in query array[string] false Filter results where name is in a comma-separated list of values name__startswith query string false Filter results where name starts with value offset query integer false The initial index from which to return the results. ordering query array[string] false Ordering fields query string false A list of fields to include in the response. exclude_fields query string false A list of fields to exclude from the response. Enumerated Values Parameter Value ordering -basedistribution ordering -core_contentredirectcontentguard ordering -core_rbaccontentguard ordering -description ordering -distribution ordering -group_roles ordering -name ordering -pk ordering -pulp_created ordering -pulp_id ordering -pulp_labels ordering -pulp_last_updated ordering -pulp_type ordering -user_roles ordering basedistribution ordering core_contentredirectcontentguard ordering core_rbaccontentguard ordering description ordering distribution ordering group_roles ordering name ordering pk ordering pulp_created ordering pulp_id ordering pulp_labels ordering pulp_last_updated ordering pulp_type ordering user_roles Example responses 200 Response { \"count\": 123, \"next\": \"http://api.example.org/accounts/?offset=400&limit=100\", \"previous\": \"http://api.example.org/accounts/?offset=200&limit=100\", \"results\": [ { \"pulp_href\": \"http://example.com\", \"pulp_created\": \"2019-08-24T14:15:22Z\", \"name\": \"string\", \"description\": \"string\", \"users\": [ { \"username\": \"string\", \"pulp_href\": \"http://example.com\" } ], \"groups\": [ { \"name\": \"string\", \"pulp_href\": \"http://example.com\", \"id\": 0 } ] } ] } Responses Status Meaning Description Schema 200 OK none PaginatedRBACContentGuardResponseList This operation does not require authentication contentguards_core_rbac_create Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Content-Type\": []string{\"application/json\"}, \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"POST\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/contentguards/core/rbac/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const inputBody = '{ \"name\": \"string\", \"description\": \"string\" }'; const headers = { 'Content-Type':'application/json', 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/contentguards/core/rbac/', { method: 'POST', body: inputBody, headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Content-Type': 'application/json', 'Accept': 'application/json' } r = requests.post('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/contentguards/core/rbac/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Content-Type' => 'application/json', 'Accept' => 'application/json' } result = RestClient.post 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/contentguards/core/rbac/', params: { }, headers: headers p JSON.parse(result) POST /api/automation-hub/pulp/api/v3/contentguards/core/rbac/ Create a rbac content guard Viewset for creating contentguards that use RBAC to protect content. Has add and remove actions for managing permission for users and groups to download content protected by this guard. Body parameter { \"name\": \"string\", \"description\": \"string\" } name: string description: string Parameters Name In Type Required Description body body RBACContentGuard true none Example responses 201 Response { \"pulp_href\": \"http://example.com\", \"pulp_created\": \"2019-08-24T14:15:22Z\", \"name\": \"string\", \"description\": \"string\", \"users\": [ { \"username\": \"string\", \"pulp_href\": \"http://example.com\" } ], \"groups\": [ { \"name\": \"string\", \"pulp_href\": \"http://example.com\", \"id\": 0 } ] } Responses Status Meaning Description Schema 201 Created none RBACContentGuardResponse This operation does not require authentication contentguards_core_rbac_read Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/contentguards/core/rbac/{pulp_id}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/contentguards/core/rbac/{pulp_id}/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/contentguards/core/rbac/{pulp_id}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/contentguards/core/rbac/{pulp_id}/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/pulp/api/v3/contentguards/core/rbac/{pulp_id}/ Inspect a rbac content guard Viewset for creating contentguards that use RBAC to protect content. Has add and remove actions for managing permission for users and groups to download content protected by this guard. Parameters Name In Type Required Description pulp_id path string(uuid) true A UUID string identifying this rbac content guard. fields query string false A list of fields to include in the response. exclude_fields query string false A list of fields to exclude from the response. Example responses 200 Response { \"pulp_href\": \"http://example.com\", \"pulp_created\": \"2019-08-24T14:15:22Z\", \"name\": \"string\", \"description\": \"string\", \"users\": [ { \"username\": \"string\", \"pulp_href\": \"http://example.com\" } ], \"groups\": [ { \"name\": \"string\", \"pulp_href\": \"http://example.com\", \"id\": 0 } ] } Responses Status Meaning Description Schema 200 OK none RBACContentGuardResponse This operation does not require authentication contentguards_core_rbac_update Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Content-Type\": []string{\"application/json\"}, \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"PUT\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/contentguards/core/rbac/{pulp_id}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const inputBody = '{ \"name\": \"string\", \"description\": \"string\" }'; const headers = { 'Content-Type':'application/json', 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/contentguards/core/rbac/{pulp_id}/', { method: 'PUT', body: inputBody, headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Content-Type': 'application/json', 'Accept': 'application/json' } r = requests.put('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/contentguards/core/rbac/{pulp_id}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Content-Type' => 'application/json', 'Accept' => 'application/json' } result = RestClient.put 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/contentguards/core/rbac/{pulp_id}/', params: { }, headers: headers p JSON.parse(result) PUT /api/automation-hub/pulp/api/v3/contentguards/core/rbac/{pulp_id}/ Update a rbac content guard Viewset for creating contentguards that use RBAC to protect content. Has add and remove actions for managing permission for users and groups to download content protected by this guard. Body parameter { \"name\": \"string\", \"description\": \"string\" } name: string description: string Parameters Name In Type Required Description pulp_id path string(uuid) true A UUID string identifying this rbac content guard. body body RBACContentGuard true none Example responses 200 Response { \"pulp_href\": \"http://example.com\", \"pulp_created\": \"2019-08-24T14:15:22Z\", \"name\": \"string\", \"description\": \"string\", \"users\": [ { \"username\": \"string\", \"pulp_href\": \"http://example.com\" } ], \"groups\": [ { \"name\": \"string\", \"pulp_href\": \"http://example.com\", \"id\": 0 } ] } Responses Status Meaning Description Schema 200 OK none RBACContentGuardResponse This operation does not require authentication contentguards_core_rbac_partial_update Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Content-Type\": []string{\"application/json\"}, \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"PATCH\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/contentguards/core/rbac/{pulp_id}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const inputBody = '{ \"name\": \"string\", \"description\": \"string\" }'; const headers = { 'Content-Type':'application/json', 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/contentguards/core/rbac/{pulp_id}/', { method: 'PATCH', body: inputBody, headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Content-Type': 'application/json', 'Accept': 'application/json' } r = requests.patch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/contentguards/core/rbac/{pulp_id}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Content-Type' => 'application/json', 'Accept' => 'application/json' } result = RestClient.patch 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/contentguards/core/rbac/{pulp_id}/', params: { }, headers: headers p JSON.parse(result) PATCH /api/automation-hub/pulp/api/v3/contentguards/core/rbac/{pulp_id}/ Update a rbac content guard Viewset for creating contentguards that use RBAC to protect content. Has add and remove actions for managing permission for users and groups to download content protected by this guard. Body parameter { \"name\": \"string\", \"description\": \"string\" } name: string description: string Parameters Name In Type Required Description pulp_id path string(uuid) true A UUID string identifying this rbac content guard. body body PatchedRBACContentGuard true none Example responses 200 Response { \"pulp_href\": \"http://example.com\", \"pulp_created\": \"2019-08-24T14:15:22Z\", \"name\": \"string\", \"description\": \"string\", \"users\": [ { \"username\": \"string\", \"pulp_href\": \"http://example.com\" } ], \"groups\": [ { \"name\": \"string\", \"pulp_href\": \"http://example.com\", \"id\": 0 } ] } Responses Status Meaning Description Schema 200 OK none RBACContentGuardResponse This operation does not require authentication contentguards_core_rbac_delete Code samples package main import ( \"bytes\" \"net/http\" ) func main() { data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"DELETE\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/contentguards/core/rbac/{pulp_id}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/contentguards/core/rbac/{pulp_id}/', { method: 'DELETE' }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests r = requests.delete('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/contentguards/core/rbac/{pulp_id}/') print(r.json()) require 'rest-client' require 'json' result = RestClient.delete 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/contentguards/core/rbac/{pulp_id}/', params: { } p JSON.parse(result) DELETE /api/automation-hub/pulp/api/v3/contentguards/core/rbac/{pulp_id}/ Delete a rbac content guard Viewset for creating contentguards that use RBAC to protect content. Has add and remove actions for managing permission for users and groups to download content protected by this guard. Parameters Name In Type Required Description pulp_id path string(uuid) true A UUID string identifying this rbac content guard. Responses Status Meaning Description Schema 204 No Content No response body None This operation does not require authentication contentguards_core_rbac_add_role Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Content-Type\": []string{\"application/json\"}, \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"POST\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/contentguards/core/rbac/{pulp_id}/add_role/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const inputBody = '{ \"users\": [], \"groups\": [], \"role\": \"string\" }'; const headers = { 'Content-Type':'application/json', 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/contentguards/core/rbac/{pulp_id}/add_role/', { method: 'POST', body: inputBody, headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Content-Type': 'application/json', 'Accept': 'application/json' } r = requests.post('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/contentguards/core/rbac/{pulp_id}/add_role/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Content-Type' => 'application/json', 'Accept' => 'application/json' } result = RestClient.post 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/contentguards/core/rbac/{pulp_id}/add_role/', params: { }, headers: headers p JSON.parse(result) POST /api/automation-hub/pulp/api/v3/contentguards/core/rbac/{pulp_id}/add_role/ Add a role for this object to users/groups. Body parameter { \"users\": [], \"groups\": [], \"role\": \"string\" } users: [] groups: [] role: string Parameters Name In Type Required Description pulp_id path string(uuid) true A UUID string identifying this rbac content guard. body body NestedRole true none Example responses 201 Response { \"users\": [], \"groups\": [], \"role\": \"string\" } Responses Status Meaning Description Schema 201 Created none NestedRoleResponse This operation does not require authentication contentguards_core_rbac_list_roles Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/contentguards/core/rbac/{pulp_id}/list_roles/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/contentguards/core/rbac/{pulp_id}/list_roles/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/contentguards/core/rbac/{pulp_id}/list_roles/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/contentguards/core/rbac/{pulp_id}/list_roles/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/pulp/api/v3/contentguards/core/rbac/{pulp_id}/list_roles/ List roles assigned to this object. Parameters Name In Type Required Description pulp_id path string(uuid) true A UUID string identifying this rbac content guard. fields query string false A list of fields to include in the response. exclude_fields query string false A list of fields to exclude from the response. Example responses 200 Response { \"roles\": [ { \"users\": [], \"groups\": [], \"role\": \"string\" } ] } Responses Status Meaning Description Schema 200 OK none ObjectRolesResponse This operation does not require authentication contentguards_core_rbac_my_permissions Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/contentguards/core/rbac/{pulp_id}/my_permissions/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/contentguards/core/rbac/{pulp_id}/my_permissions/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/contentguards/core/rbac/{pulp_id}/my_permissions/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/contentguards/core/rbac/{pulp_id}/my_permissions/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/pulp/api/v3/contentguards/core/rbac/{pulp_id}/my_permissions/ List permissions available to the current user on this object. Parameters Name In Type Required Description pulp_id path string(uuid) true A UUID string identifying this rbac content guard. fields query string false A list of fields to include in the response. exclude_fields query string false A list of fields to exclude from the response. Example responses 200 Response { \"permissions\": [ \"string\" ] } Responses Status Meaning Description Schema 200 OK none MyPermissionsResponse This operation does not require authentication contentguards_core_rbac_remove_role Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Content-Type\": []string{\"application/json\"}, \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"POST\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/contentguards/core/rbac/{pulp_id}/remove_role/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const inputBody = '{ \"users\": [], \"groups\": [], \"role\": \"string\" }'; const headers = { 'Content-Type':'application/json', 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/contentguards/core/rbac/{pulp_id}/remove_role/', { method: 'POST', body: inputBody, headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Content-Type': 'application/json', 'Accept': 'application/json' } r = requests.post('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/contentguards/core/rbac/{pulp_id}/remove_role/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Content-Type' => 'application/json', 'Accept' => 'application/json' } result = RestClient.post 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/contentguards/core/rbac/{pulp_id}/remove_role/', params: { }, headers: headers p JSON.parse(result) POST /api/automation-hub/pulp/api/v3/contentguards/core/rbac/{pulp_id}/remove_role/ Remove a role for this object from users/groups. Body parameter { \"users\": [], \"groups\": [], \"role\": \"string\" } users: [] groups: [] role: string Parameters Name In Type Required Description pulp_id path string(uuid) true A UUID string identifying this rbac content guard. body body NestedRole true none Example responses 201 Response { \"users\": [], \"groups\": [], \"role\": \"string\" } Responses Status Meaning Description Schema 201 Created none NestedRoleResponse This operation does not require authentication Distributions distributions_list Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/distributions/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/distributions/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/distributions/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/distributions/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/pulp/api/v3/distributions/ List distributions A customized named ModelViewSet that knows how to register itself with the Pulp API router. This viewset is discoverable by its name. \"Normal\" Django Models and Master/Detail models are supported by the register_with method. Attributes: lookup_field (str): The name of the field by which an object should be looked up, in addition to any parent lookups if this ViewSet is nested. Defaults to 'pk' endpoint_name (str): The name of the final path segment that should identify the ViewSet's collection endpoint. nest_prefix (str): Optional prefix under which this ViewSet should be nested. This must correspond to the \"parent_prefix\" of a router with rest_framework_nested.NestedMixin. None indicates this ViewSet should not be nested. parent_lookup_kwargs (dict): Optional mapping of key names that would appear in self.kwargs to django model filter expressions that can be used with the corresponding value from self.kwargs, used only by a nested ViewSet to filter based on the parent object's identity. schema (DefaultSchema): The schema class to use by default in a viewset. Parameters Name In Type Required Description base_path query string false none base_path__contains query string false Filter results where base_path contains value base_path__icontains query string false Filter results where base_path contains value base_path__in query array[string] false Filter results where base_path is in a comma-separated list of values limit query integer false Number of results to return per page. name query string false none name__contains query string false Filter results where name contains value name__icontains query string false Filter results where name contains value name__in query array[string] false Filter results where name is in a comma-separated list of values name__startswith query string false Filter results where name starts with value offset query integer false The initial index from which to return the results. ordering query array[string] false Ordering pulp_label_select query string false Filter labels by search string with_content query string false Filter distributions based on the content served by them fields query string false A list of fields to include in the response. exclude_fields query string false A list of fields to exclude from the response. Enumerated Values Parameter Value ordering -ansible_ansibledistribution ordering -base_path ordering -container_containerdistribution ordering -content_guard ordering -group_roles ordering -name ordering -pk ordering -publication ordering -pulp_created ordering -pulp_id ordering -pulp_labels ordering -pulp_last_updated ordering -pulp_type ordering -remote ordering -repository ordering -repository_version ordering -user_roles ordering ansible_ansibledistribution ordering base_path ordering container_containerdistribution ordering content_guard ordering group_roles ordering name ordering pk ordering publication ordering pulp_created ordering pulp_id ordering pulp_labels ordering pulp_last_updated ordering pulp_type ordering remote ordering repository ordering repository_version ordering user_roles Example responses 200 Response { \"meta\": { \"count\": 123 }, \"links\": { \"first\": \"string\", \"previous\": \"string\", \"next\": \"string\", \"last\": \"string\" }, \"data\": [ { \"pulp_id\": \"f3ad2d41-3c12-4e29-ba19-4d3927e49b47\", \"name\": \"string\", \"base_path\": \"string\", \"repository\": { \"name\": \"string\", \"description\": \"string\", \"pulp_id\": \"f3ad2d41-3c12-4e29-ba19-4d3927e49b47\", \"pulp_last_updated\": \"2019-08-24T14:15:22Z\", \"content_count\": 0, \"gpgkey\": \"string\" } } ] } Responses Status Meaning Description Schema 200 OK none PaginatedDistributionResponseList This operation does not require authentication Distributions: Ansible distributions_ansible_ansible_list Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/distributions/ansible/ansible/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/distributions/ansible/ansible/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/distributions/ansible/ansible/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/distributions/ansible/ansible/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/pulp/api/v3/distributions/ansible/ansible/ List ansible distributions ViewSet for Ansible Distributions. Parameters Name In Type Required Description base_path query string false none base_path__contains query string false Filter results where base_path contains value base_path__icontains query string false Filter results where base_path contains value base_path__in query array[string] false Filter results where base_path is in a comma-separated list of values limit query integer false Number of results to return per page. name query string false none name__contains query string false Filter results where name contains value name__icontains query string false Filter results where name contains value name__in query array[string] false Filter results where name is in a comma-separated list of values name__startswith query string false Filter results where name starts with value offset query integer false The initial index from which to return the results. ordering query array[string] false Ordering pulp_label_select query string false Filter labels by search string with_content query string false Filter distributions based on the content served by them fields query string false A list of fields to include in the response. exclude_fields query string false A list of fields to exclude from the response. Enumerated Values Parameter Value ordering -ansible_ansibledistribution ordering -base_path ordering -container_containerdistribution ordering -content_guard ordering -group_roles ordering -name ordering -pk ordering -publication ordering -pulp_created ordering -pulp_id ordering -pulp_labels ordering -pulp_last_updated ordering -pulp_type ordering -remote ordering -repository ordering -repository_version ordering -user_roles ordering ansible_ansibledistribution ordering base_path ordering container_containerdistribution ordering content_guard ordering group_roles ordering name ordering pk ordering publication ordering pulp_created ordering pulp_id ordering pulp_labels ordering pulp_last_updated ordering pulp_type ordering remote ordering repository ordering repository_version ordering user_roles Example responses 200 Response { \"count\": 123, \"next\": \"http://api.example.org/accounts/?offset=400&limit=100\", \"previous\": \"http://api.example.org/accounts/?offset=200&limit=100\", \"results\": [ { \"pulp_href\": \"http://example.com\", \"pulp_created\": \"2019-08-24T14:15:22Z\", \"base_path\": \"string\", \"content_guard\": \"http://example.com\", \"name\": \"string\", \"repository\": \"http://example.com\", \"repository_version\": \"http://example.com\", \"client_url\": \"string\", \"pulp_labels\": {} } ] } Responses Status Meaning Description Schema 200 OK none Paginatedansible.AnsibleDistributionResponseList This operation does not require authentication distributions_ansible_ansible_create Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Content-Type\": []string{\"application/json\"}, \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"POST\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/distributions/ansible/ansible/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const inputBody = '{ \"base_path\": \"string\", \"content_guard\": \"http://example.com\", \"name\": \"string\", \"repository\": \"http://example.com\", \"repository_version\": \"http://example.com\", \"pulp_labels\": {} }'; const headers = { 'Content-Type':'application/json', 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/distributions/ansible/ansible/', { method: 'POST', body: inputBody, headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Content-Type': 'application/json', 'Accept': 'application/json' } r = requests.post('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/distributions/ansible/ansible/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Content-Type' => 'application/json', 'Accept' => 'application/json' } result = RestClient.post 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/distributions/ansible/ansible/', params: { }, headers: headers p JSON.parse(result) POST /api/automation-hub/pulp/api/v3/distributions/ansible/ansible/ Create an ansible distribution Trigger an asynchronous create task Body parameter { \"base_path\": \"string\", \"content_guard\": \"http://example.com\", \"name\": \"string\", \"repository\": \"http://example.com\", \"repository_version\": \"http://example.com\", \"pulp_labels\": {} } base_path: string content_guard: http://example.com name: string repository: http://example.com repository_version: http://example.com pulp_labels: {} Parameters Name In Type Required Description body body ansible.AnsibleDistribution true none Example responses 202 Response { \"task\": \"http://example.com\" } Responses Status Meaning Description Schema 202 Accepted none AsyncOperationResponse This operation does not require authentication distributions_ansible_ansible_read Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/distributions/ansible/ansible/{pulp_id}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/distributions/ansible/ansible/{pulp_id}/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/distributions/ansible/ansible/{pulp_id}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/distributions/ansible/ansible/{pulp_id}/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/pulp/api/v3/distributions/ansible/ansible/{pulp_id}/ Inspect an ansible distribution ViewSet for Ansible Distributions. Parameters Name In Type Required Description pulp_id path string(uuid) true A UUID string identifying this ansible distribution. fields query string false A list of fields to include in the response. exclude_fields query string false A list of fields to exclude from the response. Example responses 200 Response { \"pulp_href\": \"http://example.com\", \"pulp_created\": \"2019-08-24T14:15:22Z\", \"base_path\": \"string\", \"content_guard\": \"http://example.com\", \"name\": \"string\", \"repository\": \"http://example.com\", \"repository_version\": \"http://example.com\", \"client_url\": \"string\", \"pulp_labels\": {} } Responses Status Meaning Description Schema 200 OK none ansible.AnsibleDistributionResponse This operation does not require authentication distributions_ansible_ansible_update Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Content-Type\": []string{\"application/json\"}, \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"PUT\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/distributions/ansible/ansible/{pulp_id}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const inputBody = '{ \"base_path\": \"string\", \"content_guard\": \"http://example.com\", \"name\": \"string\", \"repository\": \"http://example.com\", \"repository_version\": \"http://example.com\", \"pulp_labels\": {} }'; const headers = { 'Content-Type':'application/json', 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/distributions/ansible/ansible/{pulp_id}/', { method: 'PUT', body: inputBody, headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Content-Type': 'application/json', 'Accept': 'application/json' } r = requests.put('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/distributions/ansible/ansible/{pulp_id}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Content-Type' => 'application/json', 'Accept' => 'application/json' } result = RestClient.put 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/distributions/ansible/ansible/{pulp_id}/', params: { }, headers: headers p JSON.parse(result) PUT /api/automation-hub/pulp/api/v3/distributions/ansible/ansible/{pulp_id}/ Update an ansible distribution Trigger an asynchronous update task Body parameter { \"base_path\": \"string\", \"content_guard\": \"http://example.com\", \"name\": \"string\", \"repository\": \"http://example.com\", \"repository_version\": \"http://example.com\", \"pulp_labels\": {} } base_path: string content_guard: http://example.com name: string repository: http://example.com repository_version: http://example.com pulp_labels: {} Parameters Name In Type Required Description pulp_id path string(uuid) true A UUID string identifying this ansible distribution. body body ansible.AnsibleDistribution true none Example responses 202 Response { \"task\": \"http://example.com\" } Responses Status Meaning Description Schema 202 Accepted none AsyncOperationResponse This operation does not require authentication distributions_ansible_ansible_partial_update Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Content-Type\": []string{\"application/json\"}, \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"PATCH\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/distributions/ansible/ansible/{pulp_id}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const inputBody = '{ \"base_path\": \"string\", \"content_guard\": \"http://example.com\", \"name\": \"string\", \"repository\": \"http://example.com\", \"repository_version\": \"http://example.com\", \"pulp_labels\": {} }'; const headers = { 'Content-Type':'application/json', 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/distributions/ansible/ansible/{pulp_id}/', { method: 'PATCH', body: inputBody, headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Content-Type': 'application/json', 'Accept': 'application/json' } r = requests.patch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/distributions/ansible/ansible/{pulp_id}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Content-Type' => 'application/json', 'Accept' => 'application/json' } result = RestClient.patch 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/distributions/ansible/ansible/{pulp_id}/', params: { }, headers: headers p JSON.parse(result) PATCH /api/automation-hub/pulp/api/v3/distributions/ansible/ansible/{pulp_id}/ Update an ansible distribution Trigger an asynchronous partial update task Body parameter { \"base_path\": \"string\", \"content_guard\": \"http://example.com\", \"name\": \"string\", \"repository\": \"http://example.com\", \"repository_version\": \"http://example.com\", \"pulp_labels\": {} } base_path: string content_guard: http://example.com name: string repository: http://example.com repository_version: http://example.com pulp_labels: {} Parameters Name In Type Required Description pulp_id path string(uuid) true A UUID string identifying this ansible distribution. body body Patchedansible.AnsibleDistribution true none Example responses 202 Response { \"task\": \"http://example.com\" } Responses Status Meaning Description Schema 202 Accepted none AsyncOperationResponse This operation does not require authentication distributions_ansible_ansible_delete Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"DELETE\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/distributions/ansible/ansible/{pulp_id}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/distributions/ansible/ansible/{pulp_id}/', { method: 'DELETE', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.delete('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/distributions/ansible/ansible/{pulp_id}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.delete 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/distributions/ansible/ansible/{pulp_id}/', params: { }, headers: headers p JSON.parse(result) DELETE /api/automation-hub/pulp/api/v3/distributions/ansible/ansible/{pulp_id}/ Delete an ansible distribution Trigger an asynchronous delete task Parameters Name In Type Required Description pulp_id path string(uuid) true A UUID string identifying this ansible distribution. Example responses 202 Response { \"task\": \"http://example.com\" } Responses Status Meaning Description Schema 202 Accepted none AsyncOperationResponse This operation does not require authentication Distributions: Container distributions_container_container_list Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/distributions/container/container/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/distributions/container/container/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/distributions/container/container/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/distributions/container/container/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/pulp/api/v3/distributions/container/container/ List container distributions The Container Distribution will serve the latest version of a Repository if repository is specified. The Container Distribution will serve a specific repository version if repository_version . Note that either repository or repository_version can be set on a Container Distribution, but not both. Parameters Name In Type Required Description base_path query string false none base_path__contains query string false Filter results where base_path contains value base_path__icontains query string false Filter results where base_path contains value base_path__in query array[string] false Filter results where base_path is in a comma-separated list of values limit query integer false Number of results to return per page. name query string false none name__contains query string false Filter results where name contains value name__icontains query string false Filter results where name contains value name__in query array[string] false Filter results where name is in a comma-separated list of values name__startswith query string false Filter results where name starts with value namespace__name query string false none offset query integer false The initial index from which to return the results. ordering query array[string] false Ordering pulp_label_select query string false Filter labels by search string with_content query string false Filter distributions based on the content served by them fields query string false A list of fields to include in the response. exclude_fields query string false A list of fields to exclude from the response. Enumerated Values Parameter Value ordering -base_path ordering -containerdistroreadme ordering -content_guard ordering -description ordering -distribution_ptr ordering -group_roles ordering -name ordering -namespace ordering -pk ordering -private ordering -publication ordering -pulp_created ordering -pulp_id ordering -pulp_labels ordering -pulp_last_updated ordering -pulp_type ordering -remote ordering -repository ordering -repository_version ordering -user_roles ordering base_path ordering containerdistroreadme ordering content_guard ordering description ordering distribution_ptr ordering group_roles ordering name ordering namespace ordering pk ordering private ordering publication ordering pulp_created ordering pulp_id ordering pulp_labels ordering pulp_last_updated ordering pulp_type ordering remote ordering repository ordering repository_version ordering user_roles Example responses 200 Response { \"count\": 123, \"next\": \"http://api.example.org/accounts/?offset=400&limit=100\", \"previous\": \"http://api.example.org/accounts/?offset=200&limit=100\", \"results\": [ { \"content_guard\": \"http://example.com\", \"pulp_labels\": {}, \"pulp_created\": \"2019-08-24T14:15:22Z\", \"base_path\": \"string\", \"repository\": \"http://example.com\", \"pulp_href\": \"http://example.com\", \"name\": \"string\", \"repository_version\": \"http://example.com\", \"registry_path\": \"string\", \"namespace\": \"http://example.com\", \"private\": true, \"description\": \"string\" } ] } Responses Status Meaning Description Schema 200 OK none Paginatedcontainer.ContainerDistributionResponseList This operation does not require authentication distributions_container_container_create Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Content-Type\": []string{\"application/json\"}, \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"POST\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/distributions/container/container/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const inputBody = '{ \"content_guard\": \"http://example.com\", \"pulp_labels\": {}, \"base_path\": \"string\", \"repository\": \"http://example.com\", \"name\": \"string\", \"repository_version\": \"http://example.com\", \"private\": true, \"description\": \"string\" }'; const headers = { 'Content-Type':'application/json', 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/distributions/container/container/', { method: 'POST', body: inputBody, headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Content-Type': 'application/json', 'Accept': 'application/json' } r = requests.post('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/distributions/container/container/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Content-Type' => 'application/json', 'Accept' => 'application/json' } result = RestClient.post 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/distributions/container/container/', params: { }, headers: headers p JSON.parse(result) POST /api/automation-hub/pulp/api/v3/distributions/container/container/ Create a container distribution Trigger an asynchronous create task Body parameter { \"content_guard\": \"http://example.com\", \"pulp_labels\": {}, \"base_path\": \"string\", \"repository\": \"http://example.com\", \"name\": \"string\", \"repository_version\": \"http://example.com\", \"private\": true, \"description\": \"string\" } content_guard: http://example.com pulp_labels: {} base_path: string repository: http://example.com name: string repository_version: http://example.com private: true description: string Parameters Name In Type Required Description body body container.ContainerDistribution true none Example responses 202 Response { \"task\": \"http://example.com\" } Responses Status Meaning Description Schema 202 Accepted none AsyncOperationResponse This operation does not require authentication distributions_container_container_read Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/distributions/container/container/{pulp_id}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/distributions/container/container/{pulp_id}/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/distributions/container/container/{pulp_id}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/distributions/container/container/{pulp_id}/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/pulp/api/v3/distributions/container/container/{pulp_id}/ Inspect a container distribution The Container Distribution will serve the latest version of a Repository if repository is specified. The Container Distribution will serve a specific repository version if repository_version . Note that either repository or repository_version can be set on a Container Distribution, but not both. Parameters Name In Type Required Description pulp_id path string(uuid) true A UUID string identifying this container distribution. fields query string false A list of fields to include in the response. exclude_fields query string false A list of fields to exclude from the response. Example responses 200 Response { \"content_guard\": \"http://example.com\", \"pulp_labels\": {}, \"pulp_created\": \"2019-08-24T14:15:22Z\", \"base_path\": \"string\", \"repository\": \"http://example.com\", \"pulp_href\": \"http://example.com\", \"name\": \"string\", \"repository_version\": \"http://example.com\", \"registry_path\": \"string\", \"namespace\": \"http://example.com\", \"private\": true, \"description\": \"string\" } Responses Status Meaning Description Schema 200 OK none container.ContainerDistributionResponse This operation does not require authentication distributions_container_container_update Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Content-Type\": []string{\"application/json\"}, \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"PUT\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/distributions/container/container/{pulp_id}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const inputBody = '{ \"content_guard\": \"http://example.com\", \"pulp_labels\": {}, \"base_path\": \"string\", \"repository\": \"http://example.com\", \"name\": \"string\", \"repository_version\": \"http://example.com\", \"private\": true, \"description\": \"string\" }'; const headers = { 'Content-Type':'application/json', 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/distributions/container/container/{pulp_id}/', { method: 'PUT', body: inputBody, headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Content-Type': 'application/json', 'Accept': 'application/json' } r = requests.put('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/distributions/container/container/{pulp_id}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Content-Type' => 'application/json', 'Accept' => 'application/json' } result = RestClient.put 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/distributions/container/container/{pulp_id}/', params: { }, headers: headers p JSON.parse(result) PUT /api/automation-hub/pulp/api/v3/distributions/container/container/{pulp_id}/ Update a container distribution Trigger an asynchronous update task Body parameter { \"content_guard\": \"http://example.com\", \"pulp_labels\": {}, \"base_path\": \"string\", \"repository\": \"http://example.com\", \"name\": \"string\", \"repository_version\": \"http://example.com\", \"private\": true, \"description\": \"string\" } content_guard: http://example.com pulp_labels: {} base_path: string repository: http://example.com name: string repository_version: http://example.com private: true description: string Parameters Name In Type Required Description pulp_id path string(uuid) true A UUID string identifying this container distribution. body body container.ContainerDistribution true none Example responses 202 Response { \"task\": \"http://example.com\" } Responses Status Meaning Description Schema 202 Accepted none AsyncOperationResponse This operation does not require authentication distributions_container_container_partial_update Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Content-Type\": []string{\"application/json\"}, \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"PATCH\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/distributions/container/container/{pulp_id}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const inputBody = '{ \"content_guard\": \"http://example.com\", \"pulp_labels\": {}, \"base_path\": \"string\", \"repository\": \"http://example.com\", \"name\": \"string\", \"repository_version\": \"http://example.com\", \"private\": true, \"description\": \"string\" }'; const headers = { 'Content-Type':'application/json', 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/distributions/container/container/{pulp_id}/', { method: 'PATCH', body: inputBody, headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Content-Type': 'application/json', 'Accept': 'application/json' } r = requests.patch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/distributions/container/container/{pulp_id}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Content-Type' => 'application/json', 'Accept' => 'application/json' } result = RestClient.patch 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/distributions/container/container/{pulp_id}/', params: { }, headers: headers p JSON.parse(result) PATCH /api/automation-hub/pulp/api/v3/distributions/container/container/{pulp_id}/ Update a container distribution Trigger an asynchronous partial update task Body parameter { \"content_guard\": \"http://example.com\", \"pulp_labels\": {}, \"base_path\": \"string\", \"repository\": \"http://example.com\", \"name\": \"string\", \"repository_version\": \"http://example.com\", \"private\": true, \"description\": \"string\" } content_guard: http://example.com pulp_labels: {} base_path: string repository: http://example.com name: string repository_version: http://example.com private: true description: string Parameters Name In Type Required Description pulp_id path string(uuid) true A UUID string identifying this container distribution. body body Patchedcontainer.ContainerDistribution true none Example responses 202 Response { \"task\": \"http://example.com\" } Responses Status Meaning Description Schema 202 Accepted none AsyncOperationResponse This operation does not require authentication distributions_container_container_delete Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"DELETE\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/distributions/container/container/{pulp_id}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/distributions/container/container/{pulp_id}/', { method: 'DELETE', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.delete('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/distributions/container/container/{pulp_id}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.delete 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/distributions/container/container/{pulp_id}/', params: { }, headers: headers p JSON.parse(result) DELETE /api/automation-hub/pulp/api/v3/distributions/container/container/{pulp_id}/ Delete a container distribution Trigger an asynchronous delete task Parameters Name In Type Required Description pulp_id path string(uuid) true A UUID string identifying this container distribution. Example responses 202 Response { \"task\": \"http://example.com\" } Responses Status Meaning Description Schema 202 Accepted none AsyncOperationResponse This operation does not require authentication distributions_container_container_add_role Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Content-Type\": []string{\"application/json\"}, \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"POST\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/distributions/container/container/{pulp_id}/add_role/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const inputBody = '{ \"users\": [], \"groups\": [], \"role\": \"string\" }'; const headers = { 'Content-Type':'application/json', 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/distributions/container/container/{pulp_id}/add_role/', { method: 'POST', body: inputBody, headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Content-Type': 'application/json', 'Accept': 'application/json' } r = requests.post('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/distributions/container/container/{pulp_id}/add_role/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Content-Type' => 'application/json', 'Accept' => 'application/json' } result = RestClient.post 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/distributions/container/container/{pulp_id}/add_role/', params: { }, headers: headers p JSON.parse(result) POST /api/automation-hub/pulp/api/v3/distributions/container/container/{pulp_id}/add_role/ Add a role for this object to users/groups. Body parameter { \"users\": [], \"groups\": [], \"role\": \"string\" } users: [] groups: [] role: string Parameters Name In Type Required Description pulp_id path string(uuid) true A UUID string identifying this container distribution. body body NestedRole true none Example responses 201 Response { \"users\": [], \"groups\": [], \"role\": \"string\" } Responses Status Meaning Description Schema 201 Created none NestedRoleResponse This operation does not require authentication distributions_container_container_list_roles Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/distributions/container/container/{pulp_id}/list_roles/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/distributions/container/container/{pulp_id}/list_roles/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/distributions/container/container/{pulp_id}/list_roles/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/distributions/container/container/{pulp_id}/list_roles/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/pulp/api/v3/distributions/container/container/{pulp_id}/list_roles/ List roles assigned to this object. Parameters Name In Type Required Description pulp_id path string(uuid) true A UUID string identifying this container distribution. fields query string false A list of fields to include in the response. exclude_fields query string false A list of fields to exclude from the response. Example responses 200 Response { \"roles\": [ { \"users\": [], \"groups\": [], \"role\": \"string\" } ] } Responses Status Meaning Description Schema 200 OK none ObjectRolesResponse This operation does not require authentication distributions_container_container_my_permissions Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/distributions/container/container/{pulp_id}/my_permissions/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/distributions/container/container/{pulp_id}/my_permissions/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/distributions/container/container/{pulp_id}/my_permissions/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/distributions/container/container/{pulp_id}/my_permissions/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/pulp/api/v3/distributions/container/container/{pulp_id}/my_permissions/ List permissions available to the current user on this object. Parameters Name In Type Required Description pulp_id path string(uuid) true A UUID string identifying this container distribution. fields query string false A list of fields to include in the response. exclude_fields query string false A list of fields to exclude from the response. Example responses 200 Response { \"permissions\": [ \"string\" ] } Responses Status Meaning Description Schema 200 OK none MyPermissionsResponse This operation does not require authentication distributions_container_container_remove_role Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Content-Type\": []string{\"application/json\"}, \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"POST\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/distributions/container/container/{pulp_id}/remove_role/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const inputBody = '{ \"users\": [], \"groups\": [], \"role\": \"string\" }'; const headers = { 'Content-Type':'application/json', 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/distributions/container/container/{pulp_id}/remove_role/', { method: 'POST', body: inputBody, headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Content-Type': 'application/json', 'Accept': 'application/json' } r = requests.post('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/distributions/container/container/{pulp_id}/remove_role/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Content-Type' => 'application/json', 'Accept' => 'application/json' } result = RestClient.post 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/distributions/container/container/{pulp_id}/remove_role/', params: { }, headers: headers p JSON.parse(result) POST /api/automation-hub/pulp/api/v3/distributions/container/container/{pulp_id}/remove_role/ Remove a role for this object from users/groups. Body parameter { \"users\": [], \"groups\": [], \"role\": \"string\" } users: [] groups: [] role: string Parameters Name In Type Required Description pulp_id path string(uuid) true A UUID string identifying this container distribution. body body NestedRole true none Example responses 201 Response { \"users\": [], \"groups\": [], \"role\": \"string\" } Responses Status Meaning Description Schema 201 Created none NestedRoleResponse This operation does not require authentication Docs: Api.Json docs_api.json_get Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/vnd.oai.openapi+json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/docs/api.json\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/vnd.oai.openapi+json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/docs/api.json', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/vnd.oai.openapi+json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/docs/api.json', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/vnd.oai.openapi+json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/docs/api.json', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/pulp/api/v3/docs/api.json OpenApi3 schema for this API. Format can be selected via content negotiation. YAML: application/vnd.oai.openapi JSON: application/vnd.oai.openapi+json Parameters Name In Type Required Description lang query string false none fields query string false A list of fields to include in the response. exclude_fields query string false A list of fields to exclude from the response. Enumerated Values Parameter Value lang en-us lang es lang fr lang ja lang ko lang nl lang zh-hans Example responses 200 Response {} Responses Status Meaning Description Schema 200 OK none Inline Response Schema This operation does not require authentication Docs: Api.Yaml docs_api.yaml_get Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/vnd.oai.openapi\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/docs/api.yaml\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/vnd.oai.openapi' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/docs/api.yaml', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/vnd.oai.openapi' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/docs/api.yaml', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/vnd.oai.openapi' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/docs/api.yaml', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/pulp/api/v3/docs/api.yaml OpenApi3 schema for this API. Format can be selected via content negotiation. YAML: application/vnd.oai.openapi JSON: application/vnd.oai.openapi+json Parameters Name In Type Required Description lang query string false none fields query string false A list of fields to include in the response. exclude_fields query string false A list of fields to exclude from the response. Enumerated Values Parameter Value lang en-us lang es lang fr lang ja lang ko lang nl lang zh-hans Example responses 200 Response Responses Status Meaning Description Schema 200 OK none Inline Response Schema This operation does not require authentication Exporters: Filesystem exporters_core_filesystem_list Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/exporters/core/filesystem/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/exporters/core/filesystem/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/exporters/core/filesystem/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/exporters/core/filesystem/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/pulp/api/v3/exporters/core/filesystem/ List filesystem exporters Endpoint for managing FilesystemExporters. FilesystemExporters are provided as a tech preview. Parameters Name In Type Required Description limit query integer false Number of results to return per page. name query string false none name__contains query string false Filter results where name contains value name__icontains query string false Filter results where name contains value name__in query array[string] false Filter results where name is in a comma-separated list of values name__startswith query string false Filter results where name starts with value offset query integer false The initial index from which to return the results. ordering query array[string] false Ordering fields query string false A list of fields to include in the response. exclude_fields query string false A list of fields to exclude from the response. Enumerated Values Parameter Value ordering -core_fs_exporter ordering -core_pulp_exporter ordering -export ordering -group_roles ordering -name ordering -pk ordering -pulp_created ordering -pulp_id ordering -pulp_labels ordering -pulp_last_updated ordering -pulp_type ordering -user_roles ordering core_fs_exporter ordering core_pulp_exporter ordering export ordering group_roles ordering name ordering pk ordering pulp_created ordering pulp_id ordering pulp_labels ordering pulp_last_updated ordering pulp_type ordering user_roles Example responses 200 Response { \"count\": 123, \"next\": \"http://api.example.org/accounts/?offset=400&limit=100\", \"previous\": \"http://api.example.org/accounts/?offset=200&limit=100\", \"results\": [ { \"pulp_href\": \"http://example.com\", \"pulp_created\": \"2019-08-24T14:15:22Z\", \"name\": \"string\", \"path\": \"string\", \"method\": \"write\" } ] } Responses Status Meaning Description Schema 200 OK none PaginatedFilesystemExporterResponseList This operation does not require authentication exporters_core_filesystem_create Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Content-Type\": []string{\"application/json\"}, \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"POST\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/exporters/core/filesystem/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const inputBody = '{ \"name\": \"string\", \"path\": \"string\", \"method\": \"write\" }'; const headers = { 'Content-Type':'application/json', 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/exporters/core/filesystem/', { method: 'POST', body: inputBody, headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Content-Type': 'application/json', 'Accept': 'application/json' } r = requests.post('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/exporters/core/filesystem/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Content-Type' => 'application/json', 'Accept' => 'application/json' } result = RestClient.post 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/exporters/core/filesystem/', params: { }, headers: headers p JSON.parse(result) POST /api/automation-hub/pulp/api/v3/exporters/core/filesystem/ Create a filesystem exporter Endpoint for managing FilesystemExporters. FilesystemExporters are provided as a tech preview. Body parameter { \"name\": \"string\", \"path\": \"string\", \"method\": \"write\" } name: string path: string method: write Parameters Name In Type Required Description body body FilesystemExporter true none Example responses 201 Response { \"pulp_href\": \"http://example.com\", \"pulp_created\": \"2019-08-24T14:15:22Z\", \"name\": \"string\", \"path\": \"string\", \"method\": \"write\" } Responses Status Meaning Description Schema 201 Created none FilesystemExporterResponse This operation does not require authentication exporters_core_filesystem_read Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/exporters/core/filesystem/{pulp_id}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/exporters/core/filesystem/{pulp_id}/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/exporters/core/filesystem/{pulp_id}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/exporters/core/filesystem/{pulp_id}/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/pulp/api/v3/exporters/core/filesystem/{pulp_id}/ Inspect a filesystem exporter Endpoint for managing FilesystemExporters. FilesystemExporters are provided as a tech preview. Parameters Name In Type Required Description pulp_id path string(uuid) true A UUID string identifying this filesystem exporter. fields query string false A list of fields to include in the response. exclude_fields query string false A list of fields to exclude from the response. Example responses 200 Response { \"pulp_href\": \"http://example.com\", \"pulp_created\": \"2019-08-24T14:15:22Z\", \"name\": \"string\", \"path\": \"string\", \"method\": \"write\" } Responses Status Meaning Description Schema 200 OK none FilesystemExporterResponse This operation does not require authentication exporters_core_filesystem_update Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Content-Type\": []string{\"application/json\"}, \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"PUT\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/exporters/core/filesystem/{pulp_id}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const inputBody = '{ \"name\": \"string\", \"path\": \"string\", \"method\": \"write\" }'; const headers = { 'Content-Type':'application/json', 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/exporters/core/filesystem/{pulp_id}/', { method: 'PUT', body: inputBody, headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Content-Type': 'application/json', 'Accept': 'application/json' } r = requests.put('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/exporters/core/filesystem/{pulp_id}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Content-Type' => 'application/json', 'Accept' => 'application/json' } result = RestClient.put 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/exporters/core/filesystem/{pulp_id}/', params: { }, headers: headers p JSON.parse(result) PUT /api/automation-hub/pulp/api/v3/exporters/core/filesystem/{pulp_id}/ Update a filesystem exporter Trigger an asynchronous update task Body parameter { \"name\": \"string\", \"path\": \"string\", \"method\": \"write\" } name: string path: string method: write Parameters Name In Type Required Description pulp_id path string(uuid) true A UUID string identifying this filesystem exporter. body body FilesystemExporter true none Example responses 202 Response { \"task\": \"http://example.com\" } Responses Status Meaning Description Schema 202 Accepted none AsyncOperationResponse This operation does not require authentication exporters_core_filesystem_partial_update Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Content-Type\": []string{\"application/json\"}, \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"PATCH\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/exporters/core/filesystem/{pulp_id}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const inputBody = '{ \"name\": \"string\", \"path\": \"string\", \"method\": \"write\" }'; const headers = { 'Content-Type':'application/json', 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/exporters/core/filesystem/{pulp_id}/', { method: 'PATCH', body: inputBody, headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Content-Type': 'application/json', 'Accept': 'application/json' } r = requests.patch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/exporters/core/filesystem/{pulp_id}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Content-Type' => 'application/json', 'Accept' => 'application/json' } result = RestClient.patch 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/exporters/core/filesystem/{pulp_id}/', params: { }, headers: headers p JSON.parse(result) PATCH /api/automation-hub/pulp/api/v3/exporters/core/filesystem/{pulp_id}/ Update a filesystem exporter Trigger an asynchronous partial update task Body parameter { \"name\": \"string\", \"path\": \"string\", \"method\": \"write\" } name: string path: string method: write Parameters Name In Type Required Description pulp_id path string(uuid) true A UUID string identifying this filesystem exporter. body body PatchedFilesystemExporter true none Example responses 202 Response { \"task\": \"http://example.com\" } Responses Status Meaning Description Schema 202 Accepted none AsyncOperationResponse This operation does not require authentication exporters_core_filesystem_delete Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"DELETE\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/exporters/core/filesystem/{pulp_id}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/exporters/core/filesystem/{pulp_id}/', { method: 'DELETE', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.delete('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/exporters/core/filesystem/{pulp_id}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.delete 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/exporters/core/filesystem/{pulp_id}/', params: { }, headers: headers p JSON.parse(result) DELETE /api/automation-hub/pulp/api/v3/exporters/core/filesystem/{pulp_id}/ Delete a filesystem exporter Trigger an asynchronous delete task Parameters Name In Type Required Description pulp_id path string(uuid) true A UUID string identifying this filesystem exporter. Example responses 202 Response { \"task\": \"http://example.com\" } Responses Status Meaning Description Schema 202 Accepted none AsyncOperationResponse This operation does not require authentication Exporters: Filesystem Exports exporters_core_filesystem_exports_list Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/exporters/core/filesystem/{exporter_pk}/exports/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/exporters/core/filesystem/{exporter_pk}/exports/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/exporters/core/filesystem/{exporter_pk}/exports/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/exporters/core/filesystem/{exporter_pk}/exports/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/pulp/api/v3/exporters/core/filesystem/{exporter_pk}/exports/ List filesystem exports Endpoint for managing FilesystemExports. This endpoint is provided as a tech preview. Parameters Name In Type Required Description exporter_pk path string true none limit query integer false Number of results to return per page. offset query integer false The initial index from which to return the results. fields query string false A list of fields to include in the response. exclude_fields query string false A list of fields to exclude from the response. Example responses 200 Response { \"count\": 123, \"next\": \"http://api.example.org/accounts/?offset=400&limit=100\", \"previous\": \"http://api.example.org/accounts/?offset=200&limit=100\", \"results\": [ { \"pulp_href\": \"http://example.com\", \"pulp_created\": \"2019-08-24T14:15:22Z\", \"task\": \"http://example.com\", \"exported_resources\": [ \"http://example.com\" ], \"params\": {} } ] } Responses Status Meaning Description Schema 200 OK none PaginatedFilesystemExportResponseList This operation does not require authentication exporters_core_filesystem_exports_create Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Content-Type\": []string{\"application/json\"}, \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"POST\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/exporters/core/filesystem/{exporter_pk}/exports/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const inputBody = '{ \"task\": \"http://example.com\", \"publication\": \"http://example.com\", \"repository_version\": \"http://example.com\" }'; const headers = { 'Content-Type':'application/json', 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/exporters/core/filesystem/{exporter_pk}/exports/', { method: 'POST', body: inputBody, headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Content-Type': 'application/json', 'Accept': 'application/json' } r = requests.post('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/exporters/core/filesystem/{exporter_pk}/exports/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Content-Type' => 'application/json', 'Accept' => 'application/json' } result = RestClient.post 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/exporters/core/filesystem/{exporter_pk}/exports/', params: { }, headers: headers p JSON.parse(result) POST /api/automation-hub/pulp/api/v3/exporters/core/filesystem/{exporter_pk}/exports/ Create a filesystem export Trigger an asynchronous task to export files to the filesystem Body parameter { \"task\": \"http://example.com\", \"publication\": \"http://example.com\", \"repository_version\": \"http://example.com\" } task: http://example.com publication: http://example.com repository_version: http://example.com Parameters Name In Type Required Description exporter_pk path string true none body body FilesystemExport true none Example responses 202 Response { \"task\": \"http://example.com\" } Responses Status Meaning Description Schema 202 Accepted none AsyncOperationResponse This operation does not require authentication exporters_core_filesystem_exports_read Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/exporters/core/filesystem/{exporter_pk}/exports/{pulp_id}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/exporters/core/filesystem/{exporter_pk}/exports/{pulp_id}/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/exporters/core/filesystem/{exporter_pk}/exports/{pulp_id}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/exporters/core/filesystem/{exporter_pk}/exports/{pulp_id}/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/pulp/api/v3/exporters/core/filesystem/{exporter_pk}/exports/{pulp_id}/ Inspect a filesystem export Endpoint for managing FilesystemExports. This endpoint is provided as a tech preview. Parameters Name In Type Required Description exporter_pk path string true none pulp_id path string(uuid) true A UUID string identifying this filesystem export. fields query string false A list of fields to include in the response. exclude_fields query string false A list of fields to exclude from the response. Example responses 200 Response { \"pulp_href\": \"http://example.com\", \"pulp_created\": \"2019-08-24T14:15:22Z\", \"task\": \"http://example.com\", \"exported_resources\": [ \"http://example.com\" ], \"params\": {} } Responses Status Meaning Description Schema 200 OK none FilesystemExportResponse This operation does not require authentication exporters_core_filesystem_exports_delete Code samples package main import ( \"bytes\" \"net/http\" ) func main() { data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"DELETE\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/exporters/core/filesystem/{exporter_pk}/exports/{pulp_id}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/exporters/core/filesystem/{exporter_pk}/exports/{pulp_id}/', { method: 'DELETE' }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests r = requests.delete('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/exporters/core/filesystem/{exporter_pk}/exports/{pulp_id}/') print(r.json()) require 'rest-client' require 'json' result = RestClient.delete 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/exporters/core/filesystem/{exporter_pk}/exports/{pulp_id}/', params: { } p JSON.parse(result) DELETE /api/automation-hub/pulp/api/v3/exporters/core/filesystem/{exporter_pk}/exports/{pulp_id}/ Delete a filesystem export Endpoint for managing FilesystemExports. This endpoint is provided as a tech preview. Parameters Name In Type Required Description exporter_pk path string true none pulp_id path string(uuid) true A UUID string identifying this filesystem export. Responses Status Meaning Description Schema 204 No Content No response body None This operation does not require authentication Exporters: Pulp exporters_core_pulp_list Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/exporters/core/pulp/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/exporters/core/pulp/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/exporters/core/pulp/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/exporters/core/pulp/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/pulp/api/v3/exporters/core/pulp/ List pulp exporters ViewSet for viewing PulpExporters. Parameters Name In Type Required Description limit query integer false Number of results to return per page. name query string false none name__contains query string false Filter results where name contains value name__icontains query string false Filter results where name contains value name__in query array[string] false Filter results where name is in a comma-separated list of values name__startswith query string false Filter results where name starts with value offset query integer false The initial index from which to return the results. ordering query array[string] false Ordering fields query string false A list of fields to include in the response. exclude_fields query string false A list of fields to exclude from the response. Enumerated Values Parameter Value ordering -core_fs_exporter ordering -core_pulp_exporter ordering -export ordering -group_roles ordering -name ordering -pk ordering -pulp_created ordering -pulp_id ordering -pulp_labels ordering -pulp_last_updated ordering -pulp_type ordering -user_roles ordering core_fs_exporter ordering core_pulp_exporter ordering export ordering group_roles ordering name ordering pk ordering pulp_created ordering pulp_id ordering pulp_labels ordering pulp_last_updated ordering pulp_type ordering user_roles Example responses 200 Response { \"count\": 123, \"next\": \"http://api.example.org/accounts/?offset=400&limit=100\", \"previous\": \"http://api.example.org/accounts/?offset=200&limit=100\", \"results\": [ { \"pulp_href\": \"http://example.com\", \"pulp_created\": \"2019-08-24T14:15:22Z\", \"name\": \"string\", \"path\": \"string\", \"repositories\": [ \"http://example.com\" ], \"last_export\": \"http://example.com\" } ] } Responses Status Meaning Description Schema 200 OK none PaginatedPulpExporterResponseList This operation does not require authentication exporters_core_pulp_create Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Content-Type\": []string{\"application/json\"}, \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"POST\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/exporters/core/pulp/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const inputBody = '{ \"name\": \"string\", \"path\": \"string\", \"repositories\": [ \"http://example.com\" ], \"last_export\": \"http://example.com\" }'; const headers = { 'Content-Type':'application/json', 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/exporters/core/pulp/', { method: 'POST', body: inputBody, headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Content-Type': 'application/json', 'Accept': 'application/json' } r = requests.post('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/exporters/core/pulp/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Content-Type' => 'application/json', 'Accept' => 'application/json' } result = RestClient.post 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/exporters/core/pulp/', params: { }, headers: headers p JSON.parse(result) POST /api/automation-hub/pulp/api/v3/exporters/core/pulp/ Create a pulp exporter ViewSet for viewing PulpExporters. Body parameter { \"name\": \"string\", \"path\": \"string\", \"repositories\": [ \"http://example.com\" ], \"last_export\": \"http://example.com\" } name: string path: string repositories: - http://example.com last_export: http://example.com Parameters Name In Type Required Description body body PulpExporter true none Example responses 201 Response { \"pulp_href\": \"http://example.com\", \"pulp_created\": \"2019-08-24T14:15:22Z\", \"name\": \"string\", \"path\": \"string\", \"repositories\": [ \"http://example.com\" ], \"last_export\": \"http://example.com\" } Responses Status Meaning Description Schema 201 Created none PulpExporterResponse This operation does not require authentication exporters_core_pulp_read Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/exporters/core/pulp/{pulp_id}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/exporters/core/pulp/{pulp_id}/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/exporters/core/pulp/{pulp_id}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/exporters/core/pulp/{pulp_id}/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/pulp/api/v3/exporters/core/pulp/{pulp_id}/ Inspect a pulp exporter ViewSet for viewing PulpExporters. Parameters Name In Type Required Description pulp_id path string(uuid) true A UUID string identifying this pulp exporter. fields query string false A list of fields to include in the response. exclude_fields query string false A list of fields to exclude from the response. Example responses 200 Response { \"pulp_href\": \"http://example.com\", \"pulp_created\": \"2019-08-24T14:15:22Z\", \"name\": \"string\", \"path\": \"string\", \"repositories\": [ \"http://example.com\" ], \"last_export\": \"http://example.com\" } Responses Status Meaning Description Schema 200 OK none PulpExporterResponse This operation does not require authentication exporters_core_pulp_update Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Content-Type\": []string{\"application/json\"}, \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"PUT\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/exporters/core/pulp/{pulp_id}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const inputBody = '{ \"name\": \"string\", \"path\": \"string\", \"repositories\": [ \"http://example.com\" ], \"last_export\": \"http://example.com\" }'; const headers = { 'Content-Type':'application/json', 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/exporters/core/pulp/{pulp_id}/', { method: 'PUT', body: inputBody, headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Content-Type': 'application/json', 'Accept': 'application/json' } r = requests.put('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/exporters/core/pulp/{pulp_id}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Content-Type' => 'application/json', 'Accept' => 'application/json' } result = RestClient.put 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/exporters/core/pulp/{pulp_id}/', params: { }, headers: headers p JSON.parse(result) PUT /api/automation-hub/pulp/api/v3/exporters/core/pulp/{pulp_id}/ Update a pulp exporter Trigger an asynchronous update task Body parameter { \"name\": \"string\", \"path\": \"string\", \"repositories\": [ \"http://example.com\" ], \"last_export\": \"http://example.com\" } name: string path: string repositories: - http://example.com last_export: http://example.com Parameters Name In Type Required Description pulp_id path string(uuid) true A UUID string identifying this pulp exporter. body body PulpExporter true none Example responses 202 Response { \"task\": \"http://example.com\" } Responses Status Meaning Description Schema 202 Accepted none AsyncOperationResponse This operation does not require authentication exporters_core_pulp_partial_update Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Content-Type\": []string{\"application/json\"}, \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"PATCH\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/exporters/core/pulp/{pulp_id}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const inputBody = '{ \"name\": \"string\", \"path\": \"string\", \"repositories\": [ \"http://example.com\" ], \"last_export\": \"http://example.com\" }'; const headers = { 'Content-Type':'application/json', 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/exporters/core/pulp/{pulp_id}/', { method: 'PATCH', body: inputBody, headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Content-Type': 'application/json', 'Accept': 'application/json' } r = requests.patch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/exporters/core/pulp/{pulp_id}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Content-Type' => 'application/json', 'Accept' => 'application/json' } result = RestClient.patch 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/exporters/core/pulp/{pulp_id}/', params: { }, headers: headers p JSON.parse(result) PATCH /api/automation-hub/pulp/api/v3/exporters/core/pulp/{pulp_id}/ Update a pulp exporter Trigger an asynchronous partial update task Body parameter { \"name\": \"string\", \"path\": \"string\", \"repositories\": [ \"http://example.com\" ], \"last_export\": \"http://example.com\" } name: string path: string repositories: - http://example.com last_export: http://example.com Parameters Name In Type Required Description pulp_id path string(uuid) true A UUID string identifying this pulp exporter. body body PatchedPulpExporter true none Example responses 202 Response { \"task\": \"http://example.com\" } Responses Status Meaning Description Schema 202 Accepted none AsyncOperationResponse This operation does not require authentication exporters_core_pulp_delete Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"DELETE\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/exporters/core/pulp/{pulp_id}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/exporters/core/pulp/{pulp_id}/', { method: 'DELETE', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.delete('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/exporters/core/pulp/{pulp_id}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.delete 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/exporters/core/pulp/{pulp_id}/', params: { }, headers: headers p JSON.parse(result) DELETE /api/automation-hub/pulp/api/v3/exporters/core/pulp/{pulp_id}/ Delete a pulp exporter Trigger an asynchronous delete task Parameters Name In Type Required Description pulp_id path string(uuid) true A UUID string identifying this pulp exporter. Example responses 202 Response { \"task\": \"http://example.com\" } Responses Status Meaning Description Schema 202 Accepted none AsyncOperationResponse This operation does not require authentication Exporters: Pulp Exports exporters_core_pulp_exports_list Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/exporters/core/pulp/{exporter_pk}/exports/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/exporters/core/pulp/{exporter_pk}/exports/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/exporters/core/pulp/{exporter_pk}/exports/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/exporters/core/pulp/{exporter_pk}/exports/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/pulp/api/v3/exporters/core/pulp/{exporter_pk}/exports/ List pulp exports ViewSet for viewing exports from a PulpExporter. Parameters Name In Type Required Description exporter_pk path string true none limit query integer false Number of results to return per page. offset query integer false The initial index from which to return the results. fields query string false A list of fields to include in the response. exclude_fields query string false A list of fields to exclude from the response. Example responses 200 Response { \"count\": 123, \"next\": \"http://api.example.org/accounts/?offset=400&limit=100\", \"previous\": \"http://api.example.org/accounts/?offset=200&limit=100\", \"results\": [ { \"pulp_href\": \"http://example.com\", \"pulp_created\": \"2019-08-24T14:15:22Z\", \"task\": \"http://example.com\", \"exported_resources\": [ \"http://example.com\" ], \"params\": {}, \"output_file_info\": {}, \"toc_info\": {} } ] } Responses Status Meaning Description Schema 200 OK none PaginatedPulpExportResponseList This operation does not require authentication exporters_core_pulp_exports_create Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Content-Type\": []string{\"application/json\"}, \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"POST\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/exporters/core/pulp/{exporter_pk}/exports/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const inputBody = '{ \"task\": \"http://example.com\", \"full\": true, \"dry_run\": false, \"versions\": [ \"http://example.com\" ], \"chunk_size\": \"string\", \"start_versions\": [ \"http://example.com\" ] }'; const headers = { 'Content-Type':'application/json', 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/exporters/core/pulp/{exporter_pk}/exports/', { method: 'POST', body: inputBody, headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Content-Type': 'application/json', 'Accept': 'application/json' } r = requests.post('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/exporters/core/pulp/{exporter_pk}/exports/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Content-Type' => 'application/json', 'Accept' => 'application/json' } result = RestClient.post 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/exporters/core/pulp/{exporter_pk}/exports/', params: { }, headers: headers p JSON.parse(result) POST /api/automation-hub/pulp/api/v3/exporters/core/pulp/{exporter_pk}/exports/ Create a pulp export Trigger an asynchronous task to export a set of repositories Body parameter { \"task\": \"http://example.com\", \"full\": true, \"dry_run\": false, \"versions\": [ \"http://example.com\" ], \"chunk_size\": \"string\", \"start_versions\": [ \"http://example.com\" ] } task: http://example.com full: true dry_run: false versions: - http://example.com chunk_size: string start_versions: - http://example.com Parameters Name In Type Required Description exporter_pk path string true none body body PulpExport true none Example responses 202 Response { \"task\": \"http://example.com\" } Responses Status Meaning Description Schema 202 Accepted none AsyncOperationResponse This operation does not require authentication exporters_core_pulp_exports_read Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/exporters/core/pulp/{exporter_pk}/exports/{pulp_id}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/exporters/core/pulp/{exporter_pk}/exports/{pulp_id}/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/exporters/core/pulp/{exporter_pk}/exports/{pulp_id}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/exporters/core/pulp/{exporter_pk}/exports/{pulp_id}/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/pulp/api/v3/exporters/core/pulp/{exporter_pk}/exports/{pulp_id}/ Inspect a pulp export ViewSet for viewing exports from a PulpExporter. Parameters Name In Type Required Description exporter_pk path string true none pulp_id path string(uuid) true A UUID string identifying this pulp export. fields query string false A list of fields to include in the response. exclude_fields query string false A list of fields to exclude from the response. Example responses 200 Response { \"pulp_href\": \"http://example.com\", \"pulp_created\": \"2019-08-24T14:15:22Z\", \"task\": \"http://example.com\", \"exported_resources\": [ \"http://example.com\" ], \"params\": {}, \"output_file_info\": {}, \"toc_info\": {} } Responses Status Meaning Description Schema 200 OK none PulpExportResponse This operation does not require authentication exporters_core_pulp_exports_delete Code samples package main import ( \"bytes\" \"net/http\" ) func main() { data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"DELETE\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/exporters/core/pulp/{exporter_pk}/exports/{pulp_id}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/exporters/core/pulp/{exporter_pk}/exports/{pulp_id}/', { method: 'DELETE' }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests r = requests.delete('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/exporters/core/pulp/{exporter_pk}/exports/{pulp_id}/') print(r.json()) require 'rest-client' require 'json' result = RestClient.delete 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/exporters/core/pulp/{exporter_pk}/exports/{pulp_id}/', params: { } p JSON.parse(result) DELETE /api/automation-hub/pulp/api/v3/exporters/core/pulp/{exporter_pk}/exports/{pulp_id}/ Delete a pulp export ViewSet for viewing exports from a PulpExporter. Parameters Name In Type Required Description exporter_pk path string true none pulp_id path string(uuid) true A UUID string identifying this pulp export. Responses Status Meaning Description Schema 204 No Content No response body None This operation does not require authentication Galaxy_Ng: Container-Distribution-Proxy galaxy_ng_container_distribution_proxy_read Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/galaxy_ng/container-distribution-proxy/{pulp_id}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/galaxy_ng/container-distribution-proxy/{pulp_id}/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/galaxy_ng/container-distribution-proxy/{pulp_id}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/galaxy_ng/container-distribution-proxy/{pulp_id}/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/pulp/api/v3/galaxy_ng/container-distribution-proxy/{pulp_id}/ Inspect a container distribution A customized named ModelViewSet that knows how to register itself with the Pulp API router. This viewset is discoverable by its name. \"Normal\" Django Models and Master/Detail models are supported by the register_with method. Attributes: lookup_field (str): The name of the field by which an object should be looked up, in addition to any parent lookups if this ViewSet is nested. Defaults to 'pk' endpoint_name (str): The name of the final path segment that should identify the ViewSet's collection endpoint. nest_prefix (str): Optional prefix under which this ViewSet should be nested. This must correspond to the \"parent_prefix\" of a router with rest_framework_nested.NestedMixin. None indicates this ViewSet should not be nested. parent_lookup_kwargs (dict): Optional mapping of key names that would appear in self.kwargs to django model filter expressions that can be used with the corresponding value from self.kwargs, used only by a nested ViewSet to filter based on the parent object's identity. schema (DefaultSchema): The schema class to use by default in a viewset. Parameters Name In Type Required Description pulp_id path string(uuid) true A UUID string identifying this container distribution. fields query string false A list of fields to include in the response. exclude_fields query string false A list of fields to exclude from the response. Example responses 200 Response { \"id\": \"497f6eca-6276-4993-bfeb-53cbbbba6f08\", \"pulp_href\": \"http://example.com\", \"name\": \"string\", \"pulp\": {}, \"namespace\": { \"id\": \"497f6eca-6276-4993-bfeb-53cbbbba6f08\", \"pulp_href\": \"http://example.com\", \"name\": \"string\", \"my_permissions\": {}, \"owners\": [ null ], \"created_at\": \"2019-08-24T14:15:22Z\", \"updated_at\": \"2019-08-24T14:15:22Z\" }, \"description\": \"string\", \"created_at\": \"2019-08-24T14:15:22Z\", \"updated_at\": \"2019-08-24T14:15:22Z\" } Responses Status Meaning Description Schema 200 OK none ContainerRepositoryResponse This operation does not require authentication Galaxy_Ng: Registry-Remote galaxy_ng_registry_remote_read Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/galaxy_ng/registry-remote/{pulp_id}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/galaxy_ng/registry-remote/{pulp_id}/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/galaxy_ng/registry-remote/{pulp_id}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/galaxy_ng/registry-remote/{pulp_id}/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/pulp/api/v3/galaxy_ng/registry-remote/{pulp_id}/ Inspect a container registry remote A customized named ModelViewSet that knows how to register itself with the Pulp API router. This viewset is discoverable by its name. \"Normal\" Django Models and Master/Detail models are supported by the register_with method. Attributes: lookup_field (str): The name of the field by which an object should be looked up, in addition to any parent lookups if this ViewSet is nested. Defaults to 'pk' endpoint_name (str): The name of the final path segment that should identify the ViewSet's collection endpoint. nest_prefix (str): Optional prefix under which this ViewSet should be nested. This must correspond to the \"parent_prefix\" of a router with rest_framework_nested.NestedMixin. None indicates this ViewSet should not be nested. parent_lookup_kwargs (dict): Optional mapping of key names that would appear in self.kwargs to django model filter expressions that can be used with the corresponding value from self.kwargs, used only by a nested ViewSet to filter based on the parent object's identity. schema (DefaultSchema): The schema class to use by default in a viewset. Parameters Name In Type Required Description pulp_id path string(uuid) true A UUID string identifying this container registry remote. fields query string false A list of fields to include in the response. exclude_fields query string false A list of fields to exclude from the response. Example responses 200 Response { \"id\": \"497f6eca-6276-4993-bfeb-53cbbbba6f08\", \"pulp_href\": \"http://example.com\", \"name\": \"string\", \"url\": \"string\", \"policy\": \"immediate\", \"created_at\": \"2019-08-24T14:15:22Z\", \"updated_at\": \"2019-08-24T14:15:22Z\", \"tls_validation\": true, \"client_cert\": \"string\", \"ca_cert\": \"string\", \"last_sync_task\": \"string\", \"download_concurrency\": 1, \"proxy_url\": \"string\", \"write_only_fields\": [ null ], \"rate_limit\": 0, \"is_indexable\": true } Responses Status Meaning Description Schema 200 OK none galaxy.ContainerRegistryRemoteResponse This operation does not require authentication Groups: Roles groups_roles_list Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/groups/{group_pk}/roles/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/groups/{group_pk}/roles/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/groups/{group_pk}/roles/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/groups/{group_pk}/roles/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/pulp/api/v3/groups/{group_pk}/roles/ List group roles ViewSet for GroupRole. NOTE: This API endpoint is in \"tech preview\" and subject to change Parameters Name In Type Required Description content_object query string false content_object group_pk path string true none limit query integer false Number of results to return per page. offset query integer false The initial index from which to return the results. ordering query array[string] false Ordering role query string false none role__contains query string false none role__icontains query string false none role__in query array[string] false Multiple values may be separated by commas. role__startswith query string false none fields query string false A list of fields to include in the response. exclude_fields query string false A list of fields to exclude from the response. Enumerated Values Parameter Value ordering -description ordering -pk ordering -pulp_created ordering -role ordering description ordering pk ordering pulp_created ordering role Example responses 200 Response { \"count\": 123, \"next\": \"http://api.example.org/accounts/?offset=400&limit=100\", \"previous\": \"http://api.example.org/accounts/?offset=200&limit=100\", \"results\": [ { \"pulp_href\": \"http://example.com\", \"pulp_created\": \"2019-08-24T14:15:22Z\", \"role\": \"string\", \"content_object\": \"string\", \"description\": \"string\", \"permissions\": [ \"string\" ] } ] } Responses Status Meaning Description Schema 200 OK none PaginatedGroupRoleResponseList This operation does not require authentication groups_roles_create Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Content-Type\": []string{\"application/json\"}, \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"POST\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/groups/{group_pk}/roles/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const inputBody = '{ \"role\": \"string\", \"content_object\": \"string\" }'; const headers = { 'Content-Type':'application/json', 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/groups/{group_pk}/roles/', { method: 'POST', body: inputBody, headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Content-Type': 'application/json', 'Accept': 'application/json' } r = requests.post('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/groups/{group_pk}/roles/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Content-Type' => 'application/json', 'Accept' => 'application/json' } result = RestClient.post 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/groups/{group_pk}/roles/', params: { }, headers: headers p JSON.parse(result) POST /api/automation-hub/pulp/api/v3/groups/{group_pk}/roles/ Create a group role ViewSet for GroupRole. NOTE: This API endpoint is in \"tech preview\" and subject to change Body parameter { \"role\": \"string\", \"content_object\": \"string\" } role: string content_object: string Parameters Name In Type Required Description group_pk path string true none body body GroupRole true none Example responses 201 Response { \"pulp_href\": \"http://example.com\", \"pulp_created\": \"2019-08-24T14:15:22Z\", \"role\": \"string\", \"content_object\": \"string\", \"description\": \"string\", \"permissions\": [ \"string\" ] } Responses Status Meaning Description Schema 201 Created none GroupRoleResponse This operation does not require authentication groups_roles_read Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/groups/{group_pk}/roles/{pulp_id}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/groups/{group_pk}/roles/{pulp_id}/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/groups/{group_pk}/roles/{pulp_id}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/groups/{group_pk}/roles/{pulp_id}/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/pulp/api/v3/groups/{group_pk}/roles/{pulp_id}/ Inspect a group role ViewSet for GroupRole. NOTE: This API endpoint is in \"tech preview\" and subject to change Parameters Name In Type Required Description group_pk path string true none pulp_id path string(uuid) true A UUID string identifying this group role. fields query string false A list of fields to include in the response. exclude_fields query string false A list of fields to exclude from the response. Example responses 200 Response { \"pulp_href\": \"http://example.com\", \"pulp_created\": \"2019-08-24T14:15:22Z\", \"role\": \"string\", \"content_object\": \"string\", \"description\": \"string\", \"permissions\": [ \"string\" ] } Responses Status Meaning Description Schema 200 OK none GroupRoleResponse This operation does not require authentication groups_roles_delete Code samples package main import ( \"bytes\" \"net/http\" ) func main() { data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"DELETE\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/groups/{group_pk}/roles/{pulp_id}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/groups/{group_pk}/roles/{pulp_id}/', { method: 'DELETE' }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests r = requests.delete('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/groups/{group_pk}/roles/{pulp_id}/') print(r.json()) require 'rest-client' require 'json' result = RestClient.delete 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/groups/{group_pk}/roles/{pulp_id}/', params: { } p JSON.parse(result) DELETE /api/automation-hub/pulp/api/v3/groups/{group_pk}/roles/{pulp_id}/ Delete a group role ViewSet for GroupRole. NOTE: This API endpoint is in \"tech preview\" and subject to change Parameters Name In Type Required Description group_pk path string true none pulp_id path string(uuid) true A UUID string identifying this group role. Responses Status Meaning Description Schema 204 No Content No response body None This operation does not require authentication Importers: Pulp importers_core_pulp_list Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/importers/core/pulp/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/importers/core/pulp/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/importers/core/pulp/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/importers/core/pulp/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/pulp/api/v3/importers/core/pulp/ List pulp importers ViewSet for PulpImporters. Parameters Name In Type Required Description limit query integer false Number of results to return per page. name query string false none name__contains query string false Filter results where name contains value name__icontains query string false Filter results where name contains value name__in query array[string] false Filter results where name is in a comma-separated list of values name__startswith query string false Filter results where name starts with value offset query integer false The initial index from which to return the results. ordering query array[string] false Ordering fields query string false A list of fields to include in the response. exclude_fields query string false A list of fields to exclude from the response. Enumerated Values Parameter Value ordering -core_pulp_importer ordering -group_roles ordering -import ordering -name ordering -pk ordering -pulp_created ordering -pulp_id ordering -pulp_labels ordering -pulp_last_updated ordering -pulp_type ordering -user_roles ordering core_pulp_importer ordering group_roles ordering import ordering name ordering pk ordering pulp_created ordering pulp_id ordering pulp_labels ordering pulp_last_updated ordering pulp_type ordering user_roles Example responses 200 Response { \"count\": 123, \"next\": \"http://api.example.org/accounts/?offset=400&limit=100\", \"previous\": \"http://api.example.org/accounts/?offset=200&limit=100\", \"results\": [ { \"pulp_href\": \"http://example.com\", \"pulp_created\": \"2019-08-24T14:15:22Z\", \"name\": \"string\", \"repo_mapping\": { \"property1\": \"string\", \"property2\": \"string\" } } ] } Responses Status Meaning Description Schema 200 OK none PaginatedPulpImporterResponseList This operation does not require authentication importers_core_pulp_create Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Content-Type\": []string{\"application/json\"}, \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"POST\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/importers/core/pulp/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const inputBody = '{ \"name\": \"string\", \"repo_mapping\": { \"property1\": \"string\", \"property2\": \"string\" } }'; const headers = { 'Content-Type':'application/json', 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/importers/core/pulp/', { method: 'POST', body: inputBody, headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Content-Type': 'application/json', 'Accept': 'application/json' } r = requests.post('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/importers/core/pulp/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Content-Type' => 'application/json', 'Accept' => 'application/json' } result = RestClient.post 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/importers/core/pulp/', params: { }, headers: headers p JSON.parse(result) POST /api/automation-hub/pulp/api/v3/importers/core/pulp/ Create a pulp importer ViewSet for PulpImporters. Body parameter { \"name\": \"string\", \"repo_mapping\": { \"property1\": \"string\", \"property2\": \"string\" } } name: string repo_mapping: property1: string property2: string Parameters Name In Type Required Description body body PulpImporter true none Example responses 201 Response { \"pulp_href\": \"http://example.com\", \"pulp_created\": \"2019-08-24T14:15:22Z\", \"name\": \"string\", \"repo_mapping\": { \"property1\": \"string\", \"property2\": \"string\" } } Responses Status Meaning Description Schema 201 Created none PulpImporterResponse This operation does not require authentication importers_core_pulp_read Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/importers/core/pulp/{pulp_id}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/importers/core/pulp/{pulp_id}/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/importers/core/pulp/{pulp_id}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/importers/core/pulp/{pulp_id}/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/pulp/api/v3/importers/core/pulp/{pulp_id}/ Inspect a pulp importer ViewSet for PulpImporters. Parameters Name In Type Required Description pulp_id path string(uuid) true A UUID string identifying this pulp importer. fields query string false A list of fields to include in the response. exclude_fields query string false A list of fields to exclude from the response. Example responses 200 Response { \"pulp_href\": \"http://example.com\", \"pulp_created\": \"2019-08-24T14:15:22Z\", \"name\": \"string\", \"repo_mapping\": { \"property1\": \"string\", \"property2\": \"string\" } } Responses Status Meaning Description Schema 200 OK none PulpImporterResponse This operation does not require authentication importers_core_pulp_update Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Content-Type\": []string{\"application/json\"}, \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"PUT\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/importers/core/pulp/{pulp_id}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const inputBody = '{ \"name\": \"string\", \"repo_mapping\": { \"property1\": \"string\", \"property2\": \"string\" } }'; const headers = { 'Content-Type':'application/json', 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/importers/core/pulp/{pulp_id}/', { method: 'PUT', body: inputBody, headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Content-Type': 'application/json', 'Accept': 'application/json' } r = requests.put('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/importers/core/pulp/{pulp_id}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Content-Type' => 'application/json', 'Accept' => 'application/json' } result = RestClient.put 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/importers/core/pulp/{pulp_id}/', params: { }, headers: headers p JSON.parse(result) PUT /api/automation-hub/pulp/api/v3/importers/core/pulp/{pulp_id}/ Update a pulp importer ViewSet for PulpImporters. Body parameter { \"name\": \"string\", \"repo_mapping\": { \"property1\": \"string\", \"property2\": \"string\" } } name: string repo_mapping: property1: string property2: string Parameters Name In Type Required Description pulp_id path string(uuid) true A UUID string identifying this pulp importer. body body PulpImporter true none Example responses 200 Response { \"pulp_href\": \"http://example.com\", \"pulp_created\": \"2019-08-24T14:15:22Z\", \"name\": \"string\", \"repo_mapping\": { \"property1\": \"string\", \"property2\": \"string\" } } Responses Status Meaning Description Schema 200 OK none PulpImporterResponse This operation does not require authentication importers_core_pulp_partial_update Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Content-Type\": []string{\"application/json\"}, \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"PATCH\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/importers/core/pulp/{pulp_id}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const inputBody = '{ \"name\": \"string\", \"repo_mapping\": { \"property1\": \"string\", \"property2\": \"string\" } }'; const headers = { 'Content-Type':'application/json', 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/importers/core/pulp/{pulp_id}/', { method: 'PATCH', body: inputBody, headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Content-Type': 'application/json', 'Accept': 'application/json' } r = requests.patch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/importers/core/pulp/{pulp_id}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Content-Type' => 'application/json', 'Accept' => 'application/json' } result = RestClient.patch 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/importers/core/pulp/{pulp_id}/', params: { }, headers: headers p JSON.parse(result) PATCH /api/automation-hub/pulp/api/v3/importers/core/pulp/{pulp_id}/ Update a pulp importer ViewSet for PulpImporters. Body parameter { \"name\": \"string\", \"repo_mapping\": { \"property1\": \"string\", \"property2\": \"string\" } } name: string repo_mapping: property1: string property2: string Parameters Name In Type Required Description pulp_id path string(uuid) true A UUID string identifying this pulp importer. body body PatchedPulpImporter true none Example responses 200 Response { \"pulp_href\": \"http://example.com\", \"pulp_created\": \"2019-08-24T14:15:22Z\", \"name\": \"string\", \"repo_mapping\": { \"property1\": \"string\", \"property2\": \"string\" } } Responses Status Meaning Description Schema 200 OK none PulpImporterResponse This operation does not require authentication importers_core_pulp_delete Code samples package main import ( \"bytes\" \"net/http\" ) func main() { data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"DELETE\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/importers/core/pulp/{pulp_id}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/importers/core/pulp/{pulp_id}/', { method: 'DELETE' }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests r = requests.delete('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/importers/core/pulp/{pulp_id}/') print(r.json()) require 'rest-client' require 'json' result = RestClient.delete 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/importers/core/pulp/{pulp_id}/', params: { } p JSON.parse(result) DELETE /api/automation-hub/pulp/api/v3/importers/core/pulp/{pulp_id}/ Delete a pulp importer ViewSet for PulpImporters. Parameters Name In Type Required Description pulp_id path string(uuid) true A UUID string identifying this pulp importer. Responses Status Meaning Description Schema 204 No Content No response body None This operation does not require authentication Importers: Pulp Imports importers_core_pulp_imports_list Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/importers/core/pulp/{importer_pk}/imports/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/importers/core/pulp/{importer_pk}/imports/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/importers/core/pulp/{importer_pk}/imports/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/importers/core/pulp/{importer_pk}/imports/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/pulp/api/v3/importers/core/pulp/{importer_pk}/imports/ List pulp imports ViewSet for PulpImports. Parameters Name In Type Required Description importer_pk path string true none limit query integer false Number of results to return per page. offset query integer false The initial index from which to return the results. fields query string false A list of fields to include in the response. exclude_fields query string false A list of fields to exclude from the response. Example responses 200 Response { \"count\": 123, \"next\": \"http://api.example.org/accounts/?offset=400&limit=100\", \"previous\": \"http://api.example.org/accounts/?offset=200&limit=100\", \"results\": [ { \"pulp_href\": \"http://example.com\", \"pulp_created\": \"2019-08-24T14:15:22Z\", \"task\": \"http://example.com\", \"params\": {} } ] } Responses Status Meaning Description Schema 200 OK none PaginatedImportResponseList This operation does not require authentication importers_core_pulp_imports_create Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Content-Type\": []string{\"application/json\"}, \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"POST\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/importers/core/pulp/{importer_pk}/imports/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const inputBody = '{ \"path\": \"string\", \"toc\": \"string\", \"create_repositories\": false }'; const headers = { 'Content-Type':'application/json', 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/importers/core/pulp/{importer_pk}/imports/', { method: 'POST', body: inputBody, headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Content-Type': 'application/json', 'Accept': 'application/json' } r = requests.post('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/importers/core/pulp/{importer_pk}/imports/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Content-Type' => 'application/json', 'Accept' => 'application/json' } result = RestClient.post 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/importers/core/pulp/{importer_pk}/imports/', params: { }, headers: headers p JSON.parse(result) POST /api/automation-hub/pulp/api/v3/importers/core/pulp/{importer_pk}/imports/ Create a pulp import Trigger an asynchronous task to import a Pulp export. Body parameter { \"path\": \"string\", \"toc\": \"string\", \"create_repositories\": false } path: string toc: string create_repositories: false Parameters Name In Type Required Description importer_pk path string true none body body PulpImport true none Example responses 202 Response { \"task_group\": \"http://example.com\" } Responses Status Meaning Description Schema 202 Accepted none TaskGroupOperationResponse This operation does not require authentication importers_core_pulp_imports_read Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/importers/core/pulp/{importer_pk}/imports/{pulp_id}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/importers/core/pulp/{importer_pk}/imports/{pulp_id}/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/importers/core/pulp/{importer_pk}/imports/{pulp_id}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/importers/core/pulp/{importer_pk}/imports/{pulp_id}/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/pulp/api/v3/importers/core/pulp/{importer_pk}/imports/{pulp_id}/ Inspect a pulp import ViewSet for PulpImports. Parameters Name In Type Required Description importer_pk path string true none pulp_id path string(uuid) true A UUID string identifying this pulp import. fields query string false A list of fields to include in the response. exclude_fields query string false A list of fields to exclude from the response. Example responses 200 Response { \"pulp_href\": \"http://example.com\", \"pulp_created\": \"2019-08-24T14:15:22Z\", \"task\": \"http://example.com\", \"params\": {} } Responses Status Meaning Description Schema 200 OK none ImportResponse This operation does not require authentication importers_core_pulp_imports_delete Code samples package main import ( \"bytes\" \"net/http\" ) func main() { data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"DELETE\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/importers/core/pulp/{importer_pk}/imports/{pulp_id}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/importers/core/pulp/{importer_pk}/imports/{pulp_id}/', { method: 'DELETE' }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests r = requests.delete('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/importers/core/pulp/{importer_pk}/imports/{pulp_id}/') print(r.json()) require 'rest-client' require 'json' result = RestClient.delete 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/importers/core/pulp/{importer_pk}/imports/{pulp_id}/', params: { } p JSON.parse(result) DELETE /api/automation-hub/pulp/api/v3/importers/core/pulp/{importer_pk}/imports/{pulp_id}/ Delete a pulp import ViewSet for PulpImports. Parameters Name In Type Required Description importer_pk path string true none pulp_id path string(uuid) true A UUID string identifying this pulp import. Responses Status Meaning Description Schema 204 No Content No response body None This operation does not require authentication Importers: Pulp Import-Check pulp_import_check_post Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Content-Type\": []string{\"application/json\"}, \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"POST\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/importers/core/pulp/import-check/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const inputBody = '{ \"path\": \"string\", \"toc\": \"string\", \"repo_mapping\": \"string\" }'; const headers = { 'Content-Type':'application/json', 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/importers/core/pulp/import-check/', { method: 'POST', body: inputBody, headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Content-Type': 'application/json', 'Accept': 'application/json' } r = requests.post('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/importers/core/pulp/import-check/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Content-Type' => 'application/json', 'Accept' => 'application/json' } result = RestClient.post 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/importers/core/pulp/import-check/', params: { }, headers: headers p JSON.parse(result) POST /api/automation-hub/pulp/api/v3/importers/core/pulp/import-check/ Validate the parameters to be used for a PulpImport call Evaluates validity of proposed PulpImport parameters 'toc', 'path', and 'repo_mapping'. Checks that toc, path are in ALLOWED_IMPORT_PATHS if ALLOWED: Checks that toc, path exist and are readable If toc specified, checks that containing dir is writeable Checks that repo_mapping is valid JSON Body parameter { \"path\": \"string\", \"toc\": \"string\", \"repo_mapping\": \"string\" } path: string toc: string repo_mapping: string Parameters Name In Type Required Description body body PulpImportCheck true none Example responses 200 Response { \"toc\": { \"context\": \"string\", \"is_valid\": true, \"messages\": [ \"string\" ] }, \"path\": { \"context\": \"string\", \"is_valid\": true, \"messages\": [ \"string\" ] }, \"repo_mapping\": { \"context\": \"string\", \"is_valid\": true, \"messages\": [ \"string\" ] } } Responses Status Meaning Description Schema 200 OK none PulpImportCheckResponse This operation does not require authentication Orphans orphans_delete Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"DELETE\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/orphans/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/orphans/', { method: 'DELETE', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.delete('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/orphans/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.delete 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/orphans/', params: { }, headers: headers p JSON.parse(result) DELETE /api/automation-hub/pulp/api/v3/orphans/ Delete orphans DEPRECATED! Trigger an asynchronous task that deletes all orphaned content and artifacts. Use the POST /pulp/api/v3/orphans/cleanup/ call instead. Example responses 202 Response { \"task\": \"http://example.com\" } Responses Status Meaning Description Schema 202 Accepted none AsyncOperationResponse This operation does not require authentication Orphans: Cleanup orphans_cleanup_cleanup Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Content-Type\": []string{\"application/json\"}, \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"POST\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/orphans/cleanup/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const inputBody = '{ \"content_hrefs\": [ null ], \"orphan_protection_time\": 0 }'; const headers = { 'Content-Type':'application/json', 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/orphans/cleanup/', { method: 'POST', body: inputBody, headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Content-Type': 'application/json', 'Accept': 'application/json' } r = requests.post('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/orphans/cleanup/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Content-Type' => 'application/json', 'Accept' => 'application/json' } result = RestClient.post 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/orphans/cleanup/', params: { }, headers: headers p JSON.parse(result) POST /api/automation-hub/pulp/api/v3/orphans/cleanup/ Trigger an asynchronous orphan cleanup operation. Body parameter { \"content_hrefs\": [ null ], \"orphan_protection_time\": 0 } content_hrefs: - null orphan_protection_time: 0 Parameters Name In Type Required Description body body OrphansCleanup true none Example responses 202 Response { \"task\": \"http://example.com\" } Responses Status Meaning Description Schema 202 Accepted none AsyncOperationResponse This operation does not require authentication Publications publications_list Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/publications/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/publications/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/publications/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/publications/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/pulp/api/v3/publications/ List publications A customized named ModelViewSet that knows how to register itself with the Pulp API router. This viewset is discoverable by its name. \"Normal\" Django Models and Master/Detail models are supported by the register_with method. Attributes: lookup_field (str): The name of the field by which an object should be looked up, in addition to any parent lookups if this ViewSet is nested. Defaults to 'pk' endpoint_name (str): The name of the final path segment that should identify the ViewSet's collection endpoint. nest_prefix (str): Optional prefix under which this ViewSet should be nested. This must correspond to the \"parent_prefix\" of a router with rest_framework_nested.NestedMixin. None indicates this ViewSet should not be nested. parent_lookup_kwargs (dict): Optional mapping of key names that would appear in self.kwargs to django model filter expressions that can be used with the corresponding value from self.kwargs, used only by a nested ViewSet to filter based on the parent object's identity. schema (DefaultSchema): The schema class to use by default in a viewset. Parameters Name In Type Required Description content query string false Content Unit referenced by HREF content__in query string false Content Unit referenced by HREF limit query integer false Number of results to return per page. offset query integer false The initial index from which to return the results. ordering query array[string] false Ordering pulp_created query string(date-time) false ISO 8601 formatted dates are supported pulp_created__gt query string(date-time) false Filter results where pulp_created is greater than value pulp_created__gte query string(date-time) false Filter results where pulp_created is greater than or equal to value pulp_created__lt query string(date-time) false Filter results where pulp_created is less than value pulp_created__lte query string(date-time) false Filter results where pulp_created is less than or equal to value pulp_created__range query array[string] false Filter results where pulp_created is between two comma separated values repository query string false Repository referenced by HREF repository_version query string(uuid) false Repository Version referenced by HREF fields query string false A list of fields to include in the response. exclude_fields query string false A list of fields to exclude from the response. Enumerated Values Parameter Value ordering -complete ordering -distribution ordering -group_roles ordering -pass_through ordering -pk ordering -published_artifact ordering -published_metadata ordering -pulp_created ordering -pulp_id ordering -pulp_labels ordering -pulp_last_updated ordering -pulp_type ordering -repository_version ordering -user_roles ordering complete ordering distribution ordering group_roles ordering pass_through ordering pk ordering published_artifact ordering published_metadata ordering pulp_created ordering pulp_id ordering pulp_labels ordering pulp_last_updated ordering pulp_type ordering repository_version ordering user_roles Example responses 200 Response { \"count\": 123, \"next\": \"http://api.example.org/accounts/?offset=400&limit=100\", \"previous\": \"http://api.example.org/accounts/?offset=200&limit=100\", \"results\": [ { \"pulp_href\": \"http://example.com\", \"pulp_created\": \"2019-08-24T14:15:22Z\", \"repository_version\": \"http://example.com\", \"repository\": \"http://example.com\" } ] } Responses Status Meaning Description Schema 200 OK none PaginatedPublicationResponseList This operation does not require authentication Pulp_Ansible: Namespaces pulp_ansible_namespaces_list Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/pulp_ansible/namespaces/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/pulp_ansible/namespaces/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/pulp_ansible/namespaces/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/pulp_ansible/namespaces/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/pulp/api/v3/pulp_ansible/namespaces/ List namespaces A customized named ModelViewSet that knows how to register itself with the Pulp API router. This viewset is discoverable by its name. \"Normal\" Django Models and Master/Detail models are supported by the register_with method. Attributes: lookup_field (str): The name of the field by which an object should be looked up, in addition to any parent lookups if this ViewSet is nested. Defaults to 'pk' endpoint_name (str): The name of the final path segment that should identify the ViewSet's collection endpoint. nest_prefix (str): Optional prefix under which this ViewSet should be nested. This must correspond to the \"parent_prefix\" of a router with rest_framework_nested.NestedMixin. None indicates this ViewSet should not be nested. parent_lookup_kwargs (dict): Optional mapping of key names that would appear in self.kwargs to django model filter expressions that can be used with the corresponding value from self.kwargs, used only by a nested ViewSet to filter based on the parent object's identity. schema (DefaultSchema): The schema class to use by default in a viewset. Parameters Name In Type Required Description limit query integer false Number of results to return per page. offset query integer false The initial index from which to return the results. fields query string false A list of fields to include in the response. exclude_fields query string false A list of fields to exclude from the response. Example responses 200 Response { \"meta\": { \"count\": 123 }, \"links\": { \"first\": \"string\", \"previous\": \"string\", \"next\": \"string\", \"last\": \"string\" }, \"data\": [ { \"pulp_href\": \"http://example.com\", \"id\": 0, \"name\": \"string\", \"company\": \"string\", \"email\": \"string\", \"avatar_url\": \"http://example.com\", \"description\": \"string\", \"groups\": \"string\", \"related_fields\": { \"my_permissions\": {} } } ] } Responses Status Meaning Description Schema 200 OK none PaginatedNamespaceSummaryResponseList This operation does not require authentication pulp_ansible_namespaces_read Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/pulp_ansible/namespaces/{id}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/pulp_ansible/namespaces/{id}/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/pulp_ansible/namespaces/{id}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/pulp_ansible/namespaces/{id}/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/pulp/api/v3/pulp_ansible/namespaces/{id}/ Inspect a namespace A customized named ModelViewSet that knows how to register itself with the Pulp API router. This viewset is discoverable by its name. \"Normal\" Django Models and Master/Detail models are supported by the register_with method. Attributes: lookup_field (str): The name of the field by which an object should be looked up, in addition to any parent lookups if this ViewSet is nested. Defaults to 'pk' endpoint_name (str): The name of the final path segment that should identify the ViewSet's collection endpoint. nest_prefix (str): Optional prefix under which this ViewSet should be nested. This must correspond to the \"parent_prefix\" of a router with rest_framework_nested.NestedMixin. None indicates this ViewSet should not be nested. parent_lookup_kwargs (dict): Optional mapping of key names that would appear in self.kwargs to django model filter expressions that can be used with the corresponding value from self.kwargs, used only by a nested ViewSet to filter based on the parent object's identity. schema (DefaultSchema): The schema class to use by default in a viewset. Parameters Name In Type Required Description id path integer true A unique integer value identifying this namespace. fields query string false A list of fields to include in the response. exclude_fields query string false A list of fields to exclude from the response. Example responses 200 Response { \"pulp_href\": \"http://example.com\", \"id\": 0, \"name\": \"string\", \"company\": \"string\", \"email\": \"string\", \"avatar_url\": \"http://example.com\", \"description\": \"string\", \"groups\": \"string\", \"related_fields\": { \"my_permissions\": {} } } Responses Status Meaning Description Schema 200 OK none NamespaceSummaryResponse This operation does not require authentication Pulp_Ansible: Tags pulp_ansible_tags_list Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/pulp_ansible/tags/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/pulp_ansible/tags/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/pulp_ansible/tags/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/pulp_ansible/tags/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/pulp/api/v3/pulp_ansible/tags/ List tags ViewSet for Tag models. Parameters Name In Type Required Description limit query integer false Number of results to return per page. offset query integer false The initial index from which to return the results. fields query string false A list of fields to include in the response. exclude_fields query string false A list of fields to exclude from the response. Example responses 200 Response { \"meta\": { \"count\": 123 }, \"links\": { \"first\": \"string\", \"previous\": \"string\", \"next\": \"string\", \"last\": \"string\" }, \"data\": [ { \"name\": \"string\" } ] } Responses Status Meaning Description Schema 200 OK none PaginatedTagResponseList This operation does not require authentication Pulp_Container: Namespaces pulp_container_namespaces_list Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/pulp_container/namespaces/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/pulp_container/namespaces/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/pulp_container/namespaces/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/pulp_container/namespaces/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/pulp/api/v3/pulp_container/namespaces/ List container namespaces ViewSet for ContainerNamespaces. Parameters Name In Type Required Description limit query integer false Number of results to return per page. name query string false Filter results where name matches value name__contains query string false Filter results where name contains value name__icontains query string false Filter results where name contains value name__in query array[string] false Filter results where name is in a comma-separated list of values name__startswith query string false Filter results where name starts with value offset query integer false The initial index from which to return the results. ordering query array[string] false Ordering fields query string false A list of fields to include in the response. exclude_fields query string false A list of fields to exclude from the response. Enumerated Values Parameter Value ordering -container_distributions ordering -group_roles ordering -name ordering -pk ordering -pulp_created ordering -pulp_id ordering -pulp_labels ordering -pulp_last_updated ordering -user_roles ordering container_distributions ordering group_roles ordering name ordering pk ordering pulp_created ordering pulp_id ordering pulp_labels ordering pulp_last_updated ordering user_roles Example responses 200 Response { \"count\": 123, \"next\": \"http://api.example.org/accounts/?offset=400&limit=100\", \"previous\": \"http://api.example.org/accounts/?offset=200&limit=100\", \"results\": [ { \"pulp_href\": \"http://example.com\", \"pulp_created\": \"2019-08-24T14:15:22Z\", \"name\": \"string\" } ] } Responses Status Meaning Description Schema 200 OK none Paginatedcontainer.ContainerNamespaceResponseList This operation does not require authentication pulp_container_namespaces_create Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Content-Type\": []string{\"application/json\"}, \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"POST\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/pulp_container/namespaces/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const inputBody = '{ \"name\": \"string\" }'; const headers = { 'Content-Type':'application/json', 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/pulp_container/namespaces/', { method: 'POST', body: inputBody, headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Content-Type': 'application/json', 'Accept': 'application/json' } r = requests.post('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/pulp_container/namespaces/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Content-Type' => 'application/json', 'Accept' => 'application/json' } result = RestClient.post 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/pulp_container/namespaces/', params: { }, headers: headers p JSON.parse(result) POST /api/automation-hub/pulp/api/v3/pulp_container/namespaces/ Create a container namespace ViewSet for ContainerNamespaces. Body parameter { \"name\": \"string\" } name: string Parameters Name In Type Required Description body body container.ContainerNamespace true none Example responses 201 Response { \"pulp_href\": \"http://example.com\", \"pulp_created\": \"2019-08-24T14:15:22Z\", \"name\": \"string\" } Responses Status Meaning Description Schema 201 Created none container.ContainerNamespaceResponse This operation does not require authentication pulp_container_namespaces_read Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/pulp_container/namespaces/{pulp_id}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/pulp_container/namespaces/{pulp_id}/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/pulp_container/namespaces/{pulp_id}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/pulp_container/namespaces/{pulp_id}/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/pulp/api/v3/pulp_container/namespaces/{pulp_id}/ Inspect a container namespace ViewSet for ContainerNamespaces. Parameters Name In Type Required Description pulp_id path string(uuid) true A UUID string identifying this container namespace. fields query string false A list of fields to include in the response. exclude_fields query string false A list of fields to exclude from the response. Example responses 200 Response { \"pulp_href\": \"http://example.com\", \"pulp_created\": \"2019-08-24T14:15:22Z\", \"name\": \"string\" } Responses Status Meaning Description Schema 200 OK none container.ContainerNamespaceResponse This operation does not require authentication pulp_container_namespaces_delete Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"DELETE\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/pulp_container/namespaces/{pulp_id}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/pulp_container/namespaces/{pulp_id}/', { method: 'DELETE', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.delete('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/pulp_container/namespaces/{pulp_id}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.delete 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/pulp_container/namespaces/{pulp_id}/', params: { }, headers: headers p JSON.parse(result) DELETE /api/automation-hub/pulp/api/v3/pulp_container/namespaces/{pulp_id}/ Delete a container namespace Trigger an asynchronous delete task Parameters Name In Type Required Description pulp_id path string(uuid) true A UUID string identifying this container namespace. Example responses 202 Response { \"task\": \"http://example.com\" } Responses Status Meaning Description Schema 202 Accepted none AsyncOperationResponse This operation does not require authentication pulp_container_namespaces_add_role Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Content-Type\": []string{\"application/json\"}, \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"POST\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/pulp_container/namespaces/{pulp_id}/add_role/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const inputBody = '{ \"users\": [], \"groups\": [], \"role\": \"string\" }'; const headers = { 'Content-Type':'application/json', 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/pulp_container/namespaces/{pulp_id}/add_role/', { method: 'POST', body: inputBody, headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Content-Type': 'application/json', 'Accept': 'application/json' } r = requests.post('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/pulp_container/namespaces/{pulp_id}/add_role/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Content-Type' => 'application/json', 'Accept' => 'application/json' } result = RestClient.post 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/pulp_container/namespaces/{pulp_id}/add_role/', params: { }, headers: headers p JSON.parse(result) POST /api/automation-hub/pulp/api/v3/pulp_container/namespaces/{pulp_id}/add_role/ Add a role for this object to users/groups. Body parameter { \"users\": [], \"groups\": [], \"role\": \"string\" } users: [] groups: [] role: string Parameters Name In Type Required Description pulp_id path string(uuid) true A UUID string identifying this container namespace. body body NestedRole true none Example responses 201 Response { \"users\": [], \"groups\": [], \"role\": \"string\" } Responses Status Meaning Description Schema 201 Created none NestedRoleResponse This operation does not require authentication pulp_container_namespaces_list_roles Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/pulp_container/namespaces/{pulp_id}/list_roles/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/pulp_container/namespaces/{pulp_id}/list_roles/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/pulp_container/namespaces/{pulp_id}/list_roles/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/pulp_container/namespaces/{pulp_id}/list_roles/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/pulp/api/v3/pulp_container/namespaces/{pulp_id}/list_roles/ List roles assigned to this object. Parameters Name In Type Required Description pulp_id path string(uuid) true A UUID string identifying this container namespace. fields query string false A list of fields to include in the response. exclude_fields query string false A list of fields to exclude from the response. Example responses 200 Response { \"roles\": [ { \"users\": [], \"groups\": [], \"role\": \"string\" } ] } Responses Status Meaning Description Schema 200 OK none ObjectRolesResponse This operation does not require authentication pulp_container_namespaces_my_permissions Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/pulp_container/namespaces/{pulp_id}/my_permissions/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/pulp_container/namespaces/{pulp_id}/my_permissions/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/pulp_container/namespaces/{pulp_id}/my_permissions/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/pulp_container/namespaces/{pulp_id}/my_permissions/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/pulp/api/v3/pulp_container/namespaces/{pulp_id}/my_permissions/ List permissions available to the current user on this object. Parameters Name In Type Required Description pulp_id path string(uuid) true A UUID string identifying this container namespace. fields query string false A list of fields to include in the response. exclude_fields query string false A list of fields to exclude from the response. Example responses 200 Response { \"permissions\": [ \"string\" ] } Responses Status Meaning Description Schema 200 OK none MyPermissionsResponse This operation does not require authentication pulp_container_namespaces_remove_role Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Content-Type\": []string{\"application/json\"}, \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"POST\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/pulp_container/namespaces/{pulp_id}/remove_role/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const inputBody = '{ \"users\": [], \"groups\": [], \"role\": \"string\" }'; const headers = { 'Content-Type':'application/json', 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/pulp_container/namespaces/{pulp_id}/remove_role/', { method: 'POST', body: inputBody, headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Content-Type': 'application/json', 'Accept': 'application/json' } r = requests.post('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/pulp_container/namespaces/{pulp_id}/remove_role/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Content-Type' => 'application/json', 'Accept' => 'application/json' } result = RestClient.post 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/pulp_container/namespaces/{pulp_id}/remove_role/', params: { }, headers: headers p JSON.parse(result) POST /api/automation-hub/pulp/api/v3/pulp_container/namespaces/{pulp_id}/remove_role/ Remove a role for this object from users/groups. Body parameter { \"users\": [], \"groups\": [], \"role\": \"string\" } users: [] groups: [] role: string Parameters Name In Type Required Description pulp_id path string(uuid) true A UUID string identifying this container namespace. body body NestedRole true none Example responses 201 Response { \"users\": [], \"groups\": [], \"role\": \"string\" } Responses Status Meaning Description Schema 201 Created none NestedRoleResponse This operation does not require authentication Remotes remotes_list Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/remotes/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/remotes/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/remotes/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/remotes/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/pulp/api/v3/remotes/ List remotes A customized named ModelViewSet that knows how to register itself with the Pulp API router. This viewset is discoverable by its name. \"Normal\" Django Models and Master/Detail models are supported by the register_with method. Attributes: lookup_field (str): The name of the field by which an object should be looked up, in addition to any parent lookups if this ViewSet is nested. Defaults to 'pk' endpoint_name (str): The name of the final path segment that should identify the ViewSet's collection endpoint. nest_prefix (str): Optional prefix under which this ViewSet should be nested. This must correspond to the \"parent_prefix\" of a router with rest_framework_nested.NestedMixin. None indicates this ViewSet should not be nested. parent_lookup_kwargs (dict): Optional mapping of key names that would appear in self.kwargs to django model filter expressions that can be used with the corresponding value from self.kwargs, used only by a nested ViewSet to filter based on the parent object's identity. schema (DefaultSchema): The schema class to use by default in a viewset. Parameters Name In Type Required Description limit query integer false Number of results to return per page. name query string false none name__contains query string false Filter results where name contains value name__icontains query string false Filter results where name contains value name__in query array[string] false Filter results where name is in a comma-separated list of values name__startswith query string false Filter results where name starts with value offset query integer false The initial index from which to return the results. ordering query array[string] false Ordering pulp_label_select query string false Filter labels by search string pulp_last_updated query string(date-time) false ISO 8601 formatted dates are supported pulp_last_updated__gt query string(date-time) false Filter results where pulp_last_updated is greater than value pulp_last_updated__gte query string(date-time) false Filter results where pulp_last_updated is greater than or equal to value pulp_last_updated__lt query string(date-time) false Filter results where pulp_last_updated is less than value pulp_last_updated__lte query string(date-time) false Filter results where pulp_last_updated is less than or equal to value pulp_last_updated__range query array[string] false Filter results where pulp_last_updated is between two comma separated values fields query string false A list of fields to include in the response. exclude_fields query string false A list of fields to exclude from the response. Enumerated Values Parameter Value ordering -alternatecontentsource ordering -ansible_collectionremote ordering -ansible_gitremote ordering -ansible_roleremote ordering -basedistribution ordering -ca_cert ordering -client_cert ordering -client_key ordering -connect_timeout ordering -container_containerremote ordering -distribution ordering -download_concurrency ordering -galaxy_containerregistryremote ordering -group_roles ordering -headers ordering -max_retries ordering -name ordering -password ordering -pk ordering -policy ordering -proxy_password ordering -proxy_url ordering -proxy_username ordering -pulp_created ordering -pulp_id ordering -pulp_labels ordering -pulp_last_updated ordering -pulp_type ordering -rate_limit ordering -remoteartifact ordering -repository ordering -sock_connect_timeout ordering -sock_read_timeout ordering -tls_validation ordering -total_timeout ordering -url ordering -user_roles ordering -username ordering alternatecontentsource ordering ansible_collectionremote ordering ansible_gitremote ordering ansible_roleremote ordering basedistribution ordering ca_cert ordering client_cert ordering client_key ordering connect_timeout ordering container_containerremote ordering distribution ordering download_concurrency ordering galaxy_containerregistryremote ordering group_roles ordering headers ordering max_retries ordering name ordering password ordering pk ordering policy ordering proxy_password ordering proxy_url ordering proxy_username ordering pulp_created ordering pulp_id ordering pulp_labels ordering pulp_last_updated ordering pulp_type ordering rate_limit ordering remoteartifact ordering repository ordering sock_connect_timeout ordering sock_read_timeout ordering tls_validation ordering total_timeout ordering url ordering user_roles ordering username Example responses 200 Response { \"count\": 123, \"next\": \"http://api.example.org/accounts/?offset=400&limit=100\", \"previous\": \"http://api.example.org/accounts/?offset=200&limit=100\", \"results\": [ { \"pulp_href\": \"http://example.com\", \"pulp_created\": \"2019-08-24T14:15:22Z\", \"name\": \"string\", \"url\": \"string\", \"ca_cert\": \"string\", \"client_cert\": \"string\", \"tls_validation\": true, \"proxy_url\": \"string\", \"pulp_labels\": {}, \"pulp_last_updated\": \"2019-08-24T14:15:22Z\", \"download_concurrency\": 1, \"max_retries\": 0, \"policy\": \"immediate\", \"total_timeout\": 0, \"connect_timeout\": 0, \"sock_connect_timeout\": 0, \"sock_read_timeout\": 0, \"headers\": [ {} ], \"rate_limit\": 0 } ] } Responses Status Meaning Description Schema 200 OK none PaginatedRemoteResponseList This operation does not require authentication Remotes: Collection remotes_ansible_collection_list Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/remotes/ansible/collection/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/remotes/ansible/collection/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/remotes/ansible/collection/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/remotes/ansible/collection/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/pulp/api/v3/remotes/ansible/collection/ List collection remotes ViewSet for Collection Remotes. Parameters Name In Type Required Description limit query integer false Number of results to return per page. name query string false none name__contains query string false Filter results where name contains value name__icontains query string false Filter results where name contains value name__in query array[string] false Filter results where name is in a comma-separated list of values name__startswith query string false Filter results where name starts with value offset query integer false The initial index from which to return the results. ordering query array[string] false Ordering pulp_label_select query string false Filter labels by search string pulp_last_updated query string(date-time) false ISO 8601 formatted dates are supported pulp_last_updated__gt query string(date-time) false Filter results where pulp_last_updated is greater than value pulp_last_updated__gte query string(date-time) false Filter results where pulp_last_updated is greater than or equal to value pulp_last_updated__lt query string(date-time) false Filter results where pulp_last_updated is less than value pulp_last_updated__lte query string(date-time) false Filter results where pulp_last_updated is less than or equal to value pulp_last_updated__range query array[string] false Filter results where pulp_last_updated is between two comma separated values fields query string false A list of fields to include in the response. exclude_fields query string false A list of fields to exclude from the response. Enumerated Values Parameter Value ordering -alternatecontentsource ordering -ansible_collectionremote ordering -ansible_gitremote ordering -ansible_roleremote ordering -basedistribution ordering -ca_cert ordering -client_cert ordering -client_key ordering -connect_timeout ordering -container_containerremote ordering -distribution ordering -download_concurrency ordering -galaxy_containerregistryremote ordering -group_roles ordering -headers ordering -max_retries ordering -name ordering -password ordering -pk ordering -policy ordering -proxy_password ordering -proxy_url ordering -proxy_username ordering -pulp_created ordering -pulp_id ordering -pulp_labels ordering -pulp_last_updated ordering -pulp_type ordering -rate_limit ordering -remoteartifact ordering -repository ordering -sock_connect_timeout ordering -sock_read_timeout ordering -tls_validation ordering -total_timeout ordering -url ordering -user_roles ordering -username ordering alternatecontentsource ordering ansible_collectionremote ordering ansible_gitremote ordering ansible_roleremote ordering basedistribution ordering ca_cert ordering client_cert ordering client_key ordering connect_timeout ordering container_containerremote ordering distribution ordering download_concurrency ordering galaxy_containerregistryremote ordering group_roles ordering headers ordering max_retries ordering name ordering password ordering pk ordering policy ordering proxy_password ordering proxy_url ordering proxy_username ordering pulp_created ordering pulp_id ordering pulp_labels ordering pulp_last_updated ordering pulp_type ordering rate_limit ordering remoteartifact ordering repository ordering sock_connect_timeout ordering sock_read_timeout ordering tls_validation ordering total_timeout ordering url ordering user_roles ordering username Example responses 200 Response { \"meta\": { \"count\": 123 }, \"links\": { \"first\": \"string\", \"previous\": \"string\", \"next\": \"string\", \"last\": \"string\" }, \"data\": [ { \"pk\": \"4af43191-2f37-4a16-8471-4e8e40c314af\", \"name\": \"string\", \"url\": \"string\", \"auth_url\": \"string\", \"policy\": \"immediate\", \"requirements_file\": \"string\", \"created_at\": \"2019-08-24T14:15:22Z\", \"updated_at\": \"2019-08-24T14:15:22Z\", \"username\": \"string\", \"tls_validation\": true, \"client_cert\": \"string\", \"ca_cert\": \"string\", \"last_sync_task\": \"string\", \"repositories\": [ { \"name\": \"string\", \"description\": \"string\", \"next_version\": 2147483647, \"distributions\": [ { \"name\": \"string\", \"base_path\": \"string\", \"content_guard\": \"75e6b91e-c196-4627-9383-ce2e1e08d705\", \"created_at\": \"2019-08-24T14:15:22Z\", \"updated_at\": \"2019-08-24T14:15:22Z\" } ], \"created_at\": \"2019-08-24T14:15:22Z\", \"updated_at\": \"2019-08-24T14:15:22Z\", \"last_sync_task\": \"string\" } ], \"pulp_href\": \"http://example.com\", \"download_concurrency\": 1, \"proxy_url\": \"string\", \"proxy_username\": \"string\", \"write_only_fields\": [ null ], \"rate_limit\": 0, \"signed_only\": false } ] } Responses Status Meaning Description Schema 200 OK none Paginatedansible.CollectionRemoteResponseList This operation does not require authentication remotes_ansible_collection_create Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Content-Type\": []string{\"application/json\"}, \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"POST\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/remotes/ansible/collection/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const inputBody = '{ \"url\": \"string\", \"auth_url\": \"string\", \"token\": \"string\", \"policy\": \"immediate\", \"requirements_file\": \"string\", \"created_at\": \"2019-08-24T14:15:22Z\", \"updated_at\": \"2019-08-24T14:15:22Z\", \"username\": \"string\", \"password\": \"string\", \"tls_validation\": true, \"client_key\": \"string\", \"client_cert\": \"string\", \"ca_cert\": \"string\", \"download_concurrency\": 1, \"proxy_url\": \"string\", \"proxy_username\": \"string\", \"proxy_password\": \"string\", \"rate_limit\": 0, \"signed_only\": false }'; const headers = { 'Content-Type':'application/json', 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/remotes/ansible/collection/', { method: 'POST', body: inputBody, headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Content-Type': 'application/json', 'Accept': 'application/json' } r = requests.post('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/remotes/ansible/collection/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Content-Type' => 'application/json', 'Accept' => 'application/json' } result = RestClient.post 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/remotes/ansible/collection/', params: { }, headers: headers p JSON.parse(result) POST /api/automation-hub/pulp/api/v3/remotes/ansible/collection/ Create a collection remote ViewSet for Collection Remotes. Body parameter { \"url\": \"string\", \"auth_url\": \"string\", \"token\": \"string\", \"policy\": \"immediate\", \"requirements_file\": \"string\", \"created_at\": \"2019-08-24T14:15:22Z\", \"updated_at\": \"2019-08-24T14:15:22Z\", \"username\": \"string\", \"password\": \"string\", \"tls_validation\": true, \"client_key\": \"string\", \"client_cert\": \"string\", \"ca_cert\": \"string\", \"download_concurrency\": 1, \"proxy_url\": \"string\", \"proxy_username\": \"string\", \"proxy_password\": \"string\", \"rate_limit\": 0, \"signed_only\": false } url: string auth_url: string token: string policy: immediate requirements_file: string created_at: 2019-08-24T14:15:22Z updated_at: 2019-08-24T14:15:22Z username: string password: string tls_validation: true client_key: string client_cert: string ca_cert: string download_concurrency: 1 proxy_url: string proxy_username: string proxy_password: string rate_limit: 0 signed_only: false Parameters Name In Type Required Description body body ansible.CollectionRemote true none Example responses 201 Response { \"pk\": \"4af43191-2f37-4a16-8471-4e8e40c314af\", \"name\": \"string\", \"url\": \"string\", \"auth_url\": \"string\", \"policy\": \"immediate\", \"requirements_file\": \"string\", \"created_at\": \"2019-08-24T14:15:22Z\", \"updated_at\": \"2019-08-24T14:15:22Z\", \"username\": \"string\", \"tls_validation\": true, \"client_cert\": \"string\", \"ca_cert\": \"string\", \"last_sync_task\": \"string\", \"repositories\": [ { \"name\": \"string\", \"description\": \"string\", \"next_version\": 2147483647, \"distributions\": [ { \"name\": \"string\", \"base_path\": \"string\", \"content_guard\": \"75e6b91e-c196-4627-9383-ce2e1e08d705\", \"created_at\": \"2019-08-24T14:15:22Z\", \"updated_at\": \"2019-08-24T14:15:22Z\" } ], \"created_at\": \"2019-08-24T14:15:22Z\", \"updated_at\": \"2019-08-24T14:15:22Z\", \"last_sync_task\": \"string\" } ], \"pulp_href\": \"http://example.com\", \"download_concurrency\": 1, \"proxy_url\": \"string\", \"proxy_username\": \"string\", \"write_only_fields\": [ null ], \"rate_limit\": 0, \"signed_only\": false } Responses Status Meaning Description Schema 201 Created none ansible.CollectionRemoteResponse This operation does not require authentication remotes_ansible_collection_read Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/remotes/ansible/collection/{pulp_id}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/remotes/ansible/collection/{pulp_id}/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/remotes/ansible/collection/{pulp_id}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/remotes/ansible/collection/{pulp_id}/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/pulp/api/v3/remotes/ansible/collection/{pulp_id}/ Inspect a collection remote ViewSet for Collection Remotes. Parameters Name In Type Required Description pulp_id path string(uuid) true A UUID string identifying this collection remote. fields query string false A list of fields to include in the response. exclude_fields query string false A list of fields to exclude from the response. Example responses 200 Response { \"pk\": \"4af43191-2f37-4a16-8471-4e8e40c314af\", \"name\": \"string\", \"url\": \"string\", \"auth_url\": \"string\", \"policy\": \"immediate\", \"requirements_file\": \"string\", \"created_at\": \"2019-08-24T14:15:22Z\", \"updated_at\": \"2019-08-24T14:15:22Z\", \"username\": \"string\", \"tls_validation\": true, \"client_cert\": \"string\", \"ca_cert\": \"string\", \"last_sync_task\": \"string\", \"repositories\": [ { \"name\": \"string\", \"description\": \"string\", \"next_version\": 2147483647, \"distributions\": [ { \"name\": \"string\", \"base_path\": \"string\", \"content_guard\": \"75e6b91e-c196-4627-9383-ce2e1e08d705\", \"created_at\": \"2019-08-24T14:15:22Z\", \"updated_at\": \"2019-08-24T14:15:22Z\" } ], \"created_at\": \"2019-08-24T14:15:22Z\", \"updated_at\": \"2019-08-24T14:15:22Z\", \"last_sync_task\": \"string\" } ], \"pulp_href\": \"http://example.com\", \"download_concurrency\": 1, \"proxy_url\": \"string\", \"proxy_username\": \"string\", \"write_only_fields\": [ null ], \"rate_limit\": 0, \"signed_only\": false } Responses Status Meaning Description Schema 200 OK none ansible.CollectionRemoteResponse This operation does not require authentication remotes_ansible_collection_update Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Content-Type\": []string{\"application/json\"}, \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"PUT\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/remotes/ansible/collection/{pulp_id}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const inputBody = '{ \"url\": \"string\", \"auth_url\": \"string\", \"token\": \"string\", \"policy\": \"immediate\", \"requirements_file\": \"string\", \"created_at\": \"2019-08-24T14:15:22Z\", \"updated_at\": \"2019-08-24T14:15:22Z\", \"username\": \"string\", \"password\": \"string\", \"tls_validation\": true, \"client_key\": \"string\", \"client_cert\": \"string\", \"ca_cert\": \"string\", \"download_concurrency\": 1, \"proxy_url\": \"string\", \"proxy_username\": \"string\", \"proxy_password\": \"string\", \"rate_limit\": 0, \"signed_only\": false }'; const headers = { 'Content-Type':'application/json', 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/remotes/ansible/collection/{pulp_id}/', { method: 'PUT', body: inputBody, headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Content-Type': 'application/json', 'Accept': 'application/json' } r = requests.put('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/remotes/ansible/collection/{pulp_id}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Content-Type' => 'application/json', 'Accept' => 'application/json' } result = RestClient.put 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/remotes/ansible/collection/{pulp_id}/', params: { }, headers: headers p JSON.parse(result) PUT /api/automation-hub/pulp/api/v3/remotes/ansible/collection/{pulp_id}/ Update a collection remote Trigger an asynchronous update task Body parameter { \"url\": \"string\", \"auth_url\": \"string\", \"token\": \"string\", \"policy\": \"immediate\", \"requirements_file\": \"string\", \"created_at\": \"2019-08-24T14:15:22Z\", \"updated_at\": \"2019-08-24T14:15:22Z\", \"username\": \"string\", \"password\": \"string\", \"tls_validation\": true, \"client_key\": \"string\", \"client_cert\": \"string\", \"ca_cert\": \"string\", \"download_concurrency\": 1, \"proxy_url\": \"string\", \"proxy_username\": \"string\", \"proxy_password\": \"string\", \"rate_limit\": 0, \"signed_only\": false } url: string auth_url: string token: string policy: immediate requirements_file: string created_at: 2019-08-24T14:15:22Z updated_at: 2019-08-24T14:15:22Z username: string password: string tls_validation: true client_key: string client_cert: string ca_cert: string download_concurrency: 1 proxy_url: string proxy_username: string proxy_password: string rate_limit: 0 signed_only: false Parameters Name In Type Required Description pulp_id path string(uuid) true A UUID string identifying this collection remote. body body ansible.CollectionRemote true none Example responses 202 Response { \"task\": \"http://example.com\" } Responses Status Meaning Description Schema 202 Accepted none AsyncOperationResponse This operation does not require authentication remotes_ansible_collection_partial_update Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Content-Type\": []string{\"application/json\"}, \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"PATCH\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/remotes/ansible/collection/{pulp_id}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const inputBody = '{ \"url\": \"string\", \"auth_url\": \"string\", \"token\": \"string\", \"policy\": \"immediate\", \"requirements_file\": \"string\", \"created_at\": \"2019-08-24T14:15:22Z\", \"updated_at\": \"2019-08-24T14:15:22Z\", \"username\": \"string\", \"password\": \"string\", \"tls_validation\": true, \"client_key\": \"string\", \"client_cert\": \"string\", \"ca_cert\": \"string\", \"download_concurrency\": 1, \"proxy_url\": \"string\", \"proxy_username\": \"string\", \"proxy_password\": \"string\", \"rate_limit\": 0, \"signed_only\": false }'; const headers = { 'Content-Type':'application/json', 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/remotes/ansible/collection/{pulp_id}/', { method: 'PATCH', body: inputBody, headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Content-Type': 'application/json', 'Accept': 'application/json' } r = requests.patch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/remotes/ansible/collection/{pulp_id}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Content-Type' => 'application/json', 'Accept' => 'application/json' } result = RestClient.patch 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/remotes/ansible/collection/{pulp_id}/', params: { }, headers: headers p JSON.parse(result) PATCH /api/automation-hub/pulp/api/v3/remotes/ansible/collection/{pulp_id}/ Update a collection remote Trigger an asynchronous partial update task Body parameter { \"url\": \"string\", \"auth_url\": \"string\", \"token\": \"string\", \"policy\": \"immediate\", \"requirements_file\": \"string\", \"created_at\": \"2019-08-24T14:15:22Z\", \"updated_at\": \"2019-08-24T14:15:22Z\", \"username\": \"string\", \"password\": \"string\", \"tls_validation\": true, \"client_key\": \"string\", \"client_cert\": \"string\", \"ca_cert\": \"string\", \"download_concurrency\": 1, \"proxy_url\": \"string\", \"proxy_username\": \"string\", \"proxy_password\": \"string\", \"rate_limit\": 0, \"signed_only\": false } url: string auth_url: string token: string policy: immediate requirements_file: string created_at: 2019-08-24T14:15:22Z updated_at: 2019-08-24T14:15:22Z username: string password: string tls_validation: true client_key: string client_cert: string ca_cert: string download_concurrency: 1 proxy_url: string proxy_username: string proxy_password: string rate_limit: 0 signed_only: false Parameters Name In Type Required Description pulp_id path string(uuid) true A UUID string identifying this collection remote. body body Patchedansible.CollectionRemote true none Example responses 202 Response { \"task\": \"http://example.com\" } Responses Status Meaning Description Schema 202 Accepted none AsyncOperationResponse This operation does not require authentication remotes_ansible_collection_delete Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"DELETE\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/remotes/ansible/collection/{pulp_id}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/remotes/ansible/collection/{pulp_id}/', { method: 'DELETE', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.delete('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/remotes/ansible/collection/{pulp_id}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.delete 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/remotes/ansible/collection/{pulp_id}/', params: { }, headers: headers p JSON.parse(result) DELETE /api/automation-hub/pulp/api/v3/remotes/ansible/collection/{pulp_id}/ Delete a collection remote Trigger an asynchronous delete task Parameters Name In Type Required Description pulp_id path string(uuid) true A UUID string identifying this collection remote. Example responses 202 Response { \"task\": \"http://example.com\" } Responses Status Meaning Description Schema 202 Accepted none AsyncOperationResponse This operation does not require authentication Remotes: Git remotes_ansible_git_list Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/remotes/ansible/git/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/remotes/ansible/git/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/remotes/ansible/git/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/remotes/ansible/git/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/pulp/api/v3/remotes/ansible/git/ List git remotes ViewSet for Ansible Remotes. This is a tech preview feature. The functionality may change in the future. Parameters Name In Type Required Description limit query integer false Number of results to return per page. name query string false none name__contains query string false Filter results where name contains value name__icontains query string false Filter results where name contains value name__in query array[string] false Filter results where name is in a comma-separated list of values name__startswith query string false Filter results where name starts with value offset query integer false The initial index from which to return the results. ordering query array[string] false Ordering pulp_label_select query string false Filter labels by search string pulp_last_updated query string(date-time) false ISO 8601 formatted dates are supported pulp_last_updated__gt query string(date-time) false Filter results where pulp_last_updated is greater than value pulp_last_updated__gte query string(date-time) false Filter results where pulp_last_updated is greater than or equal to value pulp_last_updated__lt query string(date-time) false Filter results where pulp_last_updated is less than value pulp_last_updated__lte query string(date-time) false Filter results where pulp_last_updated is less than or equal to value pulp_last_updated__range query array[string] false Filter results where pulp_last_updated is between two comma separated values fields query string false A list of fields to include in the response. exclude_fields query string false A list of fields to exclude from the response. Enumerated Values Parameter Value ordering -alternatecontentsource ordering -ansible_collectionremote ordering -ansible_gitremote ordering -ansible_roleremote ordering -basedistribution ordering -ca_cert ordering -client_cert ordering -client_key ordering -connect_timeout ordering -container_containerremote ordering -distribution ordering -download_concurrency ordering -galaxy_containerregistryremote ordering -group_roles ordering -headers ordering -max_retries ordering -name ordering -password ordering -pk ordering -policy ordering -proxy_password ordering -proxy_url ordering -proxy_username ordering -pulp_created ordering -pulp_id ordering -pulp_labels ordering -pulp_last_updated ordering -pulp_type ordering -rate_limit ordering -remoteartifact ordering -repository ordering -sock_connect_timeout ordering -sock_read_timeout ordering -tls_validation ordering -total_timeout ordering -url ordering -user_roles ordering -username ordering alternatecontentsource ordering ansible_collectionremote ordering ansible_gitremote ordering ansible_roleremote ordering basedistribution ordering ca_cert ordering client_cert ordering client_key ordering connect_timeout ordering container_containerremote ordering distribution ordering download_concurrency ordering galaxy_containerregistryremote ordering group_roles ordering headers ordering max_retries ordering name ordering password ordering pk ordering policy ordering proxy_password ordering proxy_url ordering proxy_username ordering pulp_created ordering pulp_id ordering pulp_labels ordering pulp_last_updated ordering pulp_type ordering rate_limit ordering remoteartifact ordering repository ordering sock_connect_timeout ordering sock_read_timeout ordering tls_validation ordering total_timeout ordering url ordering user_roles ordering username Example responses 200 Response { \"count\": 123, \"next\": \"http://api.example.org/accounts/?offset=400&limit=100\", \"previous\": \"http://api.example.org/accounts/?offset=200&limit=100\", \"results\": [ { \"max_retries\": 0, \"client_cert\": \"string\", \"rate_limit\": 0, \"headers\": [ {} ], \"pulp_created\": \"2019-08-24T14:15:22Z\", \"connect_timeout\": 0, \"pulp_last_updated\": \"2019-08-24T14:15:22Z\", \"url\": \"string\", \"download_concurrency\": 1, \"tls_validation\": true, \"pulp_labels\": {}, \"pulp_href\": \"http://example.com\", \"sock_read_timeout\": 0, \"proxy_url\": \"string\", \"ca_cert\": \"string\", \"total_timeout\": 0, \"sock_connect_timeout\": 0, \"name\": \"string\", \"metadata_only\": true, \"git_ref\": \"string\" } ] } Responses Status Meaning Description Schema 200 OK none Paginatedansible.GitRemoteResponseList This operation does not require authentication remotes_ansible_git_create Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Content-Type\": []string{\"application/json\"}, \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"POST\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/remotes/ansible/git/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const inputBody = '{ \"max_retries\": 0, \"client_cert\": \"string\", \"rate_limit\": 0, \"headers\": [ {} ], \"proxy_password\": \"string\", \"connect_timeout\": 0, \"client_key\": \"string\", \"url\": \"string\", \"proxy_username\": \"string\", \"username\": \"string\", \"download_concurrency\": 1, \"tls_validation\": true, \"pulp_labels\": {}, \"password\": \"string\", \"sock_read_timeout\": 0, \"proxy_url\": \"string\", \"ca_cert\": \"string\", \"total_timeout\": 0, \"sock_connect_timeout\": 0, \"name\": \"string\", \"metadata_only\": true, \"git_ref\": \"string\" }'; const headers = { 'Content-Type':'application/json', 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/remotes/ansible/git/', { method: 'POST', body: inputBody, headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Content-Type': 'application/json', 'Accept': 'application/json' } r = requests.post('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/remotes/ansible/git/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Content-Type' => 'application/json', 'Accept' => 'application/json' } result = RestClient.post 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/remotes/ansible/git/', params: { }, headers: headers p JSON.parse(result) POST /api/automation-hub/pulp/api/v3/remotes/ansible/git/ Create a git remote ViewSet for Ansible Remotes. This is a tech preview feature. The functionality may change in the future. Body parameter { \"max_retries\": 0, \"client_cert\": \"string\", \"rate_limit\": 0, \"headers\": [ {} ], \"proxy_password\": \"string\", \"connect_timeout\": 0, \"client_key\": \"string\", \"url\": \"string\", \"proxy_username\": \"string\", \"username\": \"string\", \"download_concurrency\": 1, \"tls_validation\": true, \"pulp_labels\": {}, \"password\": \"string\", \"sock_read_timeout\": 0, \"proxy_url\": \"string\", \"ca_cert\": \"string\", \"total_timeout\": 0, \"sock_connect_timeout\": 0, \"name\": \"string\", \"metadata_only\": true, \"git_ref\": \"string\" } max_retries: 0 client_cert: string rate_limit: 0 headers: - {} proxy_password: string connect_timeout: 0 client_key: string url: string proxy_username: string username: string download_concurrency: 1 tls_validation: true pulp_labels: {} password: string sock_read_timeout: 0 proxy_url: string ca_cert: string total_timeout: 0 sock_connect_timeout: 0 name: string metadata_only: true git_ref: string Parameters Name In Type Required Description body body ansible.GitRemote true none Example responses 201 Response { \"max_retries\": 0, \"client_cert\": \"string\", \"rate_limit\": 0, \"headers\": [ {} ], \"pulp_created\": \"2019-08-24T14:15:22Z\", \"connect_timeout\": 0, \"pulp_last_updated\": \"2019-08-24T14:15:22Z\", \"url\": \"string\", \"download_concurrency\": 1, \"tls_validation\": true, \"pulp_labels\": {}, \"pulp_href\": \"http://example.com\", \"sock_read_timeout\": 0, \"proxy_url\": \"string\", \"ca_cert\": \"string\", \"total_timeout\": 0, \"sock_connect_timeout\": 0, \"name\": \"string\", \"metadata_only\": true, \"git_ref\": \"string\" } Responses Status Meaning Description Schema 201 Created none ansible.GitRemoteResponse This operation does not require authentication remotes_ansible_git_read Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/remotes/ansible/git/{pulp_id}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/remotes/ansible/git/{pulp_id}/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/remotes/ansible/git/{pulp_id}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/remotes/ansible/git/{pulp_id}/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/pulp/api/v3/remotes/ansible/git/{pulp_id}/ Inspect a git remote ViewSet for Ansible Remotes. This is a tech preview feature. The functionality may change in the future. Parameters Name In Type Required Description pulp_id path string(uuid) true A UUID string identifying this git remote. fields query string false A list of fields to include in the response. exclude_fields query string false A list of fields to exclude from the response. Example responses 200 Response { \"max_retries\": 0, \"client_cert\": \"string\", \"rate_limit\": 0, \"headers\": [ {} ], \"pulp_created\": \"2019-08-24T14:15:22Z\", \"connect_timeout\": 0, \"pulp_last_updated\": \"2019-08-24T14:15:22Z\", \"url\": \"string\", \"download_concurrency\": 1, \"tls_validation\": true, \"pulp_labels\": {}, \"pulp_href\": \"http://example.com\", \"sock_read_timeout\": 0, \"proxy_url\": \"string\", \"ca_cert\": \"string\", \"total_timeout\": 0, \"sock_connect_timeout\": 0, \"name\": \"string\", \"metadata_only\": true, \"git_ref\": \"string\" } Responses Status Meaning Description Schema 200 OK none ansible.GitRemoteResponse This operation does not require authentication remotes_ansible_git_update Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Content-Type\": []string{\"application/json\"}, \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"PUT\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/remotes/ansible/git/{pulp_id}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const inputBody = '{ \"max_retries\": 0, \"client_cert\": \"string\", \"rate_limit\": 0, \"headers\": [ {} ], \"proxy_password\": \"string\", \"connect_timeout\": 0, \"client_key\": \"string\", \"url\": \"string\", \"proxy_username\": \"string\", \"username\": \"string\", \"download_concurrency\": 1, \"tls_validation\": true, \"pulp_labels\": {}, \"password\": \"string\", \"sock_read_timeout\": 0, \"proxy_url\": \"string\", \"ca_cert\": \"string\", \"total_timeout\": 0, \"sock_connect_timeout\": 0, \"name\": \"string\", \"metadata_only\": true, \"git_ref\": \"string\" }'; const headers = { 'Content-Type':'application/json', 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/remotes/ansible/git/{pulp_id}/', { method: 'PUT', body: inputBody, headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Content-Type': 'application/json', 'Accept': 'application/json' } r = requests.put('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/remotes/ansible/git/{pulp_id}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Content-Type' => 'application/json', 'Accept' => 'application/json' } result = RestClient.put 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/remotes/ansible/git/{pulp_id}/', params: { }, headers: headers p JSON.parse(result) PUT /api/automation-hub/pulp/api/v3/remotes/ansible/git/{pulp_id}/ Update a git remote Trigger an asynchronous update task Body parameter { \"max_retries\": 0, \"client_cert\": \"string\", \"rate_limit\": 0, \"headers\": [ {} ], \"proxy_password\": \"string\", \"connect_timeout\": 0, \"client_key\": \"string\", \"url\": \"string\", \"proxy_username\": \"string\", \"username\": \"string\", \"download_concurrency\": 1, \"tls_validation\": true, \"pulp_labels\": {}, \"password\": \"string\", \"sock_read_timeout\": 0, \"proxy_url\": \"string\", \"ca_cert\": \"string\", \"total_timeout\": 0, \"sock_connect_timeout\": 0, \"name\": \"string\", \"metadata_only\": true, \"git_ref\": \"string\" } max_retries: 0 client_cert: string rate_limit: 0 headers: - {} proxy_password: string connect_timeout: 0 client_key: string url: string proxy_username: string username: string download_concurrency: 1 tls_validation: true pulp_labels: {} password: string sock_read_timeout: 0 proxy_url: string ca_cert: string total_timeout: 0 sock_connect_timeout: 0 name: string metadata_only: true git_ref: string Parameters Name In Type Required Description pulp_id path string(uuid) true A UUID string identifying this git remote. body body ansible.GitRemote true none Example responses 202 Response { \"task\": \"http://example.com\" } Responses Status Meaning Description Schema 202 Accepted none AsyncOperationResponse This operation does not require authentication remotes_ansible_git_partial_update Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Content-Type\": []string{\"application/json\"}, \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"PATCH\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/remotes/ansible/git/{pulp_id}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const inputBody = '{ \"max_retries\": 0, \"client_cert\": \"string\", \"rate_limit\": 0, \"headers\": [ {} ], \"proxy_password\": \"string\", \"connect_timeout\": 0, \"client_key\": \"string\", \"url\": \"string\", \"proxy_username\": \"string\", \"username\": \"string\", \"download_concurrency\": 1, \"tls_validation\": true, \"pulp_labels\": {}, \"password\": \"string\", \"sock_read_timeout\": 0, \"proxy_url\": \"string\", \"ca_cert\": \"string\", \"total_timeout\": 0, \"sock_connect_timeout\": 0, \"name\": \"string\", \"metadata_only\": true, \"git_ref\": \"string\" }'; const headers = { 'Content-Type':'application/json', 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/remotes/ansible/git/{pulp_id}/', { method: 'PATCH', body: inputBody, headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Content-Type': 'application/json', 'Accept': 'application/json' } r = requests.patch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/remotes/ansible/git/{pulp_id}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Content-Type' => 'application/json', 'Accept' => 'application/json' } result = RestClient.patch 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/remotes/ansible/git/{pulp_id}/', params: { }, headers: headers p JSON.parse(result) PATCH /api/automation-hub/pulp/api/v3/remotes/ansible/git/{pulp_id}/ Update a git remote Trigger an asynchronous partial update task Body parameter { \"max_retries\": 0, \"client_cert\": \"string\", \"rate_limit\": 0, \"headers\": [ {} ], \"proxy_password\": \"string\", \"connect_timeout\": 0, \"client_key\": \"string\", \"url\": \"string\", \"proxy_username\": \"string\", \"username\": \"string\", \"download_concurrency\": 1, \"tls_validation\": true, \"pulp_labels\": {}, \"password\": \"string\", \"sock_read_timeout\": 0, \"proxy_url\": \"string\", \"ca_cert\": \"string\", \"total_timeout\": 0, \"sock_connect_timeout\": 0, \"name\": \"string\", \"metadata_only\": true, \"git_ref\": \"string\" } max_retries: 0 client_cert: string rate_limit: 0 headers: - {} proxy_password: string connect_timeout: 0 client_key: string url: string proxy_username: string username: string download_concurrency: 1 tls_validation: true pulp_labels: {} password: string sock_read_timeout: 0 proxy_url: string ca_cert: string total_timeout: 0 sock_connect_timeout: 0 name: string metadata_only: true git_ref: string Parameters Name In Type Required Description pulp_id path string(uuid) true A UUID string identifying this git remote. body body Patchedansible.GitRemote true none Example responses 202 Response { \"task\": \"http://example.com\" } Responses Status Meaning Description Schema 202 Accepted none AsyncOperationResponse This operation does not require authentication remotes_ansible_git_delete Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"DELETE\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/remotes/ansible/git/{pulp_id}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/remotes/ansible/git/{pulp_id}/', { method: 'DELETE', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.delete('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/remotes/ansible/git/{pulp_id}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.delete 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/remotes/ansible/git/{pulp_id}/', params: { }, headers: headers p JSON.parse(result) DELETE /api/automation-hub/pulp/api/v3/remotes/ansible/git/{pulp_id}/ Delete a git remote Trigger an asynchronous delete task Parameters Name In Type Required Description pulp_id path string(uuid) true A UUID string identifying this git remote. Example responses 202 Response { \"task\": \"http://example.com\" } Responses Status Meaning Description Schema 202 Accepted none AsyncOperationResponse This operation does not require authentication Remotes: Role remotes_ansible_role_list Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/remotes/ansible/role/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/remotes/ansible/role/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/remotes/ansible/role/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/remotes/ansible/role/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/pulp/api/v3/remotes/ansible/role/ List role remotes ViewSet for Role Remotes. Parameters Name In Type Required Description limit query integer false Number of results to return per page. name query string false none name__contains query string false Filter results where name contains value name__icontains query string false Filter results where name contains value name__in query array[string] false Filter results where name is in a comma-separated list of values name__startswith query string false Filter results where name starts with value offset query integer false The initial index from which to return the results. ordering query array[string] false Ordering pulp_label_select query string false Filter labels by search string pulp_last_updated query string(date-time) false ISO 8601 formatted dates are supported pulp_last_updated__gt query string(date-time) false Filter results where pulp_last_updated is greater than value pulp_last_updated__gte query string(date-time) false Filter results where pulp_last_updated is greater than or equal to value pulp_last_updated__lt query string(date-time) false Filter results where pulp_last_updated is less than value pulp_last_updated__lte query string(date-time) false Filter results where pulp_last_updated is less than or equal to value pulp_last_updated__range query array[string] false Filter results where pulp_last_updated is between two comma separated values fields query string false A list of fields to include in the response. exclude_fields query string false A list of fields to exclude from the response. Enumerated Values Parameter Value ordering -alternatecontentsource ordering -ansible_collectionremote ordering -ansible_gitremote ordering -ansible_roleremote ordering -basedistribution ordering -ca_cert ordering -client_cert ordering -client_key ordering -connect_timeout ordering -container_containerremote ordering -distribution ordering -download_concurrency ordering -galaxy_containerregistryremote ordering -group_roles ordering -headers ordering -max_retries ordering -name ordering -password ordering -pk ordering -policy ordering -proxy_password ordering -proxy_url ordering -proxy_username ordering -pulp_created ordering -pulp_id ordering -pulp_labels ordering -pulp_last_updated ordering -pulp_type ordering -rate_limit ordering -remoteartifact ordering -repository ordering -sock_connect_timeout ordering -sock_read_timeout ordering -tls_validation ordering -total_timeout ordering -url ordering -user_roles ordering -username ordering alternatecontentsource ordering ansible_collectionremote ordering ansible_gitremote ordering ansible_roleremote ordering basedistribution ordering ca_cert ordering client_cert ordering client_key ordering connect_timeout ordering container_containerremote ordering distribution ordering download_concurrency ordering galaxy_containerregistryremote ordering group_roles ordering headers ordering max_retries ordering name ordering password ordering pk ordering policy ordering proxy_password ordering proxy_url ordering proxy_username ordering pulp_created ordering pulp_id ordering pulp_labels ordering pulp_last_updated ordering pulp_type ordering rate_limit ordering remoteartifact ordering repository ordering sock_connect_timeout ordering sock_read_timeout ordering tls_validation ordering total_timeout ordering url ordering user_roles ordering username Example responses 200 Response { \"count\": 123, \"next\": \"http://api.example.org/accounts/?offset=400&limit=100\", \"previous\": \"http://api.example.org/accounts/?offset=200&limit=100\", \"results\": [ { \"pulp_href\": \"http://example.com\", \"pulp_created\": \"2019-08-24T14:15:22Z\", \"name\": \"string\", \"url\": \"string\", \"ca_cert\": \"string\", \"client_cert\": \"string\", \"tls_validation\": true, \"proxy_url\": \"string\", \"pulp_labels\": {}, \"pulp_last_updated\": \"2019-08-24T14:15:22Z\", \"download_concurrency\": 1, \"max_retries\": 0, \"policy\": \"immediate\", \"total_timeout\": 0, \"connect_timeout\": 0, \"sock_connect_timeout\": 0, \"sock_read_timeout\": 0, \"headers\": [ {} ], \"rate_limit\": 0 } ] } Responses Status Meaning Description Schema 200 OK none Paginatedansible.RoleRemoteResponseList This operation does not require authentication remotes_ansible_role_create Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Content-Type\": []string{\"application/json\"}, \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"POST\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/remotes/ansible/role/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const inputBody = '{ \"name\": \"string\", \"url\": \"string\", \"ca_cert\": \"string\", \"client_cert\": \"string\", \"client_key\": \"string\", \"tls_validation\": true, \"proxy_url\": \"string\", \"proxy_username\": \"string\", \"proxy_password\": \"string\", \"username\": \"string\", \"password\": \"string\", \"pulp_labels\": {}, \"download_concurrency\": 1, \"max_retries\": 0, \"policy\": \"immediate\", \"total_timeout\": 0, \"connect_timeout\": 0, \"sock_connect_timeout\": 0, \"sock_read_timeout\": 0, \"headers\": [ {} ], \"rate_limit\": 0 }'; const headers = { 'Content-Type':'application/json', 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/remotes/ansible/role/', { method: 'POST', body: inputBody, headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Content-Type': 'application/json', 'Accept': 'application/json' } r = requests.post('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/remotes/ansible/role/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Content-Type' => 'application/json', 'Accept' => 'application/json' } result = RestClient.post 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/remotes/ansible/role/', params: { }, headers: headers p JSON.parse(result) POST /api/automation-hub/pulp/api/v3/remotes/ansible/role/ Create a role remote ViewSet for Role Remotes. Body parameter { \"name\": \"string\", \"url\": \"string\", \"ca_cert\": \"string\", \"client_cert\": \"string\", \"client_key\": \"string\", \"tls_validation\": true, \"proxy_url\": \"string\", \"proxy_username\": \"string\", \"proxy_password\": \"string\", \"username\": \"string\", \"password\": \"string\", \"pulp_labels\": {}, \"download_concurrency\": 1, \"max_retries\": 0, \"policy\": \"immediate\", \"total_timeout\": 0, \"connect_timeout\": 0, \"sock_connect_timeout\": 0, \"sock_read_timeout\": 0, \"headers\": [ {} ], \"rate_limit\": 0 } name: string url: string ca_cert: string client_cert: string client_key: string tls_validation: true proxy_url: string proxy_username: string proxy_password: string username: string password: string pulp_labels: {} download_concurrency: 1 max_retries: 0 policy: immediate total_timeout: 0 connect_timeout: 0 sock_connect_timeout: 0 sock_read_timeout: 0 headers: - {} rate_limit: 0 Parameters Name In Type Required Description body body ansible.RoleRemote true none Example responses 201 Response { \"pulp_href\": \"http://example.com\", \"pulp_created\": \"2019-08-24T14:15:22Z\", \"name\": \"string\", \"url\": \"string\", \"ca_cert\": \"string\", \"client_cert\": \"string\", \"tls_validation\": true, \"proxy_url\": \"string\", \"pulp_labels\": {}, \"pulp_last_updated\": \"2019-08-24T14:15:22Z\", \"download_concurrency\": 1, \"max_retries\": 0, \"policy\": \"immediate\", \"total_timeout\": 0, \"connect_timeout\": 0, \"sock_connect_timeout\": 0, \"sock_read_timeout\": 0, \"headers\": [ {} ], \"rate_limit\": 0 } Responses Status Meaning Description Schema 201 Created none ansible.RoleRemoteResponse This operation does not require authentication remotes_ansible_role_read Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/remotes/ansible/role/{pulp_id}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/remotes/ansible/role/{pulp_id}/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/remotes/ansible/role/{pulp_id}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/remotes/ansible/role/{pulp_id}/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/pulp/api/v3/remotes/ansible/role/{pulp_id}/ Inspect a role remote ViewSet for Role Remotes. Parameters Name In Type Required Description pulp_id path string(uuid) true A UUID string identifying this role remote. fields query string false A list of fields to include in the response. exclude_fields query string false A list of fields to exclude from the response. Example responses 200 Response { \"pulp_href\": \"http://example.com\", \"pulp_created\": \"2019-08-24T14:15:22Z\", \"name\": \"string\", \"url\": \"string\", \"ca_cert\": \"string\", \"client_cert\": \"string\", \"tls_validation\": true, \"proxy_url\": \"string\", \"pulp_labels\": {}, \"pulp_last_updated\": \"2019-08-24T14:15:22Z\", \"download_concurrency\": 1, \"max_retries\": 0, \"policy\": \"immediate\", \"total_timeout\": 0, \"connect_timeout\": 0, \"sock_connect_timeout\": 0, \"sock_read_timeout\": 0, \"headers\": [ {} ], \"rate_limit\": 0 } Responses Status Meaning Description Schema 200 OK none ansible.RoleRemoteResponse This operation does not require authentication remotes_ansible_role_update Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Content-Type\": []string{\"application/json\"}, \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"PUT\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/remotes/ansible/role/{pulp_id}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const inputBody = '{ \"name\": \"string\", \"url\": \"string\", \"ca_cert\": \"string\", \"client_cert\": \"string\", \"client_key\": \"string\", \"tls_validation\": true, \"proxy_url\": \"string\", \"proxy_username\": \"string\", \"proxy_password\": \"string\", \"username\": \"string\", \"password\": \"string\", \"pulp_labels\": {}, \"download_concurrency\": 1, \"max_retries\": 0, \"policy\": \"immediate\", \"total_timeout\": 0, \"connect_timeout\": 0, \"sock_connect_timeout\": 0, \"sock_read_timeout\": 0, \"headers\": [ {} ], \"rate_limit\": 0 }'; const headers = { 'Content-Type':'application/json', 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/remotes/ansible/role/{pulp_id}/', { method: 'PUT', body: inputBody, headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Content-Type': 'application/json', 'Accept': 'application/json' } r = requests.put('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/remotes/ansible/role/{pulp_id}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Content-Type' => 'application/json', 'Accept' => 'application/json' } result = RestClient.put 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/remotes/ansible/role/{pulp_id}/', params: { }, headers: headers p JSON.parse(result) PUT /api/automation-hub/pulp/api/v3/remotes/ansible/role/{pulp_id}/ Update a role remote Trigger an asynchronous update task Body parameter { \"name\": \"string\", \"url\": \"string\", \"ca_cert\": \"string\", \"client_cert\": \"string\", \"client_key\": \"string\", \"tls_validation\": true, \"proxy_url\": \"string\", \"proxy_username\": \"string\", \"proxy_password\": \"string\", \"username\": \"string\", \"password\": \"string\", \"pulp_labels\": {}, \"download_concurrency\": 1, \"max_retries\": 0, \"policy\": \"immediate\", \"total_timeout\": 0, \"connect_timeout\": 0, \"sock_connect_timeout\": 0, \"sock_read_timeout\": 0, \"headers\": [ {} ], \"rate_limit\": 0 } name: string url: string ca_cert: string client_cert: string client_key: string tls_validation: true proxy_url: string proxy_username: string proxy_password: string username: string password: string pulp_labels: {} download_concurrency: 1 max_retries: 0 policy: immediate total_timeout: 0 connect_timeout: 0 sock_connect_timeout: 0 sock_read_timeout: 0 headers: - {} rate_limit: 0 Parameters Name In Type Required Description pulp_id path string(uuid) true A UUID string identifying this role remote. body body ansible.RoleRemote true none Example responses 202 Response { \"task\": \"http://example.com\" } Responses Status Meaning Description Schema 202 Accepted none AsyncOperationResponse This operation does not require authentication remotes_ansible_role_partial_update Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Content-Type\": []string{\"application/json\"}, \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"PATCH\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/remotes/ansible/role/{pulp_id}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const inputBody = '{ \"name\": \"string\", \"url\": \"string\", \"ca_cert\": \"string\", \"client_cert\": \"string\", \"client_key\": \"string\", \"tls_validation\": true, \"proxy_url\": \"string\", \"proxy_username\": \"string\", \"proxy_password\": \"string\", \"username\": \"string\", \"password\": \"string\", \"pulp_labels\": {}, \"download_concurrency\": 1, \"max_retries\": 0, \"policy\": \"immediate\", \"total_timeout\": 0, \"connect_timeout\": 0, \"sock_connect_timeout\": 0, \"sock_read_timeout\": 0, \"headers\": [ {} ], \"rate_limit\": 0 }'; const headers = { 'Content-Type':'application/json', 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/remotes/ansible/role/{pulp_id}/', { method: 'PATCH', body: inputBody, headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Content-Type': 'application/json', 'Accept': 'application/json' } r = requests.patch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/remotes/ansible/role/{pulp_id}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Content-Type' => 'application/json', 'Accept' => 'application/json' } result = RestClient.patch 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/remotes/ansible/role/{pulp_id}/', params: { }, headers: headers p JSON.parse(result) PATCH /api/automation-hub/pulp/api/v3/remotes/ansible/role/{pulp_id}/ Update a role remote Trigger an asynchronous partial update task Body parameter { \"name\": \"string\", \"url\": \"string\", \"ca_cert\": \"string\", \"client_cert\": \"string\", \"client_key\": \"string\", \"tls_validation\": true, \"proxy_url\": \"string\", \"proxy_username\": \"string\", \"proxy_password\": \"string\", \"username\": \"string\", \"password\": \"string\", \"pulp_labels\": {}, \"download_concurrency\": 1, \"max_retries\": 0, \"policy\": \"immediate\", \"total_timeout\": 0, \"connect_timeout\": 0, \"sock_connect_timeout\": 0, \"sock_read_timeout\": 0, \"headers\": [ {} ], \"rate_limit\": 0 } name: string url: string ca_cert: string client_cert: string client_key: string tls_validation: true proxy_url: string proxy_username: string proxy_password: string username: string password: string pulp_labels: {} download_concurrency: 1 max_retries: 0 policy: immediate total_timeout: 0 connect_timeout: 0 sock_connect_timeout: 0 sock_read_timeout: 0 headers: - {} rate_limit: 0 Parameters Name In Type Required Description pulp_id path string(uuid) true A UUID string identifying this role remote. body body Patchedansible.RoleRemote true none Example responses 202 Response { \"task\": \"http://example.com\" } Responses Status Meaning Description Schema 202 Accepted none AsyncOperationResponse This operation does not require authentication remotes_ansible_role_delete Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"DELETE\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/remotes/ansible/role/{pulp_id}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/remotes/ansible/role/{pulp_id}/', { method: 'DELETE', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.delete('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/remotes/ansible/role/{pulp_id}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.delete 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/remotes/ansible/role/{pulp_id}/', params: { }, headers: headers p JSON.parse(result) DELETE /api/automation-hub/pulp/api/v3/remotes/ansible/role/{pulp_id}/ Delete a role remote Trigger an asynchronous delete task Parameters Name In Type Required Description pulp_id path string(uuid) true A UUID string identifying this role remote. Example responses 202 Response { \"task\": \"http://example.com\" } Responses Status Meaning Description Schema 202 Accepted none AsyncOperationResponse This operation does not require authentication Remotes: Container remotes_container_container_list Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/remotes/container/container/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/remotes/container/container/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/remotes/container/container/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/remotes/container/container/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/pulp/api/v3/remotes/container/container/ List container remotes Container remotes represent an external repository that implements the Container Registry API. Container remotes support deferred downloading by configuring the policy field. on_demand and streamed policies can provide significant disk space savings. Parameters Name In Type Required Description limit query integer false Number of results to return per page. name query string false none name__contains query string false Filter results where name contains value name__icontains query string false Filter results where name contains value name__in query array[string] false Filter results where name is in a comma-separated list of values name__startswith query string false Filter results where name starts with value offset query integer false The initial index from which to return the results. ordering query array[string] false Ordering pulp_label_select query string false Filter labels by search string pulp_last_updated query string(date-time) false ISO 8601 formatted dates are supported pulp_last_updated__gt query string(date-time) false Filter results where pulp_last_updated is greater than value pulp_last_updated__gte query string(date-time) false Filter results where pulp_last_updated is greater than or equal to value pulp_last_updated__lt query string(date-time) false Filter results where pulp_last_updated is less than value pulp_last_updated__lte query string(date-time) false Filter results where pulp_last_updated is less than or equal to value pulp_last_updated__range query array[string] false Filter results where pulp_last_updated is between two comma separated values fields query string false A list of fields to include in the response. exclude_fields query string false A list of fields to exclude from the response. Enumerated Values Parameter Value ordering -alternatecontentsource ordering -ansible_collectionremote ordering -ansible_gitremote ordering -ansible_roleremote ordering -basedistribution ordering -ca_cert ordering -client_cert ordering -client_key ordering -connect_timeout ordering -container_containerremote ordering -distribution ordering -download_concurrency ordering -galaxy_containerregistryremote ordering -group_roles ordering -headers ordering -max_retries ordering -name ordering -password ordering -pk ordering -policy ordering -proxy_password ordering -proxy_url ordering -proxy_username ordering -pulp_created ordering -pulp_id ordering -pulp_labels ordering -pulp_last_updated ordering -pulp_type ordering -rate_limit ordering -remoteartifact ordering -repository ordering -sock_connect_timeout ordering -sock_read_timeout ordering -tls_validation ordering -total_timeout ordering -url ordering -user_roles ordering -username ordering alternatecontentsource ordering ansible_collectionremote ordering ansible_gitremote ordering ansible_roleremote ordering basedistribution ordering ca_cert ordering client_cert ordering client_key ordering connect_timeout ordering container_containerremote ordering distribution ordering download_concurrency ordering galaxy_containerregistryremote ordering group_roles ordering headers ordering max_retries ordering name ordering password ordering pk ordering policy ordering proxy_password ordering proxy_url ordering proxy_username ordering pulp_created ordering pulp_id ordering pulp_labels ordering pulp_last_updated ordering pulp_type ordering rate_limit ordering remoteartifact ordering repository ordering sock_connect_timeout ordering sock_read_timeout ordering tls_validation ordering total_timeout ordering url ordering user_roles ordering username Example responses 200 Response { \"count\": 123, \"next\": \"http://api.example.org/accounts/?offset=400&limit=100\", \"previous\": \"http://api.example.org/accounts/?offset=200&limit=100\", \"results\": [ { \"pulp_href\": \"http://example.com\", \"pulp_created\": \"2019-08-24T14:15:22Z\", \"name\": \"string\", \"url\": \"string\", \"ca_cert\": \"string\", \"client_cert\": \"string\", \"tls_validation\": true, \"proxy_url\": \"string\", \"pulp_labels\": {}, \"pulp_last_updated\": \"2019-08-24T14:15:22Z\", \"download_concurrency\": 1, \"max_retries\": 0, \"policy\": \"immediate\", \"total_timeout\": 0, \"connect_timeout\": 0, \"sock_connect_timeout\": 0, \"sock_read_timeout\": 0, \"headers\": [ {} ], \"rate_limit\": 0, \"upstream_name\": \"string\", \"include_tags\": [ \"string\" ], \"exclude_tags\": [ \"string\" ], \"sigstore\": \"http://example.com\" } ] } Responses Status Meaning Description Schema 200 OK none Paginatedcontainer.ContainerRemoteResponseList This operation does not require authentication remotes_container_container_create Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Content-Type\": []string{\"application/json\"}, \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"POST\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/remotes/container/container/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const inputBody = '{ \"name\": \"string\", \"url\": \"string\", \"ca_cert\": \"string\", \"client_cert\": \"string\", \"client_key\": \"string\", \"tls_validation\": true, \"proxy_url\": \"string\", \"proxy_username\": \"string\", \"proxy_password\": \"string\", \"username\": \"string\", \"password\": \"string\", \"pulp_labels\": {}, \"download_concurrency\": 1, \"max_retries\": 0, \"policy\": \"immediate\", \"total_timeout\": 0, \"connect_timeout\": 0, \"sock_connect_timeout\": 0, \"sock_read_timeout\": 0, \"headers\": [ {} ], \"rate_limit\": 0, \"upstream_name\": \"string\", \"include_tags\": [ \"string\" ], \"exclude_tags\": [ \"string\" ], \"sigstore\": \"http://example.com\" }'; const headers = { 'Content-Type':'application/json', 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/remotes/container/container/', { method: 'POST', body: inputBody, headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Content-Type': 'application/json', 'Accept': 'application/json' } r = requests.post('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/remotes/container/container/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Content-Type' => 'application/json', 'Accept' => 'application/json' } result = RestClient.post 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/remotes/container/container/', params: { }, headers: headers p JSON.parse(result) POST /api/automation-hub/pulp/api/v3/remotes/container/container/ Create a container remote Container remotes represent an external repository that implements the Container Registry API. Container remotes support deferred downloading by configuring the policy field. on_demand and streamed policies can provide significant disk space savings. Body parameter { \"name\": \"string\", \"url\": \"string\", \"ca_cert\": \"string\", \"client_cert\": \"string\", \"client_key\": \"string\", \"tls_validation\": true, \"proxy_url\": \"string\", \"proxy_username\": \"string\", \"proxy_password\": \"string\", \"username\": \"string\", \"password\": \"string\", \"pulp_labels\": {}, \"download_concurrency\": 1, \"max_retries\": 0, \"policy\": \"immediate\", \"total_timeout\": 0, \"connect_timeout\": 0, \"sock_connect_timeout\": 0, \"sock_read_timeout\": 0, \"headers\": [ {} ], \"rate_limit\": 0, \"upstream_name\": \"string\", \"include_tags\": [ \"string\" ], \"exclude_tags\": [ \"string\" ], \"sigstore\": \"http://example.com\" } name: string url: string ca_cert: string client_cert: string client_key: string tls_validation: true proxy_url: string proxy_username: string proxy_password: string username: string password: string pulp_labels: {} download_concurrency: 1 max_retries: 0 policy: immediate total_timeout: 0 connect_timeout: 0 sock_connect_timeout: 0 sock_read_timeout: 0 headers: - {} rate_limit: 0 upstream_name: string include_tags: - string exclude_tags: - string sigstore: http://example.com Parameters Name In Type Required Description body body container.ContainerRemote true none Example responses 201 Response { \"pulp_href\": \"http://example.com\", \"pulp_created\": \"2019-08-24T14:15:22Z\", \"name\": \"string\", \"url\": \"string\", \"ca_cert\": \"string\", \"client_cert\": \"string\", \"tls_validation\": true, \"proxy_url\": \"string\", \"pulp_labels\": {}, \"pulp_last_updated\": \"2019-08-24T14:15:22Z\", \"download_concurrency\": 1, \"max_retries\": 0, \"policy\": \"immediate\", \"total_timeout\": 0, \"connect_timeout\": 0, \"sock_connect_timeout\": 0, \"sock_read_timeout\": 0, \"headers\": [ {} ], \"rate_limit\": 0, \"upstream_name\": \"string\", \"include_tags\": [ \"string\" ], \"exclude_tags\": [ \"string\" ], \"sigstore\": \"http://example.com\" } Responses Status Meaning Description Schema 201 Created none container.ContainerRemoteResponse This operation does not require authentication remotes_container_container_read Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/remotes/container/container/{pulp_id}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/remotes/container/container/{pulp_id}/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/remotes/container/container/{pulp_id}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/remotes/container/container/{pulp_id}/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/pulp/api/v3/remotes/container/container/{pulp_id}/ Inspect a container remote Container remotes represent an external repository that implements the Container Registry API. Container remotes support deferred downloading by configuring the policy field. on_demand and streamed policies can provide significant disk space savings. Parameters Name In Type Required Description pulp_id path string(uuid) true A UUID string identifying this container remote. fields query string false A list of fields to include in the response. exclude_fields query string false A list of fields to exclude from the response. Example responses 200 Response { \"pulp_href\": \"http://example.com\", \"pulp_created\": \"2019-08-24T14:15:22Z\", \"name\": \"string\", \"url\": \"string\", \"ca_cert\": \"string\", \"client_cert\": \"string\", \"tls_validation\": true, \"proxy_url\": \"string\", \"pulp_labels\": {}, \"pulp_last_updated\": \"2019-08-24T14:15:22Z\", \"download_concurrency\": 1, \"max_retries\": 0, \"policy\": \"immediate\", \"total_timeout\": 0, \"connect_timeout\": 0, \"sock_connect_timeout\": 0, \"sock_read_timeout\": 0, \"headers\": [ {} ], \"rate_limit\": 0, \"upstream_name\": \"string\", \"include_tags\": [ \"string\" ], \"exclude_tags\": [ \"string\" ], \"sigstore\": \"http://example.com\" } Responses Status Meaning Description Schema 200 OK none container.ContainerRemoteResponse This operation does not require authentication remotes_container_container_update Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Content-Type\": []string{\"application/json\"}, \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"PUT\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/remotes/container/container/{pulp_id}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const inputBody = '{ \"name\": \"string\", \"url\": \"string\", \"ca_cert\": \"string\", \"client_cert\": \"string\", \"client_key\": \"string\", \"tls_validation\": true, \"proxy_url\": \"string\", \"proxy_username\": \"string\", \"proxy_password\": \"string\", \"username\": \"string\", \"password\": \"string\", \"pulp_labels\": {}, \"download_concurrency\": 1, \"max_retries\": 0, \"policy\": \"immediate\", \"total_timeout\": 0, \"connect_timeout\": 0, \"sock_connect_timeout\": 0, \"sock_read_timeout\": 0, \"headers\": [ {} ], \"rate_limit\": 0, \"upstream_name\": \"string\", \"include_tags\": [ \"string\" ], \"exclude_tags\": [ \"string\" ], \"sigstore\": \"http://example.com\" }'; const headers = { 'Content-Type':'application/json', 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/remotes/container/container/{pulp_id}/', { method: 'PUT', body: inputBody, headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Content-Type': 'application/json', 'Accept': 'application/json' } r = requests.put('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/remotes/container/container/{pulp_id}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Content-Type' => 'application/json', 'Accept' => 'application/json' } result = RestClient.put 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/remotes/container/container/{pulp_id}/', params: { }, headers: headers p JSON.parse(result) PUT /api/automation-hub/pulp/api/v3/remotes/container/container/{pulp_id}/ Update a container remote Trigger an asynchronous update task Body parameter { \"name\": \"string\", \"url\": \"string\", \"ca_cert\": \"string\", \"client_cert\": \"string\", \"client_key\": \"string\", \"tls_validation\": true, \"proxy_url\": \"string\", \"proxy_username\": \"string\", \"proxy_password\": \"string\", \"username\": \"string\", \"password\": \"string\", \"pulp_labels\": {}, \"download_concurrency\": 1, \"max_retries\": 0, \"policy\": \"immediate\", \"total_timeout\": 0, \"connect_timeout\": 0, \"sock_connect_timeout\": 0, \"sock_read_timeout\": 0, \"headers\": [ {} ], \"rate_limit\": 0, \"upstream_name\": \"string\", \"include_tags\": [ \"string\" ], \"exclude_tags\": [ \"string\" ], \"sigstore\": \"http://example.com\" } name: string url: string ca_cert: string client_cert: string client_key: string tls_validation: true proxy_url: string proxy_username: string proxy_password: string username: string password: string pulp_labels: {} download_concurrency: 1 max_retries: 0 policy: immediate total_timeout: 0 connect_timeout: 0 sock_connect_timeout: 0 sock_read_timeout: 0 headers: - {} rate_limit: 0 upstream_name: string include_tags: - string exclude_tags: - string sigstore: http://example.com Parameters Name In Type Required Description pulp_id path string(uuid) true A UUID string identifying this container remote. body body container.ContainerRemote true none Example responses 202 Response { \"task\": \"http://example.com\" } Responses Status Meaning Description Schema 202 Accepted none AsyncOperationResponse This operation does not require authentication remotes_container_container_partial_update Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Content-Type\": []string{\"application/json\"}, \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"PATCH\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/remotes/container/container/{pulp_id}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const inputBody = '{ \"name\": \"string\", \"url\": \"string\", \"ca_cert\": \"string\", \"client_cert\": \"string\", \"client_key\": \"string\", \"tls_validation\": true, \"proxy_url\": \"string\", \"proxy_username\": \"string\", \"proxy_password\": \"string\", \"username\": \"string\", \"password\": \"string\", \"pulp_labels\": {}, \"download_concurrency\": 1, \"max_retries\": 0, \"policy\": \"immediate\", \"total_timeout\": 0, \"connect_timeout\": 0, \"sock_connect_timeout\": 0, \"sock_read_timeout\": 0, \"headers\": [ {} ], \"rate_limit\": 0, \"upstream_name\": \"string\", \"include_tags\": [ \"string\" ], \"exclude_tags\": [ \"string\" ], \"sigstore\": \"http://example.com\" }'; const headers = { 'Content-Type':'application/json', 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/remotes/container/container/{pulp_id}/', { method: 'PATCH', body: inputBody, headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Content-Type': 'application/json', 'Accept': 'application/json' } r = requests.patch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/remotes/container/container/{pulp_id}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Content-Type' => 'application/json', 'Accept' => 'application/json' } result = RestClient.patch 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/remotes/container/container/{pulp_id}/', params: { }, headers: headers p JSON.parse(result) PATCH /api/automation-hub/pulp/api/v3/remotes/container/container/{pulp_id}/ Update a container remote Trigger an asynchronous partial update task Body parameter { \"name\": \"string\", \"url\": \"string\", \"ca_cert\": \"string\", \"client_cert\": \"string\", \"client_key\": \"string\", \"tls_validation\": true, \"proxy_url\": \"string\", \"proxy_username\": \"string\", \"proxy_password\": \"string\", \"username\": \"string\", \"password\": \"string\", \"pulp_labels\": {}, \"download_concurrency\": 1, \"max_retries\": 0, \"policy\": \"immediate\", \"total_timeout\": 0, \"connect_timeout\": 0, \"sock_connect_timeout\": 0, \"sock_read_timeout\": 0, \"headers\": [ {} ], \"rate_limit\": 0, \"upstream_name\": \"string\", \"include_tags\": [ \"string\" ], \"exclude_tags\": [ \"string\" ], \"sigstore\": \"http://example.com\" } name: string url: string ca_cert: string client_cert: string client_key: string tls_validation: true proxy_url: string proxy_username: string proxy_password: string username: string password: string pulp_labels: {} download_concurrency: 1 max_retries: 0 policy: immediate total_timeout: 0 connect_timeout: 0 sock_connect_timeout: 0 sock_read_timeout: 0 headers: - {} rate_limit: 0 upstream_name: string include_tags: - string exclude_tags: - string sigstore: http://example.com Parameters Name In Type Required Description pulp_id path string(uuid) true A UUID string identifying this container remote. body body Patchedcontainer.ContainerRemote true none Example responses 202 Response { \"task\": \"http://example.com\" } Responses Status Meaning Description Schema 202 Accepted none AsyncOperationResponse This operation does not require authentication remotes_container_container_delete Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"DELETE\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/remotes/container/container/{pulp_id}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/remotes/container/container/{pulp_id}/', { method: 'DELETE', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.delete('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/remotes/container/container/{pulp_id}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.delete 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/remotes/container/container/{pulp_id}/', params: { }, headers: headers p JSON.parse(result) DELETE /api/automation-hub/pulp/api/v3/remotes/container/container/{pulp_id}/ Delete a container remote Trigger an asynchronous delete task Parameters Name In Type Required Description pulp_id path string(uuid) true A UUID string identifying this container remote. Example responses 202 Response { \"task\": \"http://example.com\" } Responses Status Meaning Description Schema 202 Accepted none AsyncOperationResponse This operation does not require authentication remotes_container_container_add_role Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Content-Type\": []string{\"application/json\"}, \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"POST\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/remotes/container/container/{pulp_id}/add_role/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const inputBody = '{ \"users\": [], \"groups\": [], \"role\": \"string\" }'; const headers = { 'Content-Type':'application/json', 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/remotes/container/container/{pulp_id}/add_role/', { method: 'POST', body: inputBody, headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Content-Type': 'application/json', 'Accept': 'application/json' } r = requests.post('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/remotes/container/container/{pulp_id}/add_role/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Content-Type' => 'application/json', 'Accept' => 'application/json' } result = RestClient.post 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/remotes/container/container/{pulp_id}/add_role/', params: { }, headers: headers p JSON.parse(result) POST /api/automation-hub/pulp/api/v3/remotes/container/container/{pulp_id}/add_role/ Add a role for this object to users/groups. Body parameter { \"users\": [], \"groups\": [], \"role\": \"string\" } users: [] groups: [] role: string Parameters Name In Type Required Description pulp_id path string(uuid) true A UUID string identifying this container remote. body body NestedRole true none Example responses 201 Response { \"users\": [], \"groups\": [], \"role\": \"string\" } Responses Status Meaning Description Schema 201 Created none NestedRoleResponse This operation does not require authentication remotes_container_container_list_roles Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/remotes/container/container/{pulp_id}/list_roles/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/remotes/container/container/{pulp_id}/list_roles/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/remotes/container/container/{pulp_id}/list_roles/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/remotes/container/container/{pulp_id}/list_roles/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/pulp/api/v3/remotes/container/container/{pulp_id}/list_roles/ List roles assigned to this object. Parameters Name In Type Required Description pulp_id path string(uuid) true A UUID string identifying this container remote. fields query string false A list of fields to include in the response. exclude_fields query string false A list of fields to exclude from the response. Example responses 200 Response { \"roles\": [ { \"users\": [], \"groups\": [], \"role\": \"string\" } ] } Responses Status Meaning Description Schema 200 OK none ObjectRolesResponse This operation does not require authentication remotes_container_container_my_permissions Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/remotes/container/container/{pulp_id}/my_permissions/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/remotes/container/container/{pulp_id}/my_permissions/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/remotes/container/container/{pulp_id}/my_permissions/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/remotes/container/container/{pulp_id}/my_permissions/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/pulp/api/v3/remotes/container/container/{pulp_id}/my_permissions/ List permissions available to the current user on this object. Parameters Name In Type Required Description pulp_id path string(uuid) true A UUID string identifying this container remote. fields query string false A list of fields to include in the response. exclude_fields query string false A list of fields to exclude from the response. Example responses 200 Response { \"permissions\": [ \"string\" ] } Responses Status Meaning Description Schema 200 OK none MyPermissionsResponse This operation does not require authentication remotes_container_container_remove_role Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Content-Type\": []string{\"application/json\"}, \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"POST\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/remotes/container/container/{pulp_id}/remove_role/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const inputBody = '{ \"users\": [], \"groups\": [], \"role\": \"string\" }'; const headers = { 'Content-Type':'application/json', 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/remotes/container/container/{pulp_id}/remove_role/', { method: 'POST', body: inputBody, headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Content-Type': 'application/json', 'Accept': 'application/json' } r = requests.post('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/remotes/container/container/{pulp_id}/remove_role/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Content-Type' => 'application/json', 'Accept' => 'application/json' } result = RestClient.post 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/remotes/container/container/{pulp_id}/remove_role/', params: { }, headers: headers p JSON.parse(result) POST /api/automation-hub/pulp/api/v3/remotes/container/container/{pulp_id}/remove_role/ Remove a role for this object from users/groups. Body parameter { \"users\": [], \"groups\": [], \"role\": \"string\" } users: [] groups: [] role: string Parameters Name In Type Required Description pulp_id path string(uuid) true A UUID string identifying this container remote. body body NestedRole true none Example responses 201 Response { \"users\": [], \"groups\": [], \"role\": \"string\" } Responses Status Meaning Description Schema 201 Created none NestedRoleResponse This operation does not require authentication Repair repair_post Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Content-Type\": []string{\"application/json\"}, \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"POST\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repair/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const inputBody = '{ \"verify_checksums\": true }'; const headers = { 'Content-Type':'application/json', 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repair/', { method: 'POST', body: inputBody, headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Content-Type': 'application/json', 'Accept': 'application/json' } r = requests.post('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repair/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Content-Type' => 'application/json', 'Accept' => 'application/json' } result = RestClient.post 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repair/', params: { }, headers: headers p JSON.parse(result) POST /api/automation-hub/pulp/api/v3/repair/ Repair Artifact Storage Trigger an asynchronous task that checks for missing or corrupted artifacts, and attempts to redownload them. Body parameter { \"verify_checksums\": true } verify_checksums: true Parameters Name In Type Required Description body body Repair true none Example responses 202 Response { \"task\": \"http://example.com\" } Responses Status Meaning Description Schema 202 Accepted none AsyncOperationResponse This operation does not require authentication Repositories repositories_list Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/pulp/api/v3/repositories/ List repositories Endpoint to list all repositories. Parameters Name In Type Required Description limit query integer false Number of results to return per page. name query string false none name__contains query string false Filter results where name contains value name__icontains query string false Filter results where name contains value name__in query array[string] false Filter results where name is in a comma-separated list of values name__startswith query string false Filter results where name starts with value offset query integer false The initial index from which to return the results. ordering query array[string] false Ordering pulp_label_select query string false Filter labels by search string remote query string(uuid) false Foreign Key referenced by HREF fields query string false A list of fields to include in the response. exclude_fields query string false A list of fields to exclude from the response. Enumerated Values Parameter Value ordering -alternatecontentsourcepath ordering -ansible_ansiblerepository ordering -container_containerpushrepository ordering -container_containerrepository ordering -content ordering -core_pulp_exporter ordering -description ordering -distributions ordering -download_logs ordering -group_roles ordering -name ordering -next_version ordering -pk ordering -pulp_created ordering -pulp_id ordering -pulp_labels ordering -pulp_last_updated ordering -pulp_type ordering -pulpimporterrepository ordering -remote ordering -repositorycontent ordering -retain_repo_versions ordering -uploads ordering -user_hidden ordering -user_roles ordering -versions ordering alternatecontentsourcepath ordering ansible_ansiblerepository ordering container_containerpushrepository ordering container_containerrepository ordering content ordering core_pulp_exporter ordering description ordering distributions ordering download_logs ordering group_roles ordering name ordering next_version ordering pk ordering pulp_created ordering pulp_id ordering pulp_labels ordering pulp_last_updated ordering pulp_type ordering pulpimporterrepository ordering remote ordering repositorycontent ordering retain_repo_versions ordering uploads ordering user_hidden ordering user_roles ordering versions Example responses 200 Response { \"count\": 123, \"next\": \"http://api.example.org/accounts/?offset=400&limit=100\", \"previous\": \"http://api.example.org/accounts/?offset=200&limit=100\", \"results\": [ { \"name\": \"string\", \"description\": \"string\", \"pulp_id\": \"f3ad2d41-3c12-4e29-ba19-4d3927e49b47\", \"pulp_last_updated\": \"2019-08-24T14:15:22Z\", \"content_count\": 0, \"gpgkey\": \"string\" } ] } Responses Status Meaning Description Schema 200 OK none PaginatedRepositoryResponseList This operation does not require authentication Repositories: Ansible repositories_ansible_ansible_list Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/ansible/ansible/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/ansible/ansible/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/ansible/ansible/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/ansible/ansible/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/pulp/api/v3/repositories/ansible/ansible/ List ansible repositorys ViewSet for Ansible Repositories. Parameters Name In Type Required Description limit query integer false Number of results to return per page. name query string false none name__contains query string false Filter results where name contains value name__icontains query string false Filter results where name contains value name__in query array[string] false Filter results where name is in a comma-separated list of values name__startswith query string false Filter results where name starts with value offset query integer false The initial index from which to return the results. ordering query array[string] false Ordering pulp_label_select query string false Filter labels by search string remote query string(uuid) false Foreign Key referenced by HREF fields query string false A list of fields to include in the response. exclude_fields query string false A list of fields to exclude from the response. Enumerated Values Parameter Value ordering -alternatecontentsourcepath ordering -ansible_ansiblerepository ordering -container_containerpushrepository ordering -container_containerrepository ordering -content ordering -core_pulp_exporter ordering -description ordering -distributions ordering -download_logs ordering -group_roles ordering -name ordering -next_version ordering -pk ordering -pulp_created ordering -pulp_id ordering -pulp_labels ordering -pulp_last_updated ordering -pulp_type ordering -pulpimporterrepository ordering -remote ordering -repositorycontent ordering -retain_repo_versions ordering -uploads ordering -user_hidden ordering -user_roles ordering -versions ordering alternatecontentsourcepath ordering ansible_ansiblerepository ordering container_containerpushrepository ordering container_containerrepository ordering content ordering core_pulp_exporter ordering description ordering distributions ordering download_logs ordering group_roles ordering name ordering next_version ordering pk ordering pulp_created ordering pulp_id ordering pulp_labels ordering pulp_last_updated ordering pulp_type ordering pulpimporterrepository ordering remote ordering repositorycontent ordering retain_repo_versions ordering uploads ordering user_hidden ordering user_roles ordering versions Example responses 200 Response { \"count\": 123, \"next\": \"http://api.example.org/accounts/?offset=400&limit=100\", \"previous\": \"http://api.example.org/accounts/?offset=200&limit=100\", \"results\": [ { \"pulp_href\": \"http://example.com\", \"pulp_created\": \"2019-08-24T14:15:22Z\", \"versions_href\": \"http://example.com\", \"pulp_labels\": {}, \"latest_version_href\": \"http://example.com\", \"name\": \"string\", \"description\": \"string\", \"retain_repo_versions\": 1, \"remote\": \"http://example.com\", \"last_synced_metadata_time\": \"2019-08-24T14:15:22Z\", \"gpgkey\": \"string\" } ] } Responses Status Meaning Description Schema 200 OK none Paginatedansible.AnsibleRepositoryResponseList This operation does not require authentication repositories_ansible_ansible_create Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Content-Type\": []string{\"application/json\"}, \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"POST\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/ansible/ansible/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const inputBody = '{ \"pulp_labels\": {}, \"name\": \"string\", \"description\": \"string\", \"retain_repo_versions\": 1, \"remote\": \"http://example.com\", \"last_synced_metadata_time\": \"2019-08-24T14:15:22Z\", \"gpgkey\": \"string\" }'; const headers = { 'Content-Type':'application/json', 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/ansible/ansible/', { method: 'POST', body: inputBody, headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Content-Type': 'application/json', 'Accept': 'application/json' } r = requests.post('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/ansible/ansible/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Content-Type' => 'application/json', 'Accept' => 'application/json' } result = RestClient.post 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/ansible/ansible/', params: { }, headers: headers p JSON.parse(result) POST /api/automation-hub/pulp/api/v3/repositories/ansible/ansible/ Create an ansible repository ViewSet for Ansible Repositories. Body parameter { \"pulp_labels\": {}, \"name\": \"string\", \"description\": \"string\", \"retain_repo_versions\": 1, \"remote\": \"http://example.com\", \"last_synced_metadata_time\": \"2019-08-24T14:15:22Z\", \"gpgkey\": \"string\" } pulp_labels: {} name: string description: string retain_repo_versions: 1 remote: http://example.com last_synced_metadata_time: 2019-08-24T14:15:22Z gpgkey: string Parameters Name In Type Required Description body body ansible.AnsibleRepository true none Example responses 201 Response { \"pulp_href\": \"http://example.com\", \"pulp_created\": \"2019-08-24T14:15:22Z\", \"versions_href\": \"http://example.com\", \"pulp_labels\": {}, \"latest_version_href\": \"http://example.com\", \"name\": \"string\", \"description\": \"string\", \"retain_repo_versions\": 1, \"remote\": \"http://example.com\", \"last_synced_metadata_time\": \"2019-08-24T14:15:22Z\", \"gpgkey\": \"string\" } Responses Status Meaning Description Schema 201 Created none ansible.AnsibleRepositoryResponse This operation does not require authentication repositories_ansible_ansible_read Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/ansible/ansible/{pulp_id}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/ansible/ansible/{pulp_id}/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/ansible/ansible/{pulp_id}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/ansible/ansible/{pulp_id}/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/pulp/api/v3/repositories/ansible/ansible/{pulp_id}/ Inspect an ansible repository ViewSet for Ansible Repositories. Parameters Name In Type Required Description pulp_id path string(uuid) true A UUID string identifying this ansible repository. fields query string false A list of fields to include in the response. exclude_fields query string false A list of fields to exclude from the response. Example responses 200 Response { \"pulp_href\": \"http://example.com\", \"pulp_created\": \"2019-08-24T14:15:22Z\", \"versions_href\": \"http://example.com\", \"pulp_labels\": {}, \"latest_version_href\": \"http://example.com\", \"name\": \"string\", \"description\": \"string\", \"retain_repo_versions\": 1, \"remote\": \"http://example.com\", \"last_synced_metadata_time\": \"2019-08-24T14:15:22Z\", \"gpgkey\": \"string\" } Responses Status Meaning Description Schema 200 OK none ansible.AnsibleRepositoryResponse This operation does not require authentication repositories_ansible_ansible_update Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Content-Type\": []string{\"application/json\"}, \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"PUT\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/ansible/ansible/{pulp_id}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const inputBody = '{ \"pulp_labels\": {}, \"name\": \"string\", \"description\": \"string\", \"retain_repo_versions\": 1, \"remote\": \"http://example.com\", \"last_synced_metadata_time\": \"2019-08-24T14:15:22Z\", \"gpgkey\": \"string\" }'; const headers = { 'Content-Type':'application/json', 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/ansible/ansible/{pulp_id}/', { method: 'PUT', body: inputBody, headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Content-Type': 'application/json', 'Accept': 'application/json' } r = requests.put('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/ansible/ansible/{pulp_id}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Content-Type' => 'application/json', 'Accept' => 'application/json' } result = RestClient.put 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/ansible/ansible/{pulp_id}/', params: { }, headers: headers p JSON.parse(result) PUT /api/automation-hub/pulp/api/v3/repositories/ansible/ansible/{pulp_id}/ Update an ansible repository Trigger an asynchronous update task Body parameter { \"pulp_labels\": {}, \"name\": \"string\", \"description\": \"string\", \"retain_repo_versions\": 1, \"remote\": \"http://example.com\", \"last_synced_metadata_time\": \"2019-08-24T14:15:22Z\", \"gpgkey\": \"string\" } pulp_labels: {} name: string description: string retain_repo_versions: 1 remote: http://example.com last_synced_metadata_time: 2019-08-24T14:15:22Z gpgkey: string Parameters Name In Type Required Description pulp_id path string(uuid) true A UUID string identifying this ansible repository. body body ansible.AnsibleRepository true none Example responses 202 Response { \"task\": \"http://example.com\" } Responses Status Meaning Description Schema 202 Accepted none AsyncOperationResponse This operation does not require authentication repositories_ansible_ansible_partial_update Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Content-Type\": []string{\"application/json\"}, \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"PATCH\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/ansible/ansible/{pulp_id}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const inputBody = '{ \"pulp_labels\": {}, \"name\": \"string\", \"description\": \"string\", \"retain_repo_versions\": 1, \"remote\": \"http://example.com\", \"last_synced_metadata_time\": \"2019-08-24T14:15:22Z\", \"gpgkey\": \"string\" }'; const headers = { 'Content-Type':'application/json', 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/ansible/ansible/{pulp_id}/', { method: 'PATCH', body: inputBody, headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Content-Type': 'application/json', 'Accept': 'application/json' } r = requests.patch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/ansible/ansible/{pulp_id}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Content-Type' => 'application/json', 'Accept' => 'application/json' } result = RestClient.patch 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/ansible/ansible/{pulp_id}/', params: { }, headers: headers p JSON.parse(result) PATCH /api/automation-hub/pulp/api/v3/repositories/ansible/ansible/{pulp_id}/ Update an ansible repository Trigger an asynchronous partial update task Body parameter { \"pulp_labels\": {}, \"name\": \"string\", \"description\": \"string\", \"retain_repo_versions\": 1, \"remote\": \"http://example.com\", \"last_synced_metadata_time\": \"2019-08-24T14:15:22Z\", \"gpgkey\": \"string\" } pulp_labels: {} name: string description: string retain_repo_versions: 1 remote: http://example.com last_synced_metadata_time: 2019-08-24T14:15:22Z gpgkey: string Parameters Name In Type Required Description pulp_id path string(uuid) true A UUID string identifying this ansible repository. body body Patchedansible.AnsibleRepository true none Example responses 202 Response { \"task\": \"http://example.com\" } Responses Status Meaning Description Schema 202 Accepted none AsyncOperationResponse This operation does not require authentication repositories_ansible_ansible_delete Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"DELETE\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/ansible/ansible/{pulp_id}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/ansible/ansible/{pulp_id}/', { method: 'DELETE', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.delete('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/ansible/ansible/{pulp_id}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.delete 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/ansible/ansible/{pulp_id}/', params: { }, headers: headers p JSON.parse(result) DELETE /api/automation-hub/pulp/api/v3/repositories/ansible/ansible/{pulp_id}/ Delete an ansible repository Trigger an asynchronous delete task Parameters Name In Type Required Description pulp_id path string(uuid) true A UUID string identifying this ansible repository. Example responses 202 Response { \"task\": \"http://example.com\" } Responses Status Meaning Description Schema 202 Accepted none AsyncOperationResponse This operation does not require authentication repositories_ansible_ansible_modify Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Content-Type\": []string{\"application/json\"}, \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"POST\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/ansible/ansible/{pulp_id}/modify/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const inputBody = '{ \"add_content_units\": [ null ], \"remove_content_units\": [ null ], \"base_version\": \"http://example.com\" }'; const headers = { 'Content-Type':'application/json', 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/ansible/ansible/{pulp_id}/modify/', { method: 'POST', body: inputBody, headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Content-Type': 'application/json', 'Accept': 'application/json' } r = requests.post('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/ansible/ansible/{pulp_id}/modify/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Content-Type' => 'application/json', 'Accept' => 'application/json' } result = RestClient.post 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/ansible/ansible/{pulp_id}/modify/', params: { }, headers: headers p JSON.parse(result) POST /api/automation-hub/pulp/api/v3/repositories/ansible/ansible/{pulp_id}/modify/ Modify Repository Content Trigger an asynchronous task to create a new repository version. Body parameter { \"add_content_units\": [ null ], \"remove_content_units\": [ null ], \"base_version\": \"http://example.com\" } add_content_units: - null remove_content_units: - null base_version: http://example.com Parameters Name In Type Required Description pulp_id path string(uuid) true A UUID string identifying this ansible repository. body body RepositoryAddRemoveContent true none Example responses 202 Response { \"task\": \"http://example.com\" } Responses Status Meaning Description Schema 202 Accepted none AsyncOperationResponse This operation does not require authentication repositories_ansible_ansible_rebuild_metadata Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Content-Type\": []string{\"application/json\"}, \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"POST\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/ansible/ansible/{pulp_id}/rebuild_metadata/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const inputBody = '{ \"namespace\": \"string\", \"name\": \"string\", \"version\": \"string\" }'; const headers = { 'Content-Type':'application/json', 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/ansible/ansible/{pulp_id}/rebuild_metadata/', { method: 'POST', body: inputBody, headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Content-Type': 'application/json', 'Accept': 'application/json' } r = requests.post('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/ansible/ansible/{pulp_id}/rebuild_metadata/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Content-Type' => 'application/json', 'Accept' => 'application/json' } result = RestClient.post 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/ansible/ansible/{pulp_id}/rebuild_metadata/', params: { }, headers: headers p JSON.parse(result) POST /api/automation-hub/pulp/api/v3/repositories/ansible/ansible/{pulp_id}/rebuild_metadata/ Trigger an asynchronous task to rebuild Ansible content meta. Body parameter { \"namespace\": \"string\", \"name\": \"string\", \"version\": \"string\" } namespace: string name: string version: string Parameters Name In Type Required Description pulp_id path string(uuid) true A UUID string identifying this ansible repository. body body AnsibleRepositoryRebuild true none Example responses 202 Response { \"task\": \"http://example.com\" } Responses Status Meaning Description Schema 202 Accepted none AsyncOperationResponse This operation does not require authentication repositories_ansible_ansible_sign Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Content-Type\": []string{\"application/json\"}, \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"POST\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/ansible/ansible/{pulp_id}/sign/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const inputBody = '{ \"content_units\": [ null ], \"signing_service\": \"http://example.com\" }'; const headers = { 'Content-Type':'application/json', 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/ansible/ansible/{pulp_id}/sign/', { method: 'POST', body: inputBody, headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Content-Type': 'application/json', 'Accept': 'application/json' } r = requests.post('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/ansible/ansible/{pulp_id}/sign/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Content-Type' => 'application/json', 'Accept' => 'application/json' } result = RestClient.post 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/ansible/ansible/{pulp_id}/sign/', params: { }, headers: headers p JSON.parse(result) POST /api/automation-hub/pulp/api/v3/repositories/ansible/ansible/{pulp_id}/sign/ Trigger an asynchronous task to sign Ansible content. Body parameter { \"content_units\": [ null ], \"signing_service\": \"http://example.com\" } content_units: - null signing_service: http://example.com Parameters Name In Type Required Description pulp_id path string(uuid) true A UUID string identifying this ansible repository. body body AnsibleRepositorySignature true none Example responses 202 Response { \"task\": \"http://example.com\" } Responses Status Meaning Description Schema 202 Accepted none AsyncOperationResponse This operation does not require authentication repositories_ansible_ansible_sync Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Content-Type\": []string{\"application/json\"}, \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"POST\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/ansible/ansible/{pulp_id}/sync/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const inputBody = '{ \"remote\": \"http://example.com\", \"mirror\": false, \"optimize\": true }'; const headers = { 'Content-Type':'application/json', 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/ansible/ansible/{pulp_id}/sync/', { method: 'POST', body: inputBody, headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Content-Type': 'application/json', 'Accept': 'application/json' } r = requests.post('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/ansible/ansible/{pulp_id}/sync/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Content-Type' => 'application/json', 'Accept' => 'application/json' } result = RestClient.post 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/ansible/ansible/{pulp_id}/sync/', params: { }, headers: headers p JSON.parse(result) POST /api/automation-hub/pulp/api/v3/repositories/ansible/ansible/{pulp_id}/sync/ Trigger an asynchronous task to sync Ansible content. Body parameter { \"remote\": \"http://example.com\", \"mirror\": false, \"optimize\": true } remote: http://example.com mirror: false optimize: true Parameters Name In Type Required Description pulp_id path string(uuid) true A UUID string identifying this ansible repository. body body AnsibleRepositorySyncURL true none Example responses 202 Response { \"task\": \"http://example.com\" } Responses Status Meaning Description Schema 202 Accepted none AsyncOperationResponse This operation does not require authentication Repositories: Ansible Versions repositories_ansible_ansible_versions_list Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/ansible/ansible/{repository_pk}/versions/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/ansible/ansible/{repository_pk}/versions/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/ansible/ansible/{repository_pk}/versions/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/ansible/ansible/{repository_pk}/versions/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/pulp/api/v3/repositories/ansible/ansible/{repository_pk}/versions/ List repository versions AnsibleRepositoryVersion represents a single file repository version. Parameters Name In Type Required Description content query string false Content Unit referenced by HREF content__in query string false Content Unit referenced by HREF limit query integer false Number of results to return per page. number query integer false none number__gt query integer false Filter results where number is greater than value number__gte query integer false Filter results where number is greater than or equal to value number__lt query integer false Filter results where number is less than value number__lte query integer false Filter results where number is less than or equal to value number__range query array[integer] false Filter results where number is between two comma separated values offset query integer false The initial index from which to return the results. ordering query array[string] false Ordering pulp_created query string(date-time) false ISO 8601 formatted dates are supported pulp_created__gt query string(date-time) false Filter results where pulp_created is greater than value pulp_created__gte query string(date-time) false Filter results where pulp_created is greater than or equal to value pulp_created__lt query string(date-time) false Filter results where pulp_created is less than value pulp_created__lte query string(date-time) false Filter results where pulp_created is less than or equal to value pulp_created__range query array[string] false Filter results where pulp_created is between two comma separated values repository_pk path string true none fields query string false A list of fields to include in the response. exclude_fields query string false A list of fields to exclude from the response. Enumerated Values Parameter Value ordering -added_memberships ordering -base_version ordering -complete ordering -counts ordering -distribution ordering -download_logs ordering -group_roles ordering -info ordering -number ordering -pk ordering -publication ordering -pulp_created ordering -pulp_id ordering -pulp_labels ordering -pulp_last_updated ordering -removed_memberships ordering -repository ordering -user_roles ordering -versions ordering added_memberships ordering base_version ordering complete ordering counts ordering distribution ordering download_logs ordering group_roles ordering info ordering number ordering pk ordering publication ordering pulp_created ordering pulp_id ordering pulp_labels ordering pulp_last_updated ordering removed_memberships ordering repository ordering user_roles ordering versions Example responses 200 Response { \"count\": 123, \"next\": \"http://api.example.org/accounts/?offset=400&limit=100\", \"previous\": \"http://api.example.org/accounts/?offset=200&limit=100\", \"results\": [ { \"pulp_href\": \"http://example.com\", \"pulp_created\": \"2019-08-24T14:15:22Z\", \"number\": 0, \"repository\": \"http://example.com\", \"base_version\": \"http://example.com\", \"content_summary\": { \"added\": { \"property1\": {}, \"property2\": {} }, \"removed\": { \"property1\": {}, \"property2\": {} }, \"present\": { \"property1\": {}, \"property2\": {} } } } ] } Responses Status Meaning Description Schema 200 OK none PaginatedRepositoryVersionResponseList This operation does not require authentication repositories_ansible_ansible_versions_read Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/ansible/ansible/{repository_pk}/versions/{number}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/ansible/ansible/{repository_pk}/versions/{number}/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/ansible/ansible/{repository_pk}/versions/{number}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/ansible/ansible/{repository_pk}/versions/{number}/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/pulp/api/v3/repositories/ansible/ansible/{repository_pk}/versions/{number}/ Inspect a repository version AnsibleRepositoryVersion represents a single file repository version. Parameters Name In Type Required Description number path integer true none repository_pk path string true none fields query string false A list of fields to include in the response. exclude_fields query string false A list of fields to exclude from the response. Example responses 200 Response { \"pulp_href\": \"http://example.com\", \"pulp_created\": \"2019-08-24T14:15:22Z\", \"number\": 0, \"repository\": \"http://example.com\", \"base_version\": \"http://example.com\", \"content_summary\": { \"added\": { \"property1\": {}, \"property2\": {} }, \"removed\": { \"property1\": {}, \"property2\": {} }, \"present\": { \"property1\": {}, \"property2\": {} } } } Responses Status Meaning Description Schema 200 OK none RepositoryVersionResponse This operation does not require authentication repositories_ansible_ansible_versions_delete Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"DELETE\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/ansible/ansible/{repository_pk}/versions/{number}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/ansible/ansible/{repository_pk}/versions/{number}/', { method: 'DELETE', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.delete('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/ansible/ansible/{repository_pk}/versions/{number}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.delete 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/ansible/ansible/{repository_pk}/versions/{number}/', params: { }, headers: headers p JSON.parse(result) DELETE /api/automation-hub/pulp/api/v3/repositories/ansible/ansible/{repository_pk}/versions/{number}/ Delete a repository version Trigger an asynchronous task to delete a repository version. Parameters Name In Type Required Description number path integer true none repository_pk path string true none Example responses 202 Response { \"task\": \"http://example.com\" } Responses Status Meaning Description Schema 202 Accepted none AsyncOperationResponse This operation does not require authentication repositories_ansible_ansible_versions_rebuild_metadata Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Content-Type\": []string{\"application/json\"}, \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"POST\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/ansible/ansible/{repository_pk}/versions/{number}/rebuild_metadata/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const inputBody = '{ \"namespace\": \"string\", \"name\": \"string\", \"version\": \"string\" }'; const headers = { 'Content-Type':'application/json', 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/ansible/ansible/{repository_pk}/versions/{number}/rebuild_metadata/', { method: 'POST', body: inputBody, headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Content-Type': 'application/json', 'Accept': 'application/json' } r = requests.post('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/ansible/ansible/{repository_pk}/versions/{number}/rebuild_metadata/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Content-Type' => 'application/json', 'Accept' => 'application/json' } result = RestClient.post 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/ansible/ansible/{repository_pk}/versions/{number}/rebuild_metadata/', params: { }, headers: headers p JSON.parse(result) POST /api/automation-hub/pulp/api/v3/repositories/ansible/ansible/{repository_pk}/versions/{number}/rebuild_metadata/ Trigger an asynchronous task to rebuild Ansible content meta. Body parameter { \"namespace\": \"string\", \"name\": \"string\", \"version\": \"string\" } namespace: string name: string version: string Parameters Name In Type Required Description number path integer true none repository_pk path string true none body body AnsibleRepositoryRebuild true none Example responses 202 Response { \"task\": \"http://example.com\" } Responses Status Meaning Description Schema 202 Accepted none AsyncOperationResponse This operation does not require authentication repositories_ansible_ansible_versions_repair Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Content-Type\": []string{\"application/json\"}, \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"POST\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/ansible/ansible/{repository_pk}/versions/{number}/repair/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const inputBody = '{ \"verify_checksums\": true }'; const headers = { 'Content-Type':'application/json', 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/ansible/ansible/{repository_pk}/versions/{number}/repair/', { method: 'POST', body: inputBody, headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Content-Type': 'application/json', 'Accept': 'application/json' } r = requests.post('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/ansible/ansible/{repository_pk}/versions/{number}/repair/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Content-Type' => 'application/json', 'Accept' => 'application/json' } result = RestClient.post 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/ansible/ansible/{repository_pk}/versions/{number}/repair/', params: { }, headers: headers p JSON.parse(result) POST /api/automation-hub/pulp/api/v3/repositories/ansible/ansible/{repository_pk}/versions/{number}/repair/ Trigger an asynchronous task to repair a repository version. Body parameter { \"verify_checksums\": true } verify_checksums: true Parameters Name In Type Required Description number path integer true none repository_pk path string true none body body Repair true none Example responses 202 Response { \"task\": \"http://example.com\" } Responses Status Meaning Description Schema 202 Accepted none AsyncOperationResponse This operation does not require authentication Repositories: Container repositories_container_container_list Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/container/container/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/container/container/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/container/container/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/container/container/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/pulp/api/v3/repositories/container/container/ List container repositorys ViewSet for container repo. Parameters Name In Type Required Description limit query integer false Number of results to return per page. name query string false none name__contains query string false Filter results where name contains value name__icontains query string false Filter results where name contains value name__in query array[string] false Filter results where name is in a comma-separated list of values name__startswith query string false Filter results where name starts with value offset query integer false The initial index from which to return the results. ordering query array[string] false Ordering pulp_label_select query string false Filter labels by search string remote query string(uuid) false Foreign Key referenced by HREF fields query string false A list of fields to include in the response. exclude_fields query string false A list of fields to exclude from the response. Enumerated Values Parameter Value ordering -alternatecontentsourcepath ordering -ansible_ansiblerepository ordering -container_containerpushrepository ordering -container_containerrepository ordering -content ordering -core_pulp_exporter ordering -description ordering -distributions ordering -download_logs ordering -group_roles ordering -name ordering -next_version ordering -pk ordering -pulp_created ordering -pulp_id ordering -pulp_labels ordering -pulp_last_updated ordering -pulp_type ordering -pulpimporterrepository ordering -remote ordering -repositorycontent ordering -retain_repo_versions ordering -uploads ordering -user_hidden ordering -user_roles ordering -versions ordering alternatecontentsourcepath ordering ansible_ansiblerepository ordering container_containerpushrepository ordering container_containerrepository ordering content ordering core_pulp_exporter ordering description ordering distributions ordering download_logs ordering group_roles ordering name ordering next_version ordering pk ordering pulp_created ordering pulp_id ordering pulp_labels ordering pulp_last_updated ordering pulp_type ordering pulpimporterrepository ordering remote ordering repositorycontent ordering retain_repo_versions ordering uploads ordering user_hidden ordering user_roles ordering versions Example responses 200 Response { \"count\": 123, \"next\": \"http://api.example.org/accounts/?offset=400&limit=100\", \"previous\": \"http://api.example.org/accounts/?offset=200&limit=100\", \"results\": [ { \"pulp_href\": \"http://example.com\", \"pulp_created\": \"2019-08-24T14:15:22Z\", \"versions_href\": \"http://example.com\", \"pulp_labels\": {}, \"latest_version_href\": \"http://example.com\", \"name\": \"string\", \"description\": \"string\", \"retain_repo_versions\": 1, \"remote\": \"http://example.com\", \"manifest_signing_service\": \"http://example.com\" } ] } Responses Status Meaning Description Schema 200 OK none Paginatedcontainer.ContainerRepositoryResponseList This operation does not require authentication repositories_container_container_create Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Content-Type\": []string{\"application/json\"}, \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"POST\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/container/container/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const inputBody = '{ \"pulp_labels\": {}, \"name\": \"string\", \"description\": \"string\", \"retain_repo_versions\": 1, \"remote\": \"http://example.com\", \"manifest_signing_service\": \"http://example.com\" }'; const headers = { 'Content-Type':'application/json', 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/container/container/', { method: 'POST', body: inputBody, headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Content-Type': 'application/json', 'Accept': 'application/json' } r = requests.post('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/container/container/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Content-Type' => 'application/json', 'Accept' => 'application/json' } result = RestClient.post 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/container/container/', params: { }, headers: headers p JSON.parse(result) POST /api/automation-hub/pulp/api/v3/repositories/container/container/ Create a container repository ViewSet for container repo. Body parameter { \"pulp_labels\": {}, \"name\": \"string\", \"description\": \"string\", \"retain_repo_versions\": 1, \"remote\": \"http://example.com\", \"manifest_signing_service\": \"http://example.com\" } pulp_labels: {} name: string description: string retain_repo_versions: 1 remote: http://example.com manifest_signing_service: http://example.com Parameters Name In Type Required Description body body container.ContainerRepository true none Example responses 201 Response { \"pulp_href\": \"http://example.com\", \"pulp_created\": \"2019-08-24T14:15:22Z\", \"versions_href\": \"http://example.com\", \"pulp_labels\": {}, \"latest_version_href\": \"http://example.com\", \"name\": \"string\", \"description\": \"string\", \"retain_repo_versions\": 1, \"remote\": \"http://example.com\", \"manifest_signing_service\": \"http://example.com\" } Responses Status Meaning Description Schema 201 Created none container.ContainerRepositoryResponse This operation does not require authentication repositories_container_container_read Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/container/container/{pulp_id}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/container/container/{pulp_id}/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/container/container/{pulp_id}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/container/container/{pulp_id}/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/pulp/api/v3/repositories/container/container/{pulp_id}/ Inspect a container repository ViewSet for container repo. Parameters Name In Type Required Description pulp_id path string(uuid) true A UUID string identifying this container repository. fields query string false A list of fields to include in the response. exclude_fields query string false A list of fields to exclude from the response. Example responses 200 Response { \"pulp_href\": \"http://example.com\", \"pulp_created\": \"2019-08-24T14:15:22Z\", \"versions_href\": \"http://example.com\", \"pulp_labels\": {}, \"latest_version_href\": \"http://example.com\", \"name\": \"string\", \"description\": \"string\", \"retain_repo_versions\": 1, \"remote\": \"http://example.com\", \"manifest_signing_service\": \"http://example.com\" } Responses Status Meaning Description Schema 200 OK none container.ContainerRepositoryResponse This operation does not require authentication repositories_container_container_update Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Content-Type\": []string{\"application/json\"}, \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"PUT\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/container/container/{pulp_id}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const inputBody = '{ \"pulp_labels\": {}, \"name\": \"string\", \"description\": \"string\", \"retain_repo_versions\": 1, \"remote\": \"http://example.com\", \"manifest_signing_service\": \"http://example.com\" }'; const headers = { 'Content-Type':'application/json', 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/container/container/{pulp_id}/', { method: 'PUT', body: inputBody, headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Content-Type': 'application/json', 'Accept': 'application/json' } r = requests.put('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/container/container/{pulp_id}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Content-Type' => 'application/json', 'Accept' => 'application/json' } result = RestClient.put 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/container/container/{pulp_id}/', params: { }, headers: headers p JSON.parse(result) PUT /api/automation-hub/pulp/api/v3/repositories/container/container/{pulp_id}/ Update a container repository Trigger an asynchronous update task Body parameter { \"pulp_labels\": {}, \"name\": \"string\", \"description\": \"string\", \"retain_repo_versions\": 1, \"remote\": \"http://example.com\", \"manifest_signing_service\": \"http://example.com\" } pulp_labels: {} name: string description: string retain_repo_versions: 1 remote: http://example.com manifest_signing_service: http://example.com Parameters Name In Type Required Description pulp_id path string(uuid) true A UUID string identifying this container repository. body body container.ContainerRepository true none Example responses 202 Response { \"task\": \"http://example.com\" } Responses Status Meaning Description Schema 202 Accepted none AsyncOperationResponse This operation does not require authentication repositories_container_container_partial_update Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Content-Type\": []string{\"application/json\"}, \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"PATCH\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/container/container/{pulp_id}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const inputBody = '{ \"pulp_labels\": {}, \"name\": \"string\", \"description\": \"string\", \"retain_repo_versions\": 1, \"remote\": \"http://example.com\", \"manifest_signing_service\": \"http://example.com\" }'; const headers = { 'Content-Type':'application/json', 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/container/container/{pulp_id}/', { method: 'PATCH', body: inputBody, headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Content-Type': 'application/json', 'Accept': 'application/json' } r = requests.patch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/container/container/{pulp_id}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Content-Type' => 'application/json', 'Accept' => 'application/json' } result = RestClient.patch 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/container/container/{pulp_id}/', params: { }, headers: headers p JSON.parse(result) PATCH /api/automation-hub/pulp/api/v3/repositories/container/container/{pulp_id}/ Update a container repository Trigger an asynchronous partial update task Body parameter { \"pulp_labels\": {}, \"name\": \"string\", \"description\": \"string\", \"retain_repo_versions\": 1, \"remote\": \"http://example.com\", \"manifest_signing_service\": \"http://example.com\" } pulp_labels: {} name: string description: string retain_repo_versions: 1 remote: http://example.com manifest_signing_service: http://example.com Parameters Name In Type Required Description pulp_id path string(uuid) true A UUID string identifying this container repository. body body Patchedcontainer.ContainerRepository true none Example responses 202 Response { \"task\": \"http://example.com\" } Responses Status Meaning Description Schema 202 Accepted none AsyncOperationResponse This operation does not require authentication repositories_container_container_delete Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"DELETE\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/container/container/{pulp_id}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/container/container/{pulp_id}/', { method: 'DELETE', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.delete('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/container/container/{pulp_id}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.delete 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/container/container/{pulp_id}/', params: { }, headers: headers p JSON.parse(result) DELETE /api/automation-hub/pulp/api/v3/repositories/container/container/{pulp_id}/ Delete a container repository Trigger an asynchronous delete task Parameters Name In Type Required Description pulp_id path string(uuid) true A UUID string identifying this container repository. Example responses 202 Response { \"task\": \"http://example.com\" } Responses Status Meaning Description Schema 202 Accepted none AsyncOperationResponse This operation does not require authentication repositories_container_container_add Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Content-Type\": []string{\"application/json\"}, \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"POST\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/container/container/{pulp_id}/add/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const inputBody = '{ \"content_units\": [ null ] }'; const headers = { 'Content-Type':'application/json', 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/container/container/{pulp_id}/add/', { method: 'POST', body: inputBody, headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Content-Type': 'application/json', 'Accept': 'application/json' } r = requests.post('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/container/container/{pulp_id}/add/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Content-Type' => 'application/json', 'Accept' => 'application/json' } result = RestClient.post 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/container/container/{pulp_id}/add/', params: { }, headers: headers p JSON.parse(result) POST /api/automation-hub/pulp/api/v3/repositories/container/container/{pulp_id}/add/ Add content Trigger an asynchronous task to recursively add container content. Body parameter { \"content_units\": [ null ] } content_units: - null Parameters Name In Type Required Description pulp_id path string(uuid) true A UUID string identifying this container repository. body body RecursiveManage true none Example responses 202 Response { \"task\": \"http://example.com\" } Responses Status Meaning Description Schema 202 Accepted none AsyncOperationResponse This operation does not require authentication repositories_container_container_add_role Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Content-Type\": []string{\"application/json\"}, \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"POST\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/container/container/{pulp_id}/add_role/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const inputBody = '{ \"users\": [], \"groups\": [], \"role\": \"string\" }'; const headers = { 'Content-Type':'application/json', 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/container/container/{pulp_id}/add_role/', { method: 'POST', body: inputBody, headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Content-Type': 'application/json', 'Accept': 'application/json' } r = requests.post('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/container/container/{pulp_id}/add_role/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Content-Type' => 'application/json', 'Accept' => 'application/json' } result = RestClient.post 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/container/container/{pulp_id}/add_role/', params: { }, headers: headers p JSON.parse(result) POST /api/automation-hub/pulp/api/v3/repositories/container/container/{pulp_id}/add_role/ Add a role for this object to users/groups. Body parameter { \"users\": [], \"groups\": [], \"role\": \"string\" } users: [] groups: [] role: string Parameters Name In Type Required Description pulp_id path string(uuid) true A UUID string identifying this container repository. body body NestedRole true none Example responses 201 Response { \"users\": [], \"groups\": [], \"role\": \"string\" } Responses Status Meaning Description Schema 201 Created none NestedRoleResponse This operation does not require authentication repositories_container_container_build_image Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Content-Type\": []string{\"multipart/form-data\"}, \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"POST\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/container/container/{pulp_id}/build_image/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const inputBody = '{ \"containerfile_artifact\": \"http://example.com\", \"containerfile\": \"string\", \"tag\": \"latest\", \"artifacts\": {} }'; const headers = { 'Content-Type':'multipart/form-data', 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/container/container/{pulp_id}/build_image/', { method: 'POST', body: inputBody, headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Content-Type': 'multipart/form-data', 'Accept': 'application/json' } r = requests.post('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/container/container/{pulp_id}/build_image/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Content-Type' => 'multipart/form-data', 'Accept' => 'application/json' } result = RestClient.post 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/container/container/{pulp_id}/build_image/', params: { }, headers: headers p JSON.parse(result) POST /api/automation-hub/pulp/api/v3/repositories/container/container/{pulp_id}/build_image/ Build an Image Trigger an asynchronous task to build an OCI image from a Containerfile. A new repository version is created with the new image and tag. This API is tech preview in Pulp Container 1.1. Backwards compatibility when upgrading is not guaranteed. Body parameter containerfile_artifact: http://example.com containerfile: string tag: latest artifacts: {} Parameters Name In Type Required Description pulp_id path string(uuid) true A UUID string identifying this container repository. body body OCIBuildImage true none Example responses 202 Response { \"task\": \"http://example.com\" } Responses Status Meaning Description Schema 202 Accepted none AsyncOperationResponse This operation does not require authentication repositories_container_container_copy_manifests Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Content-Type\": []string{\"application/json\"}, \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"POST\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/container/container/{pulp_id}/copy_manifests/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const inputBody = '{ \"source_repository\": \"http://example.com\", \"source_repository_version\": \"http://example.com\", \"digests\": [ null ], \"media_types\": [ \"application/vnd.docker.distribution.manifest.v1+json\" ] }'; const headers = { 'Content-Type':'application/json', 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/container/container/{pulp_id}/copy_manifests/', { method: 'POST', body: inputBody, headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Content-Type': 'application/json', 'Accept': 'application/json' } r = requests.post('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/container/container/{pulp_id}/copy_manifests/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Content-Type' => 'application/json', 'Accept' => 'application/json' } result = RestClient.post 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/container/container/{pulp_id}/copy_manifests/', params: { }, headers: headers p JSON.parse(result) POST /api/automation-hub/pulp/api/v3/repositories/container/container/{pulp_id}/copy_manifests/ Copy manifests Trigger an asynchronous task to copy manifests Body parameter { \"source_repository\": \"http://example.com\", \"source_repository_version\": \"http://example.com\", \"digests\": [ null ], \"media_types\": [ \"application/vnd.docker.distribution.manifest.v1+json\" ] } source_repository: http://example.com source_repository_version: http://example.com digests: - null media_types: - application/vnd.docker.distribution.manifest.v1+json Parameters Name In Type Required Description pulp_id path string(uuid) true A UUID string identifying this container repository. body body ManifestCopy true none Example responses 202 Response { \"task\": \"http://example.com\" } Responses Status Meaning Description Schema 202 Accepted none AsyncOperationResponse This operation does not require authentication repositories_container_container_copy_tags Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Content-Type\": []string{\"application/json\"}, \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"POST\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/container/container/{pulp_id}/copy_tags/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const inputBody = '{ \"source_repository\": \"http://example.com\", \"source_repository_version\": \"http://example.com\", \"names\": [ null ] }'; const headers = { 'Content-Type':'application/json', 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/container/container/{pulp_id}/copy_tags/', { method: 'POST', body: inputBody, headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Content-Type': 'application/json', 'Accept': 'application/json' } r = requests.post('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/container/container/{pulp_id}/copy_tags/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Content-Type' => 'application/json', 'Accept' => 'application/json' } result = RestClient.post 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/container/container/{pulp_id}/copy_tags/', params: { }, headers: headers p JSON.parse(result) POST /api/automation-hub/pulp/api/v3/repositories/container/container/{pulp_id}/copy_tags/ Copy tags Trigger an asynchronous task to copy tags Body parameter { \"source_repository\": \"http://example.com\", \"source_repository_version\": \"http://example.com\", \"names\": [ null ] } source_repository: http://example.com source_repository_version: http://example.com names: - null Parameters Name In Type Required Description pulp_id path string(uuid) true A UUID string identifying this container repository. body body TagCopy true none Example responses 202 Response { \"task\": \"http://example.com\" } Responses Status Meaning Description Schema 202 Accepted none AsyncOperationResponse This operation does not require authentication repositories_container_container_list_roles Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/container/container/{pulp_id}/list_roles/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/container/container/{pulp_id}/list_roles/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/container/container/{pulp_id}/list_roles/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/container/container/{pulp_id}/list_roles/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/pulp/api/v3/repositories/container/container/{pulp_id}/list_roles/ List roles assigned to this object. Parameters Name In Type Required Description pulp_id path string(uuid) true A UUID string identifying this container repository. fields query string false A list of fields to include in the response. exclude_fields query string false A list of fields to exclude from the response. Example responses 200 Response { \"roles\": [ { \"users\": [], \"groups\": [], \"role\": \"string\" } ] } Responses Status Meaning Description Schema 200 OK none ObjectRolesResponse This operation does not require authentication repositories_container_container_my_permissions Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/container/container/{pulp_id}/my_permissions/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/container/container/{pulp_id}/my_permissions/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/container/container/{pulp_id}/my_permissions/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/container/container/{pulp_id}/my_permissions/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/pulp/api/v3/repositories/container/container/{pulp_id}/my_permissions/ List permissions available to the current user on this object. Parameters Name In Type Required Description pulp_id path string(uuid) true A UUID string identifying this container repository. fields query string false A list of fields to include in the response. exclude_fields query string false A list of fields to exclude from the response. Example responses 200 Response { \"permissions\": [ \"string\" ] } Responses Status Meaning Description Schema 200 OK none MyPermissionsResponse This operation does not require authentication repositories_container_container_remove Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Content-Type\": []string{\"application/json\"}, \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"POST\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/container/container/{pulp_id}/remove/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const inputBody = '{ \"content_units\": [ null ] }'; const headers = { 'Content-Type':'application/json', 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/container/container/{pulp_id}/remove/', { method: 'POST', body: inputBody, headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Content-Type': 'application/json', 'Accept': 'application/json' } r = requests.post('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/container/container/{pulp_id}/remove/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Content-Type' => 'application/json', 'Accept' => 'application/json' } result = RestClient.post 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/container/container/{pulp_id}/remove/', params: { }, headers: headers p JSON.parse(result) POST /api/automation-hub/pulp/api/v3/repositories/container/container/{pulp_id}/remove/ Remove content Trigger an async task to recursively remove container content. Body parameter { \"content_units\": [ null ] } content_units: - null Parameters Name In Type Required Description pulp_id path string(uuid) true A UUID string identifying this container repository. body body RecursiveManage true none Example responses 202 Response { \"task\": \"http://example.com\" } Responses Status Meaning Description Schema 202 Accepted none AsyncOperationResponse This operation does not require authentication repositories_container_container_remove_role Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Content-Type\": []string{\"application/json\"}, \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"POST\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/container/container/{pulp_id}/remove_role/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const inputBody = '{ \"users\": [], \"groups\": [], \"role\": \"string\" }'; const headers = { 'Content-Type':'application/json', 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/container/container/{pulp_id}/remove_role/', { method: 'POST', body: inputBody, headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Content-Type': 'application/json', 'Accept': 'application/json' } r = requests.post('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/container/container/{pulp_id}/remove_role/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Content-Type' => 'application/json', 'Accept' => 'application/json' } result = RestClient.post 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/container/container/{pulp_id}/remove_role/', params: { }, headers: headers p JSON.parse(result) POST /api/automation-hub/pulp/api/v3/repositories/container/container/{pulp_id}/remove_role/ Remove a role for this object from users/groups. Body parameter { \"users\": [], \"groups\": [], \"role\": \"string\" } users: [] groups: [] role: string Parameters Name In Type Required Description pulp_id path string(uuid) true A UUID string identifying this container repository. body body NestedRole true none Example responses 201 Response { \"users\": [], \"groups\": [], \"role\": \"string\" } Responses Status Meaning Description Schema 201 Created none NestedRoleResponse This operation does not require authentication repositories_container_container_sign Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Content-Type\": []string{\"application/json\"}, \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"POST\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/container/container/{pulp_id}/sign/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const inputBody = '{ \"manifest_signing_service\": \"http://example.com\", \"future_base_path\": \"string\", \"tags_list\": [ null ] }'; const headers = { 'Content-Type':'application/json', 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/container/container/{pulp_id}/sign/', { method: 'POST', body: inputBody, headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Content-Type': 'application/json', 'Accept': 'application/json' } r = requests.post('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/container/container/{pulp_id}/sign/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Content-Type' => 'application/json', 'Accept' => 'application/json' } result = RestClient.post 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/container/container/{pulp_id}/sign/', params: { }, headers: headers p JSON.parse(result) POST /api/automation-hub/pulp/api/v3/repositories/container/container/{pulp_id}/sign/ Sign images in the repo Trigger an asynchronous task to sign content. Body parameter { \"manifest_signing_service\": \"http://example.com\", \"future_base_path\": \"string\", \"tags_list\": [ null ] } manifest_signing_service: http://example.com future_base_path: string tags_list: - null Parameters Name In Type Required Description pulp_id path string(uuid) true A UUID string identifying this container repository. body body RepositorySign true none Example responses 202 Response { \"task\": \"http://example.com\" } Responses Status Meaning Description Schema 202 Accepted none AsyncOperationResponse This operation does not require authentication repositories_container_container_sync Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Content-Type\": []string{\"application/json\"}, \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"POST\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/container/container/{pulp_id}/sync/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const inputBody = '{ \"remote\": \"http://example.com\", \"mirror\": false, \"signed_only\": false }'; const headers = { 'Content-Type':'application/json', 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/container/container/{pulp_id}/sync/', { method: 'POST', body: inputBody, headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Content-Type': 'application/json', 'Accept': 'application/json' } r = requests.post('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/container/container/{pulp_id}/sync/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Content-Type' => 'application/json', 'Accept' => 'application/json' } result = RestClient.post 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/container/container/{pulp_id}/sync/', params: { }, headers: headers p JSON.parse(result) POST /api/automation-hub/pulp/api/v3/repositories/container/container/{pulp_id}/sync/ Sync from a remote Trigger an asynchronous task to sync content. Body parameter { \"remote\": \"http://example.com\", \"mirror\": false, \"signed_only\": false } remote: http://example.com mirror: false signed_only: false Parameters Name In Type Required Description pulp_id path string(uuid) true A UUID string identifying this container repository. body body ContainerRepositorySyncURL true none Example responses 202 Response { \"task\": \"http://example.com\" } Responses Status Meaning Description Schema 202 Accepted none AsyncOperationResponse This operation does not require authentication repositories_container_container_tag Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Content-Type\": []string{\"application/json\"}, \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"POST\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/container/container/{pulp_id}/tag/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const inputBody = '{ \"tag\": \"string\", \"digest\": \"string\" }'; const headers = { 'Content-Type':'application/json', 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/container/container/{pulp_id}/tag/', { method: 'POST', body: inputBody, headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Content-Type': 'application/json', 'Accept': 'application/json' } r = requests.post('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/container/container/{pulp_id}/tag/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Content-Type' => 'application/json', 'Accept' => 'application/json' } result = RestClient.post 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/container/container/{pulp_id}/tag/', params: { }, headers: headers p JSON.parse(result) POST /api/automation-hub/pulp/api/v3/repositories/container/container/{pulp_id}/tag/ Create a Tag Trigger an asynchronous task to tag an image in the repository Body parameter { \"tag\": \"string\", \"digest\": \"string\" } tag: string digest: string Parameters Name In Type Required Description pulp_id path string(uuid) true A UUID string identifying this container repository. body body TagImage true none Example responses 202 Response { \"task\": \"http://example.com\" } Responses Status Meaning Description Schema 202 Accepted none AsyncOperationResponse This operation does not require authentication repositories_container_container_untag Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Content-Type\": []string{\"application/json\"}, \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"POST\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/container/container/{pulp_id}/untag/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const inputBody = '{ \"tag\": \"string\" }'; const headers = { 'Content-Type':'application/json', 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/container/container/{pulp_id}/untag/', { method: 'POST', body: inputBody, headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Content-Type': 'application/json', 'Accept': 'application/json' } r = requests.post('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/container/container/{pulp_id}/untag/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Content-Type' => 'application/json', 'Accept' => 'application/json' } result = RestClient.post 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/container/container/{pulp_id}/untag/', params: { }, headers: headers p JSON.parse(result) POST /api/automation-hub/pulp/api/v3/repositories/container/container/{pulp_id}/untag/ Delete a tag Trigger an asynchronous task to untag an image in the repository Body parameter { \"tag\": \"string\" } tag: string Parameters Name In Type Required Description pulp_id path string(uuid) true A UUID string identifying this container repository. body body UnTagImage true none Example responses 202 Response { \"task\": \"http://example.com\" } Responses Status Meaning Description Schema 202 Accepted none AsyncOperationResponse This operation does not require authentication Repositories: Container-Push repositories_container_container_push_list Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/container/container-push/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/container/container-push/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/container/container-push/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/container/container-push/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/pulp/api/v3/repositories/container/container-push/ List container push repositorys ViewSet for a container push repository. POST and DELETE are disallowed because a push repository is tightly coupled with a ContainerDistribution which handles it automatically. Created - during push operation, removed - with ContainerDistribution removal. Parameters Name In Type Required Description limit query integer false Number of results to return per page. name query string false none name__contains query string false Filter results where name contains value name__icontains query string false Filter results where name contains value name__in query array[string] false Filter results where name is in a comma-separated list of values name__startswith query string false Filter results where name starts with value offset query integer false The initial index from which to return the results. ordering query array[string] false Ordering pulp_label_select query string false Filter labels by search string remote query string(uuid) false Foreign Key referenced by HREF fields query string false A list of fields to include in the response. exclude_fields query string false A list of fields to exclude from the response. Enumerated Values Parameter Value ordering -alternatecontentsourcepath ordering -ansible_ansiblerepository ordering -container_containerpushrepository ordering -container_containerrepository ordering -content ordering -core_pulp_exporter ordering -description ordering -distributions ordering -download_logs ordering -group_roles ordering -name ordering -next_version ordering -pk ordering -pulp_created ordering -pulp_id ordering -pulp_labels ordering -pulp_last_updated ordering -pulp_type ordering -pulpimporterrepository ordering -remote ordering -repositorycontent ordering -retain_repo_versions ordering -uploads ordering -user_hidden ordering -user_roles ordering -versions ordering alternatecontentsourcepath ordering ansible_ansiblerepository ordering container_containerpushrepository ordering container_containerrepository ordering content ordering core_pulp_exporter ordering description ordering distributions ordering download_logs ordering group_roles ordering name ordering next_version ordering pk ordering pulp_created ordering pulp_id ordering pulp_labels ordering pulp_last_updated ordering pulp_type ordering pulpimporterrepository ordering remote ordering repositorycontent ordering retain_repo_versions ordering uploads ordering user_hidden ordering user_roles ordering versions Example responses 200 Response { \"count\": 123, \"next\": \"http://api.example.org/accounts/?offset=400&limit=100\", \"previous\": \"http://api.example.org/accounts/?offset=200&limit=100\", \"results\": [ { \"pulp_labels\": {}, \"pulp_created\": \"2019-08-24T14:15:22Z\", \"manifest_signing_service\": \"http://example.com\", \"description\": \"string\", \"pulp_href\": \"http://example.com\", \"versions_href\": \"http://example.com\", \"retain_repo_versions\": 1, \"latest_version_href\": \"http://example.com\", \"name\": \"string\" } ] } Responses Status Meaning Description Schema 200 OK none Paginatedcontainer.ContainerPushRepositoryResponseList This operation does not require authentication repositories_container_container_push_read Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/container/container-push/{pulp_id}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/container/container-push/{pulp_id}/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/container/container-push/{pulp_id}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/container/container-push/{pulp_id}/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/pulp/api/v3/repositories/container/container-push/{pulp_id}/ Inspect a container push repository ViewSet for a container push repository. POST and DELETE are disallowed because a push repository is tightly coupled with a ContainerDistribution which handles it automatically. Created - during push operation, removed - with ContainerDistribution removal. Parameters Name In Type Required Description pulp_id path string(uuid) true A UUID string identifying this container push repository. fields query string false A list of fields to include in the response. exclude_fields query string false A list of fields to exclude from the response. Example responses 200 Response { \"pulp_labels\": {}, \"pulp_created\": \"2019-08-24T14:15:22Z\", \"manifest_signing_service\": \"http://example.com\", \"description\": \"string\", \"pulp_href\": \"http://example.com\", \"versions_href\": \"http://example.com\", \"retain_repo_versions\": 1, \"latest_version_href\": \"http://example.com\", \"name\": \"string\" } Responses Status Meaning Description Schema 200 OK none container.ContainerPushRepositoryResponse This operation does not require authentication repositories_container_container_push_update Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Content-Type\": []string{\"application/json\"}, \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"PUT\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/container/container-push/{pulp_id}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const inputBody = '{ \"pulp_labels\": {}, \"manifest_signing_service\": \"http://example.com\", \"description\": \"string\", \"retain_repo_versions\": 1, \"name\": \"string\" }'; const headers = { 'Content-Type':'application/json', 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/container/container-push/{pulp_id}/', { method: 'PUT', body: inputBody, headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Content-Type': 'application/json', 'Accept': 'application/json' } r = requests.put('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/container/container-push/{pulp_id}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Content-Type' => 'application/json', 'Accept' => 'application/json' } result = RestClient.put 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/container/container-push/{pulp_id}/', params: { }, headers: headers p JSON.parse(result) PUT /api/automation-hub/pulp/api/v3/repositories/container/container-push/{pulp_id}/ Update a container push repository Trigger an asynchronous update task Body parameter { \"pulp_labels\": {}, \"manifest_signing_service\": \"http://example.com\", \"description\": \"string\", \"retain_repo_versions\": 1, \"name\": \"string\" } pulp_labels: {} manifest_signing_service: http://example.com description: string retain_repo_versions: 1 name: string Parameters Name In Type Required Description pulp_id path string(uuid) true A UUID string identifying this container push repository. body body container.ContainerPushRepository true none Example responses 202 Response { \"task\": \"http://example.com\" } Responses Status Meaning Description Schema 202 Accepted none AsyncOperationResponse This operation does not require authentication repositories_container_container_push_partial_update Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Content-Type\": []string{\"application/json\"}, \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"PATCH\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/container/container-push/{pulp_id}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const inputBody = '{ \"pulp_labels\": {}, \"manifest_signing_service\": \"http://example.com\", \"description\": \"string\", \"retain_repo_versions\": 1, \"name\": \"string\" }'; const headers = { 'Content-Type':'application/json', 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/container/container-push/{pulp_id}/', { method: 'PATCH', body: inputBody, headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Content-Type': 'application/json', 'Accept': 'application/json' } r = requests.patch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/container/container-push/{pulp_id}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Content-Type' => 'application/json', 'Accept' => 'application/json' } result = RestClient.patch 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/container/container-push/{pulp_id}/', params: { }, headers: headers p JSON.parse(result) PATCH /api/automation-hub/pulp/api/v3/repositories/container/container-push/{pulp_id}/ Update a container push repository Trigger an asynchronous partial update task Body parameter { \"pulp_labels\": {}, \"manifest_signing_service\": \"http://example.com\", \"description\": \"string\", \"retain_repo_versions\": 1, \"name\": \"string\" } pulp_labels: {} manifest_signing_service: http://example.com description: string retain_repo_versions: 1 name: string Parameters Name In Type Required Description pulp_id path string(uuid) true A UUID string identifying this container push repository. body body Patchedcontainer.ContainerPushRepository true none Example responses 202 Response { \"task\": \"http://example.com\" } Responses Status Meaning Description Schema 202 Accepted none AsyncOperationResponse This operation does not require authentication repositories_container_container_push_add_role Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Content-Type\": []string{\"application/json\"}, \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"POST\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/container/container-push/{pulp_id}/add_role/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const inputBody = '{ \"users\": [], \"groups\": [], \"role\": \"string\" }'; const headers = { 'Content-Type':'application/json', 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/container/container-push/{pulp_id}/add_role/', { method: 'POST', body: inputBody, headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Content-Type': 'application/json', 'Accept': 'application/json' } r = requests.post('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/container/container-push/{pulp_id}/add_role/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Content-Type' => 'application/json', 'Accept' => 'application/json' } result = RestClient.post 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/container/container-push/{pulp_id}/add_role/', params: { }, headers: headers p JSON.parse(result) POST /api/automation-hub/pulp/api/v3/repositories/container/container-push/{pulp_id}/add_role/ Add a role for this object to users/groups. Body parameter { \"users\": [], \"groups\": [], \"role\": \"string\" } users: [] groups: [] role: string Parameters Name In Type Required Description pulp_id path string(uuid) true A UUID string identifying this container push repository. body body NestedRole true none Example responses 201 Response { \"users\": [], \"groups\": [], \"role\": \"string\" } Responses Status Meaning Description Schema 201 Created none NestedRoleResponse This operation does not require authentication repositories_container_container_push_list_roles Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/container/container-push/{pulp_id}/list_roles/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/container/container-push/{pulp_id}/list_roles/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/container/container-push/{pulp_id}/list_roles/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/container/container-push/{pulp_id}/list_roles/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/pulp/api/v3/repositories/container/container-push/{pulp_id}/list_roles/ List roles assigned to this object. Parameters Name In Type Required Description pulp_id path string(uuid) true A UUID string identifying this container push repository. fields query string false A list of fields to include in the response. exclude_fields query string false A list of fields to exclude from the response. Example responses 200 Response { \"roles\": [ { \"users\": [], \"groups\": [], \"role\": \"string\" } ] } Responses Status Meaning Description Schema 200 OK none ObjectRolesResponse This operation does not require authentication repositories_container_container_push_my_permissions Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/container/container-push/{pulp_id}/my_permissions/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/container/container-push/{pulp_id}/my_permissions/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/container/container-push/{pulp_id}/my_permissions/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/container/container-push/{pulp_id}/my_permissions/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/pulp/api/v3/repositories/container/container-push/{pulp_id}/my_permissions/ List permissions available to the current user on this object. Parameters Name In Type Required Description pulp_id path string(uuid) true A UUID string identifying this container push repository. fields query string false A list of fields to include in the response. exclude_fields query string false A list of fields to exclude from the response. Example responses 200 Response { \"permissions\": [ \"string\" ] } Responses Status Meaning Description Schema 200 OK none MyPermissionsResponse This operation does not require authentication repositories_container_container_push_remove_image Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Content-Type\": []string{\"application/json\"}, \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"POST\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/container/container-push/{pulp_id}/remove_image/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const inputBody = '{ \"digest\": \"string\" }'; const headers = { 'Content-Type':'application/json', 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/container/container-push/{pulp_id}/remove_image/', { method: 'POST', body: inputBody, headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Content-Type': 'application/json', 'Accept': 'application/json' } r = requests.post('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/container/container-push/{pulp_id}/remove_image/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Content-Type' => 'application/json', 'Accept' => 'application/json' } result = RestClient.post 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/container/container-push/{pulp_id}/remove_image/', params: { }, headers: headers p JSON.parse(result) POST /api/automation-hub/pulp/api/v3/repositories/container/container-push/{pulp_id}/remove_image/ Delete an image from a repository Trigger an asynchronous task to remove a manifest and all its associated data by a digest Body parameter { \"digest\": \"string\" } digest: string Parameters Name In Type Required Description pulp_id path string(uuid) true A UUID string identifying this container push repository. body body RemoveImage true none Example responses 202 Response { \"task\": \"http://example.com\" } Responses Status Meaning Description Schema 202 Accepted none AsyncOperationResponse This operation does not require authentication repositories_container_container_push_remove_role Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Content-Type\": []string{\"application/json\"}, \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"POST\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/container/container-push/{pulp_id}/remove_role/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const inputBody = '{ \"users\": [], \"groups\": [], \"role\": \"string\" }'; const headers = { 'Content-Type':'application/json', 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/container/container-push/{pulp_id}/remove_role/', { method: 'POST', body: inputBody, headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Content-Type': 'application/json', 'Accept': 'application/json' } r = requests.post('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/container/container-push/{pulp_id}/remove_role/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Content-Type' => 'application/json', 'Accept' => 'application/json' } result = RestClient.post 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/container/container-push/{pulp_id}/remove_role/', params: { }, headers: headers p JSON.parse(result) POST /api/automation-hub/pulp/api/v3/repositories/container/container-push/{pulp_id}/remove_role/ Remove a role for this object from users/groups. Body parameter { \"users\": [], \"groups\": [], \"role\": \"string\" } users: [] groups: [] role: string Parameters Name In Type Required Description pulp_id path string(uuid) true A UUID string identifying this container push repository. body body NestedRole true none Example responses 201 Response { \"users\": [], \"groups\": [], \"role\": \"string\" } Responses Status Meaning Description Schema 201 Created none NestedRoleResponse This operation does not require authentication repositories_container_container_push_remove_signatures Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Content-Type\": []string{\"application/json\"}, \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"POST\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/container/container-push/{pulp_id}/remove_signatures/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const inputBody = '{ \"signed_with_key_id\": \"string\" }'; const headers = { 'Content-Type':'application/json', 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/container/container-push/{pulp_id}/remove_signatures/', { method: 'POST', body: inputBody, headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Content-Type': 'application/json', 'Accept': 'application/json' } r = requests.post('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/container/container-push/{pulp_id}/remove_signatures/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Content-Type' => 'application/json', 'Accept' => 'application/json' } result = RestClient.post 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/container/container-push/{pulp_id}/remove_signatures/', params: { }, headers: headers p JSON.parse(result) POST /api/automation-hub/pulp/api/v3/repositories/container/container-push/{pulp_id}/remove_signatures/ Create a task which deletes signatures by the passed key_id. Body parameter { \"signed_with_key_id\": \"string\" } signed_with_key_id: string Parameters Name In Type Required Description pulp_id path string(uuid) true A UUID string identifying this container push repository. body body RemoveSignatures true none Example responses 200 Response { \"signed_with_key_id\": \"string\" } Responses Status Meaning Description Schema 200 OK none RemoveSignaturesResponse This operation does not require authentication repositories_container_container_push_sign Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Content-Type\": []string{\"application/json\"}, \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"POST\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/container/container-push/{pulp_id}/sign/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const inputBody = '{ \"manifest_signing_service\": \"http://example.com\", \"future_base_path\": \"string\", \"tags_list\": [ null ] }'; const headers = { 'Content-Type':'application/json', 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/container/container-push/{pulp_id}/sign/', { method: 'POST', body: inputBody, headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Content-Type': 'application/json', 'Accept': 'application/json' } r = requests.post('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/container/container-push/{pulp_id}/sign/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Content-Type' => 'application/json', 'Accept' => 'application/json' } result = RestClient.post 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/container/container-push/{pulp_id}/sign/', params: { }, headers: headers p JSON.parse(result) POST /api/automation-hub/pulp/api/v3/repositories/container/container-push/{pulp_id}/sign/ Sign images in the repo Trigger an asynchronous task to sign content. Body parameter { \"manifest_signing_service\": \"http://example.com\", \"future_base_path\": \"string\", \"tags_list\": [ null ] } manifest_signing_service: http://example.com future_base_path: string tags_list: - null Parameters Name In Type Required Description pulp_id path string(uuid) true A UUID string identifying this container push repository. body body RepositorySign true none Example responses 202 Response { \"task\": \"http://example.com\" } Responses Status Meaning Description Schema 202 Accepted none AsyncOperationResponse This operation does not require authentication repositories_container_container_push_tag Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Content-Type\": []string{\"application/json\"}, \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"POST\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/container/container-push/{pulp_id}/tag/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const inputBody = '{ \"tag\": \"string\", \"digest\": \"string\" }'; const headers = { 'Content-Type':'application/json', 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/container/container-push/{pulp_id}/tag/', { method: 'POST', body: inputBody, headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Content-Type': 'application/json', 'Accept': 'application/json' } r = requests.post('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/container/container-push/{pulp_id}/tag/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Content-Type' => 'application/json', 'Accept' => 'application/json' } result = RestClient.post 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/container/container-push/{pulp_id}/tag/', params: { }, headers: headers p JSON.parse(result) POST /api/automation-hub/pulp/api/v3/repositories/container/container-push/{pulp_id}/tag/ Create a Tag Trigger an asynchronous task to tag an image in the repository Body parameter { \"tag\": \"string\", \"digest\": \"string\" } tag: string digest: string Parameters Name In Type Required Description pulp_id path string(uuid) true A UUID string identifying this container push repository. body body TagImage true none Example responses 202 Response { \"task\": \"http://example.com\" } Responses Status Meaning Description Schema 202 Accepted none AsyncOperationResponse This operation does not require authentication repositories_container_container_push_untag Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Content-Type\": []string{\"application/json\"}, \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"POST\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/container/container-push/{pulp_id}/untag/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const inputBody = '{ \"tag\": \"string\" }'; const headers = { 'Content-Type':'application/json', 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/container/container-push/{pulp_id}/untag/', { method: 'POST', body: inputBody, headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Content-Type': 'application/json', 'Accept': 'application/json' } r = requests.post('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/container/container-push/{pulp_id}/untag/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Content-Type' => 'application/json', 'Accept' => 'application/json' } result = RestClient.post 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/container/container-push/{pulp_id}/untag/', params: { }, headers: headers p JSON.parse(result) POST /api/automation-hub/pulp/api/v3/repositories/container/container-push/{pulp_id}/untag/ Delete a tag Trigger an asynchronous task to untag an image in the repository Body parameter { \"tag\": \"string\" } tag: string Parameters Name In Type Required Description pulp_id path string(uuid) true A UUID string identifying this container push repository. body body UnTagImage true none Example responses 202 Response { \"task\": \"http://example.com\" } Responses Status Meaning Description Schema 202 Accepted none AsyncOperationResponse This operation does not require authentication Repositories: Container-Push Versions repositories_container_container_push_versions_list Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/container/container-push/{repository_pk}/versions/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/container/container-push/{repository_pk}/versions/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/container/container-push/{repository_pk}/versions/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/container/container-push/{repository_pk}/versions/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/pulp/api/v3/repositories/container/container-push/{repository_pk}/versions/ List repository versions ContainerPushRepositoryVersion represents a single container push repository version. Repository versions of a push repository are not allowed to be deleted. Versioning of such repositories, as well as creation/removal, happens automatically without explicit user actions. Users could make a repository not functional by accident if allowed to delete repository versions. Parameters Name In Type Required Description content query string false Content Unit referenced by HREF content__in query string false Content Unit referenced by HREF limit query integer false Number of results to return per page. number query integer false none number__gt query integer false Filter results where number is greater than value number__gte query integer false Filter results where number is greater than or equal to value number__lt query integer false Filter results where number is less than value number__lte query integer false Filter results where number is less than or equal to value number__range query array[integer] false Filter results where number is between two comma separated values offset query integer false The initial index from which to return the results. ordering query array[string] false Ordering pulp_created query string(date-time) false ISO 8601 formatted dates are supported pulp_created__gt query string(date-time) false Filter results where pulp_created is greater than value pulp_created__gte query string(date-time) false Filter results where pulp_created is greater than or equal to value pulp_created__lt query string(date-time) false Filter results where pulp_created is less than value pulp_created__lte query string(date-time) false Filter results where pulp_created is less than or equal to value pulp_created__range query array[string] false Filter results where pulp_created is between two comma separated values repository_pk path string true none fields query string false A list of fields to include in the response. exclude_fields query string false A list of fields to exclude from the response. Enumerated Values Parameter Value ordering -added_memberships ordering -base_version ordering -complete ordering -counts ordering -distribution ordering -download_logs ordering -group_roles ordering -info ordering -number ordering -pk ordering -publication ordering -pulp_created ordering -pulp_id ordering -pulp_labels ordering -pulp_last_updated ordering -removed_memberships ordering -repository ordering -user_roles ordering -versions ordering added_memberships ordering base_version ordering complete ordering counts ordering distribution ordering download_logs ordering group_roles ordering info ordering number ordering pk ordering publication ordering pulp_created ordering pulp_id ordering pulp_labels ordering pulp_last_updated ordering removed_memberships ordering repository ordering user_roles ordering versions Example responses 200 Response { \"count\": 123, \"next\": \"http://api.example.org/accounts/?offset=400&limit=100\", \"previous\": \"http://api.example.org/accounts/?offset=200&limit=100\", \"results\": [ { \"pulp_href\": \"http://example.com\", \"pulp_created\": \"2019-08-24T14:15:22Z\", \"number\": 0, \"repository\": \"http://example.com\", \"base_version\": \"http://example.com\", \"content_summary\": { \"added\": { \"property1\": {}, \"property2\": {} }, \"removed\": { \"property1\": {}, \"property2\": {} }, \"present\": { \"property1\": {}, \"property2\": {} } } } ] } Responses Status Meaning Description Schema 200 OK none PaginatedRepositoryVersionResponseList This operation does not require authentication repositories_container_container_push_versions_read Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/container/container-push/{repository_pk}/versions/{number}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/container/container-push/{repository_pk}/versions/{number}/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/container/container-push/{repository_pk}/versions/{number}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/container/container-push/{repository_pk}/versions/{number}/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/pulp/api/v3/repositories/container/container-push/{repository_pk}/versions/{number}/ Inspect a repository version ContainerPushRepositoryVersion represents a single container push repository version. Repository versions of a push repository are not allowed to be deleted. Versioning of such repositories, as well as creation/removal, happens automatically without explicit user actions. Users could make a repository not functional by accident if allowed to delete repository versions. Parameters Name In Type Required Description number path integer true none repository_pk path string true none fields query string false A list of fields to include in the response. exclude_fields query string false A list of fields to exclude from the response. Example responses 200 Response { \"pulp_href\": \"http://example.com\", \"pulp_created\": \"2019-08-24T14:15:22Z\", \"number\": 0, \"repository\": \"http://example.com\", \"base_version\": \"http://example.com\", \"content_summary\": { \"added\": { \"property1\": {}, \"property2\": {} }, \"removed\": { \"property1\": {}, \"property2\": {} }, \"present\": { \"property1\": {}, \"property2\": {} } } } Responses Status Meaning Description Schema 200 OK none RepositoryVersionResponse This operation does not require authentication repositories_container_container_push_versions_delete Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"DELETE\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/container/container-push/{repository_pk}/versions/{number}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/container/container-push/{repository_pk}/versions/{number}/', { method: 'DELETE', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.delete('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/container/container-push/{repository_pk}/versions/{number}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.delete 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/container/container-push/{repository_pk}/versions/{number}/', params: { }, headers: headers p JSON.parse(result) DELETE /api/automation-hub/pulp/api/v3/repositories/container/container-push/{repository_pk}/versions/{number}/ Delete a repository version Trigger an asynchronous task to delete a repository version. Parameters Name In Type Required Description number path integer true none repository_pk path string true none Example responses 202 Response { \"task\": \"http://example.com\" } Responses Status Meaning Description Schema 202 Accepted none AsyncOperationResponse This operation does not require authentication repositories_container_container_push_versions_repair Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Content-Type\": []string{\"application/json\"}, \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"POST\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/container/container-push/{repository_pk}/versions/{number}/repair/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const inputBody = '{ \"verify_checksums\": true }'; const headers = { 'Content-Type':'application/json', 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/container/container-push/{repository_pk}/versions/{number}/repair/', { method: 'POST', body: inputBody, headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Content-Type': 'application/json', 'Accept': 'application/json' } r = requests.post('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/container/container-push/{repository_pk}/versions/{number}/repair/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Content-Type' => 'application/json', 'Accept' => 'application/json' } result = RestClient.post 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/container/container-push/{repository_pk}/versions/{number}/repair/', params: { }, headers: headers p JSON.parse(result) POST /api/automation-hub/pulp/api/v3/repositories/container/container-push/{repository_pk}/versions/{number}/repair/ Trigger an asynchronous task to repair a repository version. Body parameter { \"verify_checksums\": true } verify_checksums: true Parameters Name In Type Required Description number path integer true none repository_pk path string true none body body Repair true none Example responses 202 Response { \"task\": \"http://example.com\" } Responses Status Meaning Description Schema 202 Accepted none AsyncOperationResponse This operation does not require authentication Repositories: Container Versions repositories_container_container_versions_list Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/container/container/{repository_pk}/versions/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/container/container/{repository_pk}/versions/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/container/container/{repository_pk}/versions/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/container/container/{repository_pk}/versions/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/pulp/api/v3/repositories/container/container/{repository_pk}/versions/ List repository versions ContainerRepositoryVersion represents a single container repository version. Parameters Name In Type Required Description content query string false Content Unit referenced by HREF content__in query string false Content Unit referenced by HREF limit query integer false Number of results to return per page. number query integer false none number__gt query integer false Filter results where number is greater than value number__gte query integer false Filter results where number is greater than or equal to value number__lt query integer false Filter results where number is less than value number__lte query integer false Filter results where number is less than or equal to value number__range query array[integer] false Filter results where number is between two comma separated values offset query integer false The initial index from which to return the results. ordering query array[string] false Ordering pulp_created query string(date-time) false ISO 8601 formatted dates are supported pulp_created__gt query string(date-time) false Filter results where pulp_created is greater than value pulp_created__gte query string(date-time) false Filter results where pulp_created is greater than or equal to value pulp_created__lt query string(date-time) false Filter results where pulp_created is less than value pulp_created__lte query string(date-time) false Filter results where pulp_created is less than or equal to value pulp_created__range query array[string] false Filter results where pulp_created is between two comma separated values repository_pk path string true none fields query string false A list of fields to include in the response. exclude_fields query string false A list of fields to exclude from the response. Enumerated Values Parameter Value ordering -added_memberships ordering -base_version ordering -complete ordering -counts ordering -distribution ordering -download_logs ordering -group_roles ordering -info ordering -number ordering -pk ordering -publication ordering -pulp_created ordering -pulp_id ordering -pulp_labels ordering -pulp_last_updated ordering -removed_memberships ordering -repository ordering -user_roles ordering -versions ordering added_memberships ordering base_version ordering complete ordering counts ordering distribution ordering download_logs ordering group_roles ordering info ordering number ordering pk ordering publication ordering pulp_created ordering pulp_id ordering pulp_labels ordering pulp_last_updated ordering removed_memberships ordering repository ordering user_roles ordering versions Example responses 200 Response { \"count\": 123, \"next\": \"http://api.example.org/accounts/?offset=400&limit=100\", \"previous\": \"http://api.example.org/accounts/?offset=200&limit=100\", \"results\": [ { \"pulp_href\": \"http://example.com\", \"pulp_created\": \"2019-08-24T14:15:22Z\", \"number\": 0, \"repository\": \"http://example.com\", \"base_version\": \"http://example.com\", \"content_summary\": { \"added\": { \"property1\": {}, \"property2\": {} }, \"removed\": { \"property1\": {}, \"property2\": {} }, \"present\": { \"property1\": {}, \"property2\": {} } } } ] } Responses Status Meaning Description Schema 200 OK none PaginatedRepositoryVersionResponseList This operation does not require authentication repositories_container_container_versions_read Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/container/container/{repository_pk}/versions/{number}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/container/container/{repository_pk}/versions/{number}/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/container/container/{repository_pk}/versions/{number}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/container/container/{repository_pk}/versions/{number}/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/pulp/api/v3/repositories/container/container/{repository_pk}/versions/{number}/ Inspect a repository version ContainerRepositoryVersion represents a single container repository version. Parameters Name In Type Required Description number path integer true none repository_pk path string true none fields query string false A list of fields to include in the response. exclude_fields query string false A list of fields to exclude from the response. Example responses 200 Response { \"pulp_href\": \"http://example.com\", \"pulp_created\": \"2019-08-24T14:15:22Z\", \"number\": 0, \"repository\": \"http://example.com\", \"base_version\": \"http://example.com\", \"content_summary\": { \"added\": { \"property1\": {}, \"property2\": {} }, \"removed\": { \"property1\": {}, \"property2\": {} }, \"present\": { \"property1\": {}, \"property2\": {} } } } Responses Status Meaning Description Schema 200 OK none RepositoryVersionResponse This operation does not require authentication repositories_container_container_versions_delete Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"DELETE\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/container/container/{repository_pk}/versions/{number}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/container/container/{repository_pk}/versions/{number}/', { method: 'DELETE', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.delete('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/container/container/{repository_pk}/versions/{number}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.delete 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/container/container/{repository_pk}/versions/{number}/', params: { }, headers: headers p JSON.parse(result) DELETE /api/automation-hub/pulp/api/v3/repositories/container/container/{repository_pk}/versions/{number}/ Delete a repository version Trigger an asynchronous task to delete a repository version. Parameters Name In Type Required Description number path integer true none repository_pk path string true none Example responses 202 Response { \"task\": \"http://example.com\" } Responses Status Meaning Description Schema 202 Accepted none AsyncOperationResponse This operation does not require authentication repositories_container_container_versions_repair Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Content-Type\": []string{\"application/json\"}, \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"POST\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/container/container/{repository_pk}/versions/{number}/repair/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const inputBody = '{ \"verify_checksums\": true }'; const headers = { 'Content-Type':'application/json', 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/container/container/{repository_pk}/versions/{number}/repair/', { method: 'POST', body: inputBody, headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Content-Type': 'application/json', 'Accept': 'application/json' } r = requests.post('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/container/container/{repository_pk}/versions/{number}/repair/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Content-Type' => 'application/json', 'Accept' => 'application/json' } result = RestClient.post 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/container/container/{repository_pk}/versions/{number}/repair/', params: { }, headers: headers p JSON.parse(result) POST /api/automation-hub/pulp/api/v3/repositories/container/container/{repository_pk}/versions/{number}/repair/ Trigger an asynchronous task to repair a repository version. Body parameter { \"verify_checksums\": true } verify_checksums: true Parameters Name In Type Required Description number path integer true none repository_pk path string true none body body Repair true none Example responses 202 Response { \"task\": \"http://example.com\" } Responses Status Meaning Description Schema 202 Accepted none AsyncOperationResponse This operation does not require authentication Repositories: Reclaim_Space repositories_reclaim_space_reclaim Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Content-Type\": []string{\"application/json\"}, \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"POST\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/reclaim_space/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const inputBody = '{ \"repo_hrefs\": [ null ], \"repo_versions_keeplist\": [ \"http://example.com\" ] }'; const headers = { 'Content-Type':'application/json', 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/reclaim_space/', { method: 'POST', body: inputBody, headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Content-Type': 'application/json', 'Accept': 'application/json' } r = requests.post('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/reclaim_space/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Content-Type' => 'application/json', 'Accept' => 'application/json' } result = RestClient.post 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/reclaim_space/', params: { }, headers: headers p JSON.parse(result) POST /api/automation-hub/pulp/api/v3/repositories/reclaim_space/ Trigger an asynchronous space reclaim operation. Body parameter { \"repo_hrefs\": [ null ], \"repo_versions_keeplist\": [ \"http://example.com\" ] } repo_hrefs: - null repo_versions_keeplist: - http://example.com Parameters Name In Type Required Description body body ReclaimSpace true none Example responses 202 Response { \"task\": \"http://example.com\" } Responses Status Meaning Description Schema 202 Accepted none AsyncOperationResponse This operation does not require authentication Repository_Versions repository_versions_list Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repository_versions/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repository_versions/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repository_versions/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repository_versions/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/pulp/api/v3/repository_versions/ List repository versions Parameters Name In Type Required Description content query string false Content Unit referenced by HREF content__in query string false Content Unit referenced by HREF limit query integer false Number of results to return per page. number query integer false none number__gt query integer false Filter results where number is greater than value number__gte query integer false Filter results where number is greater than or equal to value number__lt query integer false Filter results where number is less than value number__lte query integer false Filter results where number is less than or equal to value number__range query array[integer] false Filter results where number is between two comma separated values offset query integer false The initial index from which to return the results. ordering query array[string] false Ordering pulp_created query string(date-time) false ISO 8601 formatted dates are supported pulp_created__gt query string(date-time) false Filter results where pulp_created is greater than value pulp_created__gte query string(date-time) false Filter results where pulp_created is greater than or equal to value pulp_created__lt query string(date-time) false Filter results where pulp_created is less than value pulp_created__lte query string(date-time) false Filter results where pulp_created is less than or equal to value pulp_created__range query array[string] false Filter results where pulp_created is between two comma separated values fields query string false A list of fields to include in the response. exclude_fields query string false A list of fields to exclude from the response. Enumerated Values Parameter Value ordering -added_memberships ordering -base_version ordering -complete ordering -counts ordering -distribution ordering -download_logs ordering -group_roles ordering -info ordering -number ordering -pk ordering -publication ordering -pulp_created ordering -pulp_id ordering -pulp_labels ordering -pulp_last_updated ordering -removed_memberships ordering -repository ordering -user_roles ordering -versions ordering added_memberships ordering base_version ordering complete ordering counts ordering distribution ordering download_logs ordering group_roles ordering info ordering number ordering pk ordering publication ordering pulp_created ordering pulp_id ordering pulp_labels ordering pulp_last_updated ordering removed_memberships ordering repository ordering user_roles ordering versions Example responses 200 Response { \"count\": 123, \"next\": \"http://api.example.org/accounts/?offset=400&limit=100\", \"previous\": \"http://api.example.org/accounts/?offset=200&limit=100\", \"results\": [ { \"pulp_href\": \"http://example.com\", \"pulp_created\": \"2019-08-24T14:15:22Z\", \"number\": 0, \"repository\": \"http://example.com\", \"base_version\": \"http://example.com\", \"content_summary\": { \"added\": { \"property1\": {}, \"property2\": {} }, \"removed\": { \"property1\": {}, \"property2\": {} }, \"present\": { \"property1\": {}, \"property2\": {} } } } ] } Responses Status Meaning Description Schema 200 OK none PaginatedRepositoryVersionResponseList This operation does not require authentication Roles roles_list Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/roles/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/roles/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/roles/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/roles/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/pulp/api/v3/roles/ List roles ViewSet for Role. NOTE: This API endpoint is in \"tech preview\" and subject to change Parameters Name In Type Required Description contains_permission query array[string] false Filter roles that have any of the permissions in the list. description query string false Filter results where description matches value description__contains query string false Filter results where description contains value description__icontains query string false Filter results where description contains value description__iexact query string false Filter results where description matches value for_object_type query string false Filter roles that only have permissions for the specified object HREF. limit query integer false Number of results to return per page. locked query boolean false Filter results where locked matches value name query string false Filter results where name matches value name__contains query string false Filter results where name contains value name__icontains query string false Filter results where name contains value name__in query array[string] false Filter results where name is in a comma-separated list of values name__startswith query string false Filter results where name starts with value offset query integer false The initial index from which to return the results. ordering query array[string] false Ordering fields query string false A list of fields to include in the response. exclude_fields query string false A list of fields to exclude from the response. Enumerated Values Parameter Value ordering -description ordering -group_roles ordering -locked ordering -name ordering -object_groups ordering -object_users ordering -permissions ordering -pk ordering -pulp_created ordering -pulp_id ordering -pulp_labels ordering -pulp_last_updated ordering -user_roles ordering description ordering group_roles ordering locked ordering name ordering object_groups ordering object_users ordering permissions ordering pk ordering pulp_created ordering pulp_id ordering pulp_labels ordering pulp_last_updated ordering user_roles Example responses 200 Response { \"count\": 123, \"next\": \"http://api.example.org/accounts/?offset=400&limit=100\", \"previous\": \"http://api.example.org/accounts/?offset=200&limit=100\", \"results\": [ { \"pulp_href\": \"http://example.com\", \"pulp_created\": \"2019-08-24T14:15:22Z\", \"name\": \"string\", \"description\": \"string\", \"permissions\": [ \"string\" ], \"locked\": true } ] } Responses Status Meaning Description Schema 200 OK none PaginatedRoleResponseList This operation does not require authentication roles_create Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Content-Type\": []string{\"application/json\"}, \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"POST\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/roles/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const inputBody = '{ \"name\": \"string\", \"description\": \"string\", \"permissions\": [ \"string\" ] }'; const headers = { 'Content-Type':'application/json', 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/roles/', { method: 'POST', body: inputBody, headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Content-Type': 'application/json', 'Accept': 'application/json' } r = requests.post('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/roles/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Content-Type' => 'application/json', 'Accept' => 'application/json' } result = RestClient.post 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/roles/', params: { }, headers: headers p JSON.parse(result) POST /api/automation-hub/pulp/api/v3/roles/ Create a role ViewSet for Role. NOTE: This API endpoint is in \"tech preview\" and subject to change Body parameter { \"name\": \"string\", \"description\": \"string\", \"permissions\": [ \"string\" ] } name: string description: string permissions: - string Parameters Name In Type Required Description body body Role true none Example responses 201 Response { \"pulp_href\": \"http://example.com\", \"pulp_created\": \"2019-08-24T14:15:22Z\", \"name\": \"string\", \"description\": \"string\", \"permissions\": [ \"string\" ], \"locked\": true } Responses Status Meaning Description Schema 201 Created none RoleResponse This operation does not require authentication roles_read Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/roles/{pulp_id}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/roles/{pulp_id}/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/roles/{pulp_id}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/roles/{pulp_id}/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/pulp/api/v3/roles/{pulp_id}/ Inspect a role ViewSet for Role. NOTE: This API endpoint is in \"tech preview\" and subject to change Parameters Name In Type Required Description pulp_id path string(uuid) true A UUID string identifying this role. fields query string false A list of fields to include in the response. exclude_fields query string false A list of fields to exclude from the response. Example responses 200 Response { \"pulp_href\": \"http://example.com\", \"pulp_created\": \"2019-08-24T14:15:22Z\", \"name\": \"string\", \"description\": \"string\", \"permissions\": [ \"string\" ], \"locked\": true } Responses Status Meaning Description Schema 200 OK none RoleResponse This operation does not require authentication roles_update Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Content-Type\": []string{\"application/json\"}, \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"PUT\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/roles/{pulp_id}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const inputBody = '{ \"name\": \"string\", \"description\": \"string\", \"permissions\": [ \"string\" ] }'; const headers = { 'Content-Type':'application/json', 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/roles/{pulp_id}/', { method: 'PUT', body: inputBody, headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Content-Type': 'application/json', 'Accept': 'application/json' } r = requests.put('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/roles/{pulp_id}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Content-Type' => 'application/json', 'Accept' => 'application/json' } result = RestClient.put 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/roles/{pulp_id}/', params: { }, headers: headers p JSON.parse(result) PUT /api/automation-hub/pulp/api/v3/roles/{pulp_id}/ Update a role ViewSet for Role. NOTE: This API endpoint is in \"tech preview\" and subject to change Body parameter { \"name\": \"string\", \"description\": \"string\", \"permissions\": [ \"string\" ] } name: string description: string permissions: - string Parameters Name In Type Required Description pulp_id path string(uuid) true A UUID string identifying this role. body body Role true none Example responses 200 Response { \"pulp_href\": \"http://example.com\", \"pulp_created\": \"2019-08-24T14:15:22Z\", \"name\": \"string\", \"description\": \"string\", \"permissions\": [ \"string\" ], \"locked\": true } Responses Status Meaning Description Schema 200 OK none RoleResponse This operation does not require authentication roles_partial_update Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Content-Type\": []string{\"application/json\"}, \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"PATCH\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/roles/{pulp_id}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const inputBody = '{ \"name\": \"string\", \"description\": \"string\", \"permissions\": [ \"string\" ] }'; const headers = { 'Content-Type':'application/json', 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/roles/{pulp_id}/', { method: 'PATCH', body: inputBody, headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Content-Type': 'application/json', 'Accept': 'application/json' } r = requests.patch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/roles/{pulp_id}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Content-Type' => 'application/json', 'Accept' => 'application/json' } result = RestClient.patch 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/roles/{pulp_id}/', params: { }, headers: headers p JSON.parse(result) PATCH /api/automation-hub/pulp/api/v3/roles/{pulp_id}/ Update a role ViewSet for Role. NOTE: This API endpoint is in \"tech preview\" and subject to change Body parameter { \"name\": \"string\", \"description\": \"string\", \"permissions\": [ \"string\" ] } name: string description: string permissions: - string Parameters Name In Type Required Description pulp_id path string(uuid) true A UUID string identifying this role. body body PatchedRole true none Example responses 200 Response { \"pulp_href\": \"http://example.com\", \"pulp_created\": \"2019-08-24T14:15:22Z\", \"name\": \"string\", \"description\": \"string\", \"permissions\": [ \"string\" ], \"locked\": true } Responses Status Meaning Description Schema 200 OK none RoleResponse This operation does not require authentication roles_delete Code samples package main import ( \"bytes\" \"net/http\" ) func main() { data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"DELETE\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/roles/{pulp_id}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/roles/{pulp_id}/', { method: 'DELETE' }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests r = requests.delete('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/roles/{pulp_id}/') print(r.json()) require 'rest-client' require 'json' result = RestClient.delete 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/roles/{pulp_id}/', params: { } p JSON.parse(result) DELETE /api/automation-hub/pulp/api/v3/roles/{pulp_id}/ Delete a role ViewSet for Role. NOTE: This API endpoint is in \"tech preview\" and subject to change Parameters Name In Type Required Description pulp_id path string(uuid) true A UUID string identifying this role. Responses Status Meaning Description Schema 204 No Content No response body None This operation does not require authentication Signing-Services signing_services_list Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/signing-services/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/signing-services/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/signing-services/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/signing-services/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/pulp/api/v3/signing-services/ List signing services A ViewSet that supports browsing of existing signing services. Parameters Name In Type Required Description limit query integer false Number of results to return per page. name query string false none offset query integer false The initial index from which to return the results. fields query string false A list of fields to include in the response. exclude_fields query string false A list of fields to exclude from the response. Example responses 200 Response { \"count\": 123, \"next\": \"http://api.example.org/accounts/?offset=400&limit=100\", \"previous\": \"http://api.example.org/accounts/?offset=200&limit=100\", \"results\": [ { \"pulp_href\": \"http://example.com\", \"pulp_created\": \"2019-08-24T14:15:22Z\", \"name\": \"string\", \"public_key\": \"string\", \"pubkey_fingerprint\": \"string\", \"script\": \"string\" } ] } Responses Status Meaning Description Schema 200 OK none PaginatedSigningServiceResponseList This operation does not require authentication signing_services_read Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/signing-services/{pulp_id}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/signing-services/{pulp_id}/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/signing-services/{pulp_id}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/signing-services/{pulp_id}/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/pulp/api/v3/signing-services/{pulp_id}/ Inspect a signing service A ViewSet that supports browsing of existing signing services. Parameters Name In Type Required Description pulp_id path string(uuid) true A UUID string identifying this signing service. fields query string false A list of fields to include in the response. exclude_fields query string false A list of fields to exclude from the response. Example responses 200 Response { \"pulp_href\": \"http://example.com\", \"pulp_created\": \"2019-08-24T14:15:22Z\", \"name\": \"string\", \"public_key\": \"string\", \"pubkey_fingerprint\": \"string\", \"script\": \"string\" } Responses Status Meaning Description Schema 200 OK none SigningServiceResponse This operation does not require authentication Status status_read Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/status/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/status/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/status/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/status/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/pulp/api/v3/status/ Inspect status of Pulp Returns status and app information about Pulp. Information includes: * version of pulpcore and loaded pulp plugins * known workers * known content apps * database connection status * redis connection status * disk usage information Example responses 200 Response { \"versions\": [ { \"component\": \"string\", \"version\": \"string\", \"package\": \"string\" } ], \"online_workers\": [ { \"pulp_href\": \"http://example.com\", \"pulp_created\": \"2019-08-24T14:15:22Z\", \"name\": \"string\", \"last_heartbeat\": \"2019-08-24T14:15:22Z\", \"current_task\": \"http://example.com\" } ], \"online_content_apps\": [ { \"name\": \"string\", \"last_heartbeat\": \"2019-08-24T14:15:22Z\" } ], \"database_connection\": { \"connected\": true }, \"redis_connection\": { \"connected\": true }, \"storage\": { \"total\": 0, \"used\": 0, \"free\": 0 } } Responses Status Meaning Description Schema 200 OK none StatusResponse This operation does not require authentication Task-Groups task_groups_list Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/task-groups/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/task-groups/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/task-groups/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/task-groups/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/pulp/api/v3/task-groups/ List task groups A customized named ModelViewSet that knows how to register itself with the Pulp API router. This viewset is discoverable by its name. \"Normal\" Django Models and Master/Detail models are supported by the register_with method. Attributes: lookup_field (str): The name of the field by which an object should be looked up, in addition to any parent lookups if this ViewSet is nested. Defaults to 'pk' endpoint_name (str): The name of the final path segment that should identify the ViewSet's collection endpoint. nest_prefix (str): Optional prefix under which this ViewSet should be nested. This must correspond to the \"parent_prefix\" of a router with rest_framework_nested.NestedMixin. None indicates this ViewSet should not be nested. parent_lookup_kwargs (dict): Optional mapping of key names that would appear in self.kwargs to django model filter expressions that can be used with the corresponding value from self.kwargs, used only by a nested ViewSet to filter based on the parent object's identity. schema (DefaultSchema): The schema class to use by default in a viewset. Parameters Name In Type Required Description limit query integer false Number of results to return per page. offset query integer false The initial index from which to return the results. ordering query array[string] false Ordering fields query string false A list of fields to include in the response. exclude_fields query string false A list of fields to exclude from the response. Enumerated Values Parameter Value ordering -all_tasks_dispatched ordering -description ordering -group_progress_reports ordering -group_roles ordering -pk ordering -pulp_created ordering -pulp_id ordering -pulp_labels ordering -pulp_last_updated ordering -tasks ordering -user_roles ordering all_tasks_dispatched ordering description ordering group_progress_reports ordering group_roles ordering pk ordering pulp_created ordering pulp_id ordering pulp_labels ordering pulp_last_updated ordering tasks ordering user_roles Example responses 200 Response { \"count\": 123, \"next\": \"http://api.example.org/accounts/?offset=400&limit=100\", \"previous\": \"http://api.example.org/accounts/?offset=200&limit=100\", \"results\": [ { \"pulp_href\": \"http://example.com\", \"description\": \"string\", \"all_tasks_dispatched\": true, \"waiting\": 0, \"skipped\": 0, \"running\": 0, \"completed\": 0, \"canceled\": 0, \"failed\": 0, \"canceling\": 0, \"group_progress_reports\": [ { \"message\": \"string\", \"code\": \"string\", \"total\": 0, \"done\": 0, \"suffix\": \"string\" } ], \"tasks\": [ { \"pulp_href\": \"http://example.com\", \"pulp_created\": \"2019-08-24T14:15:22Z\", \"name\": \"string\", \"state\": \"string\", \"started_at\": \"2019-08-24T14:15:22Z\", \"finished_at\": \"2019-08-24T14:15:22Z\", \"worker\": \"http://example.com\" } ] } ] } Responses Status Meaning Description Schema 200 OK none PaginatedTaskGroupResponseList This operation does not require authentication task_groups_read Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/task-groups/{pulp_id}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/task-groups/{pulp_id}/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/task-groups/{pulp_id}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/task-groups/{pulp_id}/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/pulp/api/v3/task-groups/{pulp_id}/ Inspect a task group A customized named ModelViewSet that knows how to register itself with the Pulp API router. This viewset is discoverable by its name. \"Normal\" Django Models and Master/Detail models are supported by the register_with method. Attributes: lookup_field (str): The name of the field by which an object should be looked up, in addition to any parent lookups if this ViewSet is nested. Defaults to 'pk' endpoint_name (str): The name of the final path segment that should identify the ViewSet's collection endpoint. nest_prefix (str): Optional prefix under which this ViewSet should be nested. This must correspond to the \"parent_prefix\" of a router with rest_framework_nested.NestedMixin. None indicates this ViewSet should not be nested. parent_lookup_kwargs (dict): Optional mapping of key names that would appear in self.kwargs to django model filter expressions that can be used with the corresponding value from self.kwargs, used only by a nested ViewSet to filter based on the parent object's identity. schema (DefaultSchema): The schema class to use by default in a viewset. Parameters Name In Type Required Description pulp_id path string(uuid) true A UUID string identifying this task group. fields query string false A list of fields to include in the response. exclude_fields query string false A list of fields to exclude from the response. Example responses 200 Response { \"pulp_href\": \"http://example.com\", \"description\": \"string\", \"all_tasks_dispatched\": true, \"waiting\": 0, \"skipped\": 0, \"running\": 0, \"completed\": 0, \"canceled\": 0, \"failed\": 0, \"canceling\": 0, \"group_progress_reports\": [ { \"message\": \"string\", \"code\": \"string\", \"total\": 0, \"done\": 0, \"suffix\": \"string\" } ], \"tasks\": [ { \"pulp_href\": \"http://example.com\", \"pulp_created\": \"2019-08-24T14:15:22Z\", \"name\": \"string\", \"state\": \"string\", \"started_at\": \"2019-08-24T14:15:22Z\", \"finished_at\": \"2019-08-24T14:15:22Z\", \"worker\": \"http://example.com\" } ] } Responses Status Meaning Description Schema 200 OK none TaskGroupResponse This operation does not require authentication Task-Schedules task_schedules_list Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/task-schedules/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/task-schedules/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/task-schedules/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/task-schedules/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/pulp/api/v3/task-schedules/ List task schedules ViewSet to monitor task schedules. NOTE: This feature is in tech-preview and may change in backwards incompatible ways. Parameters Name In Type Required Description limit query integer false Number of results to return per page. name query string false none name__contains query string false Filter results where name contains value offset query integer false The initial index from which to return the results. ordering query array[string] false Ordering task_name query string false none task_name__contains query string false Filter results where task_name contains value fields query string false A list of fields to include in the response. exclude_fields query string false A list of fields to exclude from the response. Enumerated Values Parameter Value ordering -dispatch_interval ordering -group_roles ordering -last_task ordering -name ordering -next_dispatch ordering -pk ordering -pulp_created ordering -pulp_id ordering -pulp_labels ordering -pulp_last_updated ordering -task_name ordering -user_roles ordering dispatch_interval ordering group_roles ordering last_task ordering name ordering next_dispatch ordering pk ordering pulp_created ordering pulp_id ordering pulp_labels ordering pulp_last_updated ordering task_name ordering user_roles Example responses 200 Response { \"count\": 123, \"next\": \"http://api.example.org/accounts/?offset=400&limit=100\", \"previous\": \"http://api.example.org/accounts/?offset=200&limit=100\", \"results\": [ { \"pulp_href\": \"http://example.com\", \"pulp_created\": \"2019-08-24T14:15:22Z\", \"name\": \"string\", \"task_name\": \"string\", \"dispatch_interval\": \"string\", \"next_dispatch\": \"2019-08-24T14:15:22Z\", \"last_task\": \"http://example.com\" } ] } Responses Status Meaning Description Schema 200 OK none PaginatedTaskScheduleResponseList This operation does not require authentication task_schedules_read Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/task-schedules/{pulp_id}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/task-schedules/{pulp_id}/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/task-schedules/{pulp_id}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/task-schedules/{pulp_id}/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/pulp/api/v3/task-schedules/{pulp_id}/ Inspect a task schedule ViewSet to monitor task schedules. NOTE: This feature is in tech-preview and may change in backwards incompatible ways. Parameters Name In Type Required Description pulp_id path string(uuid) true A UUID string identifying this task schedule. fields query string false A list of fields to include in the response. exclude_fields query string false A list of fields to exclude from the response. Example responses 200 Response { \"pulp_href\": \"http://example.com\", \"pulp_created\": \"2019-08-24T14:15:22Z\", \"name\": \"string\", \"task_name\": \"string\", \"dispatch_interval\": \"string\", \"next_dispatch\": \"2019-08-24T14:15:22Z\", \"last_task\": \"http://example.com\" } Responses Status Meaning Description Schema 200 OK none TaskScheduleResponse This operation does not require authentication task_schedules_add_role Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Content-Type\": []string{\"application/json\"}, \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"POST\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/task-schedules/{pulp_id}/add_role/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const inputBody = '{ \"users\": [], \"groups\": [], \"role\": \"string\" }'; const headers = { 'Content-Type':'application/json', 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/task-schedules/{pulp_id}/add_role/', { method: 'POST', body: inputBody, headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Content-Type': 'application/json', 'Accept': 'application/json' } r = requests.post('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/task-schedules/{pulp_id}/add_role/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Content-Type' => 'application/json', 'Accept' => 'application/json' } result = RestClient.post 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/task-schedules/{pulp_id}/add_role/', params: { }, headers: headers p JSON.parse(result) POST /api/automation-hub/pulp/api/v3/task-schedules/{pulp_id}/add_role/ Add a role for this object to users/groups. Body parameter { \"users\": [], \"groups\": [], \"role\": \"string\" } users: [] groups: [] role: string Parameters Name In Type Required Description pulp_id path string(uuid) true A UUID string identifying this task schedule. body body NestedRole true none Example responses 201 Response { \"users\": [], \"groups\": [], \"role\": \"string\" } Responses Status Meaning Description Schema 201 Created none NestedRoleResponse This operation does not require authentication task_schedules_list_roles Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/task-schedules/{pulp_id}/list_roles/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/task-schedules/{pulp_id}/list_roles/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/task-schedules/{pulp_id}/list_roles/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/task-schedules/{pulp_id}/list_roles/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/pulp/api/v3/task-schedules/{pulp_id}/list_roles/ List roles assigned to this object. Parameters Name In Type Required Description pulp_id path string(uuid) true A UUID string identifying this task schedule. fields query string false A list of fields to include in the response. exclude_fields query string false A list of fields to exclude from the response. Example responses 200 Response { \"roles\": [ { \"users\": [], \"groups\": [], \"role\": \"string\" } ] } Responses Status Meaning Description Schema 200 OK none ObjectRolesResponse This operation does not require authentication task_schedules_my_permissions Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/task-schedules/{pulp_id}/my_permissions/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/task-schedules/{pulp_id}/my_permissions/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/task-schedules/{pulp_id}/my_permissions/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/task-schedules/{pulp_id}/my_permissions/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/pulp/api/v3/task-schedules/{pulp_id}/my_permissions/ List permissions available to the current user on this object. Parameters Name In Type Required Description pulp_id path string(uuid) true A UUID string identifying this task schedule. fields query string false A list of fields to include in the response. exclude_fields query string false A list of fields to exclude from the response. Example responses 200 Response { \"permissions\": [ \"string\" ] } Responses Status Meaning Description Schema 200 OK none MyPermissionsResponse This operation does not require authentication task_schedules_remove_role Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Content-Type\": []string{\"application/json\"}, \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"POST\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/task-schedules/{pulp_id}/remove_role/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const inputBody = '{ \"users\": [], \"groups\": [], \"role\": \"string\" }'; const headers = { 'Content-Type':'application/json', 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/task-schedules/{pulp_id}/remove_role/', { method: 'POST', body: inputBody, headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Content-Type': 'application/json', 'Accept': 'application/json' } r = requests.post('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/task-schedules/{pulp_id}/remove_role/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Content-Type' => 'application/json', 'Accept' => 'application/json' } result = RestClient.post 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/task-schedules/{pulp_id}/remove_role/', params: { }, headers: headers p JSON.parse(result) POST /api/automation-hub/pulp/api/v3/task-schedules/{pulp_id}/remove_role/ Remove a role for this object from users/groups. Body parameter { \"users\": [], \"groups\": [], \"role\": \"string\" } users: [] groups: [] role: string Parameters Name In Type Required Description pulp_id path string(uuid) true A UUID string identifying this task schedule. body body NestedRole true none Example responses 201 Response { \"users\": [], \"groups\": [], \"role\": \"string\" } Responses Status Meaning Description Schema 201 Created none NestedRoleResponse This operation does not require authentication Uploads uploads_list Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/uploads/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/uploads/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/uploads/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/uploads/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/pulp/api/v3/uploads/ List uploads View for chunked uploads. Parameters Name In Type Required Description limit query integer false Number of results to return per page. offset query integer false The initial index from which to return the results. fields query string false A list of fields to include in the response. exclude_fields query string false A list of fields to exclude from the response. Example responses 200 Response { \"count\": 123, \"next\": \"http://api.example.org/accounts/?offset=400&limit=100\", \"previous\": \"http://api.example.org/accounts/?offset=200&limit=100\", \"results\": [ { \"pulp_href\": \"http://example.com\", \"pulp_created\": \"2019-08-24T14:15:22Z\", \"size\": 0, \"completed\": \"2019-08-24T14:15:22Z\" } ] } Responses Status Meaning Description Schema 200 OK none PaginatedUploadResponseList This operation does not require authentication uploads_create Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Content-Type\": []string{\"application/json\"}, \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"POST\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/uploads/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const inputBody = '{ \"size\": 0 }'; const headers = { 'Content-Type':'application/json', 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/uploads/', { method: 'POST', body: inputBody, headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Content-Type': 'application/json', 'Accept': 'application/json' } r = requests.post('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/uploads/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Content-Type' => 'application/json', 'Accept' => 'application/json' } result = RestClient.post 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/uploads/', params: { }, headers: headers p JSON.parse(result) POST /api/automation-hub/pulp/api/v3/uploads/ Create an upload View for chunked uploads. Body parameter { \"size\": 0 } size: 0 Parameters Name In Type Required Description body body Upload true none Example responses 201 Response { \"pulp_href\": \"http://example.com\", \"pulp_created\": \"2019-08-24T14:15:22Z\", \"size\": 0, \"completed\": \"2019-08-24T14:15:22Z\" } Responses Status Meaning Description Schema 201 Created none UploadResponse This operation does not require authentication uploads_read Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/uploads/{pulp_id}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/uploads/{pulp_id}/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/uploads/{pulp_id}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/uploads/{pulp_id}/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/pulp/api/v3/uploads/{pulp_id}/ Inspect an upload View for chunked uploads. Parameters Name In Type Required Description pulp_id path string(uuid) true A UUID string identifying this upload. fields query string false A list of fields to include in the response. exclude_fields query string false A list of fields to exclude from the response. Example responses 200 Response { \"pulp_href\": \"http://example.com\", \"pulp_created\": \"2019-08-24T14:15:22Z\", \"size\": 0, \"completed\": \"2019-08-24T14:15:22Z\", \"chunks\": [ { \"offset\": 0, \"size\": 0 } ] } Responses Status Meaning Description Schema 200 OK none UploadDetailResponse This operation does not require authentication uploads_update Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Content-Type\": []string{\"multipart/form-data\"}, \"Accept\": []string{\"application/json\"}, \"Content-Range\": []string{\"string\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"PUT\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/uploads/{pulp_id}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const inputBody = '{ \"file\": \"string\", \"sha256\": \"string\" }'; const headers = { 'Content-Type':'multipart/form-data', 'Accept':'application/json', 'Content-Range':'string' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/uploads/{pulp_id}/', { method: 'PUT', body: inputBody, headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Content-Type': 'multipart/form-data', 'Accept': 'application/json', 'Content-Range': 'string' } r = requests.put('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/uploads/{pulp_id}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Content-Type' => 'multipart/form-data', 'Accept' => 'application/json', 'Content-Range' => 'string' } result = RestClient.put 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/uploads/{pulp_id}/', params: { }, headers: headers p JSON.parse(result) PUT /api/automation-hub/pulp/api/v3/uploads/{pulp_id}/ Upload a file chunk Upload a chunk for an upload. Body parameter file: string sha256: string Parameters Name In Type Required Description Content-Range header string true The Content-Range header specifies the location of the file chunk within the file. pulp_id path string(uuid) true A UUID string identifying this upload. body body UploadChunk true none Example responses 200 Response { \"pulp_href\": \"http://example.com\", \"pulp_created\": \"2019-08-24T14:15:22Z\", \"size\": 0, \"completed\": \"2019-08-24T14:15:22Z\" } Responses Status Meaning Description Schema 200 OK none UploadResponse This operation does not require authentication uploads_delete Code samples package main import ( \"bytes\" \"net/http\" ) func main() { data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"DELETE\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/uploads/{pulp_id}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/uploads/{pulp_id}/', { method: 'DELETE' }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests r = requests.delete('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/uploads/{pulp_id}/') print(r.json()) require 'rest-client' require 'json' result = RestClient.delete 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/uploads/{pulp_id}/', params: { } p JSON.parse(result) DELETE /api/automation-hub/pulp/api/v3/uploads/{pulp_id}/ Delete an upload View for chunked uploads. Parameters Name In Type Required Description pulp_id path string(uuid) true A UUID string identifying this upload. Responses Status Meaning Description Schema 204 No Content No response body None This operation does not require authentication uploads_add_role Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Content-Type\": []string{\"application/json\"}, \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"POST\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/uploads/{pulp_id}/add_role/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const inputBody = '{ \"size\": 0 }'; const headers = { 'Content-Type':'application/json', 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/uploads/{pulp_id}/add_role/', { method: 'POST', body: inputBody, headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Content-Type': 'application/json', 'Accept': 'application/json' } r = requests.post('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/uploads/{pulp_id}/add_role/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Content-Type' => 'application/json', 'Accept' => 'application/json' } result = RestClient.post 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/uploads/{pulp_id}/add_role/', params: { }, headers: headers p JSON.parse(result) POST /api/automation-hub/pulp/api/v3/uploads/{pulp_id}/add_role/ Add a role for this object to users/groups. Body parameter { \"size\": 0 } size: 0 Parameters Name In Type Required Description pulp_id path string(uuid) true A UUID string identifying this upload. body body Upload true none Example responses 201 Response { \"users\": [], \"groups\": [], \"role\": \"string\" } Responses Status Meaning Description Schema 201 Created none NestedRoleResponse This operation does not require authentication uploads_commit Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Content-Type\": []string{\"application/json\"}, \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"POST\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/uploads/{pulp_id}/commit/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const inputBody = '{ \"sha256\": \"string\" }'; const headers = { 'Content-Type':'application/json', 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/uploads/{pulp_id}/commit/', { method: 'POST', body: inputBody, headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Content-Type': 'application/json', 'Accept': 'application/json' } r = requests.post('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/uploads/{pulp_id}/commit/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Content-Type' => 'application/json', 'Accept' => 'application/json' } result = RestClient.post 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/uploads/{pulp_id}/commit/', params: { }, headers: headers p JSON.parse(result) POST /api/automation-hub/pulp/api/v3/uploads/{pulp_id}/commit/ Finish an Upload Queues a Task that creates an Artifact, and the Upload gets deleted and cannot be re-used. Body parameter { \"sha256\": \"string\" } sha256: string Parameters Name In Type Required Description pulp_id path string(uuid) true A UUID string identifying this upload. body body UploadCommit true none Example responses 202 Response { \"task\": \"http://example.com\" } Responses Status Meaning Description Schema 202 Accepted none AsyncOperationResponse This operation does not require authentication uploads_list_roles Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/uploads/{pulp_id}/list_roles/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/uploads/{pulp_id}/list_roles/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/uploads/{pulp_id}/list_roles/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/uploads/{pulp_id}/list_roles/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/pulp/api/v3/uploads/{pulp_id}/list_roles/ List roles assigned to this object. Parameters Name In Type Required Description pulp_id path string(uuid) true A UUID string identifying this upload. fields query string false A list of fields to include in the response. exclude_fields query string false A list of fields to exclude from the response. Example responses 200 Response { \"roles\": [ { \"users\": [], \"groups\": [], \"role\": \"string\" } ] } Responses Status Meaning Description Schema 200 OK none ObjectRolesResponse This operation does not require authentication uploads_my_permissions Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/uploads/{pulp_id}/my_permissions/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/uploads/{pulp_id}/my_permissions/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/uploads/{pulp_id}/my_permissions/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/uploads/{pulp_id}/my_permissions/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/pulp/api/v3/uploads/{pulp_id}/my_permissions/ List permissions available to the current user on this object. Parameters Name In Type Required Description pulp_id path string(uuid) true A UUID string identifying this upload. fields query string false A list of fields to include in the response. exclude_fields query string false A list of fields to exclude from the response. Example responses 200 Response { \"permissions\": [ \"string\" ] } Responses Status Meaning Description Schema 200 OK none MyPermissionsResponse This operation does not require authentication uploads_remove_role Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Content-Type\": []string{\"application/json\"}, \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"POST\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/uploads/{pulp_id}/remove_role/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const inputBody = '{ \"size\": 0 }'; const headers = { 'Content-Type':'application/json', 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/uploads/{pulp_id}/remove_role/', { method: 'POST', body: inputBody, headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Content-Type': 'application/json', 'Accept': 'application/json' } r = requests.post('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/uploads/{pulp_id}/remove_role/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Content-Type' => 'application/json', 'Accept' => 'application/json' } result = RestClient.post 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/uploads/{pulp_id}/remove_role/', params: { }, headers: headers p JSON.parse(result) POST /api/automation-hub/pulp/api/v3/uploads/{pulp_id}/remove_role/ Remove a role for this object from users/groups. Body parameter { \"size\": 0 } size: 0 Parameters Name In Type Required Description pulp_id path string(uuid) true A UUID string identifying this upload. body body Upload true none Example responses 201 Response { \"users\": [], \"groups\": [], \"role\": \"string\" } Responses Status Meaning Description Schema 201 Created none NestedRoleResponse This operation does not require authentication Users users_list Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/users/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/users/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/users/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/users/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/pulp/api/v3/users/ List users ViewSet for User. NOTE: This API endpoint is in \"tech preview\" and subject to change Parameters Name In Type Required Description email query string false Filter results where email matches value email__contains query string false Filter results where email contains value email__icontains query string false Filter results where email contains value email__iexact query string false Filter results where email matches value email__in query array[string] false Filter results where email is in a comma-separated list of values first_name query string false Filter results where first_name matches value first_name__contains query string false Filter results where first_name contains value first_name__icontains query string false Filter results where first_name contains value first_name__iexact query string false Filter results where first_name matches value first_name__in query array[string] false Filter results where first_name is in a comma-separated list of values is_active query boolean false Filter results where is_active matches value is_staff query boolean false Filter results where is_staff matches value last_name query string false Filter results where last_name matches value last_name__contains query string false Filter results where last_name contains value last_name__icontains query string false Filter results where last_name contains value last_name__iexact query string false Filter results where last_name matches value last_name__in query array[string] false Filter results where last_name is in a comma-separated list of values limit query integer false Number of results to return per page. offset query integer false The initial index from which to return the results. ordering query array[string] false Ordering username query string false Filter results where username matches value username__contains query string false Filter results where username contains value username__icontains query string false Filter results where username contains value username__iexact query string false Filter results where username matches value username__in query array[string] false Filter results where username is in a comma-separated list of values fields query string false A list of fields to include in the response. exclude_fields query string false A list of fields to exclude from the response. Enumerated Values Parameter Value ordering -auth_token ordering -date_joined ordering -download_logs ordering -email ordering -first_name ordering -groups ordering -id ordering -is_active ordering -is_staff ordering -is_superuser ordering -last_login ordering -last_name ordering -legacynamespace ordering -object_roles ordering -password ordering -pk ordering -user_permissions ordering -username ordering auth_token ordering date_joined ordering download_logs ordering email ordering first_name ordering groups ordering id ordering is_active ordering is_staff ordering is_superuser ordering last_login ordering last_name ordering legacynamespace ordering object_roles ordering password ordering pk ordering user_permissions ordering username Example responses 200 Response { \"meta\": { \"count\": 123 }, \"links\": { \"first\": \"string\", \"previous\": \"string\", \"next\": \"string\", \"last\": \"string\" }, \"data\": [ { \"id\": 0, \"username\": \"string\", \"first_name\": \"string\", \"last_name\": \"string\", \"email\": \"user@example.com\", \"groups\": [ 0 ], \"date_joined\": \"2019-08-24T14:15:22Z\", \"is_superuser\": true, \"auth_provider\": \"string\" } ] } Responses Status Meaning Description Schema 200 OK none PaginatedUserResponseList This operation does not require authentication users_create Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Content-Type\": []string{\"application/json\"}, \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"POST\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/users/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const inputBody = '{ \"username\": \"string\", \"first_name\": \"string\", \"last_name\": \"string\", \"email\": \"user@example.com\", \"groups\": [ 0 ], \"password\": \"string\", \"is_superuser\": true }'; const headers = { 'Content-Type':'application/json', 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/users/', { method: 'POST', body: inputBody, headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Content-Type': 'application/json', 'Accept': 'application/json' } r = requests.post('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/users/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Content-Type' => 'application/json', 'Accept' => 'application/json' } result = RestClient.post 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/users/', params: { }, headers: headers p JSON.parse(result) POST /api/automation-hub/pulp/api/v3/users/ Create an user ViewSet for User. NOTE: This API endpoint is in \"tech preview\" and subject to change Body parameter { \"username\": \"string\", \"first_name\": \"string\", \"last_name\": \"string\", \"email\": \"user@example.com\", \"groups\": [ 0 ], \"password\": \"string\", \"is_superuser\": true } username: string first_name: string last_name: string email: user@example.com groups: - 0 password: string is_superuser: true Parameters Name In Type Required Description body body User true none Example responses 201 Response { \"id\": 0, \"username\": \"string\", \"first_name\": \"string\", \"last_name\": \"string\", \"email\": \"user@example.com\", \"groups\": [ 0 ], \"date_joined\": \"2019-08-24T14:15:22Z\", \"is_superuser\": true, \"auth_provider\": \"string\" } Responses Status Meaning Description Schema 201 Created none UserResponse This operation does not require authentication users_read Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/users/{id}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/users/{id}/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/users/{id}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/users/{id}/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/pulp/api/v3/users/{id}/ Inspect an user ViewSet for User. NOTE: This API endpoint is in \"tech preview\" and subject to change Parameters Name In Type Required Description id path integer true A unique integer value identifying this user. fields query string false A list of fields to include in the response. exclude_fields query string false A list of fields to exclude from the response. Example responses 200 Response { \"id\": 0, \"username\": \"string\", \"first_name\": \"string\", \"last_name\": \"string\", \"email\": \"user@example.com\", \"groups\": [ 0 ], \"date_joined\": \"2019-08-24T14:15:22Z\", \"is_superuser\": true, \"auth_provider\": \"string\" } Responses Status Meaning Description Schema 200 OK none UserResponse This operation does not require authentication users_update Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Content-Type\": []string{\"application/json\"}, \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"PUT\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/users/{id}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const inputBody = '{ \"username\": \"string\", \"first_name\": \"string\", \"last_name\": \"string\", \"email\": \"user@example.com\", \"groups\": [ 0 ], \"password\": \"string\", \"is_superuser\": true }'; const headers = { 'Content-Type':'application/json', 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/users/{id}/', { method: 'PUT', body: inputBody, headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Content-Type': 'application/json', 'Accept': 'application/json' } r = requests.put('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/users/{id}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Content-Type' => 'application/json', 'Accept' => 'application/json' } result = RestClient.put 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/users/{id}/', params: { }, headers: headers p JSON.parse(result) PUT /api/automation-hub/pulp/api/v3/users/{id}/ Update an user ViewSet for User. NOTE: This API endpoint is in \"tech preview\" and subject to change Body parameter { \"username\": \"string\", \"first_name\": \"string\", \"last_name\": \"string\", \"email\": \"user@example.com\", \"groups\": [ 0 ], \"password\": \"string\", \"is_superuser\": true } username: string first_name: string last_name: string email: user@example.com groups: - 0 password: string is_superuser: true Parameters Name In Type Required Description id path integer true A unique integer value identifying this user. body body User true none Example responses 200 Response { \"id\": 0, \"username\": \"string\", \"first_name\": \"string\", \"last_name\": \"string\", \"email\": \"user@example.com\", \"groups\": [ 0 ], \"date_joined\": \"2019-08-24T14:15:22Z\", \"is_superuser\": true, \"auth_provider\": \"string\" } Responses Status Meaning Description Schema 200 OK none UserResponse This operation does not require authentication users_partial_update Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Content-Type\": []string{\"application/json\"}, \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"PATCH\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/users/{id}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const inputBody = '{ \"username\": \"string\", \"first_name\": \"string\", \"last_name\": \"string\", \"email\": \"user@example.com\", \"groups\": [ 0 ], \"password\": \"string\", \"is_superuser\": true }'; const headers = { 'Content-Type':'application/json', 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/users/{id}/', { method: 'PATCH', body: inputBody, headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Content-Type': 'application/json', 'Accept': 'application/json' } r = requests.patch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/users/{id}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Content-Type' => 'application/json', 'Accept' => 'application/json' } result = RestClient.patch 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/users/{id}/', params: { }, headers: headers p JSON.parse(result) PATCH /api/automation-hub/pulp/api/v3/users/{id}/ Update an user ViewSet for User. NOTE: This API endpoint is in \"tech preview\" and subject to change Body parameter { \"username\": \"string\", \"first_name\": \"string\", \"last_name\": \"string\", \"email\": \"user@example.com\", \"groups\": [ 0 ], \"password\": \"string\", \"is_superuser\": true } username: string first_name: string last_name: string email: user@example.com groups: - 0 password: string is_superuser: true Parameters Name In Type Required Description id path integer true A unique integer value identifying this user. body body PatchedUser true none Example responses 200 Response { \"id\": 0, \"username\": \"string\", \"first_name\": \"string\", \"last_name\": \"string\", \"email\": \"user@example.com\", \"groups\": [ 0 ], \"date_joined\": \"2019-08-24T14:15:22Z\", \"is_superuser\": true, \"auth_provider\": \"string\" } Responses Status Meaning Description Schema 200 OK none UserResponse This operation does not require authentication users_delete Code samples package main import ( \"bytes\" \"net/http\" ) func main() { data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"DELETE\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/users/{id}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/users/{id}/', { method: 'DELETE' }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests r = requests.delete('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/users/{id}/') print(r.json()) require 'rest-client' require 'json' result = RestClient.delete 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/users/{id}/', params: { } p JSON.parse(result) DELETE /api/automation-hub/pulp/api/v3/users/{id}/ Delete an user ViewSet for User. NOTE: This API endpoint is in \"tech preview\" and subject to change Parameters Name In Type Required Description id path integer true A unique integer value identifying this user. Responses Status Meaning Description Schema 204 No Content No response body None This operation does not require authentication Users: Roles users_roles_list Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/users/{user_pk}/roles/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/users/{user_pk}/roles/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/users/{user_pk}/roles/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/users/{user_pk}/roles/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/pulp/api/v3/users/{user_pk}/roles/ List user roles ViewSet for UserRole. NOTE: This API endpoint is in \"tech preview\" and subject to change Parameters Name In Type Required Description content_object query string false content_object limit query integer false Number of results to return per page. offset query integer false The initial index from which to return the results. ordering query array[string] false Ordering role query string false none role__contains query string false none role__icontains query string false none role__in query array[string] false Multiple values may be separated by commas. role__startswith query string false none user_pk path string true none fields query string false A list of fields to include in the response. exclude_fields query string false A list of fields to exclude from the response. Enumerated Values Parameter Value ordering -description ordering -pk ordering -pulp_created ordering -role ordering description ordering pk ordering pulp_created ordering role Example responses 200 Response { \"count\": 123, \"next\": \"http://api.example.org/accounts/?offset=400&limit=100\", \"previous\": \"http://api.example.org/accounts/?offset=200&limit=100\", \"results\": [ { \"pulp_href\": \"http://example.com\", \"pulp_created\": \"2019-08-24T14:15:22Z\", \"role\": \"string\", \"content_object\": \"string\", \"description\": \"string\", \"permissions\": [ \"string\" ] } ] } Responses Status Meaning Description Schema 200 OK none PaginatedUserRoleResponseList This operation does not require authentication users_roles_create Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Content-Type\": []string{\"application/json\"}, \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"POST\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/users/{user_pk}/roles/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const inputBody = '{ \"role\": \"string\", \"content_object\": \"string\" }'; const headers = { 'Content-Type':'application/json', 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/users/{user_pk}/roles/', { method: 'POST', body: inputBody, headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Content-Type': 'application/json', 'Accept': 'application/json' } r = requests.post('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/users/{user_pk}/roles/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Content-Type' => 'application/json', 'Accept' => 'application/json' } result = RestClient.post 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/users/{user_pk}/roles/', params: { }, headers: headers p JSON.parse(result) POST /api/automation-hub/pulp/api/v3/users/{user_pk}/roles/ Create an user role ViewSet for UserRole. NOTE: This API endpoint is in \"tech preview\" and subject to change Body parameter { \"role\": \"string\", \"content_object\": \"string\" } role: string content_object: string Parameters Name In Type Required Description user_pk path string true none body body UserRole true none Example responses 201 Response { \"pulp_href\": \"http://example.com\", \"pulp_created\": \"2019-08-24T14:15:22Z\", \"role\": \"string\", \"content_object\": \"string\", \"description\": \"string\", \"permissions\": [ \"string\" ] } Responses Status Meaning Description Schema 201 Created none UserRoleResponse This operation does not require authentication users_roles_read Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/users/{user_pk}/roles/{pulp_id}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/users/{user_pk}/roles/{pulp_id}/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/users/{user_pk}/roles/{pulp_id}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/users/{user_pk}/roles/{pulp_id}/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/pulp/api/v3/users/{user_pk}/roles/{pulp_id}/ Inspect an user role ViewSet for UserRole. NOTE: This API endpoint is in \"tech preview\" and subject to change Parameters Name In Type Required Description pulp_id path string(uuid) true A UUID string identifying this user role. user_pk path string true none fields query string false A list of fields to include in the response. exclude_fields query string false A list of fields to exclude from the response. Example responses 200 Response { \"pulp_href\": \"http://example.com\", \"pulp_created\": \"2019-08-24T14:15:22Z\", \"role\": \"string\", \"content_object\": \"string\", \"description\": \"string\", \"permissions\": [ \"string\" ] } Responses Status Meaning Description Schema 200 OK none UserRoleResponse This operation does not require authentication users_roles_delete Code samples package main import ( \"bytes\" \"net/http\" ) func main() { data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"DELETE\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/users/{user_pk}/roles/{pulp_id}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/users/{user_pk}/roles/{pulp_id}/', { method: 'DELETE' }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests r = requests.delete('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/users/{user_pk}/roles/{pulp_id}/') print(r.json()) require 'rest-client' require 'json' result = RestClient.delete 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/users/{user_pk}/roles/{pulp_id}/', params: { } p JSON.parse(result) DELETE /api/automation-hub/pulp/api/v3/users/{user_pk}/roles/{pulp_id}/ Delete an user role ViewSet for UserRole. NOTE: This API endpoint is in \"tech preview\" and subject to change Parameters Name In Type Required Description pulp_id path string(uuid) true A UUID string identifying this user role. user_pk path string true none Responses Status Meaning Description Schema 204 No Content No response body None This operation does not require authentication Workers workers_list Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/workers/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/workers/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/workers/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/workers/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/pulp/api/v3/workers/ List workers A customized named ModelViewSet that knows how to register itself with the Pulp API router. This viewset is discoverable by its name. \"Normal\" Django Models and Master/Detail models are supported by the register_with method. Attributes: lookup_field (str): The name of the field by which an object should be looked up, in addition to any parent lookups if this ViewSet is nested. Defaults to 'pk' endpoint_name (str): The name of the final path segment that should identify the ViewSet's collection endpoint. nest_prefix (str): Optional prefix under which this ViewSet should be nested. This must correspond to the \"parent_prefix\" of a router with rest_framework_nested.NestedMixin. None indicates this ViewSet should not be nested. parent_lookup_kwargs (dict): Optional mapping of key names that would appear in self.kwargs to django model filter expressions that can be used with the corresponding value from self.kwargs, used only by a nested ViewSet to filter based on the parent object's identity. schema (DefaultSchema): The schema class to use by default in a viewset. Parameters Name In Type Required Description last_heartbeat query string(date-time) false ISO 8601 formatted dates are supported last_heartbeat__gt query string(date-time) false Filter results where last_heartbeat is greater than value last_heartbeat__gte query string(date-time) false Filter results where last_heartbeat is greater than or equal to value last_heartbeat__lt query string(date-time) false Filter results where last_heartbeat is less than value last_heartbeat__lte query string(date-time) false Filter results where last_heartbeat is less than or equal to value last_heartbeat__range query array[string] false Filter results where last_heartbeat is between two comma separated values limit query integer false Number of results to return per page. missing query boolean false none name query string false none name__contains query string false Filter results where name contains value name__icontains query string false Filter results where name contains value name__in query array[string] false Filter results where name is in a comma-separated list of values name__startswith query string false Filter results where name starts with value offset query integer false The initial index from which to return the results. online query boolean false none ordering query array[string] false Ordering fields query string false A list of fields to include in the response. exclude_fields query string false A list of fields to exclude from the response. Enumerated Values Parameter Value ordering -group_roles ordering -last_heartbeat ordering -name ordering -pk ordering -pulp_created ordering -pulp_id ordering -pulp_labels ordering -pulp_last_updated ordering -tasks ordering -user_roles ordering group_roles ordering last_heartbeat ordering name ordering pk ordering pulp_created ordering pulp_id ordering pulp_labels ordering pulp_last_updated ordering tasks ordering user_roles Example responses 200 Response { \"count\": 123, \"next\": \"http://api.example.org/accounts/?offset=400&limit=100\", \"previous\": \"http://api.example.org/accounts/?offset=200&limit=100\", \"results\": [ { \"pulp_href\": \"http://example.com\", \"pulp_created\": \"2019-08-24T14:15:22Z\", \"name\": \"string\", \"last_heartbeat\": \"2019-08-24T14:15:22Z\", \"current_task\": \"http://example.com\" } ] } Responses Status Meaning Description Schema 200 OK none PaginatedWorkerResponseList This operation does not require authentication workers_read Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/workers/{pulp_id}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/workers/{pulp_id}/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/workers/{pulp_id}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/workers/{pulp_id}/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/pulp/api/v3/workers/{pulp_id}/ Inspect a worker A customized named ModelViewSet that knows how to register itself with the Pulp API router. This viewset is discoverable by its name. \"Normal\" Django Models and Master/Detail models are supported by the register_with method. Attributes: lookup_field (str): The name of the field by which an object should be looked up, in addition to any parent lookups if this ViewSet is nested. Defaults to 'pk' endpoint_name (str): The name of the final path segment that should identify the ViewSet's collection endpoint. nest_prefix (str): Optional prefix under which this ViewSet should be nested. This must correspond to the \"parent_prefix\" of a router with rest_framework_nested.NestedMixin. None indicates this ViewSet should not be nested. parent_lookup_kwargs (dict): Optional mapping of key names that would appear in self.kwargs to django model filter expressions that can be used with the corresponding value from self.kwargs, used only by a nested ViewSet to filter based on the parent object's identity. schema (DefaultSchema): The schema class to use by default in a viewset. Parameters Name In Type Required Description pulp_id path string(uuid) true A UUID string identifying this worker. fields query string false A list of fields to include in the response. exclude_fields query string false A list of fields to exclude from the response. Example responses 200 Response { \"pulp_href\": \"http://example.com\", \"pulp_created\": \"2019-08-24T14:15:22Z\", \"name\": \"string\", \"last_heartbeat\": \"2019-08-24T14:15:22Z\", \"current_task\": \"http://example.com\" } Responses Status Meaning Description Schema 200 OK none WorkerResponse This operation does not require authentication Api: V3 api_automation_hub_v3_read Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/v3/ Legacy v3 endpoint. Example responses 202 Response { \"published\": \"2019-08-24T14:15:22Z\" } Responses Status Meaning Description Schema 202 Accepted none RepoMetadataResponse 302 Found No response body None This operation does not require authentication Api: V3 Artifacts Collections api_automation_hub_v3_artifacts_collections_get Code samples package main import ( \"bytes\" \"net/http\" ) func main() { data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/artifacts/collections/{path}/{filename}\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/artifacts/collections/{path}/{filename}', { method: 'GET' }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/artifacts/collections/{path}/{filename}') print(r.json()) require 'rest-client' require 'json' result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/artifacts/collections/{path}/{filename}', params: { } p JSON.parse(result) GET /api/automation-hub/v3/artifacts/collections/{path}/{filename} Download collection. Parameters Name In Type Required Description filename path string true none path path string true none fields query string false A list of fields to include in the response. exclude_fields query string false A list of fields to exclude from the response. Responses Status Meaning Description Schema 200 OK No response body None This operation does not require authentication Api: V3 Auth Token api_automation_hub_v3_auth_token_post Code samples package main import ( \"bytes\" \"net/http\" ) func main() { data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"POST\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/auth/token/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/auth/token/', { method: 'POST' }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests r = requests.post('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/auth/token/') print(r.json()) require 'rest-client' require 'json' result = RestClient.post 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/auth/token/', params: { } p JSON.parse(result) POST /api/automation-hub/v3/auth/token/ Create or refresh user token. Responses Status Meaning Description Schema 200 OK No response body None To perform this operation, you must be authenticated by means of one of the following methods: basicAuth api_automation_hub_v3_auth_token_delete Code samples package main import ( \"bytes\" \"net/http\" ) func main() { data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"DELETE\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/auth/token/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/auth/token/', { method: 'DELETE' }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests r = requests.delete('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/auth/token/') print(r.json()) require 'rest-client' require 'json' result = RestClient.delete 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/auth/token/', params: { } p JSON.parse(result) DELETE /api/automation-hub/v3/auth/token/ Invalidate user token. Responses Status Meaning Description Schema 204 No Content No response body None To perform this operation, you must be authenticated by means of one of the following methods: basicAuth Api: V3 Collection_Versions All api_automation_hub_v3_collection_versions_all_get Code samples package main import ( \"bytes\" \"net/http\" ) func main() { data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/collection_versions/all/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/collection_versions/all/', { method: 'GET' }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/collection_versions/all/') print(r.json()) require 'rest-client' require 'json' result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/collection_versions/all/', params: { } p JSON.parse(result) GET /api/automation-hub/v3/collection_versions/all/ Responses Status Meaning Description Schema 200 OK No response body None This operation does not require authentication Api: V3 Collections api_automation_hub_v3_collections_list Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/collections/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/collections/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/collections/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/collections/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/v3/collections/ Legacy v3 endpoint. Parameters Name In Type Required Description deprecated query boolean false none limit query integer false Number of results to return per page. name query string false none namespace query string false none offset query integer false The initial index from which to return the results. ordering query array[string] false Ordering fields query string false A list of fields to include in the response. exclude_fields query string false A list of fields to exclude from the response. Enumerated Values Parameter Value ordering -group_roles ordering -name ordering -namespace ordering -pk ordering -pulp_created ordering -pulp_id ordering -pulp_labels ordering -pulp_last_updated ordering -synclist ordering -user_roles ordering -versions ordering group_roles ordering name ordering namespace ordering pk ordering pulp_created ordering pulp_id ordering pulp_labels ordering pulp_last_updated ordering synclist ordering user_roles ordering versions Example responses 202 Response { \"meta\": { \"count\": 123 }, \"links\": { \"first\": \"string\", \"previous\": \"string\", \"next\": \"string\", \"last\": \"string\" }, \"data\": [ { \"href\": \"string\", \"namespace\": \"string\", \"name\": \"string\", \"deprecated\": true, \"versions_url\": \"string\", \"highest_version\": {}, \"created_at\": \"2019-08-24T14:15:22Z\", \"updated_at\": \"2019-08-24T14:15:22Z\" } ] } Responses Status Meaning Description Schema 202 Accepted none PaginatedCollectionResponseList 302 Found No response body None This operation does not require authentication api_automation_hub_v3_collections_read Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/collections/{namespace}/{name}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/collections/{namespace}/{name}/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/collections/{namespace}/{name}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/collections/{namespace}/{name}/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/v3/collections/{namespace}/{name}/ Legacy v3 endpoint. Parameters Name In Type Required Description name path string true none namespace path string true none fields query string false A list of fields to include in the response. exclude_fields query string false A list of fields to exclude from the response. Example responses 202 Response { \"href\": \"string\", \"namespace\": \"string\", \"name\": \"string\", \"deprecated\": true, \"versions_url\": \"string\", \"highest_version\": {}, \"created_at\": \"2019-08-24T14:15:22Z\", \"updated_at\": \"2019-08-24T14:15:22Z\" } Responses Status Meaning Description Schema 202 Accepted none CollectionResponse 302 Found No response body None This operation does not require authentication api_automation_hub_v3_collections_update Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Content-Type\": []string{\"application/json\"}, \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"PATCH\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/collections/{namespace}/{name}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const inputBody = '{}'; const headers = { 'Content-Type':'application/json', 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/collections/{namespace}/{name}/', { method: 'PATCH', body: inputBody, headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Content-Type': 'application/json', 'Accept': 'application/json' } r = requests.patch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/collections/{namespace}/{name}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Content-Type' => 'application/json', 'Accept' => 'application/json' } result = RestClient.patch 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/collections/{namespace}/{name}/', params: { }, headers: headers p JSON.parse(result) PATCH /api/automation-hub/v3/collections/{namespace}/{name}/ Legacy v3 endpoint. Body parameter {} {} Parameters Name In Type Required Description name path string true none namespace path string true none body body PatchedCollection true none Example responses 202 Response { \"task\": \"http://example.com\" } Responses Status Meaning Description Schema 202 Accepted none AsyncOperationResponse 302 Found No response body None This operation does not require authentication api_automation_hub_v3_collections_delete Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"DELETE\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/collections/{namespace}/{name}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/collections/{namespace}/{name}/', { method: 'DELETE', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.delete('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/collections/{namespace}/{name}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.delete 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/collections/{namespace}/{name}/', params: { }, headers: headers p JSON.parse(result) DELETE /api/automation-hub/v3/collections/{namespace}/{name}/ Legacy v3 endpoint. Parameters Name In Type Required Description name path string true none namespace path string true none Example responses 202 Response { \"task\": \"http://example.com\" } Responses Status Meaning Description Schema 202 Accepted none AsyncOperationResponse 302 Found No response body None This operation does not require authentication Api: V3 Collections Versions api_automation_hub_v3_collections_versions_list Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/collections/{namespace}/{name}/versions/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/collections/{namespace}/{name}/versions/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/collections/{namespace}/{name}/versions/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/collections/{namespace}/{name}/versions/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/v3/collections/{namespace}/{name}/versions/ Legacy v3 endpoint. Parameters Name In Type Required Description is_highest query boolean false none limit query integer false Number of results to return per page. name path string true none name query string false none namespace path string true none namespace query string false none offset query integer false The initial index from which to return the results. ordering query array[string] false Ordering q query string false none repository_version query string false Repository Version referenced by HREF repository_version_added query string false Repository Version referenced by HREF repository_version_removed query string false Repository Version referenced by HREF tags query string false Filter by comma separate list of tags that must all be matched version query string false Filter results where version matches value fields query string false A list of fields to include in the response. exclude_fields query string false A list of fields to exclude from the response. Enumerated Values Parameter Value ordering -_artifacts ordering -authors ordering -collection ordering -content_ptr ordering -contentartifact ordering -contents ordering -dependencies ordering -description ordering -docs_blob ordering -documentation ordering -download_logs ordering -files ordering -group_roles ordering -homepage ordering -is_highest ordering -issues ordering -license ordering -manifest ordering -name ordering -namespace ordering -pk ordering -pulp_created ordering -pulp_id ordering -pulp_labels ordering -pulp_last_updated ordering -pulp_type ordering -repositories ordering -repository ordering -requires_ansible ordering -search_vector ordering -signatures ordering -tags ordering -timestamp_of_interest ordering -upstream_id ordering -user_roles ordering -version ordering -version_memberships ordering _artifacts ordering authors ordering collection ordering content_ptr ordering contentartifact ordering contents ordering dependencies ordering description ordering docs_blob ordering documentation ordering download_logs ordering files ordering group_roles ordering homepage ordering is_highest ordering issues ordering license ordering manifest ordering name ordering namespace ordering pk ordering pulp_created ordering pulp_id ordering pulp_labels ordering pulp_last_updated ordering pulp_type ordering repositories ordering repository ordering requires_ansible ordering search_vector ordering signatures ordering tags ordering timestamp_of_interest ordering upstream_id ordering user_roles ordering version ordering version_memberships Example responses 202 Response { \"meta\": { \"count\": 123 }, \"links\": { \"first\": \"string\", \"previous\": \"string\", \"next\": \"string\", \"last\": \"string\" }, \"data\": [ { \"version\": \"string\", \"href\": \"string\", \"created_at\": \"2019-08-24T14:15:22Z\", \"updated_at\": \"2019-08-24T14:15:22Z\", \"requires_ansible\": \"string\" } ] } Responses Status Meaning Description Schema 202 Accepted none PaginatedCollectionVersionListResponseList 302 Found No response body None This operation does not require authentication api_automation_hub_v3_collections_versions_read Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/collections/{namespace}/{name}/versions/{version}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/collections/{namespace}/{name}/versions/{version}/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/collections/{namespace}/{name}/versions/{version}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/collections/{namespace}/{name}/versions/{version}/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/v3/collections/{namespace}/{name}/versions/{version}/ Legacy v3 endpoint. Parameters Name In Type Required Description name path string true none namespace path string true none version path string true none fields query string false A list of fields to include in the response. exclude_fields query string false A list of fields to exclude from the response. Example responses 202 Response { \"version\": \"string\", \"href\": \"string\", \"created_at\": \"2019-08-24T14:15:22Z\", \"updated_at\": \"2019-08-24T14:15:22Z\", \"requires_ansible\": \"string\", \"artifact\": { \"filename\": \"string\", \"sha256\": \"string\", \"size\": 0 }, \"collection\": { \"id\": \"string\", \"name\": \"string\", \"href\": \"string\" }, \"download_url\": \"string\", \"name\": \"string\", \"namespace\": { \"name\": \"string\" }, \"signatures\": \"string\", \"metadata\": { \"authors\": [ \"string\" ], \"contents\": {}, \"dependencies\": {}, \"description\": \"string\", \"documentation\": \"string\", \"homepage\": \"string\", \"issues\": \"string\", \"license\": [ \"string\" ], \"repository\": \"string\", \"tags\": [ \"string\" ] }, \"git_url\": \"string\", \"git_commit_sha\": \"string\", \"manifest\": {}, \"files\": {} } Responses Status Meaning Description Schema 202 Accepted none CollectionVersionResponse 302 Found No response body None This operation does not require authentication api_automation_hub_v3_collections_versions_delete Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"DELETE\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/collections/{namespace}/{name}/versions/{version}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/collections/{namespace}/{name}/versions/{version}/', { method: 'DELETE', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.delete('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/collections/{namespace}/{name}/versions/{version}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.delete 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/collections/{namespace}/{name}/versions/{version}/', params: { }, headers: headers p JSON.parse(result) DELETE /api/automation-hub/v3/collections/{namespace}/{name}/versions/{version}/ Legacy v3 endpoint. Parameters Name In Type Required Description name path string true none namespace path string true none version path string true none Example responses 202 Response { \"task\": \"http://example.com\" } Responses Status Meaning Description Schema 202 Accepted none AsyncOperationResponse 302 Found No response body None This operation does not require authentication Api: V3 Collections Versions Copy api_automation_hub_v3_collections_versions_copy_copy_content Code samples package main import ( \"bytes\" \"net/http\" ) func main() { data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"POST\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/collections/{namespace}/{name}/versions/{version}/copy/{source_path}/{dest_path}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/collections/{namespace}/{name}/versions/{version}/copy/{source_path}/{dest_path}/', { method: 'POST' }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests r = requests.post('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/collections/{namespace}/{name}/versions/{version}/copy/{source_path}/{dest_path}/') print(r.json()) require 'rest-client' require 'json' result = RestClient.post 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/collections/{namespace}/{name}/versions/{version}/copy/{source_path}/{dest_path}/', params: { } p JSON.parse(result) POST /api/automation-hub/v3/collections/{namespace}/{name}/versions/{version}/copy/{source_path}/{dest_path}/ Copy collection version from one repository to another. Parameters Name In Type Required Description dest_path path string true none name path string true none namespace path string true none source_path path string true none version path string true none Responses Status Meaning Description Schema 200 OK No response body None This operation does not require authentication Api: V3 Collections Versions Docs-Blob api_automation_hub_v3_collections_versions_docs_blob_read Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/collections/{namespace}/{name}/versions/{version}/docs-blob/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/collections/{namespace}/{name}/versions/{version}/docs-blob/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/collections/{namespace}/{name}/versions/{version}/docs-blob/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/collections/{namespace}/{name}/versions/{version}/docs-blob/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/v3/collections/{namespace}/{name}/versions/{version}/docs-blob/ Legacy v3 endpoint. Parameters Name In Type Required Description name path string true none namespace path string true none version path string true none fields query string false A list of fields to include in the response. exclude_fields query string false A list of fields to exclude from the response. Example responses 202 Response { \"docs_blob\": {} } Responses Status Meaning Description Schema 202 Accepted none CollectionVersionDocsResponse 302 Found No response body None This operation does not require authentication Api: V3 Collections Versions Move api_automation_hub_v3_collections_versions_move_move_content Code samples package main import ( \"bytes\" \"net/http\" ) func main() { data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"POST\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/collections/{namespace}/{name}/versions/{version}/move/{source_path}/{dest_path}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/collections/{namespace}/{name}/versions/{version}/move/{source_path}/{dest_path}/', { method: 'POST' }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests r = requests.post('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/collections/{namespace}/{name}/versions/{version}/move/{source_path}/{dest_path}/') print(r.json()) require 'rest-client' require 'json' result = RestClient.post 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/collections/{namespace}/{name}/versions/{version}/move/{source_path}/{dest_path}/', params: { } p JSON.parse(result) POST /api/automation-hub/v3/collections/{namespace}/{name}/versions/{version}/move/{source_path}/{dest_path}/ Remove content from source repo and add to destination repo. Creates new RepositoryVersion of source repo without content included. Creates new RepositoryVersion of destination repo with content included. Parameters Name In Type Required Description dest_path path string true none name path string true none namespace path string true none source_path path string true none version path string true none Responses Status Meaning Description Schema 200 OK No response body None This operation does not require authentication Api: V3 Collections All api_automation_hub_v3_collections_all_get Code samples package main import ( \"bytes\" \"net/http\" ) func main() { data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/collections/all/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/collections/all/', { method: 'GET' }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/collections/all/') print(r.json()) require 'rest-client' require 'json' result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/collections/all/', params: { } p JSON.parse(result) GET /api/automation-hub/v3/collections/all/ Responses Status Meaning Description Schema 200 OK No response body None This operation does not require authentication Api: V3 Excludes api_automation_hub_v3_excludes_read Code samples package main import ( \"bytes\" \"net/http\" ) func main() { data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/excludes/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/excludes/', { method: 'GET' }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/excludes/') print(r.json()) require 'rest-client' require 'json' result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/excludes/', params: { } p JSON.parse(result) GET /api/automation-hub/v3/excludes/ Parameters Name In Type Required Description format query string false none fields query string false A list of fields to include in the response. exclude_fields query string false A list of fields to exclude from the response. Enumerated Values Parameter Value format json format yaml Responses Status Meaning Description Schema 200 OK No response body None This operation does not require authentication Api: V3 Imports Collections api_automation_hub_v3_imports_collections_read Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/imports/collections/{task}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/imports/collections/{task}/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/imports/collections/{task}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/imports/collections/{task}/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/v3/imports/collections/{task}/ Inspect a collection import Legacy v3 endpoint. Parameters Name In Type Required Description task path string(uuid) true A unique value identifying this collection import. fields query string false A list of fields to include in the response. exclude_fields query string false A list of fields to exclude from the response. Example responses 202 Response { \"id\": \"497f6eca-6276-4993-bfeb-53cbbbba6f08\", \"state\": \"string\", \"created_at\": \"2019-08-24T14:15:22Z\", \"updated_at\": \"2019-08-24T14:15:22Z\", \"started_at\": \"2019-08-24T14:15:22Z\", \"finished_at\": \"2019-08-24T14:15:22Z\", \"error\": {}, \"messages\": {} } Responses Status Meaning Description Schema 202 Accepted none CollectionImportDetailResponse 302 Found No response body None This operation does not require authentication Api: V3 Namespaces api_automation_hub_v3_namespaces_list Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/namespaces/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/namespaces/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/namespaces/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/namespaces/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/v3/namespaces/ List namespaces Parameters Name In Type Required Description company query string false none keywords query string false none limit query integer false Number of results to return per page. name query string false none offset query integer false The initial index from which to return the results. sort query array[string] false Ordering fields query string false A list of fields to include in the response. exclude_fields query string false A list of fields to exclude from the response. Enumerated Values Parameter Value sort -company sort -id sort -name sort company sort id sort name Example responses 200 Response { \"meta\": { \"count\": 123 }, \"links\": { \"first\": \"string\", \"previous\": \"string\", \"next\": \"string\", \"last\": \"string\" }, \"data\": [ { \"pulp_href\": \"http://example.com\", \"id\": 0, \"name\": \"string\", \"company\": \"string\", \"email\": \"string\", \"avatar_url\": \"http://example.com\", \"description\": \"string\", \"groups\": \"string\", \"related_fields\": { \"my_permissions\": {} } } ] } Responses Status Meaning Description Schema 200 OK none PaginatedNamespaceSummaryResponseList This operation does not require authentication api_automation_hub_v3_namespaces_create Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Content-Type\": []string{\"application/json\"}, \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"POST\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/namespaces/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const inputBody = '{ \"name\": \"string\", \"company\": \"string\", \"email\": \"string\", \"avatar_url\": \"http://example.com\", \"description\": \"string\", \"links\": [ { \"name\": \"string\", \"url\": \"string\" } ], \"groups\": \"string\", \"resources\": \"string\" }'; const headers = { 'Content-Type':'application/json', 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/namespaces/', { method: 'POST', body: inputBody, headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Content-Type': 'application/json', 'Accept': 'application/json' } r = requests.post('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/namespaces/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Content-Type' => 'application/json', 'Accept' => 'application/json' } result = RestClient.post 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/namespaces/', params: { }, headers: headers p JSON.parse(result) POST /api/automation-hub/v3/namespaces/ Create a namespace Override to validate for name duplication before serializer validation. Body parameter { \"name\": \"string\", \"company\": \"string\", \"email\": \"string\", \"avatar_url\": \"http://example.com\", \"description\": \"string\", \"links\": [ { \"name\": \"string\", \"url\": \"string\" } ], \"groups\": \"string\", \"resources\": \"string\" } name: string company: string email: string avatar_url: http://example.com description: string links: - name: string url: string groups: string resources: string Parameters Name In Type Required Description body body Namespace true none Example responses 201 Response { \"pulp_href\": \"http://example.com\", \"id\": 0, \"name\": \"string\", \"company\": \"string\", \"email\": \"string\", \"avatar_url\": \"http://example.com\", \"description\": \"string\", \"links\": [ { \"name\": \"string\", \"url\": \"string\" } ], \"groups\": \"string\", \"resources\": \"string\", \"related_fields\": { \"my_permissions\": {} } } Responses Status Meaning Description Schema 201 Created none NamespaceResponse This operation does not require authentication api_automation_hub_v3_namespaces_read Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/namespaces/{name}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/namespaces/{name}/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/namespaces/{name}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/namespaces/{name}/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/v3/namespaces/{name}/ Inspect a namespace Parameters Name In Type Required Description name path string true none fields query string false A list of fields to include in the response. exclude_fields query string false A list of fields to exclude from the response. Example responses 200 Response { \"pulp_href\": \"http://example.com\", \"id\": 0, \"name\": \"string\", \"company\": \"string\", \"email\": \"string\", \"avatar_url\": \"http://example.com\", \"description\": \"string\", \"links\": [ { \"name\": \"string\", \"url\": \"string\" } ], \"groups\": \"string\", \"resources\": \"string\", \"related_fields\": { \"my_permissions\": {} } } Responses Status Meaning Description Schema 200 OK none NamespaceResponse This operation does not require authentication api_automation_hub_v3_namespaces_update Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Content-Type\": []string{\"application/json\"}, \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"PUT\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/namespaces/{name}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const inputBody = '{ \"name\": \"string\", \"company\": \"string\", \"email\": \"string\", \"avatar_url\": \"http://example.com\", \"description\": \"string\", \"links\": [ { \"name\": \"string\", \"url\": \"string\" } ], \"groups\": \"string\", \"resources\": \"string\" }'; const headers = { 'Content-Type':'application/json', 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/namespaces/{name}/', { method: 'PUT', body: inputBody, headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Content-Type': 'application/json', 'Accept': 'application/json' } r = requests.put('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/namespaces/{name}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Content-Type' => 'application/json', 'Accept' => 'application/json' } result = RestClient.put 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/namespaces/{name}/', params: { }, headers: headers p JSON.parse(result) PUT /api/automation-hub/v3/namespaces/{name}/ Update a namespace Body parameter { \"name\": \"string\", \"company\": \"string\", \"email\": \"string\", \"avatar_url\": \"http://example.com\", \"description\": \"string\", \"links\": [ { \"name\": \"string\", \"url\": \"string\" } ], \"groups\": \"string\", \"resources\": \"string\" } name: string company: string email: string avatar_url: http://example.com description: string links: - name: string url: string groups: string resources: string Parameters Name In Type Required Description name path string true none body body Namespace true none Example responses 200 Response { \"pulp_href\": \"http://example.com\", \"id\": 0, \"name\": \"string\", \"company\": \"string\", \"email\": \"string\", \"avatar_url\": \"http://example.com\", \"description\": \"string\", \"links\": [ { \"name\": \"string\", \"url\": \"string\" } ], \"groups\": \"string\", \"resources\": \"string\", \"related_fields\": { \"my_permissions\": {} } } Responses Status Meaning Description Schema 200 OK none NamespaceResponse This operation does not require authentication api_automation_hub_v3_namespaces_partial_update Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Content-Type\": []string{\"application/json\"}, \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"PATCH\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/namespaces/{name}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const inputBody = '{ \"name\": \"string\", \"company\": \"string\", \"email\": \"string\", \"avatar_url\": \"http://example.com\", \"description\": \"string\", \"links\": [ { \"name\": \"string\", \"url\": \"string\" } ], \"groups\": \"string\", \"resources\": \"string\" }'; const headers = { 'Content-Type':'application/json', 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/namespaces/{name}/', { method: 'PATCH', body: inputBody, headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Content-Type': 'application/json', 'Accept': 'application/json' } r = requests.patch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/namespaces/{name}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Content-Type' => 'application/json', 'Accept' => 'application/json' } result = RestClient.patch 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/namespaces/{name}/', params: { }, headers: headers p JSON.parse(result) PATCH /api/automation-hub/v3/namespaces/{name}/ Update a namespace Body parameter { \"name\": \"string\", \"company\": \"string\", \"email\": \"string\", \"avatar_url\": \"http://example.com\", \"description\": \"string\", \"links\": [ { \"name\": \"string\", \"url\": \"string\" } ], \"groups\": \"string\", \"resources\": \"string\" } name: string company: string email: string avatar_url: http://example.com description: string links: - name: string url: string groups: string resources: string Parameters Name In Type Required Description name path string true none body body PatchedNamespace true none Example responses 200 Response { \"pulp_href\": \"http://example.com\", \"id\": 0, \"name\": \"string\", \"company\": \"string\", \"email\": \"string\", \"avatar_url\": \"http://example.com\", \"description\": \"string\", \"links\": [ { \"name\": \"string\", \"url\": \"string\" } ], \"groups\": \"string\", \"resources\": \"string\", \"related_fields\": { \"my_permissions\": {} } } Responses Status Meaning Description Schema 200 OK none NamespaceResponse This operation does not require authentication api_automation_hub_v3_namespaces_delete Code samples package main import ( \"bytes\" \"net/http\" ) func main() { data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"DELETE\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/namespaces/{name}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/namespaces/{name}/', { method: 'DELETE' }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests r = requests.delete('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/namespaces/{name}/') print(r.json()) require 'rest-client' require 'json' result = RestClient.delete 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/namespaces/{name}/', params: { } p JSON.parse(result) DELETE /api/automation-hub/v3/namespaces/{name}/ Delete a namespace Delete a namespace. Perform a check to see if there are any collections in the namespace. If there are, return a failure. Delete the inbound pulp distro and repository Delete the namespace object. return: Response(status=204) Parameters Name In Type Required Description name path string true none Responses Status Meaning Description Schema 204 No Content No response body None This operation does not require authentication Api: V3 Openapi.Json api_automation_hub_v3_openapi.json_get Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/vnd.oai.openapi+json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/openapi.json\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/vnd.oai.openapi+json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/openapi.json', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/vnd.oai.openapi+json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/openapi.json', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/vnd.oai.openapi+json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/openapi.json', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/v3/openapi.json OpenApi3 schema for this API. Format can be selected via content negotiation. YAML: application/vnd.oai.openapi JSON: application/vnd.oai.openapi+json Parameters Name In Type Required Description lang query string false none fields query string false A list of fields to include in the response. exclude_fields query string false A list of fields to exclude from the response. Enumerated Values Parameter Value lang en-us lang es lang fr lang ja lang ko lang nl lang zh-hans Example responses 200 Response {} Responses Status Meaning Description Schema 200 OK none Inline Response Schema To perform this operation, you must be authenticated by means of one of the following methods: None Api: V3 Openapi.Yaml api_automation_hub_v3_openapi.yaml_get Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/vnd.oai.openapi\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/openapi.yaml\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/vnd.oai.openapi' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/openapi.yaml', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/vnd.oai.openapi' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/openapi.yaml', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/vnd.oai.openapi' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/openapi.yaml', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/v3/openapi.yaml OpenApi3 schema for this API. Format can be selected via content negotiation. YAML: application/vnd.oai.openapi JSON: application/vnd.oai.openapi+json Parameters Name In Type Required Description lang query string false none fields query string false A list of fields to include in the response. exclude_fields query string false A list of fields to exclude from the response. Enumerated Values Parameter Value lang en-us lang es lang fr lang ja lang ko lang nl lang zh-hans Example responses 200 Response Responses Status Meaning Description Schema 200 OK none Inline Response Schema To perform this operation, you must be authenticated by means of one of the following methods: None Api: V3 Plugin Ansible Client-Configuration api_automation_hub_v3_plugin_ansible_client_configuration_get Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/plugin/ansible/client-configuration/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/plugin/ansible/client-configuration/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/plugin/ansible/client-configuration/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/plugin/ansible/client-configuration/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/v3/plugin/ansible/client-configuration/ Get the client configs. Example responses 200 Response { \"default_distribution_path\": \"string\" } Responses Status Meaning Description Schema 200 OK none ClientConfigurationResponse This operation does not require authentication Api: V3 Plugin Ansible Content Collections api_automation_hub_v3_plugin_ansible_content_collections_read Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/plugin/ansible/content/{distro_base_path}/collections/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/plugin/ansible/content/{distro_base_path}/collections/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/plugin/ansible/content/{distro_base_path}/collections/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/plugin/ansible/content/{distro_base_path}/collections/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/v3/plugin/ansible/content/{distro_base_path}/collections/ ViewSet for Repository Metadata. Parameters Name In Type Required Description distro_base_path path string true none fields query string false A list of fields to include in the response. exclude_fields query string false A list of fields to exclude from the response. Example responses 200 Response { \"published\": \"2019-08-24T14:15:22Z\" } Responses Status Meaning Description Schema 200 OK none RepoMetadataResponse This operation does not require authentication Api: V3 Plugin Ansible Content Collections All-Collections api_automation_hub_v3_plugin_ansible_content_collections_all_collections_list Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/plugin/ansible/content/{distro_base_path}/collections/all-collections/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/plugin/ansible/content/{distro_base_path}/collections/all-collections/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/plugin/ansible/content/{distro_base_path}/collections/all-collections/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/plugin/ansible/content/{distro_base_path}/collections/all-collections/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/v3/plugin/ansible/content/{distro_base_path}/collections/all-collections/ Unpaginated ViewSet for Collections. Parameters Name In Type Required Description deprecated query boolean false none distro_base_path path string true none name query string false none namespace query string false none ordering query array[string] false Ordering fields query string false A list of fields to include in the response. exclude_fields query string false A list of fields to exclude from the response. Enumerated Values Parameter Value ordering -group_roles ordering -name ordering -namespace ordering -pk ordering -pulp_created ordering -pulp_id ordering -pulp_labels ordering -pulp_last_updated ordering -synclist ordering -user_roles ordering -versions ordering group_roles ordering name ordering namespace ordering pk ordering pulp_created ordering pulp_id ordering pulp_labels ordering pulp_last_updated ordering synclist ordering user_roles ordering versions Example responses 200 Response [ { \"href\": \"string\", \"namespace\": \"string\", \"name\": \"string\", \"deprecated\": true, \"versions_url\": \"string\", \"highest_version\": {}, \"created_at\": \"2019-08-24T14:15:22Z\", \"updated_at\": \"2019-08-24T14:15:22Z\" } ] Responses Status Meaning Description Schema 200 OK none Inline Response Schema Status Code 200 Name Type Required Restrictions Description anonymous [ CollectionResponse ] false none [A serializer for a Collection.] \u00bb href string false read-only none \u00bb namespace string false read-only none \u00bb name string false read-only none \u00bb deprecated boolean false read-only none \u00bb versions_url string false read-only none \u00bb highest_version object false read-only none \u00bb created_at string(date-time) false read-only none \u00bb updated_at string(date-time) false read-only none This operation does not require authentication Api: V3 Plugin Ansible Content Collections All-Versions api_automation_hub_v3_plugin_ansible_content_collections_all_versions_list Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/plugin/ansible/content/{distro_base_path}/collections/all-versions/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/plugin/ansible/content/{distro_base_path}/collections/all-versions/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/plugin/ansible/content/{distro_base_path}/collections/all-versions/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/plugin/ansible/content/{distro_base_path}/collections/all-versions/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/v3/plugin/ansible/content/{distro_base_path}/collections/all-versions/ Returns paginated CollectionVersions list. Parameters Name In Type Required Description distro_base_path path string true none fields query string false A list of fields to include in the response. exclude_fields query string false A list of fields to exclude from the response. Example responses 202 Response [ { \"version\": \"string\", \"href\": \"string\", \"created_at\": \"2019-08-24T14:15:22Z\", \"updated_at\": \"2019-08-24T14:15:22Z\", \"requires_ansible\": \"string\", \"artifact\": { \"filename\": \"string\", \"sha256\": \"string\", \"size\": 0 }, \"collection\": { \"id\": \"string\", \"name\": \"string\", \"href\": \"string\" }, \"download_url\": \"string\", \"name\": \"string\", \"namespace\": { \"name\": \"string\" }, \"signatures\": \"string\", \"metadata\": { \"authors\": [ \"string\" ], \"contents\": {}, \"dependencies\": {}, \"description\": \"string\", \"documentation\": \"string\", \"homepage\": \"string\", \"issues\": \"string\", \"license\": [ \"string\" ], \"repository\": \"string\", \"tags\": [ \"string\" ] }, \"git_url\": \"string\", \"git_commit_sha\": \"string\" } ] Responses Status Meaning Description Schema 202 Accepted none Inline Response Schema Status Code 202 Name Type Required Restrictions Description anonymous [ UnpaginatedCollectionVersionResponse ] false none [A serializer for unpaginated CollectionVersion.] \u00bb version string false read-only none \u00bb href string false read-only none \u00bb created_at string(date-time) true none none \u00bb updated_at string(date-time) true none none \u00bb requires_ansible string\u00a6null false none none \u00bb artifact ArtifactRefResponse false read-only A serializer for an Artifact reference. \u00bb\u00bb filename string true none none \u00bb\u00bb sha256 string true none none \u00bb\u00bb size integer true none none \u00bb collection CollectionRefResponse false read-only A serializer for a Collection reference. \u00bb\u00bb id string true none none \u00bb\u00bb name string true none none \u00bb\u00bb href string false read-only none \u00bb download_url string false read-only none \u00bb name string false read-only none \u00bb namespace CollectionNamespaceResponse false read-only A serializer for a Collection Version namespace field. \u00bb\u00bb name string true none none \u00bb signatures string false read-only none \u00bb metadata CollectionMetadataResponse false read-only A serializer for a CollectionVersion metadata. \u00bb\u00bb authors [string] false read-only none \u00bb\u00bb contents object false read-only none \u00bb\u00bb dependencies object false read-only none \u00bb\u00bb description string false read-only none \u00bb\u00bb documentation string false read-only none \u00bb\u00bb homepage string false read-only none \u00bb\u00bb issues string false read-only none \u00bb\u00bb license [string] false read-only none \u00bb\u00bb repository string false read-only none \u00bb\u00bb tags [string] true none none \u00bb git_url string false read-only none \u00bb git_commit_sha string false read-only none This operation does not require authentication Api: V3 Plugin Ansible Content Collections Artifacts api_automation_hub_v3_plugin_ansible_content_collections_artifacts_download Code samples package main import ( \"bytes\" \"net/http\" ) func main() { data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/plugin/ansible/content/{distro_base_path}/collections/artifacts/{filename}\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/plugin/ansible/content/{distro_base_path}/collections/artifacts/{filename}', { method: 'GET' }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/plugin/ansible/content/{distro_base_path}/collections/artifacts/{filename}') print(r.json()) require 'rest-client' require 'json' result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/plugin/ansible/content/{distro_base_path}/collections/artifacts/{filename}', params: { } p JSON.parse(result) GET /api/automation-hub/v3/plugin/ansible/content/{distro_base_path}/collections/artifacts/{filename} Parameters Name In Type Required Description distro_base_path path string true none filename path string true none fields query string false A list of fields to include in the response. exclude_fields query string false A list of fields to exclude from the response. Responses Status Meaning Description Schema 200 OK No response body None This operation does not require authentication Api: V3 Plugin Ansible Content Collections Index api_automation_hub_v3_plugin_ansible_content_collections_index_list Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/plugin/ansible/content/{distro_base_path}/collections/index/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/plugin/ansible/content/{distro_base_path}/collections/index/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/plugin/ansible/content/{distro_base_path}/collections/index/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/plugin/ansible/content/{distro_base_path}/collections/index/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/v3/plugin/ansible/content/{distro_base_path}/collections/index/ ViewSet for Collections. Parameters Name In Type Required Description deprecated query boolean false none distro_base_path path string true none limit query integer false Number of results to return per page. name query string false none namespace query string false none offset query integer false The initial index from which to return the results. ordering query array[string] false Ordering fields query string false A list of fields to include in the response. exclude_fields query string false A list of fields to exclude from the response. Enumerated Values Parameter Value ordering -group_roles ordering -name ordering -namespace ordering -pk ordering -pulp_created ordering -pulp_id ordering -pulp_labels ordering -pulp_last_updated ordering -synclist ordering -user_roles ordering -versions ordering group_roles ordering name ordering namespace ordering pk ordering pulp_created ordering pulp_id ordering pulp_labels ordering pulp_last_updated ordering synclist ordering user_roles ordering versions Example responses 200 Response { \"meta\": { \"count\": 123 }, \"links\": { \"first\": \"string\", \"previous\": \"string\", \"next\": \"string\", \"last\": \"string\" }, \"data\": [ { \"href\": \"string\", \"namespace\": \"string\", \"name\": \"string\", \"deprecated\": true, \"versions_url\": \"string\", \"highest_version\": {}, \"created_at\": \"2019-08-24T14:15:22Z\", \"updated_at\": \"2019-08-24T14:15:22Z\" } ] } Responses Status Meaning Description Schema 200 OK none PaginatedCollectionResponseList This operation does not require authentication api_automation_hub_v3_plugin_ansible_content_collections_index_read Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/plugin/ansible/content/{distro_base_path}/collections/index/{namespace}/{name}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/plugin/ansible/content/{distro_base_path}/collections/index/{namespace}/{name}/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/plugin/ansible/content/{distro_base_path}/collections/index/{namespace}/{name}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/plugin/ansible/content/{distro_base_path}/collections/index/{namespace}/{name}/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/v3/plugin/ansible/content/{distro_base_path}/collections/index/{namespace}/{name}/ ViewSet for Collections. Parameters Name In Type Required Description distro_base_path path string true none name path string true none namespace path string true none fields query string false A list of fields to include in the response. exclude_fields query string false A list of fields to exclude from the response. Example responses 200 Response { \"href\": \"string\", \"namespace\": \"string\", \"name\": \"string\", \"deprecated\": true, \"versions_url\": \"string\", \"highest_version\": {}, \"created_at\": \"2019-08-24T14:15:22Z\", \"updated_at\": \"2019-08-24T14:15:22Z\" } Responses Status Meaning Description Schema 200 OK none CollectionResponse This operation does not require authentication api_automation_hub_v3_plugin_ansible_content_collections_index_update Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Content-Type\": []string{\"application/json\"}, \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"PATCH\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/plugin/ansible/content/{distro_base_path}/collections/index/{namespace}/{name}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const inputBody = '{}'; const headers = { 'Content-Type':'application/json', 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/plugin/ansible/content/{distro_base_path}/collections/index/{namespace}/{name}/', { method: 'PATCH', body: inputBody, headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Content-Type': 'application/json', 'Accept': 'application/json' } r = requests.patch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/plugin/ansible/content/{distro_base_path}/collections/index/{namespace}/{name}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Content-Type' => 'application/json', 'Accept' => 'application/json' } result = RestClient.patch 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/plugin/ansible/content/{distro_base_path}/collections/index/{namespace}/{name}/', params: { }, headers: headers p JSON.parse(result) PATCH /api/automation-hub/v3/plugin/ansible/content/{distro_base_path}/collections/index/{namespace}/{name}/ Trigger an asynchronous update task Body parameter {} {} Parameters Name In Type Required Description distro_base_path path string true none name path string true none namespace path string true none body body PatchedCollection true none Example responses 202 Response { \"task\": \"http://example.com\" } Responses Status Meaning Description Schema 202 Accepted none AsyncOperationResponse This operation does not require authentication api_automation_hub_v3_plugin_ansible_content_collections_index_delete Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"DELETE\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/plugin/ansible/content/{distro_base_path}/collections/index/{namespace}/{name}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/plugin/ansible/content/{distro_base_path}/collections/index/{namespace}/{name}/', { method: 'DELETE', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.delete('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/plugin/ansible/content/{distro_base_path}/collections/index/{namespace}/{name}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.delete 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/plugin/ansible/content/{distro_base_path}/collections/index/{namespace}/{name}/', params: { }, headers: headers p JSON.parse(result) DELETE /api/automation-hub/v3/plugin/ansible/content/{distro_base_path}/collections/index/{namespace}/{name}/ Trigger an asynchronous delete task Parameters Name In Type Required Description distro_base_path path string true none name path string true none namespace path string true none Example responses 202 Response { \"task\": \"http://example.com\" } Responses Status Meaning Description Schema 202 Accepted none AsyncOperationResponse This operation does not require authentication Api: V3 Plugin Ansible Content Collections Index Versions api_automation_hub_v3_plugin_ansible_content_collections_index_versions_list Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/plugin/ansible/content/{distro_base_path}/collections/index/{namespace}/{name}/versions/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/plugin/ansible/content/{distro_base_path}/collections/index/{namespace}/{name}/versions/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/plugin/ansible/content/{distro_base_path}/collections/index/{namespace}/{name}/versions/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/plugin/ansible/content/{distro_base_path}/collections/index/{namespace}/{name}/versions/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/v3/plugin/ansible/content/{distro_base_path}/collections/index/{namespace}/{name}/versions/ Returns paginated CollectionVersions list. Parameters Name In Type Required Description distro_base_path path string true none is_highest query boolean false none limit query integer false Number of results to return per page. name path string true none name query string false none namespace path string true none namespace query string false none offset query integer false The initial index from which to return the results. ordering query array[string] false Ordering q query string false none repository_version query string false Repository Version referenced by HREF repository_version_added query string false Repository Version referenced by HREF repository_version_removed query string false Repository Version referenced by HREF tags query string false Filter by comma separate list of tags that must all be matched version query string false Filter results where version matches value fields query string false A list of fields to include in the response. exclude_fields query string false A list of fields to exclude from the response. Enumerated Values Parameter Value ordering -_artifacts ordering -authors ordering -collection ordering -content_ptr ordering -contentartifact ordering -contents ordering -dependencies ordering -description ordering -docs_blob ordering -documentation ordering -download_logs ordering -files ordering -group_roles ordering -homepage ordering -is_highest ordering -issues ordering -license ordering -manifest ordering -name ordering -namespace ordering -pk ordering -pulp_created ordering -pulp_id ordering -pulp_labels ordering -pulp_last_updated ordering -pulp_type ordering -repositories ordering -repository ordering -requires_ansible ordering -search_vector ordering -signatures ordering -tags ordering -timestamp_of_interest ordering -upstream_id ordering -user_roles ordering -version ordering -version_memberships ordering _artifacts ordering authors ordering collection ordering content_ptr ordering contentartifact ordering contents ordering dependencies ordering description ordering docs_blob ordering documentation ordering download_logs ordering files ordering group_roles ordering homepage ordering is_highest ordering issues ordering license ordering manifest ordering name ordering namespace ordering pk ordering pulp_created ordering pulp_id ordering pulp_labels ordering pulp_last_updated ordering pulp_type ordering repositories ordering repository ordering requires_ansible ordering search_vector ordering signatures ordering tags ordering timestamp_of_interest ordering upstream_id ordering user_roles ordering version ordering version_memberships Example responses 202 Response { \"meta\": { \"count\": 123 }, \"links\": { \"first\": \"string\", \"previous\": \"string\", \"next\": \"string\", \"last\": \"string\" }, \"data\": [ { \"version\": \"string\", \"href\": \"string\", \"created_at\": \"2019-08-24T14:15:22Z\", \"updated_at\": \"2019-08-24T14:15:22Z\", \"requires_ansible\": \"string\" } ] } Responses Status Meaning Description Schema 202 Accepted none PaginatedCollectionVersionListResponseList This operation does not require authentication api_automation_hub_v3_plugin_ansible_content_collections_index_versions_read Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/plugin/ansible/content/{distro_base_path}/collections/index/{namespace}/{name}/versions/{version}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/plugin/ansible/content/{distro_base_path}/collections/index/{namespace}/{name}/versions/{version}/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/plugin/ansible/content/{distro_base_path}/collections/index/{namespace}/{name}/versions/{version}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/plugin/ansible/content/{distro_base_path}/collections/index/{namespace}/{name}/versions/{version}/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/v3/plugin/ansible/content/{distro_base_path}/collections/index/{namespace}/{name}/versions/{version}/ Returns a CollectionVersion object. Parameters Name In Type Required Description distro_base_path path string true none name path string true none namespace path string true none version path string true none fields query string false A list of fields to include in the response. exclude_fields query string false A list of fields to exclude from the response. Example responses 200 Response { \"version\": \"string\", \"href\": \"string\", \"created_at\": \"2019-08-24T14:15:22Z\", \"updated_at\": \"2019-08-24T14:15:22Z\", \"requires_ansible\": \"string\", \"artifact\": { \"filename\": \"string\", \"sha256\": \"string\", \"size\": 0 }, \"collection\": { \"id\": \"string\", \"name\": \"string\", \"href\": \"string\" }, \"download_url\": \"string\", \"name\": \"string\", \"namespace\": { \"name\": \"string\" }, \"signatures\": \"string\", \"metadata\": { \"authors\": [ \"string\" ], \"contents\": {}, \"dependencies\": {}, \"description\": \"string\", \"documentation\": \"string\", \"homepage\": \"string\", \"issues\": \"string\", \"license\": [ \"string\" ], \"repository\": \"string\", \"tags\": [ \"string\" ] }, \"git_url\": \"string\", \"git_commit_sha\": \"string\", \"manifest\": {}, \"files\": {} } Responses Status Meaning Description Schema 200 OK none CollectionVersionResponse This operation does not require authentication api_automation_hub_v3_plugin_ansible_content_collections_index_versions_delete Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"DELETE\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/plugin/ansible/content/{distro_base_path}/collections/index/{namespace}/{name}/versions/{version}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/plugin/ansible/content/{distro_base_path}/collections/index/{namespace}/{name}/versions/{version}/', { method: 'DELETE', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.delete('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/plugin/ansible/content/{distro_base_path}/collections/index/{namespace}/{name}/versions/{version}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.delete 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/plugin/ansible/content/{distro_base_path}/collections/index/{namespace}/{name}/versions/{version}/', params: { }, headers: headers p JSON.parse(result) DELETE /api/automation-hub/v3/plugin/ansible/content/{distro_base_path}/collections/index/{namespace}/{name}/versions/{version}/ Trigger an asynchronous delete task Parameters Name In Type Required Description distro_base_path path string true none name path string true none namespace path string true none version path string true none Example responses 202 Response { \"task\": \"http://example.com\" } Responses Status Meaning Description Schema 202 Accepted none AsyncOperationResponse This operation does not require authentication Api: V3 Plugin Ansible Content Collections Index Versions Docs-Blob api_automation_hub_v3_plugin_ansible_content_collections_index_versions_docs_blob_read Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/plugin/ansible/content/{distro_base_path}/collections/index/{namespace}/{name}/versions/{version}/docs-blob/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/plugin/ansible/content/{distro_base_path}/collections/index/{namespace}/{name}/versions/{version}/docs-blob/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/plugin/ansible/content/{distro_base_path}/collections/index/{namespace}/{name}/versions/{version}/docs-blob/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/plugin/ansible/content/{distro_base_path}/collections/index/{namespace}/{name}/versions/{version}/docs-blob/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/v3/plugin/ansible/content/{distro_base_path}/collections/index/{namespace}/{name}/versions/{version}/docs-blob/ Returns a CollectionVersion object. Parameters Name In Type Required Description distro_base_path path string true none name path string true none namespace path string true none version path string true none fields query string false A list of fields to include in the response. exclude_fields query string false A list of fields to exclude from the response. Example responses 200 Response { \"docs_blob\": {} } Responses Status Meaning Description Schema 200 OK none CollectionVersionDocsResponse This operation does not require authentication Api: V3 Plugin Ansible Imports Collections api_automation_hub_v3_plugin_ansible_imports_collections_read Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/plugin/ansible/imports/collections/{task}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/plugin/ansible/imports/collections/{task}/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/plugin/ansible/imports/collections/{task}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/plugin/ansible/imports/collections/{task}/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/v3/plugin/ansible/imports/collections/{task}/ Inspect a collection import Returns a CollectionImport object. Parameters Name In Type Required Description since query string false Filter messages since a given timestamp task path string(uuid) true A unique value identifying this collection import. fields query string false A list of fields to include in the response. exclude_fields query string false A list of fields to exclude from the response. Example responses 200 Response { \"id\": \"497f6eca-6276-4993-bfeb-53cbbbba6f08\", \"state\": \"string\", \"created_at\": \"2019-08-24T14:15:22Z\", \"updated_at\": \"2019-08-24T14:15:22Z\", \"started_at\": \"2019-08-24T14:15:22Z\", \"finished_at\": \"2019-08-24T14:15:22Z\", \"error\": {}, \"messages\": {} } Responses Status Meaning Description Schema 200 OK none CollectionImportDetailResponse This operation does not require authentication Pulp: Api pulp_api_get Code samples package main import ( \"bytes\" \"net/http\" ) func main() { data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp/api/{api_path}\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp/api/{api_path}', { method: 'GET' }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp/api/{api_path}') print(r.json()) require 'rest-client' require 'json' result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp/api/{api_path}', params: { } p JSON.parse(result) GET /pulp/api/{api_path} Parameters Name In Type Required Description api_path path string true none fields query string false A list of fields to include in the response. exclude_fields query string false A list of fields to exclude from the response. Responses Status Meaning Description Schema 200 OK No response body None This operation does not require authentication Pulp: V3 Ansible Copy copy_content Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Content-Type\": []string{\"application/json\"}, \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"POST\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp/api/v3/ansible/copy/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const inputBody = '{ \"config\": {} }'; const headers = { 'Content-Type':'application/json', 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp/api/v3/ansible/copy/', { method: 'POST', body: inputBody, headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Content-Type': 'application/json', 'Accept': 'application/json' } r = requests.post('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp/api/v3/ansible/copy/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Content-Type' => 'application/json', 'Accept' => 'application/json' } result = RestClient.post 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp/api/v3/ansible/copy/', params: { }, headers: headers p JSON.parse(result) POST /pulp/api/v3/ansible/copy/ Copy content Trigger an asynchronous task to copy ansible content from one repository into another, creating a new repository version. Body parameter { \"config\": {} } config: {} Parameters Name In Type Required Description body body Copy true none Example responses 202 Response { \"task\": \"http://example.com\" } Responses Status Meaning Description Schema 202 Accepted none AsyncOperationResponse This operation does not require authentication Pulp_Ansible: Api pulp_ansible_galaxy_api_get Code samples package main import ( \"bytes\" \"net/http\" ) func main() { data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/{path}/api/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/{path}/api/', { method: 'GET' }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/{path}/api/') print(r.json()) require 'rest-client' require 'json' result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/{path}/api/', params: { } p JSON.parse(result) GET /pulp_ansible/galaxy/{path}/api/ Return a response to the \"GET\" action. Parameters Name In Type Required Description path path string true none fields query string false A list of fields to include in the response. exclude_fields query string false A list of fields to exclude from the response. Responses Status Meaning Description Schema 200 OK No response body None This operation does not require authentication Pulp_Ansible: Api V1 Roles pulp_ansible_galaxy_api_v1_roles_get Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/{path}/api/v1/roles/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/{path}/api/v1/roles/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/{path}/api/v1/roles/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/{path}/api/v1/roles/', params: { }, headers: headers p JSON.parse(result) GET /pulp_ansible/galaxy/{path}/api/v1/roles/ APIView for Roles. Parameters Name In Type Required Description limit query integer false Number of results to return per page. offset query integer false The initial index from which to return the results. path path string true none fields query string false A list of fields to include in the response. exclude_fields query string false A list of fields to exclude from the response. Example responses 200 Response { \"count\": 123, \"next\": \"http://api.example.org/accounts/?offset=400&limit=100\", \"previous\": \"http://api.example.org/accounts/?offset=200&limit=100\", \"results\": [ { \"id\": \"string\", \"name\": \"string\", \"namespace\": \"string\" } ] } Responses Status Meaning Description Schema 200 OK none PaginatedGalaxyRoleResponseList This operation does not require authentication Pulp_Ansible: Api V1 Roles Versions pulp_ansible_galaxy_api_v1_roles_versions_get Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/{path}/api/v1/roles/{role_pk}/versions/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/{path}/api/v1/roles/{role_pk}/versions/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/{path}/api/v1/roles/{role_pk}/versions/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/{path}/api/v1/roles/{role_pk}/versions/', params: { }, headers: headers p JSON.parse(result) GET /pulp_ansible/galaxy/{path}/api/v1/roles/{role_pk}/versions/ APIView for Role Versions. Parameters Name In Type Required Description limit query integer false Number of results to return per page. offset query integer false The initial index from which to return the results. path path string true none role_pk path string true none fields query string false A list of fields to include in the response. exclude_fields query string false A list of fields to exclude from the response. Example responses 200 Response { \"count\": 123, \"next\": \"http://api.example.org/accounts/?offset=400&limit=100\", \"previous\": \"http://api.example.org/accounts/?offset=200&limit=100\", \"results\": [ { \"name\": \"string\", \"source\": \"string\" } ] } Responses Status Meaning Description Schema 200 OK none PaginatedGalaxyRoleVersionResponseList This operation does not require authentication Pulp_Ansible: Api V2 Collection-Imports pulp_ansible_galaxy_api_v2_collection_imports_read Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/{path}/api/v2/collection-imports/{task}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/{path}/api/v2/collection-imports/{task}/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/{path}/api/v2/collection-imports/{task}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/{path}/api/v2/collection-imports/{task}/', params: { }, headers: headers p JSON.parse(result) GET /pulp_ansible/galaxy/{path}/api/v2/collection-imports/{task}/ Inspect a collection import Returns a CollectionImport object. Parameters Name In Type Required Description path path string true none since query string false Filter messages since a given timestamp task path string(uuid) true A unique value identifying this collection import. fields query string false A list of fields to include in the response. exclude_fields query string false A list of fields to exclude from the response. Example responses 200 Response { \"id\": \"497f6eca-6276-4993-bfeb-53cbbbba6f08\", \"state\": \"string\", \"created_at\": \"2019-08-24T14:15:22Z\", \"updated_at\": \"2019-08-24T14:15:22Z\", \"started_at\": \"2019-08-24T14:15:22Z\", \"finished_at\": \"2019-08-24T14:15:22Z\", \"error\": {}, \"messages\": {} } Responses Status Meaning Description Schema 200 OK none CollectionImportDetailResponse This operation does not require authentication Pulp_Ansible: Api V2 Collections pulp_ansible_galaxy {path}_api_v2_collections_pulp_ansible_galaxy_api_v2_collections_get Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/{path}/api/v2/collections/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/{path}/api/v2/collections/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/{path}/api/v2/collections/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/{path}/api/v2/collections/', params: { }, headers: headers p JSON.parse(result) GET /pulp_ansible/galaxy/{path}/api/v2/collections/ View for Collection models. Parameters Name In Type Required Description page query integer false A page number within the paginated result set. path path string true none fields query string false A list of fields to include in the response. exclude_fields query string false A list of fields to exclude from the response. Example responses 200 Response { \"count\": 123, \"next\": \"http://api.example.org/accounts/?page=4\", \"previous\": \"http://api.example.org/accounts/?page=2\", \"results\": [ { \"id\": \"string\", \"name\": \"string\", \"namespace\": {}, \"href\": \"string\", \"versions_url\": \"string\", \"created\": \"2019-08-24T14:15:22Z\", \"modified\": \"2019-08-24T14:15:22Z\", \"latest_version\": {} } ] } Responses Status Meaning Description Schema 200 OK none PaginatedGalaxyCollectionResponseList This operation does not require authentication pulp_ansible_galaxy_api_v2_collections_post Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Content-Type\": []string{\"application/json\"}, \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"POST\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/{path}/api/v2/collections/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const inputBody = '{ \"id\": \"string\", \"name\": \"string\", \"created\": \"2019-08-24T14:15:22Z\", \"modified\": \"2019-08-24T14:15:22Z\" }'; const headers = { 'Content-Type':'application/json', 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/{path}/api/v2/collections/', { method: 'POST', body: inputBody, headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Content-Type': 'application/json', 'Accept': 'application/json' } r = requests.post('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/{path}/api/v2/collections/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Content-Type' => 'application/json', 'Accept' => 'application/json' } result = RestClient.post 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/{path}/api/v2/collections/', params: { }, headers: headers p JSON.parse(result) POST /pulp_ansible/galaxy/{path}/api/v2/collections/ Queues a task that creates a new Collection from an uploaded artifact. Body parameter { \"id\": \"string\", \"name\": \"string\", \"created\": \"2019-08-24T14:15:22Z\", \"modified\": \"2019-08-24T14:15:22Z\" } id: string name: string created: 2019-08-24T14:15:22Z modified: 2019-08-24T14:15:22Z Parameters Name In Type Required Description path path string true none body body GalaxyCollection true none Example responses 200 Response { \"id\": \"string\", \"name\": \"string\", \"namespace\": {}, \"href\": \"string\", \"versions_url\": \"string\", \"created\": \"2019-08-24T14:15:22Z\", \"modified\": \"2019-08-24T14:15:22Z\", \"latest_version\": {} } Responses Status Meaning Description Schema 200 OK none GalaxyCollectionResponse This operation does not require authentication pulp_ansible_galaxy {path} api_v2_collections {namespace}_{name}_pulp_ansible_galaxy_api_v2_collections_get Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/{path}/api/v2/collections/{namespace}/{name}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/{path}/api/v2/collections/{namespace}/{name}/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/{path}/api/v2/collections/{namespace}/{name}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/{path}/api/v2/collections/{namespace}/{name}/', params: { }, headers: headers p JSON.parse(result) GET /pulp_ansible/galaxy/{path}/api/v2/collections/{namespace}/{name}/ Get the detail view of a Collection. Parameters Name In Type Required Description name path string true none namespace path string true none path path string true none fields query string false A list of fields to include in the response. exclude_fields query string false A list of fields to exclude from the response. Example responses 200 Response { \"id\": \"string\", \"name\": \"string\", \"namespace\": {}, \"href\": \"string\", \"versions_url\": \"string\", \"created\": \"2019-08-24T14:15:22Z\", \"modified\": \"2019-08-24T14:15:22Z\", \"latest_version\": {} } Responses Status Meaning Description Schema 200 OK none GalaxyCollectionResponse This operation does not require authentication Pulp_Ansible: Api V2 Collections Versions pulp_ansible_galaxy {path} api_v2_collections {namespace}_{name}_versions_pulp_ansible_galaxy_api_v2_collections_versions_get Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/{path}/api/v2/collections/{namespace}/{name}/versions/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/{path}/api/v2/collections/{namespace}/{name}/versions/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/{path}/api/v2/collections/{namespace}/{name}/versions/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/{path}/api/v2/collections/{namespace}/{name}/versions/', params: { }, headers: headers p JSON.parse(result) GET /pulp_ansible/galaxy/{path}/api/v2/collections/{namespace}/{name}/versions/ APIView for Collections by namespace/name. Parameters Name In Type Required Description name path string true none namespace path string true none page query integer false A page number within the paginated result set. path path string true none fields query string false A list of fields to include in the response. exclude_fields query string false A list of fields to exclude from the response. Example responses 200 Response { \"count\": 123, \"next\": \"http://api.example.org/accounts/?page=4\", \"previous\": \"http://api.example.org/accounts/?page=2\", \"results\": [ { \"version\": \"string\", \"href\": \"string\", \"namespace\": {}, \"collection\": {}, \"artifact\": {}, \"metadata\": { \"authors\": [ \"string\" ], \"contents\": {}, \"dependencies\": {}, \"description\": \"string\", \"documentation\": \"string\", \"homepage\": \"string\", \"issues\": \"string\", \"license\": [ \"string\" ], \"repository\": \"string\", \"tags\": [ \"string\" ] } } ] } Responses Status Meaning Description Schema 200 OK none PaginatedGalaxyCollectionVersionResponseList This operation does not require authentication pulp_ansible_galaxy {path} api_v2_collections {namespace} {name}_versions {version}_pulp_ansible_galaxy_api_v2_collections_versions_get Code samples package main import ( \"bytes\" \"net/http\" ) func main() { data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/{path}/api/v2/collections/{namespace}/{name}/versions/{version}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/{path}/api/v2/collections/{namespace}/{name}/versions/{version}/', { method: 'GET' }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/{path}/api/v2/collections/{namespace}/{name}/versions/{version}/') print(r.json()) require 'rest-client' require 'json' result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/{path}/api/v2/collections/{namespace}/{name}/versions/{version}/', params: { } p JSON.parse(result) GET /pulp_ansible/galaxy/{path}/api/v2/collections/{namespace}/{name}/versions/{version}/ Return a response to the \"GET\" action. Parameters Name In Type Required Description name path string true none namespace path string true none path path string true none version path string true none fields query string false A list of fields to include in the response. exclude_fields query string false A list of fields to exclude from the response. Responses Status Meaning Description Schema 200 OK No response body None This operation does not require authentication Pulp_Ansible: Api V3 pulp_ansible_galaxy_api_v3_read Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/{path}/api/v3/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/{path}/api/v3/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/{path}/api/v3/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/{path}/api/v3/', params: { }, headers: headers p JSON.parse(result) GET /pulp_ansible/galaxy/{path}/api/v3/ Legacy v3 endpoint. Parameters Name In Type Required Description path path string true none fields query string false A list of fields to include in the response. exclude_fields query string false A list of fields to exclude from the response. Example responses 202 Response { \"published\": \"2019-08-24T14:15:22Z\" } Responses Status Meaning Description Schema 202 Accepted none RepoMetadataResponse 302 Found No response body None This operation does not require authentication Pulp_Ansible: Api V3 Artifacts Collections pulp_ansible_galaxy_api_v3_artifacts_collections_get Code samples package main import ( \"bytes\" \"net/http\" ) func main() { data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/{path}/api/v3/artifacts/collections/{path}/{filename}\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/{path}/api/v3/artifacts/collections/{path}/{filename}', { method: 'GET' }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/{path}/api/v3/artifacts/collections/{path}/{filename}') print(r.json()) require 'rest-client' require 'json' result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/{path}/api/v3/artifacts/collections/{path}/{filename}', params: { } p JSON.parse(result) GET /pulp_ansible/galaxy/{path}/api/v3/artifacts/collections/{path}/{filename} Download collection. Parameters Name In Type Required Description filename path string true none path path string true none fields query string false A list of fields to include in the response. exclude_fields query string false A list of fields to exclude from the response. Responses Status Meaning Description Schema 200 OK No response body None This operation does not require authentication Pulp_Ansible: Api V3 Collection_Versions All pulp_ansible_galaxy_api_v3_collection_versions_all_list Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/{path}/api/v3/collection_versions/all/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/{path}/api/v3/collection_versions/all/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/{path}/api/v3/collection_versions/all/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/{path}/api/v3/collection_versions/all/', params: { }, headers: headers p JSON.parse(result) GET /pulp_ansible/galaxy/{path}/api/v3/collection_versions/all/ Legacy v3 endpoint. Parameters Name In Type Required Description path path string true none fields query string false A list of fields to include in the response. exclude_fields query string false A list of fields to exclude from the response. Example responses 202 Response [ { \"version\": \"string\", \"href\": \"string\", \"created_at\": \"2019-08-24T14:15:22Z\", \"updated_at\": \"2019-08-24T14:15:22Z\", \"requires_ansible\": \"string\", \"artifact\": { \"filename\": \"string\", \"sha256\": \"string\", \"size\": 0 }, \"collection\": { \"id\": \"string\", \"name\": \"string\", \"href\": \"string\" }, \"download_url\": \"string\", \"name\": \"string\", \"namespace\": { \"name\": \"string\" }, \"signatures\": \"string\", \"metadata\": { \"authors\": [ \"string\" ], \"contents\": {}, \"dependencies\": {}, \"description\": \"string\", \"documentation\": \"string\", \"homepage\": \"string\", \"issues\": \"string\", \"license\": [ \"string\" ], \"repository\": \"string\", \"tags\": [ \"string\" ] }, \"git_url\": \"string\", \"git_commit_sha\": \"string\" } ] Responses Status Meaning Description Schema 202 Accepted none Inline 302 Found No response body None Response Schema Status Code 202 Name Type Required Restrictions Description anonymous [ UnpaginatedCollectionVersionResponse ] false none [A serializer for unpaginated CollectionVersion.] \u00bb version string false read-only none \u00bb href string false read-only none \u00bb created_at string(date-time) true none none \u00bb updated_at string(date-time) true none none \u00bb requires_ansible string\u00a6null false none none \u00bb artifact ArtifactRefResponse false read-only A serializer for an Artifact reference. \u00bb\u00bb filename string true none none \u00bb\u00bb sha256 string true none none \u00bb\u00bb size integer true none none \u00bb collection CollectionRefResponse false read-only A serializer for a Collection reference. \u00bb\u00bb id string true none none \u00bb\u00bb name string true none none \u00bb\u00bb href string false read-only none \u00bb download_url string false read-only none \u00bb name string false read-only none \u00bb namespace CollectionNamespaceResponse false read-only A serializer for a Collection Version namespace field. \u00bb\u00bb name string true none none \u00bb signatures string false read-only none \u00bb metadata CollectionMetadataResponse false read-only A serializer for a CollectionVersion metadata. \u00bb\u00bb authors [string] false read-only none \u00bb\u00bb contents object false read-only none \u00bb\u00bb dependencies object false read-only none \u00bb\u00bb description string false read-only none \u00bb\u00bb documentation string false read-only none \u00bb\u00bb homepage string false read-only none \u00bb\u00bb issues string false read-only none \u00bb\u00bb license [string] false read-only none \u00bb\u00bb repository string false read-only none \u00bb\u00bb tags [string] true none none \u00bb git_url string false read-only none \u00bb git_commit_sha string false read-only none This operation does not require authentication Pulp_Ansible: Api V3 Collections pulp_ansible_galaxy_api_v3_collections_list Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/{path}/api/v3/collections/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/{path}/api/v3/collections/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/{path}/api/v3/collections/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/{path}/api/v3/collections/', params: { }, headers: headers p JSON.parse(result) GET /pulp_ansible/galaxy/{path}/api/v3/collections/ Legacy v3 endpoint. Parameters Name In Type Required Description deprecated query boolean false none limit query integer false Number of results to return per page. name query string false none namespace query string false none offset query integer false The initial index from which to return the results. ordering query array[string] false Ordering path path string true none fields query string false A list of fields to include in the response. exclude_fields query string false A list of fields to exclude from the response. Enumerated Values Parameter Value ordering -group_roles ordering -name ordering -namespace ordering -pk ordering -pulp_created ordering -pulp_id ordering -pulp_labels ordering -pulp_last_updated ordering -synclist ordering -user_roles ordering -versions ordering group_roles ordering name ordering namespace ordering pk ordering pulp_created ordering pulp_id ordering pulp_labels ordering pulp_last_updated ordering synclist ordering user_roles ordering versions Example responses 202 Response { \"meta\": { \"count\": 123 }, \"links\": { \"first\": \"string\", \"previous\": \"string\", \"next\": \"string\", \"last\": \"string\" }, \"data\": [ { \"href\": \"string\", \"namespace\": \"string\", \"name\": \"string\", \"deprecated\": true, \"versions_url\": \"string\", \"highest_version\": {}, \"created_at\": \"2019-08-24T14:15:22Z\", \"updated_at\": \"2019-08-24T14:15:22Z\" } ] } Responses Status Meaning Description Schema 202 Accepted none PaginatedCollectionResponseList 302 Found No response body None This operation does not require authentication pulp_ansible_galaxy_api_v3_collections_read Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/{path}/api/v3/collections/{namespace}/{name}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/{path}/api/v3/collections/{namespace}/{name}/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/{path}/api/v3/collections/{namespace}/{name}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/{path}/api/v3/collections/{namespace}/{name}/', params: { }, headers: headers p JSON.parse(result) GET /pulp_ansible/galaxy/{path}/api/v3/collections/{namespace}/{name}/ Legacy v3 endpoint. Parameters Name In Type Required Description name path string true none namespace path string true none path path string true none fields query string false A list of fields to include in the response. exclude_fields query string false A list of fields to exclude from the response. Example responses 202 Response { \"href\": \"string\", \"namespace\": \"string\", \"name\": \"string\", \"deprecated\": true, \"versions_url\": \"string\", \"highest_version\": {}, \"created_at\": \"2019-08-24T14:15:22Z\", \"updated_at\": \"2019-08-24T14:15:22Z\" } Responses Status Meaning Description Schema 202 Accepted none CollectionResponse 302 Found No response body None This operation does not require authentication pulp_ansible_galaxy_api_v3_collections_update Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Content-Type\": []string{\"application/json\"}, \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"PATCH\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/{path}/api/v3/collections/{namespace}/{name}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const inputBody = '{}'; const headers = { 'Content-Type':'application/json', 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/{path}/api/v3/collections/{namespace}/{name}/', { method: 'PATCH', body: inputBody, headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Content-Type': 'application/json', 'Accept': 'application/json' } r = requests.patch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/{path}/api/v3/collections/{namespace}/{name}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Content-Type' => 'application/json', 'Accept' => 'application/json' } result = RestClient.patch 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/{path}/api/v3/collections/{namespace}/{name}/', params: { }, headers: headers p JSON.parse(result) PATCH /pulp_ansible/galaxy/{path}/api/v3/collections/{namespace}/{name}/ Legacy v3 endpoint. Body parameter {} {} Parameters Name In Type Required Description name path string true none namespace path string true none path path string true none body body PatchedCollection true none Example responses 202 Response { \"task\": \"http://example.com\" } Responses Status Meaning Description Schema 202 Accepted none AsyncOperationResponse 302 Found No response body None This operation does not require authentication pulp_ansible_galaxy_api_v3_collections_delete Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"DELETE\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/{path}/api/v3/collections/{namespace}/{name}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/{path}/api/v3/collections/{namespace}/{name}/', { method: 'DELETE', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.delete('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/{path}/api/v3/collections/{namespace}/{name}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.delete 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/{path}/api/v3/collections/{namespace}/{name}/', params: { }, headers: headers p JSON.parse(result) DELETE /pulp_ansible/galaxy/{path}/api/v3/collections/{namespace}/{name}/ Legacy v3 endpoint. Parameters Name In Type Required Description name path string true none namespace path string true none path path string true none Example responses 202 Response { \"task\": \"http://example.com\" } Responses Status Meaning Description Schema 202 Accepted none AsyncOperationResponse 302 Found No response body None This operation does not require authentication Pulp_Ansible: Api V3 Collections Versions pulp_ansible_galaxy_api_v3_collections_versions_list Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/{path}/api/v3/collections/{namespace}/{name}/versions/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/{path}/api/v3/collections/{namespace}/{name}/versions/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/{path}/api/v3/collections/{namespace}/{name}/versions/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/{path}/api/v3/collections/{namespace}/{name}/versions/', params: { }, headers: headers p JSON.parse(result) GET /pulp_ansible/galaxy/{path}/api/v3/collections/{namespace}/{name}/versions/ Legacy v3 endpoint. Parameters Name In Type Required Description is_highest query boolean false none limit query integer false Number of results to return per page. name path string true none name query string false none namespace path string true none namespace query string false none offset query integer false The initial index from which to return the results. ordering query array[string] false Ordering path path string true none q query string false none repository_version query string false Repository Version referenced by HREF repository_version_added query string false Repository Version referenced by HREF repository_version_removed query string false Repository Version referenced by HREF tags query string false Filter by comma separate list of tags that must all be matched version query string false Filter results where version matches value fields query string false A list of fields to include in the response. exclude_fields query string false A list of fields to exclude from the response. Enumerated Values Parameter Value ordering -_artifacts ordering -authors ordering -collection ordering -content_ptr ordering -contentartifact ordering -contents ordering -dependencies ordering -description ordering -docs_blob ordering -documentation ordering -download_logs ordering -files ordering -group_roles ordering -homepage ordering -is_highest ordering -issues ordering -license ordering -manifest ordering -name ordering -namespace ordering -pk ordering -pulp_created ordering -pulp_id ordering -pulp_labels ordering -pulp_last_updated ordering -pulp_type ordering -repositories ordering -repository ordering -requires_ansible ordering -search_vector ordering -signatures ordering -tags ordering -timestamp_of_interest ordering -upstream_id ordering -user_roles ordering -version ordering -version_memberships ordering _artifacts ordering authors ordering collection ordering content_ptr ordering contentartifact ordering contents ordering dependencies ordering description ordering docs_blob ordering documentation ordering download_logs ordering files ordering group_roles ordering homepage ordering is_highest ordering issues ordering license ordering manifest ordering name ordering namespace ordering pk ordering pulp_created ordering pulp_id ordering pulp_labels ordering pulp_last_updated ordering pulp_type ordering repositories ordering repository ordering requires_ansible ordering search_vector ordering signatures ordering tags ordering timestamp_of_interest ordering upstream_id ordering user_roles ordering version ordering version_memberships Example responses 202 Response { \"meta\": { \"count\": 123 }, \"links\": { \"first\": \"string\", \"previous\": \"string\", \"next\": \"string\", \"last\": \"string\" }, \"data\": [ { \"version\": \"string\", \"href\": \"string\", \"created_at\": \"2019-08-24T14:15:22Z\", \"updated_at\": \"2019-08-24T14:15:22Z\", \"requires_ansible\": \"string\" } ] } Responses Status Meaning Description Schema 202 Accepted none PaginatedCollectionVersionListResponseList 302 Found No response body None This operation does not require authentication pulp_ansible_galaxy_api_v3_collections_versions_read Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/{path}/api/v3/collections/{namespace}/{name}/versions/{version}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/{path}/api/v3/collections/{namespace}/{name}/versions/{version}/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/{path}/api/v3/collections/{namespace}/{name}/versions/{version}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/{path}/api/v3/collections/{namespace}/{name}/versions/{version}/', params: { }, headers: headers p JSON.parse(result) GET /pulp_ansible/galaxy/{path}/api/v3/collections/{namespace}/{name}/versions/{version}/ Legacy v3 endpoint. Parameters Name In Type Required Description name path string true none namespace path string true none path path string true none version path string true none fields query string false A list of fields to include in the response. exclude_fields query string false A list of fields to exclude from the response. Example responses 202 Response { \"version\": \"string\", \"href\": \"string\", \"created_at\": \"2019-08-24T14:15:22Z\", \"updated_at\": \"2019-08-24T14:15:22Z\", \"requires_ansible\": \"string\", \"artifact\": { \"filename\": \"string\", \"sha256\": \"string\", \"size\": 0 }, \"collection\": { \"id\": \"string\", \"name\": \"string\", \"href\": \"string\" }, \"download_url\": \"string\", \"name\": \"string\", \"namespace\": { \"name\": \"string\" }, \"signatures\": \"string\", \"metadata\": { \"authors\": [ \"string\" ], \"contents\": {}, \"dependencies\": {}, \"description\": \"string\", \"documentation\": \"string\", \"homepage\": \"string\", \"issues\": \"string\", \"license\": [ \"string\" ], \"repository\": \"string\", \"tags\": [ \"string\" ] }, \"git_url\": \"string\", \"git_commit_sha\": \"string\", \"manifest\": {}, \"files\": {} } Responses Status Meaning Description Schema 202 Accepted none CollectionVersionResponse 302 Found No response body None This operation does not require authentication pulp_ansible_galaxy_api_v3_collections_versions_delete Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"DELETE\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/{path}/api/v3/collections/{namespace}/{name}/versions/{version}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/{path}/api/v3/collections/{namespace}/{name}/versions/{version}/', { method: 'DELETE', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.delete('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/{path}/api/v3/collections/{namespace}/{name}/versions/{version}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.delete 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/{path}/api/v3/collections/{namespace}/{name}/versions/{version}/', params: { }, headers: headers p JSON.parse(result) DELETE /pulp_ansible/galaxy/{path}/api/v3/collections/{namespace}/{name}/versions/{version}/ Legacy v3 endpoint. Parameters Name In Type Required Description name path string true none namespace path string true none path path string true none version path string true none Example responses 202 Response { \"task\": \"http://example.com\" } Responses Status Meaning Description Schema 202 Accepted none AsyncOperationResponse 302 Found No response body None This operation does not require authentication Pulp_Ansible: Api V3 Collections Versions Docs-Blob pulp_ansible_galaxy_api_v3_collections_versions_docs_blob_read Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/{path}/api/v3/collections/{namespace}/{name}/versions/{version}/docs-blob/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/{path}/api/v3/collections/{namespace}/{name}/versions/{version}/docs-blob/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/{path}/api/v3/collections/{namespace}/{name}/versions/{version}/docs-blob/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/{path}/api/v3/collections/{namespace}/{name}/versions/{version}/docs-blob/', params: { }, headers: headers p JSON.parse(result) GET /pulp_ansible/galaxy/{path}/api/v3/collections/{namespace}/{name}/versions/{version}/docs-blob/ Legacy v3 endpoint. Parameters Name In Type Required Description name path string true none namespace path string true none path path string true none version path string true none fields query string false A list of fields to include in the response. exclude_fields query string false A list of fields to exclude from the response. Example responses 202 Response { \"docs_blob\": {} } Responses Status Meaning Description Schema 202 Accepted none CollectionVersionDocsResponse 302 Found No response body None This operation does not require authentication Pulp_Ansible: Api V3 Collections All pulp_ansible_galaxy_api_v3_collections_all_list Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/{path}/api/v3/collections/all/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/{path}/api/v3/collections/all/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/{path}/api/v3/collections/all/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/{path}/api/v3/collections/all/', params: { }, headers: headers p JSON.parse(result) GET /pulp_ansible/galaxy/{path}/api/v3/collections/all/ Legacy v3 endpoint. Parameters Name In Type Required Description deprecated query boolean false none name query string false none namespace query string false none ordering query array[string] false Ordering path path string true none fields query string false A list of fields to include in the response. exclude_fields query string false A list of fields to exclude from the response. Enumerated Values Parameter Value ordering -group_roles ordering -name ordering -namespace ordering -pk ordering -pulp_created ordering -pulp_id ordering -pulp_labels ordering -pulp_last_updated ordering -synclist ordering -user_roles ordering -versions ordering group_roles ordering name ordering namespace ordering pk ordering pulp_created ordering pulp_id ordering pulp_labels ordering pulp_last_updated ordering synclist ordering user_roles ordering versions Example responses 202 Response [ { \"href\": \"string\", \"namespace\": \"string\", \"name\": \"string\", \"deprecated\": true, \"versions_url\": \"string\", \"highest_version\": {}, \"created_at\": \"2019-08-24T14:15:22Z\", \"updated_at\": \"2019-08-24T14:15:22Z\" } ] Responses Status Meaning Description Schema 202 Accepted none Inline 302 Found No response body None Response Schema Status Code 202 Name Type Required Restrictions Description anonymous [ CollectionResponse ] false none [A serializer for a Collection.] \u00bb href string false read-only none \u00bb namespace string false read-only none \u00bb name string false read-only none \u00bb deprecated boolean false read-only none \u00bb versions_url string false read-only none \u00bb highest_version object false read-only none \u00bb created_at string(date-time) false read-only none \u00bb updated_at string(date-time) false read-only none This operation does not require authentication Pulp_Ansible: Api V3 Imports Collections pulp_ansible_galaxy_api_v3_imports_collections_read Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/{path}/api/v3/imports/collections/{task}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/{path}/api/v3/imports/collections/{task}/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/{path}/api/v3/imports/collections/{task}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/{path}/api/v3/imports/collections/{task}/', params: { }, headers: headers p JSON.parse(result) GET /pulp_ansible/galaxy/{path}/api/v3/imports/collections/{task}/ Inspect a collection import Legacy v3 endpoint. Parameters Name In Type Required Description path path string true none task path string(uuid) true A unique value identifying this collection import. fields query string false A list of fields to include in the response. exclude_fields query string false A list of fields to exclude from the response. Example responses 202 Response { \"id\": \"497f6eca-6276-4993-bfeb-53cbbbba6f08\", \"state\": \"string\", \"created_at\": \"2019-08-24T14:15:22Z\", \"updated_at\": \"2019-08-24T14:15:22Z\", \"started_at\": \"2019-08-24T14:15:22Z\", \"finished_at\": \"2019-08-24T14:15:22Z\", \"error\": {}, \"messages\": {} } Responses Status Meaning Description Schema 202 Accepted none CollectionImportDetailResponse 302 Found No response body None This operation does not require authentication Pulp_Ansible: Api V3 Plugin Ansible Client-Configuration pulp_ansible_galaxy_api_v3_plugin_ansible_client_configuration_get Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/{path}/api/v3/plugin/ansible/client-configuration/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/{path}/api/v3/plugin/ansible/client-configuration/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/{path}/api/v3/plugin/ansible/client-configuration/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/{path}/api/v3/plugin/ansible/client-configuration/', params: { }, headers: headers p JSON.parse(result) GET /pulp_ansible/galaxy/{path}/api/v3/plugin/ansible/client-configuration/ Get the client configs. Parameters Name In Type Required Description path path string true none fields query string false A list of fields to include in the response. exclude_fields query string false A list of fields to exclude from the response. Example responses 200 Response { \"default_distribution_path\": \"string\" } Responses Status Meaning Description Schema 200 OK none ClientConfigurationResponse This operation does not require authentication Pulp_Ansible: Api V3 Plugin Ansible Content Collections pulp_ansible_galaxy_api_v3_plugin_ansible_content_collections_read Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/{path}/api/v3/plugin/ansible/content/{distro_base_path}/collections/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/{path}/api/v3/plugin/ansible/content/{distro_base_path}/collections/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/{path}/api/v3/plugin/ansible/content/{distro_base_path}/collections/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/{path}/api/v3/plugin/ansible/content/{distro_base_path}/collections/', params: { }, headers: headers p JSON.parse(result) GET /pulp_ansible/galaxy/{path}/api/v3/plugin/ansible/content/{distro_base_path}/collections/ ViewSet for Repository Metadata. Parameters Name In Type Required Description distro_base_path path string true none path path string true none fields query string false A list of fields to include in the response. exclude_fields query string false A list of fields to exclude from the response. Example responses 200 Response { \"published\": \"2019-08-24T14:15:22Z\" } Responses Status Meaning Description Schema 200 OK none RepoMetadataResponse This operation does not require authentication Pulp_Ansible: Api V3 Plugin Ansible Content Collections All-Collections pulp_ansible_galaxy_api_v3_plugin_ansible_content_collections_all_collections_list Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/{path}/api/v3/plugin/ansible/content/{distro_base_path}/collections/all-collections/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/{path}/api/v3/plugin/ansible/content/{distro_base_path}/collections/all-collections/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/{path}/api/v3/plugin/ansible/content/{distro_base_path}/collections/all-collections/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/{path}/api/v3/plugin/ansible/content/{distro_base_path}/collections/all-collections/', params: { }, headers: headers p JSON.parse(result) GET /pulp_ansible/galaxy/{path}/api/v3/plugin/ansible/content/{distro_base_path}/collections/all-collections/ Unpaginated ViewSet for Collections. Parameters Name In Type Required Description deprecated query boolean false none distro_base_path path string true none name query string false none namespace query string false none ordering query array[string] false Ordering path path string true none fields query string false A list of fields to include in the response. exclude_fields query string false A list of fields to exclude from the response. Enumerated Values Parameter Value ordering -group_roles ordering -name ordering -namespace ordering -pk ordering -pulp_created ordering -pulp_id ordering -pulp_labels ordering -pulp_last_updated ordering -synclist ordering -user_roles ordering -versions ordering group_roles ordering name ordering namespace ordering pk ordering pulp_created ordering pulp_id ordering pulp_labels ordering pulp_last_updated ordering synclist ordering user_roles ordering versions Example responses 200 Response [ { \"href\": \"string\", \"namespace\": \"string\", \"name\": \"string\", \"deprecated\": true, \"versions_url\": \"string\", \"highest_version\": {}, \"created_at\": \"2019-08-24T14:15:22Z\", \"updated_at\": \"2019-08-24T14:15:22Z\" } ] Responses Status Meaning Description Schema 200 OK none Inline Response Schema Status Code 200 Name Type Required Restrictions Description anonymous [ CollectionResponse ] false none [A serializer for a Collection.] \u00bb href string false read-only none \u00bb namespace string false read-only none \u00bb name string false read-only none \u00bb deprecated boolean false read-only none \u00bb versions_url string false read-only none \u00bb highest_version object false read-only none \u00bb created_at string(date-time) false read-only none \u00bb updated_at string(date-time) false read-only none This operation does not require authentication Pulp_Ansible: Api V3 Plugin Ansible Content Collections All-Versions pulp_ansible_galaxy_api_v3_plugin_ansible_content_collections_all_versions_list Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/{path}/api/v3/plugin/ansible/content/{distro_base_path}/collections/all-versions/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/{path}/api/v3/plugin/ansible/content/{distro_base_path}/collections/all-versions/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/{path}/api/v3/plugin/ansible/content/{distro_base_path}/collections/all-versions/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/{path}/api/v3/plugin/ansible/content/{distro_base_path}/collections/all-versions/', params: { }, headers: headers p JSON.parse(result) GET /pulp_ansible/galaxy/{path}/api/v3/plugin/ansible/content/{distro_base_path}/collections/all-versions/ Returns paginated CollectionVersions list. Parameters Name In Type Required Description distro_base_path path string true none path path string true none fields query string false A list of fields to include in the response. exclude_fields query string false A list of fields to exclude from the response. Example responses 202 Response [ { \"version\": \"string\", \"href\": \"string\", \"created_at\": \"2019-08-24T14:15:22Z\", \"updated_at\": \"2019-08-24T14:15:22Z\", \"requires_ansible\": \"string\", \"artifact\": { \"filename\": \"string\", \"sha256\": \"string\", \"size\": 0 }, \"collection\": { \"id\": \"string\", \"name\": \"string\", \"href\": \"string\" }, \"download_url\": \"string\", \"name\": \"string\", \"namespace\": { \"name\": \"string\" }, \"signatures\": \"string\", \"metadata\": { \"authors\": [ \"string\" ], \"contents\": {}, \"dependencies\": {}, \"description\": \"string\", \"documentation\": \"string\", \"homepage\": \"string\", \"issues\": \"string\", \"license\": [ \"string\" ], \"repository\": \"string\", \"tags\": [ \"string\" ] }, \"git_url\": \"string\", \"git_commit_sha\": \"string\" } ] Responses Status Meaning Description Schema 202 Accepted none Inline Response Schema Status Code 202 Name Type Required Restrictions Description anonymous [ UnpaginatedCollectionVersionResponse ] false none [A serializer for unpaginated CollectionVersion.] \u00bb version string false read-only none \u00bb href string false read-only none \u00bb created_at string(date-time) true none none \u00bb updated_at string(date-time) true none none \u00bb requires_ansible string\u00a6null false none none \u00bb artifact ArtifactRefResponse false read-only A serializer for an Artifact reference. \u00bb\u00bb filename string true none none \u00bb\u00bb sha256 string true none none \u00bb\u00bb size integer true none none \u00bb collection CollectionRefResponse false read-only A serializer for a Collection reference. \u00bb\u00bb id string true none none \u00bb\u00bb name string true none none \u00bb\u00bb href string false read-only none \u00bb download_url string false read-only none \u00bb name string false read-only none \u00bb namespace CollectionNamespaceResponse false read-only A serializer for a Collection Version namespace field. \u00bb\u00bb name string true none none \u00bb signatures string false read-only none \u00bb metadata CollectionMetadataResponse false read-only A serializer for a CollectionVersion metadata. \u00bb\u00bb authors [string] false read-only none \u00bb\u00bb contents object false read-only none \u00bb\u00bb dependencies object false read-only none \u00bb\u00bb description string false read-only none \u00bb\u00bb documentation string false read-only none \u00bb\u00bb homepage string false read-only none \u00bb\u00bb issues string false read-only none \u00bb\u00bb license [string] false read-only none \u00bb\u00bb repository string false read-only none \u00bb\u00bb tags [string] true none none \u00bb git_url string false read-only none \u00bb git_commit_sha string false read-only none This operation does not require authentication Pulp_Ansible: Api V3 Plugin Ansible Content Collections Artifacts pulp_ansible_galaxy_api_v3_plugin_ansible_content_collections_artifacts_download Code samples package main import ( \"bytes\" \"net/http\" ) func main() { data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/{path}/api/v3/plugin/ansible/content/{distro_base_path}/collections/artifacts/{filename}\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/{path}/api/v3/plugin/ansible/content/{distro_base_path}/collections/artifacts/{filename}', { method: 'GET' }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/{path}/api/v3/plugin/ansible/content/{distro_base_path}/collections/artifacts/{filename}') print(r.json()) require 'rest-client' require 'json' result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/{path}/api/v3/plugin/ansible/content/{distro_base_path}/collections/artifacts/{filename}', params: { } p JSON.parse(result) GET /pulp_ansible/galaxy/{path}/api/v3/plugin/ansible/content/{distro_base_path}/collections/artifacts/{filename} Collection download endpoint. Parameters Name In Type Required Description distro_base_path path string true none filename path string true none path path string true none fields query string false A list of fields to include in the response. exclude_fields query string false A list of fields to exclude from the response. Responses Status Meaning Description Schema 200 OK No response body None This operation does not require authentication Pulp_Ansible: Api V3 Plugin Ansible Content Collections Index pulp_ansible_galaxy_api_v3_plugin_ansible_content_collections_index_list Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/{path}/api/v3/plugin/ansible/content/{distro_base_path}/collections/index/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/{path}/api/v3/plugin/ansible/content/{distro_base_path}/collections/index/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/{path}/api/v3/plugin/ansible/content/{distro_base_path}/collections/index/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/{path}/api/v3/plugin/ansible/content/{distro_base_path}/collections/index/', params: { }, headers: headers p JSON.parse(result) GET /pulp_ansible/galaxy/{path}/api/v3/plugin/ansible/content/{distro_base_path}/collections/index/ ViewSet for Collections. Parameters Name In Type Required Description deprecated query boolean false none distro_base_path path string true none limit query integer false Number of results to return per page. name query string false none namespace query string false none offset query integer false The initial index from which to return the results. ordering query array[string] false Ordering path path string true none fields query string false A list of fields to include in the response. exclude_fields query string false A list of fields to exclude from the response. Enumerated Values Parameter Value ordering -group_roles ordering -name ordering -namespace ordering -pk ordering -pulp_created ordering -pulp_id ordering -pulp_labels ordering -pulp_last_updated ordering -synclist ordering -user_roles ordering -versions ordering group_roles ordering name ordering namespace ordering pk ordering pulp_created ordering pulp_id ordering pulp_labels ordering pulp_last_updated ordering synclist ordering user_roles ordering versions Example responses 200 Response { \"meta\": { \"count\": 123 }, \"links\": { \"first\": \"string\", \"previous\": \"string\", \"next\": \"string\", \"last\": \"string\" }, \"data\": [ { \"href\": \"string\", \"namespace\": \"string\", \"name\": \"string\", \"deprecated\": true, \"versions_url\": \"string\", \"highest_version\": {}, \"created_at\": \"2019-08-24T14:15:22Z\", \"updated_at\": \"2019-08-24T14:15:22Z\" } ] } Responses Status Meaning Description Schema 200 OK none PaginatedCollectionResponseList This operation does not require authentication pulp_ansible_galaxy_api_v3_plugin_ansible_content_collections_index_read Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/{path}/api/v3/plugin/ansible/content/{distro_base_path}/collections/index/{namespace}/{name}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/{path}/api/v3/plugin/ansible/content/{distro_base_path}/collections/index/{namespace}/{name}/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/{path}/api/v3/plugin/ansible/content/{distro_base_path}/collections/index/{namespace}/{name}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/{path}/api/v3/plugin/ansible/content/{distro_base_path}/collections/index/{namespace}/{name}/', params: { }, headers: headers p JSON.parse(result) GET /pulp_ansible/galaxy/{path}/api/v3/plugin/ansible/content/{distro_base_path}/collections/index/{namespace}/{name}/ ViewSet for Collections. Parameters Name In Type Required Description distro_base_path path string true none name path string true none namespace path string true none path path string true none fields query string false A list of fields to include in the response. exclude_fields query string false A list of fields to exclude from the response. Example responses 200 Response { \"href\": \"string\", \"namespace\": \"string\", \"name\": \"string\", \"deprecated\": true, \"versions_url\": \"string\", \"highest_version\": {}, \"created_at\": \"2019-08-24T14:15:22Z\", \"updated_at\": \"2019-08-24T14:15:22Z\" } Responses Status Meaning Description Schema 200 OK none CollectionResponse This operation does not require authentication pulp_ansible_galaxy_api_v3_plugin_ansible_content_collections_index_update Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Content-Type\": []string{\"application/json\"}, \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"PATCH\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/{path}/api/v3/plugin/ansible/content/{distro_base_path}/collections/index/{namespace}/{name}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const inputBody = '{}'; const headers = { 'Content-Type':'application/json', 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/{path}/api/v3/plugin/ansible/content/{distro_base_path}/collections/index/{namespace}/{name}/', { method: 'PATCH', body: inputBody, headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Content-Type': 'application/json', 'Accept': 'application/json' } r = requests.patch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/{path}/api/v3/plugin/ansible/content/{distro_base_path}/collections/index/{namespace}/{name}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Content-Type' => 'application/json', 'Accept' => 'application/json' } result = RestClient.patch 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/{path}/api/v3/plugin/ansible/content/{distro_base_path}/collections/index/{namespace}/{name}/', params: { }, headers: headers p JSON.parse(result) PATCH /pulp_ansible/galaxy/{path}/api/v3/plugin/ansible/content/{distro_base_path}/collections/index/{namespace}/{name}/ Trigger an asynchronous update task Body parameter {} {} Parameters Name In Type Required Description distro_base_path path string true none name path string true none namespace path string true none path path string true none body body PatchedCollection true none Example responses 202 Response { \"task\": \"http://example.com\" } Responses Status Meaning Description Schema 202 Accepted none AsyncOperationResponse This operation does not require authentication pulp_ansible_galaxy_api_v3_plugin_ansible_content_collections_index_delete Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"DELETE\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/{path}/api/v3/plugin/ansible/content/{distro_base_path}/collections/index/{namespace}/{name}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/{path}/api/v3/plugin/ansible/content/{distro_base_path}/collections/index/{namespace}/{name}/', { method: 'DELETE', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.delete('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/{path}/api/v3/plugin/ansible/content/{distro_base_path}/collections/index/{namespace}/{name}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.delete 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/{path}/api/v3/plugin/ansible/content/{distro_base_path}/collections/index/{namespace}/{name}/', params: { }, headers: headers p JSON.parse(result) DELETE /pulp_ansible/galaxy/{path}/api/v3/plugin/ansible/content/{distro_base_path}/collections/index/{namespace}/{name}/ Trigger an asynchronous delete task Parameters Name In Type Required Description distro_base_path path string true none name path string true none namespace path string true none path path string true none Example responses 202 Response { \"task\": \"http://example.com\" } Responses Status Meaning Description Schema 202 Accepted none AsyncOperationResponse This operation does not require authentication Pulp_Ansible: Api V3 Plugin Ansible Content Collections Index Versions pulp_ansible_galaxy_api_v3_plugin_ansible_content_collections_index_versions_list Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/{path}/api/v3/plugin/ansible/content/{distro_base_path}/collections/index/{namespace}/{name}/versions/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/{path}/api/v3/plugin/ansible/content/{distro_base_path}/collections/index/{namespace}/{name}/versions/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/{path}/api/v3/plugin/ansible/content/{distro_base_path}/collections/index/{namespace}/{name}/versions/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/{path}/api/v3/plugin/ansible/content/{distro_base_path}/collections/index/{namespace}/{name}/versions/', params: { }, headers: headers p JSON.parse(result) GET /pulp_ansible/galaxy/{path}/api/v3/plugin/ansible/content/{distro_base_path}/collections/index/{namespace}/{name}/versions/ Returns paginated CollectionVersions list. Parameters Name In Type Required Description distro_base_path path string true none is_highest query boolean false none limit query integer false Number of results to return per page. name path string true none name query string false none namespace path string true none namespace query string false none offset query integer false The initial index from which to return the results. ordering query array[string] false Ordering path path string true none q query string false none repository_version query string false Repository Version referenced by HREF repository_version_added query string false Repository Version referenced by HREF repository_version_removed query string false Repository Version referenced by HREF tags query string false Filter by comma separate list of tags that must all be matched version query string false Filter results where version matches value fields query string false A list of fields to include in the response. exclude_fields query string false A list of fields to exclude from the response. Enumerated Values Parameter Value ordering -_artifacts ordering -authors ordering -collection ordering -content_ptr ordering -contentartifact ordering -contents ordering -dependencies ordering -description ordering -docs_blob ordering -documentation ordering -download_logs ordering -files ordering -group_roles ordering -homepage ordering -is_highest ordering -issues ordering -license ordering -manifest ordering -name ordering -namespace ordering -pk ordering -pulp_created ordering -pulp_id ordering -pulp_labels ordering -pulp_last_updated ordering -pulp_type ordering -repositories ordering -repository ordering -requires_ansible ordering -search_vector ordering -signatures ordering -tags ordering -timestamp_of_interest ordering -upstream_id ordering -user_roles ordering -version ordering -version_memberships ordering _artifacts ordering authors ordering collection ordering content_ptr ordering contentartifact ordering contents ordering dependencies ordering description ordering docs_blob ordering documentation ordering download_logs ordering files ordering group_roles ordering homepage ordering is_highest ordering issues ordering license ordering manifest ordering name ordering namespace ordering pk ordering pulp_created ordering pulp_id ordering pulp_labels ordering pulp_last_updated ordering pulp_type ordering repositories ordering repository ordering requires_ansible ordering search_vector ordering signatures ordering tags ordering timestamp_of_interest ordering upstream_id ordering user_roles ordering version ordering version_memberships Example responses 202 Response { \"meta\": { \"count\": 123 }, \"links\": { \"first\": \"string\", \"previous\": \"string\", \"next\": \"string\", \"last\": \"string\" }, \"data\": [ { \"version\": \"string\", \"href\": \"string\", \"created_at\": \"2019-08-24T14:15:22Z\", \"updated_at\": \"2019-08-24T14:15:22Z\", \"requires_ansible\": \"string\" } ] } Responses Status Meaning Description Schema 202 Accepted none PaginatedCollectionVersionListResponseList This operation does not require authentication pulp_ansible_galaxy_api_v3_plugin_ansible_content_collections_index_versions_read Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/{path}/api/v3/plugin/ansible/content/{distro_base_path}/collections/index/{namespace}/{name}/versions/{version}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/{path}/api/v3/plugin/ansible/content/{distro_base_path}/collections/index/{namespace}/{name}/versions/{version}/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/{path}/api/v3/plugin/ansible/content/{distro_base_path}/collections/index/{namespace}/{name}/versions/{version}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/{path}/api/v3/plugin/ansible/content/{distro_base_path}/collections/index/{namespace}/{name}/versions/{version}/', params: { }, headers: headers p JSON.parse(result) GET /pulp_ansible/galaxy/{path}/api/v3/plugin/ansible/content/{distro_base_path}/collections/index/{namespace}/{name}/versions/{version}/ Returns a CollectionVersion object. Parameters Name In Type Required Description distro_base_path path string true none name path string true none namespace path string true none path path string true none version path string true none fields query string false A list of fields to include in the response. exclude_fields query string false A list of fields to exclude from the response. Example responses 200 Response { \"version\": \"string\", \"href\": \"string\", \"created_at\": \"2019-08-24T14:15:22Z\", \"updated_at\": \"2019-08-24T14:15:22Z\", \"requires_ansible\": \"string\", \"artifact\": { \"filename\": \"string\", \"sha256\": \"string\", \"size\": 0 }, \"collection\": { \"id\": \"string\", \"name\": \"string\", \"href\": \"string\" }, \"download_url\": \"string\", \"name\": \"string\", \"namespace\": { \"name\": \"string\" }, \"signatures\": \"string\", \"metadata\": { \"authors\": [ \"string\" ], \"contents\": {}, \"dependencies\": {}, \"description\": \"string\", \"documentation\": \"string\", \"homepage\": \"string\", \"issues\": \"string\", \"license\": [ \"string\" ], \"repository\": \"string\", \"tags\": [ \"string\" ] }, \"git_url\": \"string\", \"git_commit_sha\": \"string\", \"manifest\": {}, \"files\": {} } Responses Status Meaning Description Schema 200 OK none CollectionVersionResponse This operation does not require authentication pulp_ansible_galaxy_api_v3_plugin_ansible_content_collections_index_versions_delete Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"DELETE\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/{path}/api/v3/plugin/ansible/content/{distro_base_path}/collections/index/{namespace}/{name}/versions/{version}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/{path}/api/v3/plugin/ansible/content/{distro_base_path}/collections/index/{namespace}/{name}/versions/{version}/', { method: 'DELETE', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.delete('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/{path}/api/v3/plugin/ansible/content/{distro_base_path}/collections/index/{namespace}/{name}/versions/{version}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.delete 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/{path}/api/v3/plugin/ansible/content/{distro_base_path}/collections/index/{namespace}/{name}/versions/{version}/', params: { }, headers: headers p JSON.parse(result) DELETE /pulp_ansible/galaxy/{path}/api/v3/plugin/ansible/content/{distro_base_path}/collections/index/{namespace}/{name}/versions/{version}/ Trigger an asynchronous delete task Parameters Name In Type Required Description distro_base_path path string true none name path string true none namespace path string true none path path string true none version path string true none Example responses 202 Response { \"task\": \"http://example.com\" } Responses Status Meaning Description Schema 202 Accepted none AsyncOperationResponse This operation does not require authentication Pulp_Ansible: Api V3 Plugin Ansible Content Collections Index Versions Docs-Blob pulp_ansible_galaxy_api_v3_plugin_ansible_content_collections_index_versions_docs_blob_read Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/{path}/api/v3/plugin/ansible/content/{distro_base_path}/collections/index/{namespace}/{name}/versions/{version}/docs-blob/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/{path}/api/v3/plugin/ansible/content/{distro_base_path}/collections/index/{namespace}/{name}/versions/{version}/docs-blob/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/{path}/api/v3/plugin/ansible/content/{distro_base_path}/collections/index/{namespace}/{name}/versions/{version}/docs-blob/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/{path}/api/v3/plugin/ansible/content/{distro_base_path}/collections/index/{namespace}/{name}/versions/{version}/docs-blob/', params: { }, headers: headers p JSON.parse(result) GET /pulp_ansible/galaxy/{path}/api/v3/plugin/ansible/content/{distro_base_path}/collections/index/{namespace}/{name}/versions/{version}/docs-blob/ Returns a CollectionVersion object. Parameters Name In Type Required Description distro_base_path path string true none name path string true none namespace path string true none path path string true none version path string true none fields query string false A list of fields to include in the response. exclude_fields query string false A list of fields to exclude from the response. Example responses 200 Response { \"docs_blob\": {} } Responses Status Meaning Description Schema 200 OK none CollectionVersionDocsResponse This operation does not require authentication Pulp_Ansible: Api V3 Plugin Ansible Imports Collections pulp_ansible_galaxy_api_v3_plugin_ansible_imports_collections_read Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/{path}/api/v3/plugin/ansible/imports/collections/{task}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/{path}/api/v3/plugin/ansible/imports/collections/{task}/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/{path}/api/v3/plugin/ansible/imports/collections/{task}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/{path}/api/v3/plugin/ansible/imports/collections/{task}/', params: { }, headers: headers p JSON.parse(result) GET /pulp_ansible/galaxy/{path}/api/v3/plugin/ansible/imports/collections/{task}/ Inspect a collection import Returns a CollectionImport object. Parameters Name In Type Required Description path path string true none since query string false Filter messages since a given timestamp task path string(uuid) true A unique value identifying this collection import. fields query string false A list of fields to include in the response. exclude_fields query string false A list of fields to exclude from the response. Example responses 200 Response { \"id\": \"497f6eca-6276-4993-bfeb-53cbbbba6f08\", \"state\": \"string\", \"created_at\": \"2019-08-24T14:15:22Z\", \"updated_at\": \"2019-08-24T14:15:22Z\", \"started_at\": \"2019-08-24T14:15:22Z\", \"finished_at\": \"2019-08-24T14:15:22Z\", \"error\": {}, \"messages\": {} } Responses Status Meaning Description Schema 200 OK none CollectionImportDetailResponse This operation does not require authentication Pulp_Ansible: Default Api pulp_ansible_galaxy_default_api_get Code samples package main import ( \"bytes\" \"net/http\" ) func main() { data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/default/api/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/default/api/', { method: 'GET' }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/default/api/') print(r.json()) require 'rest-client' require 'json' result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/default/api/', params: { } p JSON.parse(result) GET /pulp_ansible/galaxy/default/api/ Return a response to the \"GET\" action. Responses Status Meaning Description Schema 200 OK No response body None This operation does not require authentication Pulp_Ansible: Default Api V3 pulp_ansible_galaxy_default_api_v3_read Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/default/api/v3/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/default/api/v3/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/default/api/v3/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/default/api/v3/', params: { }, headers: headers p JSON.parse(result) GET /pulp_ansible/galaxy/default/api/v3/ Legacy v3 endpoint. Example responses 202 Response { \"published\": \"2019-08-24T14:15:22Z\" } Responses Status Meaning Description Schema 202 Accepted none RepoMetadataResponse 302 Found No response body None This operation does not require authentication Pulp_Ansible: Default Api V3 Artifacts Collections pulp_ansible_galaxy_default_api_v3_artifacts_collections_get Code samples package main import ( \"bytes\" \"net/http\" ) func main() { data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/default/api/v3/artifacts/collections/{path}/{filename}\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/default/api/v3/artifacts/collections/{path}/{filename}', { method: 'GET' }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/default/api/v3/artifacts/collections/{path}/{filename}') print(r.json()) require 'rest-client' require 'json' result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/default/api/v3/artifacts/collections/{path}/{filename}', params: { } p JSON.parse(result) GET /pulp_ansible/galaxy/default/api/v3/artifacts/collections/{path}/{filename} Download collection. Parameters Name In Type Required Description filename path string true none path path string true none fields query string false A list of fields to include in the response. exclude_fields query string false A list of fields to exclude from the response. Responses Status Meaning Description Schema 200 OK No response body None This operation does not require authentication Pulp_Ansible: Default Api V3 Collection_Versions All pulp_ansible_galaxy_default_api_v3_collection_versions_all_list Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/default/api/v3/collection_versions/all/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/default/api/v3/collection_versions/all/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/default/api/v3/collection_versions/all/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/default/api/v3/collection_versions/all/', params: { }, headers: headers p JSON.parse(result) GET /pulp_ansible/galaxy/default/api/v3/collection_versions/all/ Legacy v3 endpoint. Example responses 202 Response [ { \"version\": \"string\", \"href\": \"string\", \"created_at\": \"2019-08-24T14:15:22Z\", \"updated_at\": \"2019-08-24T14:15:22Z\", \"requires_ansible\": \"string\", \"artifact\": { \"filename\": \"string\", \"sha256\": \"string\", \"size\": 0 }, \"collection\": { \"id\": \"string\", \"name\": \"string\", \"href\": \"string\" }, \"download_url\": \"string\", \"name\": \"string\", \"namespace\": { \"name\": \"string\" }, \"signatures\": \"string\", \"metadata\": { \"authors\": [ \"string\" ], \"contents\": {}, \"dependencies\": {}, \"description\": \"string\", \"documentation\": \"string\", \"homepage\": \"string\", \"issues\": \"string\", \"license\": [ \"string\" ], \"repository\": \"string\", \"tags\": [ \"string\" ] }, \"git_url\": \"string\", \"git_commit_sha\": \"string\" } ] Responses Status Meaning Description Schema 202 Accepted none Inline 302 Found No response body None Response Schema Status Code 202 Name Type Required Restrictions Description anonymous [ UnpaginatedCollectionVersionResponse ] false none [A serializer for unpaginated CollectionVersion.] \u00bb version string false read-only none \u00bb href string false read-only none \u00bb created_at string(date-time) true none none \u00bb updated_at string(date-time) true none none \u00bb requires_ansible string\u00a6null false none none \u00bb artifact ArtifactRefResponse false read-only A serializer for an Artifact reference. \u00bb\u00bb filename string true none none \u00bb\u00bb sha256 string true none none \u00bb\u00bb size integer true none none \u00bb collection CollectionRefResponse false read-only A serializer for a Collection reference. \u00bb\u00bb id string true none none \u00bb\u00bb name string true none none \u00bb\u00bb href string false read-only none \u00bb download_url string false read-only none \u00bb name string false read-only none \u00bb namespace CollectionNamespaceResponse false read-only A serializer for a Collection Version namespace field. \u00bb\u00bb name string true none none \u00bb signatures string false read-only none \u00bb metadata CollectionMetadataResponse false read-only A serializer for a CollectionVersion metadata. \u00bb\u00bb authors [string] false read-only none \u00bb\u00bb contents object false read-only none \u00bb\u00bb dependencies object false read-only none \u00bb\u00bb description string false read-only none \u00bb\u00bb documentation string false read-only none \u00bb\u00bb homepage string false read-only none \u00bb\u00bb issues string false read-only none \u00bb\u00bb license [string] false read-only none \u00bb\u00bb repository string false read-only none \u00bb\u00bb tags [string] true none none \u00bb git_url string false read-only none \u00bb git_commit_sha string false read-only none This operation does not require authentication Pulp_Ansible: Default Api V3 Collections pulp_ansible_galaxy_default_api_v3_collections_list Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/default/api/v3/collections/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/default/api/v3/collections/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/default/api/v3/collections/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/default/api/v3/collections/', params: { }, headers: headers p JSON.parse(result) GET /pulp_ansible/galaxy/default/api/v3/collections/ Legacy v3 endpoint. Parameters Name In Type Required Description deprecated query boolean false none limit query integer false Number of results to return per page. name query string false none namespace query string false none offset query integer false The initial index from which to return the results. ordering query array[string] false Ordering fields query string false A list of fields to include in the response. exclude_fields query string false A list of fields to exclude from the response. Enumerated Values Parameter Value ordering -group_roles ordering -name ordering -namespace ordering -pk ordering -pulp_created ordering -pulp_id ordering -pulp_labels ordering -pulp_last_updated ordering -synclist ordering -user_roles ordering -versions ordering group_roles ordering name ordering namespace ordering pk ordering pulp_created ordering pulp_id ordering pulp_labels ordering pulp_last_updated ordering synclist ordering user_roles ordering versions Example responses 202 Response { \"meta\": { \"count\": 123 }, \"links\": { \"first\": \"string\", \"previous\": \"string\", \"next\": \"string\", \"last\": \"string\" }, \"data\": [ { \"href\": \"string\", \"namespace\": \"string\", \"name\": \"string\", \"deprecated\": true, \"versions_url\": \"string\", \"highest_version\": {}, \"created_at\": \"2019-08-24T14:15:22Z\", \"updated_at\": \"2019-08-24T14:15:22Z\" } ] } Responses Status Meaning Description Schema 202 Accepted none PaginatedCollectionResponseList 302 Found No response body None This operation does not require authentication pulp_ansible_galaxy_default_api_v3_collections_read Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/default/api/v3/collections/{namespace}/{name}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/default/api/v3/collections/{namespace}/{name}/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/default/api/v3/collections/{namespace}/{name}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/default/api/v3/collections/{namespace}/{name}/', params: { }, headers: headers p JSON.parse(result) GET /pulp_ansible/galaxy/default/api/v3/collections/{namespace}/{name}/ Legacy v3 endpoint. Parameters Name In Type Required Description name path string true none namespace path string true none fields query string false A list of fields to include in the response. exclude_fields query string false A list of fields to exclude from the response. Example responses 202 Response { \"href\": \"string\", \"namespace\": \"string\", \"name\": \"string\", \"deprecated\": true, \"versions_url\": \"string\", \"highest_version\": {}, \"created_at\": \"2019-08-24T14:15:22Z\", \"updated_at\": \"2019-08-24T14:15:22Z\" } Responses Status Meaning Description Schema 202 Accepted none CollectionResponse 302 Found No response body None This operation does not require authentication pulp_ansible_galaxy_default_api_v3_collections_update Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Content-Type\": []string{\"application/json\"}, \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"PATCH\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/default/api/v3/collections/{namespace}/{name}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const inputBody = '{}'; const headers = { 'Content-Type':'application/json', 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/default/api/v3/collections/{namespace}/{name}/', { method: 'PATCH', body: inputBody, headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Content-Type': 'application/json', 'Accept': 'application/json' } r = requests.patch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/default/api/v3/collections/{namespace}/{name}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Content-Type' => 'application/json', 'Accept' => 'application/json' } result = RestClient.patch 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/default/api/v3/collections/{namespace}/{name}/', params: { }, headers: headers p JSON.parse(result) PATCH /pulp_ansible/galaxy/default/api/v3/collections/{namespace}/{name}/ Legacy v3 endpoint. Body parameter {} {} Parameters Name In Type Required Description name path string true none namespace path string true none body body PatchedCollection true none Example responses 202 Response { \"task\": \"http://example.com\" } Responses Status Meaning Description Schema 202 Accepted none AsyncOperationResponse 302 Found No response body None This operation does not require authentication pulp_ansible_galaxy_default_api_v3_collections_delete Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"DELETE\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/default/api/v3/collections/{namespace}/{name}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/default/api/v3/collections/{namespace}/{name}/', { method: 'DELETE', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.delete('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/default/api/v3/collections/{namespace}/{name}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.delete 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/default/api/v3/collections/{namespace}/{name}/', params: { }, headers: headers p JSON.parse(result) DELETE /pulp_ansible/galaxy/default/api/v3/collections/{namespace}/{name}/ Legacy v3 endpoint. Parameters Name In Type Required Description name path string true none namespace path string true none Example responses 202 Response { \"task\": \"http://example.com\" } Responses Status Meaning Description Schema 202 Accepted none AsyncOperationResponse 302 Found No response body None This operation does not require authentication Pulp_Ansible: Default Api V3 Collections Versions pulp_ansible_galaxy_default_api_v3_collections_versions_list Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/default/api/v3/collections/{namespace}/{name}/versions/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/default/api/v3/collections/{namespace}/{name}/versions/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/default/api/v3/collections/{namespace}/{name}/versions/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/default/api/v3/collections/{namespace}/{name}/versions/', params: { }, headers: headers p JSON.parse(result) GET /pulp_ansible/galaxy/default/api/v3/collections/{namespace}/{name}/versions/ Legacy v3 endpoint. Parameters Name In Type Required Description is_highest query boolean false none limit query integer false Number of results to return per page. name path string true none name query string false none namespace path string true none namespace query string false none offset query integer false The initial index from which to return the results. ordering query array[string] false Ordering q query string false none repository_version query string false Repository Version referenced by HREF repository_version_added query string false Repository Version referenced by HREF repository_version_removed query string false Repository Version referenced by HREF tags query string false Filter by comma separate list of tags that must all be matched version query string false Filter results where version matches value fields query string false A list of fields to include in the response. exclude_fields query string false A list of fields to exclude from the response. Enumerated Values Parameter Value ordering -_artifacts ordering -authors ordering -collection ordering -content_ptr ordering -contentartifact ordering -contents ordering -dependencies ordering -description ordering -docs_blob ordering -documentation ordering -download_logs ordering -files ordering -group_roles ordering -homepage ordering -is_highest ordering -issues ordering -license ordering -manifest ordering -name ordering -namespace ordering -pk ordering -pulp_created ordering -pulp_id ordering -pulp_labels ordering -pulp_last_updated ordering -pulp_type ordering -repositories ordering -repository ordering -requires_ansible ordering -search_vector ordering -signatures ordering -tags ordering -timestamp_of_interest ordering -upstream_id ordering -user_roles ordering -version ordering -version_memberships ordering _artifacts ordering authors ordering collection ordering content_ptr ordering contentartifact ordering contents ordering dependencies ordering description ordering docs_blob ordering documentation ordering download_logs ordering files ordering group_roles ordering homepage ordering is_highest ordering issues ordering license ordering manifest ordering name ordering namespace ordering pk ordering pulp_created ordering pulp_id ordering pulp_labels ordering pulp_last_updated ordering pulp_type ordering repositories ordering repository ordering requires_ansible ordering search_vector ordering signatures ordering tags ordering timestamp_of_interest ordering upstream_id ordering user_roles ordering version ordering version_memberships Example responses 202 Response { \"meta\": { \"count\": 123 }, \"links\": { \"first\": \"string\", \"previous\": \"string\", \"next\": \"string\", \"last\": \"string\" }, \"data\": [ { \"version\": \"string\", \"href\": \"string\", \"created_at\": \"2019-08-24T14:15:22Z\", \"updated_at\": \"2019-08-24T14:15:22Z\", \"requires_ansible\": \"string\" } ] } Responses Status Meaning Description Schema 202 Accepted none PaginatedCollectionVersionListResponseList 302 Found No response body None This operation does not require authentication pulp_ansible_galaxy_default_api_v3_collections_versions_read Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/default/api/v3/collections/{namespace}/{name}/versions/{version}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/default/api/v3/collections/{namespace}/{name}/versions/{version}/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/default/api/v3/collections/{namespace}/{name}/versions/{version}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/default/api/v3/collections/{namespace}/{name}/versions/{version}/', params: { }, headers: headers p JSON.parse(result) GET /pulp_ansible/galaxy/default/api/v3/collections/{namespace}/{name}/versions/{version}/ Legacy v3 endpoint. Parameters Name In Type Required Description name path string true none namespace path string true none version path string true none fields query string false A list of fields to include in the response. exclude_fields query string false A list of fields to exclude from the response. Example responses 202 Response { \"version\": \"string\", \"href\": \"string\", \"created_at\": \"2019-08-24T14:15:22Z\", \"updated_at\": \"2019-08-24T14:15:22Z\", \"requires_ansible\": \"string\", \"artifact\": { \"filename\": \"string\", \"sha256\": \"string\", \"size\": 0 }, \"collection\": { \"id\": \"string\", \"name\": \"string\", \"href\": \"string\" }, \"download_url\": \"string\", \"name\": \"string\", \"namespace\": { \"name\": \"string\" }, \"signatures\": \"string\", \"metadata\": { \"authors\": [ \"string\" ], \"contents\": {}, \"dependencies\": {}, \"description\": \"string\", \"documentation\": \"string\", \"homepage\": \"string\", \"issues\": \"string\", \"license\": [ \"string\" ], \"repository\": \"string\", \"tags\": [ \"string\" ] }, \"git_url\": \"string\", \"git_commit_sha\": \"string\", \"manifest\": {}, \"files\": {} } Responses Status Meaning Description Schema 202 Accepted none CollectionVersionResponse 302 Found No response body None This operation does not require authentication pulp_ansible_galaxy_default_api_v3_collections_versions_delete Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"DELETE\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/default/api/v3/collections/{namespace}/{name}/versions/{version}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/default/api/v3/collections/{namespace}/{name}/versions/{version}/', { method: 'DELETE', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.delete('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/default/api/v3/collections/{namespace}/{name}/versions/{version}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.delete 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/default/api/v3/collections/{namespace}/{name}/versions/{version}/', params: { }, headers: headers p JSON.parse(result) DELETE /pulp_ansible/galaxy/default/api/v3/collections/{namespace}/{name}/versions/{version}/ Legacy v3 endpoint. Parameters Name In Type Required Description name path string true none namespace path string true none version path string true none Example responses 202 Response { \"task\": \"http://example.com\" } Responses Status Meaning Description Schema 202 Accepted none AsyncOperationResponse 302 Found No response body None This operation does not require authentication Pulp_Ansible: Default Api V3 Collections Versions Docs-Blob pulp_ansible_galaxy_default_api_v3_collections_versions_docs_blob_read Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/default/api/v3/collections/{namespace}/{name}/versions/{version}/docs-blob/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/default/api/v3/collections/{namespace}/{name}/versions/{version}/docs-blob/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/default/api/v3/collections/{namespace}/{name}/versions/{version}/docs-blob/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/default/api/v3/collections/{namespace}/{name}/versions/{version}/docs-blob/', params: { }, headers: headers p JSON.parse(result) GET /pulp_ansible/galaxy/default/api/v3/collections/{namespace}/{name}/versions/{version}/docs-blob/ Legacy v3 endpoint. Parameters Name In Type Required Description name path string true none namespace path string true none version path string true none fields query string false A list of fields to include in the response. exclude_fields query string false A list of fields to exclude from the response. Example responses 202 Response { \"docs_blob\": {} } Responses Status Meaning Description Schema 202 Accepted none CollectionVersionDocsResponse 302 Found No response body None This operation does not require authentication Pulp_Ansible: Default Api V3 Collections All pulp_ansible_galaxy_default_api_v3_collections_all_list Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/default/api/v3/collections/all/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/default/api/v3/collections/all/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/default/api/v3/collections/all/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/default/api/v3/collections/all/', params: { }, headers: headers p JSON.parse(result) GET /pulp_ansible/galaxy/default/api/v3/collections/all/ Legacy v3 endpoint. Parameters Name In Type Required Description deprecated query boolean false none name query string false none namespace query string false none ordering query array[string] false Ordering fields query string false A list of fields to include in the response. exclude_fields query string false A list of fields to exclude from the response. Enumerated Values Parameter Value ordering -group_roles ordering -name ordering -namespace ordering -pk ordering -pulp_created ordering -pulp_id ordering -pulp_labels ordering -pulp_last_updated ordering -synclist ordering -user_roles ordering -versions ordering group_roles ordering name ordering namespace ordering pk ordering pulp_created ordering pulp_id ordering pulp_labels ordering pulp_last_updated ordering synclist ordering user_roles ordering versions Example responses 202 Response [ { \"href\": \"string\", \"namespace\": \"string\", \"name\": \"string\", \"deprecated\": true, \"versions_url\": \"string\", \"highest_version\": {}, \"created_at\": \"2019-08-24T14:15:22Z\", \"updated_at\": \"2019-08-24T14:15:22Z\" } ] Responses Status Meaning Description Schema 202 Accepted none Inline 302 Found No response body None Response Schema Status Code 202 Name Type Required Restrictions Description anonymous [ CollectionResponse ] false none [A serializer for a Collection.] \u00bb href string false read-only none \u00bb namespace string false read-only none \u00bb name string false read-only none \u00bb deprecated boolean false read-only none \u00bb versions_url string false read-only none \u00bb highest_version object false read-only none \u00bb created_at string(date-time) false read-only none \u00bb updated_at string(date-time) false read-only none This operation does not require authentication Pulp_Ansible: Default Api V3 Imports Collections pulp_ansible_galaxy_default_api_v3_imports_collections_read Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/default/api/v3/imports/collections/{task}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/default/api/v3/imports/collections/{task}/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/default/api/v3/imports/collections/{task}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/default/api/v3/imports/collections/{task}/', params: { }, headers: headers p JSON.parse(result) GET /pulp_ansible/galaxy/default/api/v3/imports/collections/{task}/ Inspect a collection import Legacy v3 endpoint. Parameters Name In Type Required Description task path string(uuid) true A unique value identifying this collection import. fields query string false A list of fields to include in the response. exclude_fields query string false A list of fields to exclude from the response. Example responses 202 Response { \"id\": \"497f6eca-6276-4993-bfeb-53cbbbba6f08\", \"state\": \"string\", \"created_at\": \"2019-08-24T14:15:22Z\", \"updated_at\": \"2019-08-24T14:15:22Z\", \"started_at\": \"2019-08-24T14:15:22Z\", \"finished_at\": \"2019-08-24T14:15:22Z\", \"error\": {}, \"messages\": {} } Responses Status Meaning Description Schema 202 Accepted none CollectionImportDetailResponse 302 Found No response body None This operation does not require authentication Pulp_Ansible: Default Api V3 Plugin Ansible Client-Configuration pulp_ansible_galaxy_default_api_v3_plugin_ansible_client_configuration_get Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/default/api/v3/plugin/ansible/client-configuration/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/default/api/v3/plugin/ansible/client-configuration/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/default/api/v3/plugin/ansible/client-configuration/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/default/api/v3/plugin/ansible/client-configuration/', params: { }, headers: headers p JSON.parse(result) GET /pulp_ansible/galaxy/default/api/v3/plugin/ansible/client-configuration/ Get the client configs. Example responses 200 Response { \"default_distribution_path\": \"string\" } Responses Status Meaning Description Schema 200 OK none ClientConfigurationResponse This operation does not require authentication Pulp_Ansible: Default Api V3 Plugin Ansible Content Collections pulp_ansible_galaxy_default_api_v3_plugin_ansible_content_collections_read Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/default/api/v3/plugin/ansible/content/{distro_base_path}/collections/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/default/api/v3/plugin/ansible/content/{distro_base_path}/collections/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/default/api/v3/plugin/ansible/content/{distro_base_path}/collections/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/default/api/v3/plugin/ansible/content/{distro_base_path}/collections/', params: { }, headers: headers p JSON.parse(result) GET /pulp_ansible/galaxy/default/api/v3/plugin/ansible/content/{distro_base_path}/collections/ ViewSet for Repository Metadata. Parameters Name In Type Required Description distro_base_path path string true none fields query string false A list of fields to include in the response. exclude_fields query string false A list of fields to exclude from the response. Example responses 200 Response { \"published\": \"2019-08-24T14:15:22Z\" } Responses Status Meaning Description Schema 200 OK none RepoMetadataResponse This operation does not require authentication Pulp_Ansible: Default Api V3 Plugin Ansible Content Collections All-Collections pulp_ansible_galaxy_default_api_v3_plugin_ansible_content_collections_all_collections_list Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/default/api/v3/plugin/ansible/content/{distro_base_path}/collections/all-collections/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/default/api/v3/plugin/ansible/content/{distro_base_path}/collections/all-collections/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/default/api/v3/plugin/ansible/content/{distro_base_path}/collections/all-collections/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/default/api/v3/plugin/ansible/content/{distro_base_path}/collections/all-collections/', params: { }, headers: headers p JSON.parse(result) GET /pulp_ansible/galaxy/default/api/v3/plugin/ansible/content/{distro_base_path}/collections/all-collections/ Unpaginated ViewSet for Collections. Parameters Name In Type Required Description deprecated query boolean false none distro_base_path path string true none name query string false none namespace query string false none ordering query array[string] false Ordering fields query string false A list of fields to include in the response. exclude_fields query string false A list of fields to exclude from the response. Enumerated Values Parameter Value ordering -group_roles ordering -name ordering -namespace ordering -pk ordering -pulp_created ordering -pulp_id ordering -pulp_labels ordering -pulp_last_updated ordering -synclist ordering -user_roles ordering -versions ordering group_roles ordering name ordering namespace ordering pk ordering pulp_created ordering pulp_id ordering pulp_labels ordering pulp_last_updated ordering synclist ordering user_roles ordering versions Example responses 200 Response [ { \"href\": \"string\", \"namespace\": \"string\", \"name\": \"string\", \"deprecated\": true, \"versions_url\": \"string\", \"highest_version\": {}, \"created_at\": \"2019-08-24T14:15:22Z\", \"updated_at\": \"2019-08-24T14:15:22Z\" } ] Responses Status Meaning Description Schema 200 OK none Inline Response Schema Status Code 200 Name Type Required Restrictions Description anonymous [ CollectionResponse ] false none [A serializer for a Collection.] \u00bb href string false read-only none \u00bb namespace string false read-only none \u00bb name string false read-only none \u00bb deprecated boolean false read-only none \u00bb versions_url string false read-only none \u00bb highest_version object false read-only none \u00bb created_at string(date-time) false read-only none \u00bb updated_at string(date-time) false read-only none This operation does not require authentication Pulp_Ansible: Default Api V3 Plugin Ansible Content Collections All-Versions pulp_ansible_galaxy_default_api_v3_plugin_ansible_content_collections_all_versions_list Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/default/api/v3/plugin/ansible/content/{distro_base_path}/collections/all-versions/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/default/api/v3/plugin/ansible/content/{distro_base_path}/collections/all-versions/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/default/api/v3/plugin/ansible/content/{distro_base_path}/collections/all-versions/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/default/api/v3/plugin/ansible/content/{distro_base_path}/collections/all-versions/', params: { }, headers: headers p JSON.parse(result) GET /pulp_ansible/galaxy/default/api/v3/plugin/ansible/content/{distro_base_path}/collections/all-versions/ Returns paginated CollectionVersions list. Parameters Name In Type Required Description distro_base_path path string true none fields query string false A list of fields to include in the response. exclude_fields query string false A list of fields to exclude from the response. Example responses 202 Response [ { \"version\": \"string\", \"href\": \"string\", \"created_at\": \"2019-08-24T14:15:22Z\", \"updated_at\": \"2019-08-24T14:15:22Z\", \"requires_ansible\": \"string\", \"artifact\": { \"filename\": \"string\", \"sha256\": \"string\", \"size\": 0 }, \"collection\": { \"id\": \"string\", \"name\": \"string\", \"href\": \"string\" }, \"download_url\": \"string\", \"name\": \"string\", \"namespace\": { \"name\": \"string\" }, \"signatures\": \"string\", \"metadata\": { \"authors\": [ \"string\" ], \"contents\": {}, \"dependencies\": {}, \"description\": \"string\", \"documentation\": \"string\", \"homepage\": \"string\", \"issues\": \"string\", \"license\": [ \"string\" ], \"repository\": \"string\", \"tags\": [ \"string\" ] }, \"git_url\": \"string\", \"git_commit_sha\": \"string\" } ] Responses Status Meaning Description Schema 202 Accepted none Inline Response Schema Status Code 202 Name Type Required Restrictions Description anonymous [ UnpaginatedCollectionVersionResponse ] false none [A serializer for unpaginated CollectionVersion.] \u00bb version string false read-only none \u00bb href string false read-only none \u00bb created_at string(date-time) true none none \u00bb updated_at string(date-time) true none none \u00bb requires_ansible string\u00a6null false none none \u00bb artifact ArtifactRefResponse false read-only A serializer for an Artifact reference. \u00bb\u00bb filename string true none none \u00bb\u00bb sha256 string true none none \u00bb\u00bb size integer true none none \u00bb collection CollectionRefResponse false read-only A serializer for a Collection reference. \u00bb\u00bb id string true none none \u00bb\u00bb name string true none none \u00bb\u00bb href string false read-only none \u00bb download_url string false read-only none \u00bb name string false read-only none \u00bb namespace CollectionNamespaceResponse false read-only A serializer for a Collection Version namespace field. \u00bb\u00bb name string true none none \u00bb signatures string false read-only none \u00bb metadata CollectionMetadataResponse false read-only A serializer for a CollectionVersion metadata. \u00bb\u00bb authors [string] false read-only none \u00bb\u00bb contents object false read-only none \u00bb\u00bb dependencies object false read-only none \u00bb\u00bb description string false read-only none \u00bb\u00bb documentation string false read-only none \u00bb\u00bb homepage string false read-only none \u00bb\u00bb issues string false read-only none \u00bb\u00bb license [string] false read-only none \u00bb\u00bb repository string false read-only none \u00bb\u00bb tags [string] true none none \u00bb git_url string false read-only none \u00bb git_commit_sha string false read-only none This operation does not require authentication Pulp_Ansible: Default Api V3 Plugin Ansible Content Collections Artifacts pulp_ansible_galaxy_default_api_v3_plugin_ansible_content_collections_artifacts_download Code samples package main import ( \"bytes\" \"net/http\" ) func main() { data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/default/api/v3/plugin/ansible/content/{distro_base_path}/collections/artifacts/{filename}\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/default/api/v3/plugin/ansible/content/{distro_base_path}/collections/artifacts/{filename}', { method: 'GET' }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/default/api/v3/plugin/ansible/content/{distro_base_path}/collections/artifacts/{filename}') print(r.json()) require 'rest-client' require 'json' result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/default/api/v3/plugin/ansible/content/{distro_base_path}/collections/artifacts/{filename}', params: { } p JSON.parse(result) GET /pulp_ansible/galaxy/default/api/v3/plugin/ansible/content/{distro_base_path}/collections/artifacts/{filename} Collection download endpoint. Parameters Name In Type Required Description distro_base_path path string true none filename path string true none fields query string false A list of fields to include in the response. exclude_fields query string false A list of fields to exclude from the response. Responses Status Meaning Description Schema 200 OK No response body None This operation does not require authentication Pulp_Ansible: Default Api V3 Plugin Ansible Content Collections Index pulp_ansible_galaxy_default_api_v3_plugin_ansible_content_collections_index_list Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/default/api/v3/plugin/ansible/content/{distro_base_path}/collections/index/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/default/api/v3/plugin/ansible/content/{distro_base_path}/collections/index/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/default/api/v3/plugin/ansible/content/{distro_base_path}/collections/index/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/default/api/v3/plugin/ansible/content/{distro_base_path}/collections/index/', params: { }, headers: headers p JSON.parse(result) GET /pulp_ansible/galaxy/default/api/v3/plugin/ansible/content/{distro_base_path}/collections/index/ ViewSet for Collections. Parameters Name In Type Required Description deprecated query boolean false none distro_base_path path string true none limit query integer false Number of results to return per page. name query string false none namespace query string false none offset query integer false The initial index from which to return the results. ordering query array[string] false Ordering fields query string false A list of fields to include in the response. exclude_fields query string false A list of fields to exclude from the response. Enumerated Values Parameter Value ordering -group_roles ordering -name ordering -namespace ordering -pk ordering -pulp_created ordering -pulp_id ordering -pulp_labels ordering -pulp_last_updated ordering -synclist ordering -user_roles ordering -versions ordering group_roles ordering name ordering namespace ordering pk ordering pulp_created ordering pulp_id ordering pulp_labels ordering pulp_last_updated ordering synclist ordering user_roles ordering versions Example responses 200 Response { \"meta\": { \"count\": 123 }, \"links\": { \"first\": \"string\", \"previous\": \"string\", \"next\": \"string\", \"last\": \"string\" }, \"data\": [ { \"href\": \"string\", \"namespace\": \"string\", \"name\": \"string\", \"deprecated\": true, \"versions_url\": \"string\", \"highest_version\": {}, \"created_at\": \"2019-08-24T14:15:22Z\", \"updated_at\": \"2019-08-24T14:15:22Z\" } ] } Responses Status Meaning Description Schema 200 OK none PaginatedCollectionResponseList This operation does not require authentication pulp_ansible_galaxy_default_api_v3_plugin_ansible_content_collections_index_read Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/default/api/v3/plugin/ansible/content/{distro_base_path}/collections/index/{namespace}/{name}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/default/api/v3/plugin/ansible/content/{distro_base_path}/collections/index/{namespace}/{name}/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/default/api/v3/plugin/ansible/content/{distro_base_path}/collections/index/{namespace}/{name}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/default/api/v3/plugin/ansible/content/{distro_base_path}/collections/index/{namespace}/{name}/', params: { }, headers: headers p JSON.parse(result) GET /pulp_ansible/galaxy/default/api/v3/plugin/ansible/content/{distro_base_path}/collections/index/{namespace}/{name}/ ViewSet for Collections. Parameters Name In Type Required Description distro_base_path path string true none name path string true none namespace path string true none fields query string false A list of fields to include in the response. exclude_fields query string false A list of fields to exclude from the response. Example responses 200 Response { \"href\": \"string\", \"namespace\": \"string\", \"name\": \"string\", \"deprecated\": true, \"versions_url\": \"string\", \"highest_version\": {}, \"created_at\": \"2019-08-24T14:15:22Z\", \"updated_at\": \"2019-08-24T14:15:22Z\" } Responses Status Meaning Description Schema 200 OK none CollectionResponse This operation does not require authentication pulp_ansible_galaxy_default_api_v3_plugin_ansible_content_collections_index_update Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Content-Type\": []string{\"application/json\"}, \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"PATCH\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/default/api/v3/plugin/ansible/content/{distro_base_path}/collections/index/{namespace}/{name}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const inputBody = '{}'; const headers = { 'Content-Type':'application/json', 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/default/api/v3/plugin/ansible/content/{distro_base_path}/collections/index/{namespace}/{name}/', { method: 'PATCH', body: inputBody, headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Content-Type': 'application/json', 'Accept': 'application/json' } r = requests.patch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/default/api/v3/plugin/ansible/content/{distro_base_path}/collections/index/{namespace}/{name}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Content-Type' => 'application/json', 'Accept' => 'application/json' } result = RestClient.patch 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/default/api/v3/plugin/ansible/content/{distro_base_path}/collections/index/{namespace}/{name}/', params: { }, headers: headers p JSON.parse(result) PATCH /pulp_ansible/galaxy/default/api/v3/plugin/ansible/content/{distro_base_path}/collections/index/{namespace}/{name}/ Trigger an asynchronous update task Body parameter {} {} Parameters Name In Type Required Description distro_base_path path string true none name path string true none namespace path string true none body body PatchedCollection true none Example responses 202 Response { \"task\": \"http://example.com\" } Responses Status Meaning Description Schema 202 Accepted none AsyncOperationResponse This operation does not require authentication pulp_ansible_galaxy_default_api_v3_plugin_ansible_content_collections_index_delete Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"DELETE\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/default/api/v3/plugin/ansible/content/{distro_base_path}/collections/index/{namespace}/{name}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/default/api/v3/plugin/ansible/content/{distro_base_path}/collections/index/{namespace}/{name}/', { method: 'DELETE', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.delete('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/default/api/v3/plugin/ansible/content/{distro_base_path}/collections/index/{namespace}/{name}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.delete 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/default/api/v3/plugin/ansible/content/{distro_base_path}/collections/index/{namespace}/{name}/', params: { }, headers: headers p JSON.parse(result) DELETE /pulp_ansible/galaxy/default/api/v3/plugin/ansible/content/{distro_base_path}/collections/index/{namespace}/{name}/ Trigger an asynchronous delete task Parameters Name In Type Required Description distro_base_path path string true none name path string true none namespace path string true none Example responses 202 Response { \"task\": \"http://example.com\" } Responses Status Meaning Description Schema 202 Accepted none AsyncOperationResponse This operation does not require authentication Pulp_Ansible: Default Api V3 Plugin Ansible Content Collections Index Versions pulp_ansible_galaxy_default_api_v3_plugin_ansible_content_collections_index_versions_list Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/default/api/v3/plugin/ansible/content/{distro_base_path}/collections/index/{namespace}/{name}/versions/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/default/api/v3/plugin/ansible/content/{distro_base_path}/collections/index/{namespace}/{name}/versions/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/default/api/v3/plugin/ansible/content/{distro_base_path}/collections/index/{namespace}/{name}/versions/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/default/api/v3/plugin/ansible/content/{distro_base_path}/collections/index/{namespace}/{name}/versions/', params: { }, headers: headers p JSON.parse(result) GET /pulp_ansible/galaxy/default/api/v3/plugin/ansible/content/{distro_base_path}/collections/index/{namespace}/{name}/versions/ Returns paginated CollectionVersions list. Parameters Name In Type Required Description distro_base_path path string true none is_highest query boolean false none limit query integer false Number of results to return per page. name path string true none name query string false none namespace path string true none namespace query string false none offset query integer false The initial index from which to return the results. ordering query array[string] false Ordering q query string false none repository_version query string false Repository Version referenced by HREF repository_version_added query string false Repository Version referenced by HREF repository_version_removed query string false Repository Version referenced by HREF tags query string false Filter by comma separate list of tags that must all be matched version query string false Filter results where version matches value fields query string false A list of fields to include in the response. exclude_fields query string false A list of fields to exclude from the response. Enumerated Values Parameter Value ordering -_artifacts ordering -authors ordering -collection ordering -content_ptr ordering -contentartifact ordering -contents ordering -dependencies ordering -description ordering -docs_blob ordering -documentation ordering -download_logs ordering -files ordering -group_roles ordering -homepage ordering -is_highest ordering -issues ordering -license ordering -manifest ordering -name ordering -namespace ordering -pk ordering -pulp_created ordering -pulp_id ordering -pulp_labels ordering -pulp_last_updated ordering -pulp_type ordering -repositories ordering -repository ordering -requires_ansible ordering -search_vector ordering -signatures ordering -tags ordering -timestamp_of_interest ordering -upstream_id ordering -user_roles ordering -version ordering -version_memberships ordering _artifacts ordering authors ordering collection ordering content_ptr ordering contentartifact ordering contents ordering dependencies ordering description ordering docs_blob ordering documentation ordering download_logs ordering files ordering group_roles ordering homepage ordering is_highest ordering issues ordering license ordering manifest ordering name ordering namespace ordering pk ordering pulp_created ordering pulp_id ordering pulp_labels ordering pulp_last_updated ordering pulp_type ordering repositories ordering repository ordering requires_ansible ordering search_vector ordering signatures ordering tags ordering timestamp_of_interest ordering upstream_id ordering user_roles ordering version ordering version_memberships Example responses 202 Response { \"meta\": { \"count\": 123 }, \"links\": { \"first\": \"string\", \"previous\": \"string\", \"next\": \"string\", \"last\": \"string\" }, \"data\": [ { \"version\": \"string\", \"href\": \"string\", \"created_at\": \"2019-08-24T14:15:22Z\", \"updated_at\": \"2019-08-24T14:15:22Z\", \"requires_ansible\": \"string\" } ] } Responses Status Meaning Description Schema 202 Accepted none PaginatedCollectionVersionListResponseList This operation does not require authentication pulp_ansible_galaxy_default_api_v3_plugin_ansible_content_collections_index_versions_read Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/default/api/v3/plugin/ansible/content/{distro_base_path}/collections/index/{namespace}/{name}/versions/{version}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/default/api/v3/plugin/ansible/content/{distro_base_path}/collections/index/{namespace}/{name}/versions/{version}/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/default/api/v3/plugin/ansible/content/{distro_base_path}/collections/index/{namespace}/{name}/versions/{version}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/default/api/v3/plugin/ansible/content/{distro_base_path}/collections/index/{namespace}/{name}/versions/{version}/', params: { }, headers: headers p JSON.parse(result) GET /pulp_ansible/galaxy/default/api/v3/plugin/ansible/content/{distro_base_path}/collections/index/{namespace}/{name}/versions/{version}/ Returns a CollectionVersion object. Parameters Name In Type Required Description distro_base_path path string true none name path string true none namespace path string true none version path string true none fields query string false A list of fields to include in the response. exclude_fields query string false A list of fields to exclude from the response. Example responses 200 Response { \"version\": \"string\", \"href\": \"string\", \"created_at\": \"2019-08-24T14:15:22Z\", \"updated_at\": \"2019-08-24T14:15:22Z\", \"requires_ansible\": \"string\", \"artifact\": { \"filename\": \"string\", \"sha256\": \"string\", \"size\": 0 }, \"collection\": { \"id\": \"string\", \"name\": \"string\", \"href\": \"string\" }, \"download_url\": \"string\", \"name\": \"string\", \"namespace\": { \"name\": \"string\" }, \"signatures\": \"string\", \"metadata\": { \"authors\": [ \"string\" ], \"contents\": {}, \"dependencies\": {}, \"description\": \"string\", \"documentation\": \"string\", \"homepage\": \"string\", \"issues\": \"string\", \"license\": [ \"string\" ], \"repository\": \"string\", \"tags\": [ \"string\" ] }, \"git_url\": \"string\", \"git_commit_sha\": \"string\", \"manifest\": {}, \"files\": {} } Responses Status Meaning Description Schema 200 OK none CollectionVersionResponse This operation does not require authentication pulp_ansible_galaxy_default_api_v3_plugin_ansible_content_collections_index_versions_delete Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"DELETE\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/default/api/v3/plugin/ansible/content/{distro_base_path}/collections/index/{namespace}/{name}/versions/{version}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/default/api/v3/plugin/ansible/content/{distro_base_path}/collections/index/{namespace}/{name}/versions/{version}/', { method: 'DELETE', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.delete('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/default/api/v3/plugin/ansible/content/{distro_base_path}/collections/index/{namespace}/{name}/versions/{version}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.delete 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/default/api/v3/plugin/ansible/content/{distro_base_path}/collections/index/{namespace}/{name}/versions/{version}/', params: { }, headers: headers p JSON.parse(result) DELETE /pulp_ansible/galaxy/default/api/v3/plugin/ansible/content/{distro_base_path}/collections/index/{namespace}/{name}/versions/{version}/ Trigger an asynchronous delete task Parameters Name In Type Required Description distro_base_path path string true none name path string true none namespace path string true none version path string true none Example responses 202 Response { \"task\": \"http://example.com\" } Responses Status Meaning Description Schema 202 Accepted none AsyncOperationResponse This operation does not require authentication Pulp_Ansible: Default Api V3 Plugin Ansible Content Collections Index Versions Docs-Blob pulp_ansible_galaxy_default_api_v3_plugin_ansible_content_collections_index_versions_docs_blob_read Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/default/api/v3/plugin/ansible/content/{distro_base_path}/collections/index/{namespace}/{name}/versions/{version}/docs-blob/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/default/api/v3/plugin/ansible/content/{distro_base_path}/collections/index/{namespace}/{name}/versions/{version}/docs-blob/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/default/api/v3/plugin/ansible/content/{distro_base_path}/collections/index/{namespace}/{name}/versions/{version}/docs-blob/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/default/api/v3/plugin/ansible/content/{distro_base_path}/collections/index/{namespace}/{name}/versions/{version}/docs-blob/', params: { }, headers: headers p JSON.parse(result) GET /pulp_ansible/galaxy/default/api/v3/plugin/ansible/content/{distro_base_path}/collections/index/{namespace}/{name}/versions/{version}/docs-blob/ Returns a CollectionVersion object. Parameters Name In Type Required Description distro_base_path path string true none name path string true none namespace path string true none version path string true none fields query string false A list of fields to include in the response. exclude_fields query string false A list of fields to exclude from the response. Example responses 200 Response { \"docs_blob\": {} } Responses Status Meaning Description Schema 200 OK none CollectionVersionDocsResponse This operation does not require authentication Pulp_Ansible: Default Api V3 Plugin Ansible Imports Collections pulp_ansible_galaxy_default_api_v3_plugin_ansible_imports_collections_read Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/default/api/v3/plugin/ansible/imports/collections/{task}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/default/api/v3/plugin/ansible/imports/collections/{task}/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/default/api/v3/plugin/ansible/imports/collections/{task}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/default/api/v3/plugin/ansible/imports/collections/{task}/', params: { }, headers: headers p JSON.parse(result) GET /pulp_ansible/galaxy/default/api/v3/plugin/ansible/imports/collections/{task}/ Inspect a collection import Returns a CollectionImport object. Parameters Name In Type Required Description since query string false Filter messages since a given timestamp task path string(uuid) true A unique value identifying this collection import. fields query string false A list of fields to include in the response. exclude_fields query string false A list of fields to exclude from the response. Example responses 200 Response { \"id\": \"497f6eca-6276-4993-bfeb-53cbbbba6f08\", \"state\": \"string\", \"created_at\": \"2019-08-24T14:15:22Z\", \"updated_at\": \"2019-08-24T14:15:22Z\", \"started_at\": \"2019-08-24T14:15:22Z\", \"finished_at\": \"2019-08-24T14:15:22Z\", \"error\": {}, \"messages\": {} } Responses Status Meaning Description Schema 200 OK none CollectionImportDetailResponse This operation does not require authentication Token token_get Code samples package main import ( \"bytes\" \"net/http\" ) func main() { data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/token/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/token/', { method: 'GET' }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/token/') print(r.json()) require 'rest-client' require 'json' result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/token/', params: { } p JSON.parse(result) GET /token/ Handles GET requests for the /token/ endpoint. Responses Status Meaning Description Schema 200 OK No response body None To perform this operation, you must be authenticated by means of one of the following methods: basicAuth Schemas AccessPolicy { \"permissions_assignment\": [ {} ], \"creation_hooks\": [ {} ], \"statements\": [ {} ], \"queryset_scoping\": {} } Serializer for AccessPolicy. Properties Name Type Required Restrictions Description permissions_assignment [object] false none List of callables that define the new permissions to be created for new objects.This is deprecated. Use creation_hooks instead. creation_hooks [object] false none List of callables that may associate user roles for new objects. statements [object] true none List of policy statements defining the policy. queryset_scoping object false none A callable for performing queryset scoping. See plugin documentation for valid callables. Set to blank to turn off queryset scoping. AccessPolicyResponse { \"pulp_href\": \"http://example.com\", \"pulp_created\": \"2019-08-24T14:15:22Z\", \"permissions_assignment\": [ {} ], \"creation_hooks\": [ {} ], \"statements\": [ {} ], \"viewset_name\": \"string\", \"customized\": true, \"queryset_scoping\": {} } Serializer for AccessPolicy. Properties Name Type Required Restrictions Description pulp_href string(uri) false read-only none pulp_created string(date-time) false read-only Timestamp of creation. permissions_assignment [object] false none List of callables that define the new permissions to be created for new objects.This is deprecated. Use creation_hooks instead. creation_hooks [object] false none List of callables that may associate user roles for new objects. statements [object] true none List of policy statements defining the policy. viewset_name string false read-only The name of ViewSet this AccessPolicy authorizes. customized boolean false read-only True if the AccessPolicy has been user-modified. False otherwise. queryset_scoping object false none A callable for performing queryset scoping. See plugin documentation for valid callables. Set to blank to turn off queryset scoping. AnsibleDistributionResponse { \"name\": \"string\", \"base_path\": \"string\", \"content_guard\": \"75e6b91e-c196-4627-9383-ce2e1e08d705\", \"created_at\": \"2019-08-24T14:15:22Z\", \"updated_at\": \"2019-08-24T14:15:22Z\" } Properties Name Type Required Restrictions Description name string true none none base_path string true none none content_guard string(uuid)\u00a6null false none none created_at string(date-time) true none none updated_at string(date-time) true none none AnsibleRepositoryRebuild { \"namespace\": \"string\", \"name\": \"string\", \"version\": \"string\" } Serializer for Ansible Repository Rebuild. Properties Name Type Required Restrictions Description namespace string\u00a6null false none none name string\u00a6null false none none version string\u00a6null false none none AnsibleRepositoryResponse { \"name\": \"string\", \"description\": \"string\", \"next_version\": 2147483647, \"distributions\": [ { \"name\": \"string\", \"base_path\": \"string\", \"content_guard\": \"75e6b91e-c196-4627-9383-ce2e1e08d705\", \"created_at\": \"2019-08-24T14:15:22Z\", \"updated_at\": \"2019-08-24T14:15:22Z\" } ], \"created_at\": \"2019-08-24T14:15:22Z\", \"updated_at\": \"2019-08-24T14:15:22Z\", \"last_sync_task\": \"string\" } Properties Name Type Required Restrictions Description name string true none none description string\u00a6null false none none next_version integer false none none distributions [ AnsibleDistributionResponse ] false read-only none created_at string(date-time) true none none updated_at string(date-time) true none none last_sync_task string false read-only none AnsibleRepositorySignature { \"content_units\": [ null ], \"signing_service\": \"http://example.com\" } A serializer for the signing action. Properties Name Type Required Restrictions Description content_units [any] true none List of collection version hrefs to sign, use * to sign all content in repository signing_service string(uri) true none A signing service to use to sign the collections AnsibleRepositorySyncURL { \"remote\": \"http://example.com\", \"mirror\": false, \"optimize\": true } Serializer for Ansible Repository Sync URL. Properties Name Type Required Restrictions Description remote string(uri) false none A remote to sync from. This will override a remote set on repository. mirror boolean false none If True , synchronization will remove all content that is not present in the remote repository. If False , sync will be additive only. optimize boolean false none Whether to optimize sync or not. Artifact { \"file\": \"string\", \"size\": 0, \"md5\": \"string\", \"sha1\": \"string\", \"sha224\": \"string\", \"sha256\": \"string\", \"sha384\": \"string\", \"sha512\": \"string\" } Base serializer for use with :class: pulpcore.app.models.Model This ensures that all Serializers provide values for the 'pulp_href` field. The class provides a default for the ref_name attribute in the ModelSerializers's Meta class. This ensures that the OpenAPI definitions of plugins are namespaced properly. Properties Name Type Required Restrictions Description file string(binary) true none The stored file. size integer false none The size of the file in bytes. md5 string\u00a6null false none The MD5 checksum of the file if available. sha1 string\u00a6null false none The SHA-1 checksum of the file if available. sha224 string\u00a6null false none The SHA-224 checksum of the file if available. sha256 string\u00a6null false none The SHA-256 checksum of the file if available. sha384 string\u00a6null false none The SHA-384 checksum of the file if available. sha512 string\u00a6null false none The SHA-512 checksum of the file if available. ArtifactRefResponse { \"filename\": \"string\", \"sha256\": \"string\", \"size\": 0 } A serializer for an Artifact reference. Properties Name Type Required Restrictions Description filename string true none none sha256 string true none none size integer true none none ArtifactResponse { \"pulp_href\": \"http://example.com\", \"pulp_created\": \"2019-08-24T14:15:22Z\", \"file\": \"string\", \"size\": 0, \"md5\": \"string\", \"sha1\": \"string\", \"sha224\": \"string\", \"sha256\": \"string\", \"sha384\": \"string\", \"sha512\": \"string\" } Base serializer for use with :class: pulpcore.app.models.Model This ensures that all Serializers provide values for the 'pulp_href` field. The class provides a default for the ref_name attribute in the ModelSerializers's Meta class. This ensures that the OpenAPI definitions of plugins are namespaced properly. Properties Name Type Required Restrictions Description pulp_href string(uri) false read-only none pulp_created string(date-time) false read-only Timestamp of creation. file string true none The stored file. size integer false none The size of the file in bytes. md5 string\u00a6null false none The MD5 checksum of the file if available. sha1 string\u00a6null false none The SHA-1 checksum of the file if available. sha224 string\u00a6null false none The SHA-224 checksum of the file if available. sha256 string\u00a6null false none The SHA-256 checksum of the file if available. sha384 string\u00a6null false none The SHA-384 checksum of the file if available. sha512 string\u00a6null false none The SHA-512 checksum of the file if available. AsyncOperationResponse { \"task\": \"http://example.com\" } Serializer for asynchronous operations. Properties Name Type Required Restrictions Description task string(uri) true none The href of the task. ClientConfigurationResponse { \"default_distribution_path\": \"string\" } Configuration settings for the ansible-galaxy client. Properties Name Type Required Restrictions Description default_distribution_path string\u00a6null true none none CollectionImportDetailResponse { \"id\": \"497f6eca-6276-4993-bfeb-53cbbbba6f08\", \"state\": \"string\", \"created_at\": \"2019-08-24T14:15:22Z\", \"updated_at\": \"2019-08-24T14:15:22Z\", \"started_at\": \"2019-08-24T14:15:22Z\", \"finished_at\": \"2019-08-24T14:15:22Z\", \"error\": {}, \"messages\": {} } A serializer for a CollectionImport detail view. Properties Name Type Required Restrictions Description id string(uuid) true none none state string true none none created_at string(date-time) true none none updated_at string(date-time) true none none started_at string(date-time) true none none finished_at string(date-time) false none none error object false none none messages object true none none CollectionMetadataResponse { \"authors\": [ \"string\" ], \"contents\": {}, \"dependencies\": {}, \"description\": \"string\", \"documentation\": \"string\", \"homepage\": \"string\", \"issues\": \"string\", \"license\": [ \"string\" ], \"repository\": \"string\", \"tags\": [ \"string\" ] } A serializer for a CollectionVersion metadata. Properties Name Type Required Restrictions Description authors [string] false read-only none contents object false read-only none dependencies object false read-only none description string false read-only none documentation string false read-only none homepage string false read-only none issues string false read-only none license [string] false read-only none repository string false read-only none tags [string] true none none CollectionNamespaceResponse { \"name\": \"string\" } A serializer for a Collection Version namespace field. Properties Name Type Required Restrictions Description name string true none none CollectionOneShot { \"file\": \"string\", \"sha256\": \"string\", \"expected_namespace\": \"string\", \"expected_name\": \"string\", \"expected_version\": \"string\" } A serializer for the Collection One Shot Upload API. Properties Name Type Required Restrictions Description file string(binary) true none The Collection tarball. sha256 string false none An optional sha256 checksum of the uploaded file. expected_namespace string false none The expected 'namespace' of the Collection to be verified against the metadata during import. expected_name string false none The expected 'name' of the Collection to be verified against the metadata during import. expected_version string false none The expected version of the Collection to be verified against the metadata during import. CollectionRefResponse { \"id\": \"string\", \"name\": \"string\", \"href\": \"string\" } A serializer for a Collection reference. Properties Name Type Required Restrictions Description id string true none none name string true none none href string false read-only none CollectionResponse { \"href\": \"string\", \"namespace\": \"string\", \"name\": \"string\", \"deprecated\": true, \"versions_url\": \"string\", \"highest_version\": {}, \"created_at\": \"2019-08-24T14:15:22Z\", \"updated_at\": \"2019-08-24T14:15:22Z\" } A serializer for a Collection. Properties Name Type Required Restrictions Description href string false read-only none namespace string false read-only none name string false read-only none deprecated boolean false read-only none versions_url string false read-only none highest_version object false read-only none created_at string(date-time) false read-only none updated_at string(date-time) false read-only none CollectionUploadWithDownloadUrl { \"file\": \"string\", \"sha256\": \"string\" } A serializer for the Collection One Shot Upload API. Properties Name Type Required Restrictions Description file string(binary) true none none sha256 string false none none CollectionVersionDocsResponse { \"docs_blob\": {} } A serializer to display the docs_blob of a CollectionVersion. Properties Name Type Required Restrictions Description docs_blob object true none none CollectionVersionListResponse { \"version\": \"string\", \"href\": \"string\", \"created_at\": \"2019-08-24T14:15:22Z\", \"updated_at\": \"2019-08-24T14:15:22Z\", \"requires_ansible\": \"string\" } A serializer for a CollectionVersion list item. Properties Name Type Required Restrictions Description version string false read-only none href string false read-only none created_at string(date-time) true none none updated_at string(date-time) true none none requires_ansible string\u00a6null false none none CollectionVersionResponse { \"version\": \"string\", \"href\": \"string\", \"created_at\": \"2019-08-24T14:15:22Z\", \"updated_at\": \"2019-08-24T14:15:22Z\", \"requires_ansible\": \"string\", \"artifact\": { \"filename\": \"string\", \"sha256\": \"string\", \"size\": 0 }, \"collection\": { \"id\": \"string\", \"name\": \"string\", \"href\": \"string\" }, \"download_url\": \"string\", \"name\": \"string\", \"namespace\": { \"name\": \"string\" }, \"signatures\": \"string\", \"metadata\": { \"authors\": [ \"string\" ], \"contents\": {}, \"dependencies\": {}, \"description\": \"string\", \"documentation\": \"string\", \"homepage\": \"string\", \"issues\": \"string\", \"license\": [ \"string\" ], \"repository\": \"string\", \"tags\": [ \"string\" ] }, \"git_url\": \"string\", \"git_commit_sha\": \"string\", \"manifest\": {}, \"files\": {} } A serializer for a CollectionVersion. Properties Name Type Required Restrictions Description version string false read-only none href string false read-only none created_at string(date-time) true none none updated_at string(date-time) true none none requires_ansible string\u00a6null false none none artifact ArtifactRefResponse false read-only A serializer for an Artifact reference. collection CollectionRefResponse false read-only A serializer for a Collection reference. download_url string false read-only none name string false read-only none namespace CollectionNamespaceResponse false read-only A serializer for a Collection Version namespace field. signatures string false read-only none metadata CollectionMetadataResponse false read-only A serializer for a CollectionVersion metadata. git_url string false read-only none git_commit_sha string false read-only none manifest object false read-only A JSON field holding MANIFEST.json data. files object false read-only A JSON field holding FILES.json data. ContainerNamespaceResponse { \"id\": \"497f6eca-6276-4993-bfeb-53cbbbba6f08\", \"pulp_href\": \"http://example.com\", \"name\": \"string\", \"my_permissions\": {}, \"owners\": [ null ], \"created_at\": \"2019-08-24T14:15:22Z\", \"updated_at\": \"2019-08-24T14:15:22Z\" } Properties Name Type Required Restrictions Description id string(uuid) true none none pulp_href string(uri) false read-only none name string false read-only none my_permissions MyPermissionsFieldResponse false read-only none owners [any] false read-only none created_at string(date-time) true none none updated_at string(date-time) true none none ContainerRepositoryResponse { \"id\": \"497f6eca-6276-4993-bfeb-53cbbbba6f08\", \"pulp_href\": \"http://example.com\", \"name\": \"string\", \"pulp\": {}, \"namespace\": { \"id\": \"497f6eca-6276-4993-bfeb-53cbbbba6f08\", \"pulp_href\": \"http://example.com\", \"name\": \"string\", \"my_permissions\": {}, \"owners\": [ null ], \"created_at\": \"2019-08-24T14:15:22Z\", \"updated_at\": \"2019-08-24T14:15:22Z\" }, \"description\": \"string\", \"created_at\": \"2019-08-24T14:15:22Z\", \"updated_at\": \"2019-08-24T14:15:22Z\" } Properties Name Type Required Restrictions Description id string(uuid) false read-only none pulp_href string(uri) false read-only none name string false read-only none pulp object false read-only none namespace ContainerNamespaceResponse true none none description string\u00a6null false read-only none created_at string(date-time) false read-only none updated_at string(date-time) false read-only none ContainerRepositorySyncURL { \"remote\": \"http://example.com\", \"mirror\": false, \"signed_only\": false } Serializer for Container Sync. Properties Name Type Required Restrictions Description remote string(uri) false none A remote to sync from. This will override a remote set on repository. mirror boolean false none If True , synchronization will remove all content that is not present in the remote repository. If False , sync will be additive only. signed_only boolean false none If True , only signed content will be synced. Signatures are not verified. ContentAppStatusResponse { \"name\": \"string\", \"last_heartbeat\": \"2019-08-24T14:15:22Z\" } Base serializer for use with :class: pulpcore.app.models.Model This ensures that all Serializers provide values for the 'pulp_href` field. The class provides a default for the ref_name attribute in the ModelSerializers's Meta class. This ensures that the OpenAPI definitions of plugins are namespaced properly. Properties Name Type Required Restrictions Description name string false read-only The name of the worker. last_heartbeat string(date-time) false read-only Timestamp of the last time the worker talked to the service. ContentGuardResponse { \"pulp_href\": \"http://example.com\", \"pulp_created\": \"2019-08-24T14:15:22Z\", \"name\": \"string\", \"description\": \"string\" } Base serializer for use with :class: pulpcore.app.models.Model This ensures that all Serializers provide values for the 'pulp_href` field. The class provides a default for the ref_name attribute in the ModelSerializers's Meta class. This ensures that the OpenAPI definitions of plugins are namespaced properly. Properties Name Type Required Restrictions Description pulp_href string(uri) false read-only none pulp_created string(date-time) false read-only Timestamp of creation. name string true none The unique name. description string\u00a6null false none An optional description. ContentRedirectContentGuard { \"name\": \"string\", \"description\": \"string\" } A serializer for ContentRedirectContentGuard. Properties Name Type Required Restrictions Description name string true none The unique name. description string\u00a6null false none An optional description. ContentRedirectContentGuardResponse { \"pulp_href\": \"http://example.com\", \"pulp_created\": \"2019-08-24T14:15:22Z\", \"name\": \"string\", \"description\": \"string\" } A serializer for ContentRedirectContentGuard. Properties Name Type Required Restrictions Description pulp_href string(uri) false read-only none pulp_created string(date-time) false read-only Timestamp of creation. name string true none The unique name. description string\u00a6null false none An optional description. ContentSummaryResponse { \"added\": { \"property1\": {}, \"property2\": {} }, \"removed\": { \"property1\": {}, \"property2\": {} }, \"present\": { \"property1\": {}, \"property2\": {} } } Serializer for the RepositoryVersion content summary Properties Name Type Required Restrictions Description added object true none none \u00bb additionalProperties object false none none removed object true none none \u00bb additionalProperties object false none none present object true none none \u00bb additionalProperties object false none none Copy { \"config\": {} } A serializer for Content Copy API. Properties Name Type Required Restrictions Description config object true none A JSON document describing sources, destinations, and content to be copied CurrentUser { \"username\": \"string\", \"first_name\": \"string\", \"last_name\": \"string\", \"email\": \"user@example.com\", \"password\": \"string\", \"is_superuser\": true } Properties Name Type Required Restrictions Description username string true none Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only. first_name string false none none last_name string false none none email string(email) false none none password string false write-only none is_superuser boolean false none Designates that this user has all permissions without explicitly assigning them. CurrentUserResponse { \"id\": 0, \"username\": \"string\", \"first_name\": \"string\", \"last_name\": \"string\", \"email\": \"user@example.com\", \"groups\": [ 0 ], \"date_joined\": \"2019-08-24T14:15:22Z\", \"is_superuser\": true, \"auth_provider\": \"string\", \"model_permissions\": {}, \"is_anonymous\": \"string\" } Properties Name Type Required Restrictions Description id integer false read-only none username string true none Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only. first_name string false none none last_name string false none none email string(email) false none none groups [integer] false read-only The groups this user belongs to. A user will get all permissions granted to each of their groups. date_joined string(date-time) false read-only none is_superuser boolean false none Designates that this user has all permissions without explicitly assigning them. auth_provider string false read-only none model_permissions object false read-only none is_anonymous string false read-only none DatabaseConnectionResponse { \"connected\": true } Serializer for the database connection information Properties Name Type Required Restrictions Description connected boolean true none Info about whether the app can connect to the database DistributionResponse { \"pulp_id\": \"f3ad2d41-3c12-4e29-ba19-4d3927e49b47\", \"name\": \"string\", \"base_path\": \"string\", \"repository\": { \"name\": \"string\", \"description\": \"string\", \"pulp_id\": \"f3ad2d41-3c12-4e29-ba19-4d3927e49b47\", \"pulp_last_updated\": \"2019-08-24T14:15:22Z\", \"content_count\": 0, \"gpgkey\": \"string\" } } Properties Name Type Required Restrictions Description pulp_id string(uuid) false read-only none name string true none none base_path string true none none repository RepositoryResponse true none none EvaluationResponse { \"context\": \"string\", \"is_valid\": true, \"messages\": [ \"string\" ] } Results from evaluating a proposed parameter to a PulpImport call. Properties Name Type Required Restrictions Description context string true none Parameter value being evaluated. is_valid boolean true none True if evaluation passed, false otherwise. messages [string] true none Messages describing results of all evaluations done. May be an empty list. FilesystemExport { \"task\": \"http://example.com\", \"publication\": \"http://example.com\", \"repository_version\": \"http://example.com\" } Serializer for FilesystemExports. Properties Name Type Required Restrictions Description task string(uri)\u00a6null false none A URI of the task that ran the Export. publication string(uri) false write-only A URI of the publication to be exported. repository_version string(uri) false write-only A URI of the repository version export. FilesystemExportResponse { \"pulp_href\": \"http://example.com\", \"pulp_created\": \"2019-08-24T14:15:22Z\", \"task\": \"http://example.com\", \"exported_resources\": [ \"http://example.com\" ], \"params\": {} } Serializer for FilesystemExports. Properties Name Type Required Restrictions Description pulp_href string(uri) false read-only none pulp_created string(date-time) false read-only Timestamp of creation. task string(uri)\u00a6null false none A URI of the task that ran the Export. exported_resources [string] false read-only Resources that were exported. params object false read-only Any additional parameters that were used to create the export. FilesystemExporter { \"name\": \"string\", \"path\": \"string\", \"method\": \"write\" } Serializer for FilesystemExporters. Properties Name Type Required Restrictions Description name string true none Unique name of the file system exporter. path string true none File system location to export to. method MethodEnum false none Method of exporting FilesystemExporterResponse { \"pulp_href\": \"http://example.com\", \"pulp_created\": \"2019-08-24T14:15:22Z\", \"name\": \"string\", \"path\": \"string\", \"method\": \"write\" } Serializer for FilesystemExporters. Properties Name Type Required Restrictions Description pulp_href string(uri) false read-only none pulp_created string(date-time) false read-only Timestamp of creation. name string true none Unique name of the file system exporter. path string true none File system location to export to. method MethodEnum false none Method of exporting GalaxyCollection { \"id\": \"string\", \"name\": \"string\", \"created\": \"2019-08-24T14:15:22Z\", \"modified\": \"2019-08-24T14:15:22Z\" } A serializer for a Collection. Properties Name Type Required Restrictions Description id string true none none name string true none none created string(date-time) true none none modified string(date-time) true none none GalaxyCollectionResponse { \"id\": \"string\", \"name\": \"string\", \"namespace\": {}, \"href\": \"string\", \"versions_url\": \"string\", \"created\": \"2019-08-24T14:15:22Z\", \"modified\": \"2019-08-24T14:15:22Z\", \"latest_version\": {} } A serializer for a Collection. Properties Name Type Required Restrictions Description id string true none none name string true none none namespace object false read-only none href string false read-only none versions_url string false read-only none created string(date-time) true none none modified string(date-time) true none none latest_version object false read-only none GalaxyCollectionVersionResponse { \"version\": \"string\", \"href\": \"string\", \"namespace\": {}, \"collection\": {}, \"artifact\": {}, \"metadata\": { \"authors\": [ \"string\" ], \"contents\": {}, \"dependencies\": {}, \"description\": \"string\", \"documentation\": \"string\", \"homepage\": \"string\", \"issues\": \"string\", \"license\": [ \"string\" ], \"repository\": \"string\", \"tags\": [ \"string\" ] } } A serializer for a CollectionVersion. Properties Name Type Required Restrictions Description version string true none none href string false read-only none namespace object false read-only none collection object false read-only none artifact object false read-only none metadata CollectionMetadataResponse true none A serializer for a CollectionVersion metadata. GalaxyRoleResponse { \"id\": \"string\", \"name\": \"string\", \"namespace\": \"string\" } A serializer for Galaxy's representation of Roles. Properties Name Type Required Restrictions Description id string false read-only none name string true none none namespace string true none none GalaxyRoleVersionResponse { \"name\": \"string\", \"source\": \"string\" } A serializer for Galaxy's representation of Role versions. Properties Name Type Required Restrictions Description name string true none none source string false read-only none Group { \"name\": \"string\" } Serializer for Group. Properties Name Type Required Restrictions Description name string true none Name GroupProgressReportResponse { \"message\": \"string\", \"code\": \"string\", \"total\": 0, \"done\": 0, \"suffix\": \"string\" } Base serializer for use with :class: pulpcore.app.models.Model This ensures that all Serializers provide values for the 'pulp_href` field. The class provides a default for the ref_name attribute in the ModelSerializers's Meta class. This ensures that the OpenAPI definitions of plugins are namespaced properly. Properties Name Type Required Restrictions Description message string false read-only The message shown to the user for the group progress report. code string false read-only Identifies the type of group progress report'. total integer false read-only The total count of items. done integer false read-only The count of items already processed. Defaults to 0. suffix string\u00a6null false read-only The suffix to be shown with the group progress report. GroupResponse { \"name\": \"string\", \"pulp_href\": \"http://example.com\", \"id\": 0 } Serializer for Group. Properties Name Type Required Restrictions Description name string true none Name pulp_href string(uri) false read-only none id integer false read-only none GroupRole { \"role\": \"string\", \"content_object\": \"string\" } Serializer for GroupRole. Properties Name Type Required Restrictions Description role string true none none content_object string\u00a6null true none pulp_href of the object for which role permissions should be asserted. If set to 'null', permissions will act on the model-level. GroupRoleResponse { \"pulp_href\": \"http://example.com\", \"pulp_created\": \"2019-08-24T14:15:22Z\", \"role\": \"string\", \"content_object\": \"string\", \"description\": \"string\", \"permissions\": [ \"string\" ] } Serializer for GroupRole. Properties Name Type Required Restrictions Description pulp_href string(uri) false read-only none pulp_created string(date-time) false read-only Timestamp of creation. role string true none none content_object string\u00a6null true none pulp_href of the object for which role permissions should be asserted. If set to 'null', permissions will act on the model-level. description string false read-only none permissions [string] false read-only none GroupUser { \"username\": \"string\" } Serializer for Users that belong to a Group. Properties Name Type Required Restrictions Description username string true none Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only. GroupUserResponse { \"username\": \"string\", \"pulp_href\": \"http://example.com\" } Serializer for Users that belong to a Group. Properties Name Type Required Restrictions Description username string true none Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only. pulp_href string(uri) false read-only none ImportResponse { \"pulp_href\": \"http://example.com\", \"pulp_created\": \"2019-08-24T14:15:22Z\", \"task\": \"http://example.com\", \"params\": {} } Serializer for Imports. Properties Name Type Required Restrictions Description pulp_href string(uri) false read-only none pulp_created string(date-time) false read-only Timestamp of creation. task string(uri) true none A URI of the Task that ran the Import. params object true none Any parameters that were used to create the import. ImportTaskDetailResponse { \"id\": \"497f6eca-6276-4993-bfeb-53cbbbba6f08\", \"state\": \"string\", \"namespace\": \"string\", \"name\": \"string\", \"version\": \"string\", \"created_at\": \"2019-08-24T14:15:22Z\", \"updated_at\": \"2019-08-24T14:15:22Z\", \"started_at\": \"2019-08-24T14:15:22Z\", \"finished_at\": \"2019-08-24T14:15:22Z\", \"error\": {}, \"messages\": {} } A serializer for a CollectionImport list view. Properties Name Type Required Restrictions Description id string(uuid) true none none state string true none none namespace string true none none name string true none none version string true none none created_at string(date-time) true none none updated_at string(date-time) true none none started_at string(date-time) true none none finished_at string(date-time) true none none error object true none none messages object true none none ImportTaskListResponse { \"id\": \"497f6eca-6276-4993-bfeb-53cbbbba6f08\", \"state\": \"string\", \"namespace\": \"string\", \"name\": \"string\", \"version\": \"string\", \"created_at\": \"2019-08-24T14:15:22Z\", \"updated_at\": \"2019-08-24T14:15:22Z\", \"started_at\": \"2019-08-24T14:15:22Z\", \"finished_at\": \"2019-08-24T14:15:22Z\" } A serializer for a CollectionImport list view. Properties Name Type Required Restrictions Description id string(uuid) true none none state string true none none namespace string true none none name string true none none version string true none none created_at string(date-time) true none none updated_at string(date-time) true none none started_at string(date-time) true none none finished_at string(date-time) true none none ManifestCopy { \"source_repository\": \"http://example.com\", \"source_repository_version\": \"http://example.com\", \"digests\": [ null ], \"media_types\": [ \"application/vnd.docker.distribution.manifest.v1+json\" ] } Serializer for copying manifests from a source repository to a destination repository. Properties Name Type Required Restrictions Description source_repository string(uri) false none A URI of the repository to copy content from. source_repository_version string(uri) false none A URI of the repository version to copy content from. digests [any] false none A list of manifest digests to copy. media_types [ MediaTypesEnum ] false none A list of media_types to copy. MediaTypesEnum \"application/vnd.docker.distribution.manifest.v1+json\" Properties Name Type Required Restrictions Description anonymous string false none none Enumerated Values Property Value anonymous application/vnd.docker.distribution.manifest.v1+json anonymous application/vnd.docker.distribution.manifest.v2+json anonymous application/vnd.docker.distribution.manifest.list.v2+json anonymous application/vnd.oci.image.manifest.v1+json anonymous application/vnd.oci.image.index.v1+json MethodEnum \"write\" Properties Name Type Required Restrictions Description anonymous string false none none Enumerated Values Property Value anonymous write anonymous hardlink anonymous symlink MinimalTaskResponse { \"pulp_href\": \"http://example.com\", \"pulp_created\": \"2019-08-24T14:15:22Z\", \"name\": \"string\", \"state\": \"string\", \"started_at\": \"2019-08-24T14:15:22Z\", \"finished_at\": \"2019-08-24T14:15:22Z\", \"worker\": \"http://example.com\" } Base serializer for use with :class: pulpcore.app.models.Model This ensures that all Serializers provide values for the 'pulp_href` field. The class provides a default for the ref_name attribute in the ModelSerializers's Meta class. This ensures that the OpenAPI definitions of plugins are namespaced properly. Properties Name Type Required Restrictions Description pulp_href string(uri) false read-only none pulp_created string(date-time) false read-only Timestamp of creation. name string true none The name of task. state string false read-only The current state of the task. The possible values include: 'waiting', 'skipped', 'running', 'completed', 'failed', 'canceled' and 'canceling'. started_at string(date-time) false read-only Timestamp of the when this task started execution. finished_at string(date-time) false read-only Timestamp of the when this task stopped execution. worker string(uri) false read-only The worker associated with this task. This field is empty if a worker is not yet assigned. MultipleArtifactContentResponse { \"pulp_href\": \"http://example.com\", \"pulp_created\": \"2019-08-24T14:15:22Z\", \"artifacts\": {} } Base serializer for use with :class: pulpcore.app.models.Model This ensures that all Serializers provide values for the 'pulp_href` field. The class provides a default for the ref_name attribute in the ModelSerializers's Meta class. This ensures that the OpenAPI definitions of plugins are namespaced properly. Properties Name Type Required Restrictions Description pulp_href string(uri) false read-only none pulp_created string(date-time) false read-only Timestamp of creation. artifacts object true none A dict mapping relative paths inside the Content to the correspondingArtifact URLs. E.g.: {'relative/path': '/artifacts/1/' MyPermissionsField {} Properties None MyPermissionsFieldResponse {} Properties None MyPermissionsResponse { \"permissions\": [ \"string\" ] } Properties Name Type Required Restrictions Description permissions [string] true none none Namespace { \"name\": \"string\", \"company\": \"string\", \"email\": \"string\", \"avatar_url\": \"http://example.com\", \"description\": \"string\", \"links\": [ { \"name\": \"string\", \"url\": \"string\" } ], \"groups\": \"string\", \"resources\": \"string\" } Properties Name Type Required Restrictions Description name string true none none company string false none none email string false none none avatar_url string(uri) false none none description string false none none links [ NamespaceLink ] false none none groups string true none none resources string false none none NamespaceLink { \"name\": \"string\", \"url\": \"string\" } Properties Name Type Required Restrictions Description name string true none none url string true none none NamespaceLinkResponse { \"name\": \"string\", \"url\": \"string\" } Properties Name Type Required Restrictions Description name string true none none url string true none none NamespaceRelatedField {} Serializer only returns fields specified in 'include_related' query param. This allows for fields that require more database queries to be optionally included in API responses, which lowers the load on the backend. This is intended as a way to include extra data in list views. Usage: This functions the same as DRF's base serializers.Serializer class with the exception that it will only return fields specified in the ?include_related= query parameter. Example: MySerializer(RelatedFieldsBaseSerializer): foo = CharField() bar = CharField() MySerializer will return: {\"foo\": None} when called with ?include_related=foo and {\"foo\": None, \"bar\" None} when called with ?include_related=foo&include_related=bar . Properties None NamespaceRelatedFieldResponse { \"my_permissions\": {} } Serializer only returns fields specified in 'include_related' query param. This allows for fields that require more database queries to be optionally included in API responses, which lowers the load on the backend. This is intended as a way to include extra data in list views. Usage: This functions the same as DRF's base serializers.Serializer class with the exception that it will only return fields specified in the ?include_related= query parameter. Example: MySerializer(RelatedFieldsBaseSerializer): foo = CharField() bar = CharField() MySerializer will return: {\"foo\": None} when called with ?include_related=foo and {\"foo\": None, \"bar\" None} when called with ?include_related=foo&include_related=bar . Properties Name Type Required Restrictions Description my_permissions MyPermissionsFieldResponse false read-only none NamespaceResponse { \"pulp_href\": \"http://example.com\", \"id\": 0, \"name\": \"string\", \"company\": \"string\", \"email\": \"string\", \"avatar_url\": \"http://example.com\", \"description\": \"string\", \"links\": [ { \"name\": \"string\", \"url\": \"string\" } ], \"groups\": \"string\", \"resources\": \"string\", \"related_fields\": { \"my_permissions\": {} } } Properties Name Type Required Restrictions Description pulp_href string(uri) false read-only none id integer false read-only none name string true none none company string false none none email string false none none avatar_url string(uri) false none none description string false none none links [ NamespaceLinkResponse ] false none none groups string true none none resources string false none none related_fields NamespaceRelatedFieldResponse false read-only Serializer only returns fields specified in 'include_related' query param. This allows for fields that require more database queries to be optionally included in API responses, which lowers the load on the backend. This is intended as a way to include extra data in list views. Usage: This functions the same as DRF's base serializers.Serializer class with the exception that it will only return fields specified in the ?include_related= query parameter. Example: MySerializer(RelatedFieldsBaseSerializer): foo = CharField() bar = CharField() MySerializer will return: {\"foo\": None} when called with ?include_related=foo and {\"foo\": None, \"bar\" None} when called with ?include_related=foo&include_related=bar . NamespaceSummaryResponse { \"pulp_href\": \"http://example.com\", \"id\": 0, \"name\": \"string\", \"company\": \"string\", \"email\": \"string\", \"avatar_url\": \"http://example.com\", \"description\": \"string\", \"groups\": \"string\", \"related_fields\": { \"my_permissions\": {} } } NamespaceSerializer but without 'links' or 'resources'. For use in _ui/collection detail views. Properties Name Type Required Restrictions Description pulp_href string(uri) false read-only none id integer false read-only none name string false read-only none company string false none none email string false none none avatar_url string(uri) false none none description string false none none groups string true none none related_fields NamespaceRelatedFieldResponse false read-only Serializer only returns fields specified in 'include_related' query param. This allows for fields that require more database queries to be optionally included in API responses, which lowers the load on the backend. This is intended as a way to include extra data in list views. Usage: This functions the same as DRF's base serializers.Serializer class with the exception that it will only return fields specified in the ?include_related= query parameter. Example: MySerializer(RelatedFieldsBaseSerializer): foo = CharField() bar = CharField() MySerializer will return: {\"foo\": None} when called with ?include_related=foo and {\"foo\": None, \"bar\" None} when called with ?include_related=foo&include_related=bar . NestedRole { \"users\": [], \"groups\": [], \"role\": \"string\" } Serializer to add/remove object roles to/from users/groups. This is used in conjunction with pulpcore.app.viewsets.base.RolesMixin and requires the underlying object to be passed as content_object in the context. Properties Name Type Required Restrictions Description users [string] false none none groups [string] false none none role string true none none NestedRoleResponse { \"users\": [], \"groups\": [], \"role\": \"string\" } Serializer to add/remove object roles to/from users/groups. This is used in conjunction with pulpcore.app.viewsets.base.RolesMixin and requires the underlying object to be passed as content_object in the context. Properties Name Type Required Restrictions Description users [string] false none none groups [string] false none none role string true none none OCIBuildImage { \"containerfile_artifact\": \"http://example.com\", \"containerfile\": \"string\", \"tag\": \"latest\", \"artifacts\": {} } Serializer for building an OCI container image from a Containerfile. The Containerfile can either be specified via an artifact url, or a new file can be uploaded. A repository must be specified, to which the container image content will be added. Properties Name Type Required Restrictions Description containerfile_artifact string(uri) false none Artifact representing the Containerfile that should be used to run podman-build. containerfile string(binary) false none An uploaded Containerfile that should be used to run podman-build. tag string false none A tag name for the new image being built. artifacts object false none A JSON string where each key is an artifact href and the value is it's relative path (name) inside the /pulp_working_directory of the build container executing the Containerfile. ObjectRolesResponse { \"roles\": [ { \"users\": [], \"groups\": [], \"role\": \"string\" } ] } Properties Name Type Required Restrictions Description roles [ NestedRoleResponse ] true none [Serializer to add/remove object roles to/from users/groups. This is used in conjunction with pulpcore.app.viewsets.base.RolesMixin and requires the underlying object to be passed as content_object in the context.] OrphansCleanup { \"content_hrefs\": [ null ], \"orphan_protection_time\": 0 } Properties Name Type Required Restrictions Description content_hrefs [any] false none Will delete specified content and associated Artifacts if they are orphans. orphan_protection_time integer\u00a6null false none The time in minutes for how long Pulp will hold orphan Content and Artifacts before they become candidates for deletion by this orphan cleanup task. This should ideally be longer than your longest running task otherwise any content created during that task could be cleaned up before the task finishes. If not specified, a default value is taken from the setting ORPHAN_PROTECTION_TIME. PaginatedAccessPolicyResponseList { \"count\": 123, \"next\": \"http://api.example.org/accounts/?offset=400&limit=100\", \"previous\": \"http://api.example.org/accounts/?offset=200&limit=100\", \"results\": [ { \"pulp_href\": \"http://example.com\", \"pulp_created\": \"2019-08-24T14:15:22Z\", \"permissions_assignment\": [ {} ], \"creation_hooks\": [ {} ], \"statements\": [ {} ], \"viewset_name\": \"string\", \"customized\": true, \"queryset_scoping\": {} } ] } Properties Name Type Required Restrictions Description count integer false none none next string(uri)\u00a6null false none none previous string(uri)\u00a6null false none none results [ AccessPolicyResponse ] false none [Serializer for AccessPolicy.] PaginatedArtifactResponseList { \"count\": 123, \"next\": \"http://api.example.org/accounts/?offset=400&limit=100\", \"previous\": \"http://api.example.org/accounts/?offset=200&limit=100\", \"results\": [ { \"pulp_href\": \"http://example.com\", \"pulp_created\": \"2019-08-24T14:15:22Z\", \"file\": \"string\", \"size\": 0, \"md5\": \"string\", \"sha1\": \"string\", \"sha224\": \"string\", \"sha256\": \"string\", \"sha384\": \"string\", \"sha512\": \"string\" } ] } Properties Name Type Required Restrictions Description count integer false none none next string(uri)\u00a6null false none none previous string(uri)\u00a6null false none none results [ ArtifactResponse ] false none [Base serializer for use with :class: pulpcore.app.models.Model This ensures that all Serializers provide values for the 'pulp_href` field. The class provides a default for the ref_name attribute in the ModelSerializers's Meta class. This ensures that the OpenAPI definitions of plugins are namespaced properly.] PaginatedCollectionResponseList { \"meta\": { \"count\": 123 }, \"links\": { \"first\": \"string\", \"previous\": \"string\", \"next\": \"string\", \"last\": \"string\" }, \"data\": [ { \"href\": \"string\", \"namespace\": \"string\", \"name\": \"string\", \"deprecated\": true, \"versions_url\": \"string\", \"highest_version\": {}, \"created_at\": \"2019-08-24T14:15:22Z\", \"updated_at\": \"2019-08-24T14:15:22Z\" } ] } Properties Name Type Required Restrictions Description meta object false none none \u00bb count integer false none none links object false none none \u00bb first string\u00a6null false none none \u00bb previous string\u00a6null false none none \u00bb next string\u00a6null false none none \u00bb last string\u00a6null false none none data [ CollectionResponse ] false none [A serializer for a Collection.] PaginatedCollectionVersionListResponseList { \"meta\": { \"count\": 123 }, \"links\": { \"first\": \"string\", \"previous\": \"string\", \"next\": \"string\", \"last\": \"string\" }, \"data\": [ { \"version\": \"string\", \"href\": \"string\", \"created_at\": \"2019-08-24T14:15:22Z\", \"updated_at\": \"2019-08-24T14:15:22Z\", \"requires_ansible\": \"string\" } ] } Properties Name Type Required Restrictions Description meta object false none none \u00bb count integer false none none links object false none none \u00bb first string\u00a6null false none none \u00bb previous string\u00a6null false none none \u00bb next string\u00a6null false none none \u00bb last string\u00a6null false none none data [ CollectionVersionListResponse ] false none [A serializer for a CollectionVersion list item.] PaginatedContentGuardResponseList { \"count\": 123, \"next\": \"http://api.example.org/accounts/?offset=400&limit=100\", \"previous\": \"http://api.example.org/accounts/?offset=200&limit=100\", \"results\": [ { \"pulp_href\": \"http://example.com\", \"pulp_created\": \"2019-08-24T14:15:22Z\", \"name\": \"string\", \"description\": \"string\" } ] } Properties Name Type Required Restrictions Description count integer false none none next string(uri)\u00a6null false none none previous string(uri)\u00a6null false none none results [ ContentGuardResponse ] false none [Base serializer for use with :class: pulpcore.app.models.Model This ensures that all Serializers provide values for the 'pulp_href` field. The class provides a default for the ref_name attribute in the ModelSerializers's Meta class. This ensures that the OpenAPI definitions of plugins are namespaced properly.] PaginatedContentRedirectContentGuardResponseList { \"count\": 123, \"next\": \"http://api.example.org/accounts/?offset=400&limit=100\", \"previous\": \"http://api.example.org/accounts/?offset=200&limit=100\", \"results\": [ { \"pulp_href\": \"http://example.com\", \"pulp_created\": \"2019-08-24T14:15:22Z\", \"name\": \"string\", \"description\": \"string\" } ] } Properties Name Type Required Restrictions Description count integer false none none next string(uri)\u00a6null false none none previous string(uri)\u00a6null false none none results [ ContentRedirectContentGuardResponse ] false none [A serializer for ContentRedirectContentGuard.] PaginatedDistributionResponseList { \"meta\": { \"count\": 123 }, \"links\": { \"first\": \"string\", \"previous\": \"string\", \"next\": \"string\", \"last\": \"string\" }, \"data\": [ { \"pulp_id\": \"f3ad2d41-3c12-4e29-ba19-4d3927e49b47\", \"name\": \"string\", \"base_path\": \"string\", \"repository\": { \"name\": \"string\", \"description\": \"string\", \"pulp_id\": \"f3ad2d41-3c12-4e29-ba19-4d3927e49b47\", \"pulp_last_updated\": \"2019-08-24T14:15:22Z\", \"content_count\": 0, \"gpgkey\": \"string\" } } ] } Properties Name Type Required Restrictions Description meta object false none none \u00bb count integer false none none links object false none none \u00bb first string\u00a6null false none none \u00bb previous string\u00a6null false none none \u00bb next string\u00a6null false none none \u00bb last string\u00a6null false none none data [ DistributionResponse ] false none none PaginatedFilesystemExportResponseList { \"count\": 123, \"next\": \"http://api.example.org/accounts/?offset=400&limit=100\", \"previous\": \"http://api.example.org/accounts/?offset=200&limit=100\", \"results\": [ { \"pulp_href\": \"http://example.com\", \"pulp_created\": \"2019-08-24T14:15:22Z\", \"task\": \"http://example.com\", \"exported_resources\": [ \"http://example.com\" ], \"params\": {} } ] } Properties Name Type Required Restrictions Description count integer false none none next string(uri)\u00a6null false none none previous string(uri)\u00a6null false none none results [ FilesystemExportResponse ] false none [Serializer for FilesystemExports.] PaginatedFilesystemExporterResponseList { \"count\": 123, \"next\": \"http://api.example.org/accounts/?offset=400&limit=100\", \"previous\": \"http://api.example.org/accounts/?offset=200&limit=100\", \"results\": [ { \"pulp_href\": \"http://example.com\", \"pulp_created\": \"2019-08-24T14:15:22Z\", \"name\": \"string\", \"path\": \"string\", \"method\": \"write\" } ] } Properties Name Type Required Restrictions Description count integer false none none next string(uri)\u00a6null false none none previous string(uri)\u00a6null false none none results [ FilesystemExporterResponse ] false none [Serializer for FilesystemExporters.] PaginatedGalaxyCollectionResponseList { \"count\": 123, \"next\": \"http://api.example.org/accounts/?page=4\", \"previous\": \"http://api.example.org/accounts/?page=2\", \"results\": [ { \"id\": \"string\", \"name\": \"string\", \"namespace\": {}, \"href\": \"string\", \"versions_url\": \"string\", \"created\": \"2019-08-24T14:15:22Z\", \"modified\": \"2019-08-24T14:15:22Z\", \"latest_version\": {} } ] } Properties Name Type Required Restrictions Description count integer false none none next string(uri)\u00a6null false none none previous string(uri)\u00a6null false none none results [ GalaxyCollectionResponse ] false none [A serializer for a Collection.] PaginatedGalaxyCollectionVersionResponseList { \"count\": 123, \"next\": \"http://api.example.org/accounts/?page=4\", \"previous\": \"http://api.example.org/accounts/?page=2\", \"results\": [ { \"version\": \"string\", \"href\": \"string\", \"namespace\": {}, \"collection\": {}, \"artifact\": {}, \"metadata\": { \"authors\": [ \"string\" ], \"contents\": {}, \"dependencies\": {}, \"description\": \"string\", \"documentation\": \"string\", \"homepage\": \"string\", \"issues\": \"string\", \"license\": [ \"string\" ], \"repository\": \"string\", \"tags\": [ \"string\" ] } } ] } Properties Name Type Required Restrictions Description count integer false none none next string(uri)\u00a6null false none none previous string(uri)\u00a6null false none none results [ GalaxyCollectionVersionResponse ] false none [A serializer for a CollectionVersion.] PaginatedGalaxyRoleResponseList { \"count\": 123, \"next\": \"http://api.example.org/accounts/?offset=400&limit=100\", \"previous\": \"http://api.example.org/accounts/?offset=200&limit=100\", \"results\": [ { \"id\": \"string\", \"name\": \"string\", \"namespace\": \"string\" } ] } Properties Name Type Required Restrictions Description count integer false none none next string(uri)\u00a6null false none none previous string(uri)\u00a6null false none none results [ GalaxyRoleResponse ] false none [A serializer for Galaxy's representation of Roles.] PaginatedGalaxyRoleVersionResponseList { \"count\": 123, \"next\": \"http://api.example.org/accounts/?offset=400&limit=100\", \"previous\": \"http://api.example.org/accounts/?offset=200&limit=100\", \"results\": [ { \"name\": \"string\", \"source\": \"string\" } ] } Properties Name Type Required Restrictions Description count integer false none none next string(uri)\u00a6null false none none previous string(uri)\u00a6null false none none results [ GalaxyRoleVersionResponse ] false none [A serializer for Galaxy's representation of Role versions.] PaginatedGroupResponseList { \"meta\": { \"count\": 123 }, \"links\": { \"first\": \"string\", \"previous\": \"string\", \"next\": \"string\", \"last\": \"string\" }, \"data\": [ { \"name\": \"string\", \"pulp_href\": \"http://example.com\", \"id\": 0 } ] } Properties Name Type Required Restrictions Description meta object false none none \u00bb count integer false none none links object false none none \u00bb first string\u00a6null false none none \u00bb previous string\u00a6null false none none \u00bb next string\u00a6null false none none \u00bb last string\u00a6null false none none data [ GroupResponse ] false none [Serializer for Group.] PaginatedGroupRoleResponseList { \"count\": 123, \"next\": \"http://api.example.org/accounts/?offset=400&limit=100\", \"previous\": \"http://api.example.org/accounts/?offset=200&limit=100\", \"results\": [ { \"pulp_href\": \"http://example.com\", \"pulp_created\": \"2019-08-24T14:15:22Z\", \"role\": \"string\", \"content_object\": \"string\", \"description\": \"string\", \"permissions\": [ \"string\" ] } ] } Properties Name Type Required Restrictions Description count integer false none none next string(uri)\u00a6null false none none previous string(uri)\u00a6null false none none results [ GroupRoleResponse ] false none [Serializer for GroupRole.] PaginatedGroupUserResponseList { \"meta\": { \"count\": 123 }, \"links\": { \"first\": \"string\", \"previous\": \"string\", \"next\": \"string\", \"last\": \"string\" }, \"data\": [ { \"username\": \"string\", \"pulp_href\": \"http://example.com\" } ] } Properties Name Type Required Restrictions Description meta object false none none \u00bb count integer false none none links object false none none \u00bb first string\u00a6null false none none \u00bb previous string\u00a6null false none none \u00bb next string\u00a6null false none none \u00bb last string\u00a6null false none none data [ GroupUserResponse ] false none [Serializer for Users that belong to a Group.] PaginatedImportResponseList { \"count\": 123, \"next\": \"http://api.example.org/accounts/?offset=400&limit=100\", \"previous\": \"http://api.example.org/accounts/?offset=200&limit=100\", \"results\": [ { \"pulp_href\": \"http://example.com\", \"pulp_created\": \"2019-08-24T14:15:22Z\", \"task\": \"http://example.com\", \"params\": {} } ] } Properties Name Type Required Restrictions Description count integer false none none next string(uri)\u00a6null false none none previous string(uri)\u00a6null false none none results [ ImportResponse ] false none [Serializer for Imports.] PaginatedImportTaskListResponseList { \"meta\": { \"count\": 123 }, \"links\": { \"first\": \"string\", \"previous\": \"string\", \"next\": \"string\", \"last\": \"string\" }, \"data\": [ { \"id\": \"497f6eca-6276-4993-bfeb-53cbbbba6f08\", \"state\": \"string\", \"namespace\": \"string\", \"name\": \"string\", \"version\": \"string\", \"created_at\": \"2019-08-24T14:15:22Z\", \"updated_at\": \"2019-08-24T14:15:22Z\", \"started_at\": \"2019-08-24T14:15:22Z\", \"finished_at\": \"2019-08-24T14:15:22Z\" } ] } Properties Name Type Required Restrictions Description meta object false none none \u00bb count integer false none none links object false none none \u00bb first string\u00a6null false none none \u00bb previous string\u00a6null false none none \u00bb next string\u00a6null false none none \u00bb last string\u00a6null false none none data [ ImportTaskListResponse ] false none [A serializer for a CollectionImport list view.] PaginatedMultipleArtifactContentResponseList { \"count\": 123, \"next\": \"http://api.example.org/accounts/?offset=400&limit=100\", \"previous\": \"http://api.example.org/accounts/?offset=200&limit=100\", \"results\": [ { \"pulp_href\": \"http://example.com\", \"pulp_created\": \"2019-08-24T14:15:22Z\", \"artifacts\": {} } ] } Properties Name Type Required Restrictions Description count integer false none none next string(uri)\u00a6null false none none previous string(uri)\u00a6null false none none results [ MultipleArtifactContentResponse ] false none [Base serializer for use with :class: pulpcore.app.models.Model This ensures that all Serializers provide values for the 'pulp_href` field. The class provides a default for the ref_name attribute in the ModelSerializers's Meta class. This ensures that the OpenAPI definitions of plugins are namespaced properly.] PaginatedNamespaceSummaryResponseList { \"meta\": { \"count\": 123 }, \"links\": { \"first\": \"string\", \"previous\": \"string\", \"next\": \"string\", \"last\": \"string\" }, \"data\": [ { \"pulp_href\": \"http://example.com\", \"id\": 0, \"name\": \"string\", \"company\": \"string\", \"email\": \"string\", \"avatar_url\": \"http://example.com\", \"description\": \"string\", \"groups\": \"string\", \"related_fields\": { \"my_permissions\": {} } } ] } Properties Name Type Required Restrictions Description meta object false none none \u00bb count integer false none none links object false none none \u00bb first string\u00a6null false none none \u00bb previous string\u00a6null false none none \u00bb next string\u00a6null false none none \u00bb last string\u00a6null false none none data [ NamespaceSummaryResponse ] false none [NamespaceSerializer but without 'links' or 'resources'. For use in _ui/collection detail views.] PaginatedPublicationResponseList { \"count\": 123, \"next\": \"http://api.example.org/accounts/?offset=400&limit=100\", \"previous\": \"http://api.example.org/accounts/?offset=200&limit=100\", \"results\": [ { \"pulp_href\": \"http://example.com\", \"pulp_created\": \"2019-08-24T14:15:22Z\", \"repository_version\": \"http://example.com\", \"repository\": \"http://example.com\" } ] } Properties Name Type Required Restrictions Description count integer false none none next string(uri)\u00a6null false none none previous string(uri)\u00a6null false none none results [ PublicationResponse ] false none [Base serializer for use with :class: pulpcore.app.models.Model This ensures that all Serializers provide values for the 'pulp_href` field. The class provides a default for the ref_name attribute in the ModelSerializers's Meta class. This ensures that the OpenAPI definitions of plugins are namespaced properly.] PaginatedPulpExportResponseList { \"count\": 123, \"next\": \"http://api.example.org/accounts/?offset=400&limit=100\", \"previous\": \"http://api.example.org/accounts/?offset=200&limit=100\", \"results\": [ { \"pulp_href\": \"http://example.com\", \"pulp_created\": \"2019-08-24T14:15:22Z\", \"task\": \"http://example.com\", \"exported_resources\": [ \"http://example.com\" ], \"params\": {}, \"output_file_info\": {}, \"toc_info\": {} } ] } Properties Name Type Required Restrictions Description count integer false none none next string(uri)\u00a6null false none none previous string(uri)\u00a6null false none none results [ PulpExportResponse ] false none [Serializer for PulpExports.] PaginatedPulpExporterResponseList { \"count\": 123, \"next\": \"http://api.example.org/accounts/?offset=400&limit=100\", \"previous\": \"http://api.example.org/accounts/?offset=200&limit=100\", \"results\": [ { \"pulp_href\": \"http://example.com\", \"pulp_created\": \"2019-08-24T14:15:22Z\", \"name\": \"string\", \"path\": \"string\", \"repositories\": [ \"http://example.com\" ], \"last_export\": \"http://example.com\" } ] } Properties Name Type Required Restrictions Description count integer false none none next string(uri)\u00a6null false none none previous string(uri)\u00a6null false none none results [ PulpExporterResponse ] false none [Serializer for pulp exporters.] PaginatedPulpImporterResponseList { \"count\": 123, \"next\": \"http://api.example.org/accounts/?offset=400&limit=100\", \"previous\": \"http://api.example.org/accounts/?offset=200&limit=100\", \"results\": [ { \"pulp_href\": \"http://example.com\", \"pulp_created\": \"2019-08-24T14:15:22Z\", \"name\": \"string\", \"repo_mapping\": { \"property1\": \"string\", \"property2\": \"string\" } } ] } Properties Name Type Required Restrictions Description count integer false none none next string(uri)\u00a6null false none none previous string(uri)\u00a6null false none none results [ PulpImporterResponse ] false none [Serializer for PulpImporters.] PaginatedRBACContentGuardResponseList { \"count\": 123, \"next\": \"http://api.example.org/accounts/?offset=400&limit=100\", \"previous\": \"http://api.example.org/accounts/?offset=200&limit=100\", \"results\": [ { \"pulp_href\": \"http://example.com\", \"pulp_created\": \"2019-08-24T14:15:22Z\", \"name\": \"string\", \"description\": \"string\", \"users\": [ { \"username\": \"string\", \"pulp_href\": \"http://example.com\" } ], \"groups\": [ { \"name\": \"string\", \"pulp_href\": \"http://example.com\", \"id\": 0 } ] } ] } Properties Name Type Required Restrictions Description count integer false none none next string(uri)\u00a6null false none none previous string(uri)\u00a6null false none none results [ RBACContentGuardResponse ] false none [Base serializer for use with :class: pulpcore.app.models.Model This ensures that all Serializers provide values for the 'pulp_href` field. The class provides a default for the ref_name attribute in the ModelSerializers's Meta class. This ensures that the OpenAPI definitions of plugins are namespaced properly.] PaginatedRemoteResponseList { \"count\": 123, \"next\": \"http://api.example.org/accounts/?offset=400&limit=100\", \"previous\": \"http://api.example.org/accounts/?offset=200&limit=100\", \"results\": [ { \"pulp_href\": \"http://example.com\", \"pulp_created\": \"2019-08-24T14:15:22Z\", \"name\": \"string\", \"url\": \"string\", \"ca_cert\": \"string\", \"client_cert\": \"string\", \"tls_validation\": true, \"proxy_url\": \"string\", \"pulp_labels\": {}, \"pulp_last_updated\": \"2019-08-24T14:15:22Z\", \"download_concurrency\": 1, \"max_retries\": 0, \"policy\": \"immediate\", \"total_timeout\": 0, \"connect_timeout\": 0, \"sock_connect_timeout\": 0, \"sock_read_timeout\": 0, \"headers\": [ {} ], \"rate_limit\": 0 } ] } Properties Name Type Required Restrictions Description count integer false none none next string(uri)\u00a6null false none none previous string(uri)\u00a6null false none none results [ RemoteResponse ] false none [Every remote defined by a plugin should have a Remote serializer that inherits from this class. Please import from pulpcore.plugin.serializers rather than from this module directly.] PaginatedRepositoryResponseList { \"count\": 123, \"next\": \"http://api.example.org/accounts/?offset=400&limit=100\", \"previous\": \"http://api.example.org/accounts/?offset=200&limit=100\", \"results\": [ { \"name\": \"string\", \"description\": \"string\", \"pulp_id\": \"f3ad2d41-3c12-4e29-ba19-4d3927e49b47\", \"pulp_last_updated\": \"2019-08-24T14:15:22Z\", \"content_count\": 0, \"gpgkey\": \"string\" } ] } Properties Name Type Required Restrictions Description count integer false none none next string(uri)\u00a6null false none none previous string(uri)\u00a6null false none none results [ RepositoryResponse ] false none none PaginatedRepositoryVersionResponseList { \"count\": 123, \"next\": \"http://api.example.org/accounts/?offset=400&limit=100\", \"previous\": \"http://api.example.org/accounts/?offset=200&limit=100\", \"results\": [ { \"pulp_href\": \"http://example.com\", \"pulp_created\": \"2019-08-24T14:15:22Z\", \"number\": 0, \"repository\": \"http://example.com\", \"base_version\": \"http://example.com\", \"content_summary\": { \"added\": { \"property1\": {}, \"property2\": {} }, \"removed\": { \"property1\": {}, \"property2\": {} }, \"present\": { \"property1\": {}, \"property2\": {} } } } ] } Properties Name Type Required Restrictions Description count integer false none none next string(uri)\u00a6null false none none previous string(uri)\u00a6null false none none results [ RepositoryVersionResponse ] false none [Base serializer for use with :class: pulpcore.app.models.Model This ensures that all Serializers provide values for the 'pulp_href` field. The class provides a default for the ref_name attribute in the ModelSerializers's Meta class. This ensures that the OpenAPI definitions of plugins are namespaced properly.] PaginatedRoleResponseList { \"count\": 123, \"next\": \"http://api.example.org/accounts/?offset=400&limit=100\", \"previous\": \"http://api.example.org/accounts/?offset=200&limit=100\", \"results\": [ { \"pulp_href\": \"http://example.com\", \"pulp_created\": \"2019-08-24T14:15:22Z\", \"name\": \"string\", \"description\": \"string\", \"permissions\": [ \"string\" ], \"locked\": true } ] } Properties Name Type Required Restrictions Description count integer false none none next string(uri)\u00a6null false none none previous string(uri)\u00a6null false none none results [ RoleResponse ] false none [Serializer for Role.] PaginatedSigningServiceResponseList { \"count\": 123, \"next\": \"http://api.example.org/accounts/?offset=400&limit=100\", \"previous\": \"http://api.example.org/accounts/?offset=200&limit=100\", \"results\": [ { \"pulp_href\": \"http://example.com\", \"pulp_created\": \"2019-08-24T14:15:22Z\", \"name\": \"string\", \"public_key\": \"string\", \"pubkey_fingerprint\": \"string\", \"script\": \"string\" } ] } Properties Name Type Required Restrictions Description count integer false none none next string(uri)\u00a6null false none none previous string(uri)\u00a6null false none none results [ SigningServiceResponse ] false none [A serializer for the model declaring a signing service.] PaginatedSyncListResponseList { \"meta\": { \"count\": 123 }, \"links\": { \"first\": \"string\", \"previous\": \"string\", \"next\": \"string\", \"last\": \"string\" }, \"data\": [ { \"id\": 0, \"name\": \"string\", \"policy\": \"exclude\", \"upstream_repository\": \"e4806caf-013f-4b45-852d-8383b790be1e\", \"repository\": \"e3d1beef-8819-44ce-aeb0-6d1f16e4ee3b\", \"distribution\": \"bfc61d85-c320-44a0-8e0a-6d4a25594a2d\", \"collections\": [ { \"namespace\": \"string\", \"name\": \"string\" } ], \"namespaces\": [ \"string\" ], \"groups\": \"string\" } ] } Properties Name Type Required Restrictions Description meta object false none none \u00bb count integer false none none links object false none none \u00bb first string\u00a6null false none none \u00bb previous string\u00a6null false none none \u00bb next string\u00a6null false none none \u00bb last string\u00a6null false none none data [ SyncListResponse ] false none none PaginatedTagResponseList { \"meta\": { \"count\": 123 }, \"links\": { \"first\": \"string\", \"previous\": \"string\", \"next\": \"string\", \"last\": \"string\" }, \"data\": [ { \"name\": \"string\" } ] } Properties Name Type Required Restrictions Description meta object false none none \u00bb count integer false none none links object false none none \u00bb first string\u00a6null false none none \u00bb previous string\u00a6null false none none \u00bb next string\u00a6null false none none \u00bb last string\u00a6null false none none data [ TagResponse ] false none [A serializer for the Tag model.] PaginatedTaskGroupResponseList { \"count\": 123, \"next\": \"http://api.example.org/accounts/?offset=400&limit=100\", \"previous\": \"http://api.example.org/accounts/?offset=200&limit=100\", \"results\": [ { \"pulp_href\": \"http://example.com\", \"description\": \"string\", \"all_tasks_dispatched\": true, \"waiting\": 0, \"skipped\": 0, \"running\": 0, \"completed\": 0, \"canceled\": 0, \"failed\": 0, \"canceling\": 0, \"group_progress_reports\": [ { \"message\": \"string\", \"code\": \"string\", \"total\": 0, \"done\": 0, \"suffix\": \"string\" } ], \"tasks\": [ { \"pulp_href\": \"http://example.com\", \"pulp_created\": \"2019-08-24T14:15:22Z\", \"name\": \"string\", \"state\": \"string\", \"started_at\": \"2019-08-24T14:15:22Z\", \"finished_at\": \"2019-08-24T14:15:22Z\", \"worker\": \"http://example.com\" } ] } ] } Properties Name Type Required Restrictions Description count integer false none none next string(uri)\u00a6null false none none previous string(uri)\u00a6null false none none results [ TaskGroupResponse ] false none [Base serializer for use with :class: pulpcore.app.models.Model This ensures that all Serializers provide values for the 'pulp_href` field. The class provides a default for the ref_name attribute in the ModelSerializers's Meta class. This ensures that the OpenAPI definitions of plugins are namespaced properly.] PaginatedTaskResponseList { \"count\": 123, \"next\": \"http://api.example.org/accounts/?offset=400&limit=100\", \"previous\": \"http://api.example.org/accounts/?offset=200&limit=100\", \"results\": [ { \"pulp_id\": \"f3ad2d41-3c12-4e29-ba19-4d3927e49b47\", \"name\": \"string\", \"created_at\": \"2019-08-24T14:15:22Z\", \"updated_at\": \"2019-08-24T14:15:22Z\", \"finished_at\": \"2019-08-24T14:15:22Z\", \"started_at\": \"2019-08-24T14:15:22Z\", \"state\": \"string\", \"error\": {}, \"worker\": {}, \"parent_task\": \"a47d3c72-d323-4ab8-b986-8424d3a63720\", \"child_tasks\": [ \"497f6eca-6276-4993-bfeb-53cbbbba6f08\" ], \"progress_reports\": [ { \"message\": \"string\", \"code\": \"string\", \"state\": \"string\", \"total\": 0, \"done\": 0, \"suffix\": \"string\" } ] } ] } Properties Name Type Required Restrictions Description count integer false none none next string(uri)\u00a6null false none none previous string(uri)\u00a6null false none none results [ TaskResponse ] false none none PaginatedTaskScheduleResponseList { \"count\": 123, \"next\": \"http://api.example.org/accounts/?offset=400&limit=100\", \"previous\": \"http://api.example.org/accounts/?offset=200&limit=100\", \"results\": [ { \"pulp_href\": \"http://example.com\", \"pulp_created\": \"2019-08-24T14:15:22Z\", \"name\": \"string\", \"task_name\": \"string\", \"dispatch_interval\": \"string\", \"next_dispatch\": \"2019-08-24T14:15:22Z\", \"last_task\": \"http://example.com\" } ] } Properties Name Type Required Restrictions Description count integer false none none next string(uri)\u00a6null false none none previous string(uri)\u00a6null false none none results [ TaskScheduleResponse ] false none [Base serializer for use with :class: pulpcore.app.models.Model This ensures that all Serializers provide values for the 'pulp_href` field. The class provides a default for the ref_name attribute in the ModelSerializers's Meta class. This ensures that the OpenAPI definitions of plugins are namespaced properly.] PaginatedTaskSummaryResponseList { \"meta\": { \"count\": 123 }, \"links\": { \"first\": \"string\", \"previous\": \"string\", \"next\": \"string\", \"last\": \"string\" }, \"data\": [ { \"pulp_id\": \"f3ad2d41-3c12-4e29-ba19-4d3927e49b47\", \"name\": \"string\", \"state\": \"string\", \"started_at\": \"2019-08-24T14:15:22Z\", \"finished_at\": \"2019-08-24T14:15:22Z\", \"href\": \"string\" } ] } Properties Name Type Required Restrictions Description meta object false none none \u00bb count integer false none none links object false none none \u00bb first string\u00a6null false none none \u00bb previous string\u00a6null false none none \u00bb next string\u00a6null false none none \u00bb last string\u00a6null false none none data [ TaskSummaryResponse ] false none [TaskSerializer but without detail fields. For use in /tasks/ / detail views.] PaginatedUploadResponseList { \"count\": 123, \"next\": \"http://api.example.org/accounts/?offset=400&limit=100\", \"previous\": \"http://api.example.org/accounts/?offset=200&limit=100\", \"results\": [ { \"pulp_href\": \"http://example.com\", \"pulp_created\": \"2019-08-24T14:15:22Z\", \"size\": 0, \"completed\": \"2019-08-24T14:15:22Z\" } ] } Properties Name Type Required Restrictions Description count integer false none none next string(uri)\u00a6null false none none previous string(uri)\u00a6null false none none results [ UploadResponse ] false none [Serializer for chunked uploads.] PaginatedUserResponseList { \"meta\": { \"count\": 123 }, \"links\": { \"first\": \"string\", \"previous\": \"string\", \"next\": \"string\", \"last\": \"string\" }, \"data\": [ { \"id\": 0, \"username\": \"string\", \"first_name\": \"string\", \"last_name\": \"string\", \"email\": \"user@example.com\", \"groups\": [ 0 ], \"date_joined\": \"2019-08-24T14:15:22Z\", \"is_superuser\": true, \"auth_provider\": \"string\" } ] } Properties Name Type Required Restrictions Description meta object false none none \u00bb count integer false none none links object false none none \u00bb first string\u00a6null false none none \u00bb previous string\u00a6null false none none \u00bb next string\u00a6null false none none \u00bb last string\u00a6null false none none data [ UserResponse ] false none none PaginatedUserRoleResponseList { \"count\": 123, \"next\": \"http://api.example.org/accounts/?offset=400&limit=100\", \"previous\": \"http://api.example.org/accounts/?offset=200&limit=100\", \"results\": [ { \"pulp_href\": \"http://example.com\", \"pulp_created\": \"2019-08-24T14:15:22Z\", \"role\": \"string\", \"content_object\": \"string\", \"description\": \"string\", \"permissions\": [ \"string\" ] } ] } Properties Name Type Required Restrictions Description count integer false none none next string(uri)\u00a6null false none none previous string(uri)\u00a6null false none none results [ UserRoleResponse ] false none [Serializer for UserRole.] PaginatedWorkerResponseList { \"count\": 123, \"next\": \"http://api.example.org/accounts/?offset=400&limit=100\", \"previous\": \"http://api.example.org/accounts/?offset=200&limit=100\", \"results\": [ { \"pulp_href\": \"http://example.com\", \"pulp_created\": \"2019-08-24T14:15:22Z\", \"name\": \"string\", \"last_heartbeat\": \"2019-08-24T14:15:22Z\", \"current_task\": \"http://example.com\" } ] } Properties Name Type Required Restrictions Description count integer false none none next string(uri)\u00a6null false none none previous string(uri)\u00a6null false none none results [ WorkerResponse ] false none [Base serializer for use with :class: pulpcore.app.models.Model This ensures that all Serializers provide values for the 'pulp_href` field. The class provides a default for the ref_name attribute in the ModelSerializers's Meta class. This ensures that the OpenAPI definitions of plugins are namespaced properly.] Paginatedansible.AnsibleDistributionResponseList { \"count\": 123, \"next\": \"http://api.example.org/accounts/?offset=400&limit=100\", \"previous\": \"http://api.example.org/accounts/?offset=200&limit=100\", \"results\": [ { \"pulp_href\": \"http://example.com\", \"pulp_created\": \"2019-08-24T14:15:22Z\", \"base_path\": \"string\", \"content_guard\": \"http://example.com\", \"name\": \"string\", \"repository\": \"http://example.com\", \"repository_version\": \"http://example.com\", \"client_url\": \"string\", \"pulp_labels\": {} } ] } Properties Name Type Required Restrictions Description count integer false none none next string(uri)\u00a6null false none none previous string(uri)\u00a6null false none none results [ ansible.AnsibleDistributionResponse ] false none [Serializer for Ansible Distributions.] Paginatedansible.AnsibleRepositoryResponseList { \"count\": 123, \"next\": \"http://api.example.org/accounts/?offset=400&limit=100\", \"previous\": \"http://api.example.org/accounts/?offset=200&limit=100\", \"results\": [ { \"pulp_href\": \"http://example.com\", \"pulp_created\": \"2019-08-24T14:15:22Z\", \"versions_href\": \"http://example.com\", \"pulp_labels\": {}, \"latest_version_href\": \"http://example.com\", \"name\": \"string\", \"description\": \"string\", \"retain_repo_versions\": 1, \"remote\": \"http://example.com\", \"last_synced_metadata_time\": \"2019-08-24T14:15:22Z\", \"gpgkey\": \"string\" } ] } Properties Name Type Required Restrictions Description count integer false none none next string(uri)\u00a6null false none none previous string(uri)\u00a6null false none none results [ ansible.AnsibleRepositoryResponse ] false none [Serializer for Ansible Repositories.] Paginatedansible.CollectionRemoteResponseList { \"meta\": { \"count\": 123 }, \"links\": { \"first\": \"string\", \"previous\": \"string\", \"next\": \"string\", \"last\": \"string\" }, \"data\": [ { \"pk\": \"4af43191-2f37-4a16-8471-4e8e40c314af\", \"name\": \"string\", \"url\": \"string\", \"auth_url\": \"string\", \"policy\": \"immediate\", \"requirements_file\": \"string\", \"created_at\": \"2019-08-24T14:15:22Z\", \"updated_at\": \"2019-08-24T14:15:22Z\", \"username\": \"string\", \"tls_validation\": true, \"client_cert\": \"string\", \"ca_cert\": \"string\", \"last_sync_task\": \"string\", \"repositories\": [ { \"name\": \"string\", \"description\": \"string\", \"next_version\": 2147483647, \"distributions\": [ { \"name\": \"string\", \"base_path\": \"string\", \"content_guard\": \"75e6b91e-c196-4627-9383-ce2e1e08d705\", \"created_at\": \"2019-08-24T14:15:22Z\", \"updated_at\": \"2019-08-24T14:15:22Z\" } ], \"created_at\": \"2019-08-24T14:15:22Z\", \"updated_at\": \"2019-08-24T14:15:22Z\", \"last_sync_task\": \"string\" } ], \"pulp_href\": \"http://example.com\", \"download_concurrency\": 1, \"proxy_url\": \"string\", \"proxy_username\": \"string\", \"write_only_fields\": [ null ], \"rate_limit\": 0, \"signed_only\": false } ] } Properties Name Type Required Restrictions Description meta object false none none \u00bb count integer false none none links object false none none \u00bb first string\u00a6null false none none \u00bb previous string\u00a6null false none none \u00bb next string\u00a6null false none none \u00bb last string\u00a6null false none none data [ ansible.CollectionRemoteResponse ] false none [A serializer for Collection Remotes.] Paginatedansible.CollectionResponseList { \"count\": 123, \"next\": \"http://api.example.org/accounts/?offset=400&limit=100\", \"previous\": \"http://api.example.org/accounts/?offset=200&limit=100\", \"results\": [ { \"name\": \"string\", \"namespace\": \"string\" } ] } Properties Name Type Required Restrictions Description count integer false none none next string(uri)\u00a6null false none none previous string(uri)\u00a6null false none none results [ ansible.CollectionResponse ] false none [A serializer for Ansible Collections.] Paginatedansible.CollectionVersionResponseList { \"count\": 123, \"next\": \"http://api.example.org/accounts/?offset=400&limit=100\", \"previous\": \"http://api.example.org/accounts/?offset=200&limit=100\", \"results\": [ { \"pulp_href\": \"http://example.com\", \"artifact\": \"http://example.com\", \"pulp_created\": \"2019-08-24T14:15:22Z\", \"md5\": \"string\", \"sha1\": \"string\", \"sha224\": \"string\", \"sha256\": \"string\", \"sha384\": \"string\", \"sha512\": \"string\", \"id\": \"497f6eca-6276-4993-bfeb-53cbbbba6f08\", \"authors\": [ \"string\" ], \"contents\": {}, \"dependencies\": {}, \"description\": \"string\", \"docs_blob\": {}, \"manifest\": {}, \"files\": {}, \"documentation\": \"string\", \"homepage\": \"string\", \"issues\": \"string\", \"license\": [ \"string\" ], \"name\": \"string\", \"namespace\": \"string\", \"repository\": \"string\", \"tags\": [ { \"name\": \"string\" } ], \"version\": \"string\", \"requires_ansible\": \"string\" } ] } Properties Name Type Required Restrictions Description count integer false none none next string(uri)\u00a6null false none none previous string(uri)\u00a6null false none none results [ ansible.CollectionVersionResponse ] false none [A serializer for CollectionVersion Content.] Paginatedansible.CollectionVersionSignatureResponseList { \"count\": 123, \"next\": \"http://api.example.org/accounts/?offset=400&limit=100\", \"previous\": \"http://api.example.org/accounts/?offset=200&limit=100\", \"results\": [ { \"pulp_href\": \"http://example.com\", \"pulp_created\": \"2019-08-24T14:15:22Z\", \"signed_collection\": \"http://example.com\", \"pubkey_fingerprint\": \"string\", \"signing_service\": \"http://example.com\" } ] } Properties Name Type Required Restrictions Description count integer false none none next string(uri)\u00a6null false none none previous string(uri)\u00a6null false none none results [ ansible.CollectionVersionSignatureResponse ] false none [A serializer for signature models.] Paginatedansible.GitRemoteResponseList { \"count\": 123, \"next\": \"http://api.example.org/accounts/?offset=400&limit=100\", \"previous\": \"http://api.example.org/accounts/?offset=200&limit=100\", \"results\": [ { \"max_retries\": 0, \"client_cert\": \"string\", \"rate_limit\": 0, \"headers\": [ {} ], \"pulp_created\": \"2019-08-24T14:15:22Z\", \"connect_timeout\": 0, \"pulp_last_updated\": \"2019-08-24T14:15:22Z\", \"url\": \"string\", \"download_concurrency\": 1, \"tls_validation\": true, \"pulp_labels\": {}, \"pulp_href\": \"http://example.com\", \"sock_read_timeout\": 0, \"proxy_url\": \"string\", \"ca_cert\": \"string\", \"total_timeout\": 0, \"sock_connect_timeout\": 0, \"name\": \"string\", \"metadata_only\": true, \"git_ref\": \"string\" } ] } Properties Name Type Required Restrictions Description count integer false none none next string(uri)\u00a6null false none none previous string(uri)\u00a6null false none none results [ ansible.GitRemoteResponse ] false none [A serializer for Git Collection Remotes.] Paginatedansible.RoleRemoteResponseList { \"count\": 123, \"next\": \"http://api.example.org/accounts/?offset=400&limit=100\", \"previous\": \"http://api.example.org/accounts/?offset=200&limit=100\", \"results\": [ { \"pulp_href\": \"http://example.com\", \"pulp_created\": \"2019-08-24T14:15:22Z\", \"name\": \"string\", \"url\": \"string\", \"ca_cert\": \"string\", \"client_cert\": \"string\", \"tls_validation\": true, \"proxy_url\": \"string\", \"pulp_labels\": {}, \"pulp_last_updated\": \"2019-08-24T14:15:22Z\", \"download_concurrency\": 1, \"max_retries\": 0, \"policy\": \"immediate\", \"total_timeout\": 0, \"connect_timeout\": 0, \"sock_connect_timeout\": 0, \"sock_read_timeout\": 0, \"headers\": [ {} ], \"rate_limit\": 0 } ] } Properties Name Type Required Restrictions Description count integer false none none next string(uri)\u00a6null false none none previous string(uri)\u00a6null false none none results [ ansible.RoleRemoteResponse ] false none [A serializer for Ansible Remotes.] Paginatedansible.RoleResponseList { \"count\": 123, \"next\": \"http://api.example.org/accounts/?offset=400&limit=100\", \"previous\": \"http://api.example.org/accounts/?offset=200&limit=100\", \"results\": [ { \"pulp_href\": \"http://example.com\", \"artifact\": \"http://example.com\", \"pulp_created\": \"2019-08-24T14:15:22Z\", \"version\": \"string\", \"name\": \"string\", \"namespace\": \"string\" } ] } Properties Name Type Required Restrictions Description count integer false none none next string(uri)\u00a6null false none none previous string(uri)\u00a6null false none none results [ ansible.RoleResponse ] false none [A serializer for Role versions.] Paginatedcontainer.BlobResponseList { \"count\": 123, \"next\": \"http://api.example.org/accounts/?offset=400&limit=100\", \"previous\": \"http://api.example.org/accounts/?offset=200&limit=100\", \"results\": [ { \"pulp_href\": \"http://example.com\", \"pulp_created\": \"2019-08-24T14:15:22Z\", \"artifact\": \"http://example.com\", \"digest\": \"string\" } ] } Properties Name Type Required Restrictions Description count integer false none none next string(uri)\u00a6null false none none previous string(uri)\u00a6null false none none results [ container.BlobResponse ] false none [Serializer for Blobs.] Paginatedcontainer.ContainerDistributionResponseList { \"count\": 123, \"next\": \"http://api.example.org/accounts/?offset=400&limit=100\", \"previous\": \"http://api.example.org/accounts/?offset=200&limit=100\", \"results\": [ { \"content_guard\": \"http://example.com\", \"pulp_labels\": {}, \"pulp_created\": \"2019-08-24T14:15:22Z\", \"base_path\": \"string\", \"repository\": \"http://example.com\", \"pulp_href\": \"http://example.com\", \"name\": \"string\", \"repository_version\": \"http://example.com\", \"registry_path\": \"string\", \"namespace\": \"http://example.com\", \"private\": true, \"description\": \"string\" } ] } Properties Name Type Required Restrictions Description count integer false none none next string(uri)\u00a6null false none none previous string(uri)\u00a6null false none none results [ container.ContainerDistributionResponse ] false none [A serializer for ContainerDistribution.] Paginatedcontainer.ContainerNamespaceResponseList { \"count\": 123, \"next\": \"http://api.example.org/accounts/?offset=400&limit=100\", \"previous\": \"http://api.example.org/accounts/?offset=200&limit=100\", \"results\": [ { \"pulp_href\": \"http://example.com\", \"pulp_created\": \"2019-08-24T14:15:22Z\", \"name\": \"string\" } ] } Properties Name Type Required Restrictions Description count integer false none none next string(uri)\u00a6null false none none previous string(uri)\u00a6null false none none results [ container.ContainerNamespaceResponse ] false none [Serializer for ContainerNamespaces.] Paginatedcontainer.ContainerPushRepositoryResponseList { \"count\": 123, \"next\": \"http://api.example.org/accounts/?offset=400&limit=100\", \"previous\": \"http://api.example.org/accounts/?offset=200&limit=100\", \"results\": [ { \"pulp_labels\": {}, \"pulp_created\": \"2019-08-24T14:15:22Z\", \"manifest_signing_service\": \"http://example.com\", \"description\": \"string\", \"pulp_href\": \"http://example.com\", \"versions_href\": \"http://example.com\", \"retain_repo_versions\": 1, \"latest_version_href\": \"http://example.com\", \"name\": \"string\" } ] } Properties Name Type Required Restrictions Description count integer false none none next string(uri)\u00a6null false none none previous string(uri)\u00a6null false none none results [ container.ContainerPushRepositoryResponse ] false none [Serializer for Container Push Repositories.] Paginatedcontainer.ContainerRemoteResponseList { \"count\": 123, \"next\": \"http://api.example.org/accounts/?offset=400&limit=100\", \"previous\": \"http://api.example.org/accounts/?offset=200&limit=100\", \"results\": [ { \"pulp_href\": \"http://example.com\", \"pulp_created\": \"2019-08-24T14:15:22Z\", \"name\": \"string\", \"url\": \"string\", \"ca_cert\": \"string\", \"client_cert\": \"string\", \"tls_validation\": true, \"proxy_url\": \"string\", \"pulp_labels\": {}, \"pulp_last_updated\": \"2019-08-24T14:15:22Z\", \"download_concurrency\": 1, \"max_retries\": 0, \"policy\": \"immediate\", \"total_timeout\": 0, \"connect_timeout\": 0, \"sock_connect_timeout\": 0, \"sock_read_timeout\": 0, \"headers\": [ {} ], \"rate_limit\": 0, \"upstream_name\": \"string\", \"include_tags\": [ \"string\" ], \"exclude_tags\": [ \"string\" ], \"sigstore\": \"http://example.com\" } ] } Properties Name Type Required Restrictions Description count integer false none none next string(uri)\u00a6null false none none previous string(uri)\u00a6null false none none results [ container.ContainerRemoteResponse ] false none [A Serializer for ContainerRemote.] Paginatedcontainer.ContainerRepositoryResponseList { \"count\": 123, \"next\": \"http://api.example.org/accounts/?offset=400&limit=100\", \"previous\": \"http://api.example.org/accounts/?offset=200&limit=100\", \"results\": [ { \"pulp_href\": \"http://example.com\", \"pulp_created\": \"2019-08-24T14:15:22Z\", \"versions_href\": \"http://example.com\", \"pulp_labels\": {}, \"latest_version_href\": \"http://example.com\", \"name\": \"string\", \"description\": \"string\", \"retain_repo_versions\": 1, \"remote\": \"http://example.com\", \"manifest_signing_service\": \"http://example.com\" } ] } Properties Name Type Required Restrictions Description count integer false none none next string(uri)\u00a6null false none none previous string(uri)\u00a6null false none none results [ container.ContainerRepositoryResponse ] false none [Serializer for Container Repositories.] Paginatedcontainer.ManifestResponseList { \"count\": 123, \"next\": \"http://api.example.org/accounts/?offset=400&limit=100\", \"previous\": \"http://api.example.org/accounts/?offset=200&limit=100\", \"results\": [ { \"pulp_href\": \"http://example.com\", \"pulp_created\": \"2019-08-24T14:15:22Z\", \"artifact\": \"http://example.com\", \"digest\": \"string\", \"schema_version\": 0, \"media_type\": \"string\", \"listed_manifests\": [ \"http://example.com\" ], \"config_blob\": \"http://example.com\", \"blobs\": [ \"http://example.com\" ] } ] } Properties Name Type Required Restrictions Description count integer false none none next string(uri)\u00a6null false none none previous string(uri)\u00a6null false none none results [ container.ManifestResponse ] false none [Serializer for Manifests.] Paginatedcontainer.ManifestSignatureResponseList { \"count\": 123, \"next\": \"http://api.example.org/accounts/?offset=400&limit=100\", \"previous\": \"http://api.example.org/accounts/?offset=200&limit=100\", \"results\": [ { \"pulp_href\": \"http://example.com\", \"pulp_created\": \"2019-08-24T14:15:22Z\", \"name\": \"string\", \"digest\": \"string\", \"type\": \"string\", \"key_id\": \"string\", \"timestamp\": 0, \"creator\": \"string\", \"signed_manifest\": \"http://example.com\" } ] } Properties Name Type Required Restrictions Description count integer false none none next string(uri)\u00a6null false none none previous string(uri)\u00a6null false none none results [ container.ManifestSignatureResponse ] false none [Serializer for image manifest signatures.] Paginatedcontainer.TagResponseList { \"count\": 123, \"next\": \"http://api.example.org/accounts/?offset=400&limit=100\", \"previous\": \"http://api.example.org/accounts/?offset=200&limit=100\", \"results\": [ { \"pulp_href\": \"http://example.com\", \"pulp_created\": \"2019-08-24T14:15:22Z\", \"name\": \"string\", \"tagged_manifest\": \"http://example.com\" } ] } Properties Name Type Required Restrictions Description count integer false none none next string(uri)\u00a6null false none none previous string(uri)\u00a6null false none none results [ container.TagResponse ] false none [Serializer for Tags.] Paginatedgalaxy.LoginResponseList { \"meta\": { \"count\": 123 }, \"links\": { \"first\": \"string\", \"previous\": \"string\", \"next\": \"string\", \"last\": \"string\" }, \"data\": [ { \"username\": \"string\", \"password\": \"string\" } ] } Properties Name Type Required Restrictions Description meta object false none none \u00bb count integer false none none links object false none none \u00bb first string\u00a6null false none none \u00bb previous string\u00a6null false none none \u00bb next string\u00a6null false none none \u00bb last string\u00a6null false none none data [ galaxy.LoginResponse ] false none none PatchedAccessPolicy { \"permissions_assignment\": [ {} ], \"creation_hooks\": [ {} ], \"statements\": [ {} ], \"queryset_scoping\": {} } Serializer for AccessPolicy. Properties Name Type Required Restrictions Description permissions_assignment [object] false none List of callables that define the new permissions to be created for new objects.This is deprecated. Use creation_hooks instead. creation_hooks [object] false none List of callables that may associate user roles for new objects. statements [object] false none List of policy statements defining the policy. queryset_scoping object false none A callable for performing queryset scoping. See plugin documentation for valid callables. Set to blank to turn off queryset scoping. PatchedCollection {} A serializer for a Collection. Properties None PatchedContentRedirectContentGuard { \"name\": \"string\", \"description\": \"string\" } A serializer for ContentRedirectContentGuard. Properties Name Type Required Restrictions Description name string false none The unique name. description string\u00a6null false none An optional description. PatchedFilesystemExporter { \"name\": \"string\", \"path\": \"string\", \"method\": \"write\" } Serializer for FilesystemExporters. Properties Name Type Required Restrictions Description name string false none Unique name of the file system exporter. path string false none File system location to export to. method MethodEnum false none Method of exporting PatchedGroup { \"name\": \"string\" } Serializer for Group. Properties Name Type Required Restrictions Description name string false none Name PatchedNamespace { \"name\": \"string\", \"company\": \"string\", \"email\": \"string\", \"avatar_url\": \"http://example.com\", \"description\": \"string\", \"links\": [ { \"name\": \"string\", \"url\": \"string\" } ], \"groups\": \"string\", \"resources\": \"string\" } Properties Name Type Required Restrictions Description name string false none none company string false none none email string false none none avatar_url string(uri) false none none description string false none none links [ NamespaceLink ] false none none groups string false none none resources string false none none PatchedPulpExporter { \"name\": \"string\", \"path\": \"string\", \"repositories\": [ \"http://example.com\" ], \"last_export\": \"http://example.com\" } Serializer for pulp exporters. Properties Name Type Required Restrictions Description name string false none Unique name of the file system exporter. path string false none File system directory to store exported tar.gzs. repositories [string] false none none last_export string(uri)\u00a6null false none Last attempted export for this PulpExporter PatchedPulpImporter { \"name\": \"string\", \"repo_mapping\": { \"property1\": \"string\", \"property2\": \"string\" } } Serializer for PulpImporters. Properties Name Type Required Restrictions Description name string false none Unique name of the Importer. repo_mapping object false none Mapping of repo names in an export file to the repo names in Pulp. For example, if the export has a repo named 'foo' and the repo to import content into was 'bar', the mapping would be \"{'foo': 'bar'}\". \u00bb additionalProperties string false none none PatchedRBACContentGuard { \"name\": \"string\", \"description\": \"string\" } Base serializer for use with :class: pulpcore.app.models.Model This ensures that all Serializers provide values for the 'pulp_href` field. The class provides a default for the ref_name attribute in the ModelSerializers's Meta class. This ensures that the OpenAPI definitions of plugins are namespaced properly. Properties Name Type Required Restrictions Description name string false none The unique name. description string\u00a6null false none An optional description. PatchedRole { \"name\": \"string\", \"description\": \"string\", \"permissions\": [ \"string\" ] } Serializer for Role. Properties Name Type Required Restrictions Description name string false none The name of this role. description string\u00a6null false none An optional description. permissions [string] false none List of permissions defining the role. PatchedSyncList { \"name\": \"string\", \"policy\": \"exclude\", \"upstream_repository\": \"e4806caf-013f-4b45-852d-8383b790be1e\", \"distribution\": \"bfc61d85-c320-44a0-8e0a-6d4a25594a2d\", \"collections\": [ { \"namespace\": \"string\", \"name\": \"string\" } ], \"namespaces\": [ \"string\" ], \"groups\": \"string\" } Properties Name Type Required Restrictions Description name string false none none policy Policy8baEnum false none none upstream_repository string(uuid)\u00a6null false none none distribution string(uuid)\u00a6null false none none collections [ SyncListCollectionSummary ] false none none namespaces [string] false none none groups string false none none PatchedTaskCancel { \"state\": \"string\" } Base serializer for use with :class: pulpcore.app.models.Model This ensures that all Serializers provide values for the 'pulp_href` field. The class provides a default for the ref_name attribute in the ModelSerializers's Meta class. This ensures that the OpenAPI definitions of plugins are namespaced properly. Properties Name Type Required Restrictions Description state string false none The desired state of the task. Only 'canceled' is accepted. PatchedUser { \"username\": \"string\", \"first_name\": \"string\", \"last_name\": \"string\", \"email\": \"user@example.com\", \"groups\": [ 0 ], \"password\": \"string\", \"is_superuser\": true } Properties Name Type Required Restrictions Description username string false none Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only. first_name string false none none last_name string false none none email string(email) false none none groups [integer] false none The groups this user belongs to. A user will get all permissions granted to each of their groups. password string false write-only none is_superuser boolean false none Designates that this user has all permissions without explicitly assigning them. Patchedansible.AnsibleDistribution { \"base_path\": \"string\", \"content_guard\": \"http://example.com\", \"name\": \"string\", \"repository\": \"http://example.com\", \"repository_version\": \"http://example.com\", \"pulp_labels\": {} } Serializer for Ansible Distributions. Properties Name Type Required Restrictions Description base_path string false none The base (relative) path component of the published url. Avoid paths that overlap with other distribution base paths (e.g. \"foo\" and \"foo/bar\") content_guard string(uri)\u00a6null false none An optional content-guard. name string false none A unique name. Ex, rawhide and stable . repository string(uri)\u00a6null false none The latest RepositoryVersion for this Repository will be served. repository_version string(uri)\u00a6null false none RepositoryVersion to be served pulp_labels object false none none Patchedansible.AnsibleRepository { \"pulp_labels\": {}, \"name\": \"string\", \"description\": \"string\", \"retain_repo_versions\": 1, \"remote\": \"http://example.com\", \"last_synced_metadata_time\": \"2019-08-24T14:15:22Z\", \"gpgkey\": \"string\" } Serializer for Ansible Repositories. Properties Name Type Required Restrictions Description pulp_labels object false none none name string false none A unique name for this repository. description string\u00a6null false none An optional description. retain_repo_versions integer\u00a6null false none Retain X versions of the repository. Default is null which retains all versions. This is provided as a tech preview in Pulp 3 and may change in the future. remote string(uri)\u00a6null false none An optional remote to use by default when syncing. last_synced_metadata_time string(date-time)\u00a6null false none Last synced metadata time. gpgkey string\u00a6null false none Gpg public key to verify collection signatures against Patchedansible.CollectionRemote { \"url\": \"string\", \"auth_url\": \"string\", \"token\": \"string\", \"policy\": \"immediate\", \"requirements_file\": \"string\", \"created_at\": \"2019-08-24T14:15:22Z\", \"updated_at\": \"2019-08-24T14:15:22Z\", \"username\": \"string\", \"password\": \"string\", \"tls_validation\": true, \"client_key\": \"string\", \"client_cert\": \"string\", \"ca_cert\": \"string\", \"download_concurrency\": 1, \"proxy_url\": \"string\", \"proxy_username\": \"string\", \"proxy_password\": \"string\", \"rate_limit\": 0, \"signed_only\": false } A serializer for Collection Remotes. Properties Name Type Required Restrictions Description url string false none The URL of an external content source. auth_url string\u00a6null false none The URL to receive a session token from, e.g. used with Automation Hub. token string\u00a6null false write-only none policy PolicyDb6Enum false none The policy to use when downloading content. requirements_file string\u00a6null false none The string version of Collection requirements yaml. created_at string(date-time) false none none updated_at string(date-time) false none none username string\u00a6null false none Remote user. password string\u00a6null false write-only Remote password. tls_validation boolean false none If True, TLS peer validation must be performed. client_key string\u00a6null false write-only A PEM encoded private key used for authentication. client_cert string\u00a6null false none A PEM encoded client certificate used for authentication. ca_cert string\u00a6null false none A PEM encoded CA certificate used to validate the server certificate presented by the remote server. download_concurrency integer\u00a6null false none Total number of simultaneous connections. If not set then the default value will be used. proxy_url string\u00a6null false none The proxy URL. Format: scheme://host:port proxy_username string\u00a6null false none User for proxy authentication. proxy_password string\u00a6null false write-only Password for proxy authentication. rate_limit integer\u00a6null false none Limits requests per second for each concurrent downloader signed_only boolean false none Sync only collections that have a signature Patchedansible.GitRemote { \"max_retries\": 0, \"client_cert\": \"string\", \"rate_limit\": 0, \"headers\": [ {} ], \"proxy_password\": \"string\", \"connect_timeout\": 0, \"client_key\": \"string\", \"url\": \"string\", \"proxy_username\": \"string\", \"username\": \"string\", \"download_concurrency\": 1, \"tls_validation\": true, \"pulp_labels\": {}, \"password\": \"string\", \"sock_read_timeout\": 0, \"proxy_url\": \"string\", \"ca_cert\": \"string\", \"total_timeout\": 0, \"sock_connect_timeout\": 0, \"name\": \"string\", \"metadata_only\": true, \"git_ref\": \"string\" } A serializer for Git Collection Remotes. Properties Name Type Required Restrictions Description max_retries integer\u00a6null false none Maximum number of retry attempts after a download failure. If not set then the default value (3) will be used. client_cert string\u00a6null false none A PEM encoded client certificate used for authentication. rate_limit integer\u00a6null false none Limits requests per second for each concurrent downloader headers [object] false none Headers for aiohttp.Clientsession proxy_password string\u00a6null false write-only The password to authenticate to the proxy. Extra leading and trailing whitespace characters are not trimmed. connect_timeout number(double)\u00a6null false none aiohttp.ClientTimeout.connect (q.v.) for download-connections. The default is null, which will cause the default from the aiohttp library to be used. client_key string\u00a6null false write-only A PEM encoded private key used for authentication. url string false none The URL of an external content source. proxy_username string\u00a6null false write-only The username to authenticte to the proxy. username string\u00a6null false write-only The username to be used for authentication when syncing. download_concurrency integer\u00a6null false none Total number of simultaneous connections. If not set then the default value will be used. tls_validation boolean false none If True, TLS peer validation must be performed. pulp_labels object false none none password string\u00a6null false write-only The password to be used for authentication when syncing. Extra leading and trailing whitespace characters are not trimmed. sock_read_timeout number(double)\u00a6null false none aiohttp.ClientTimeout.sock_read (q.v.) for download-connections. The default is null, which will cause the default from the aiohttp library to be used. proxy_url string\u00a6null false none The proxy URL. Format: scheme://host:port ca_cert string\u00a6null false none A PEM encoded CA certificate used to validate the server certificate presented by the remote server. total_timeout number(double)\u00a6null false none aiohttp.ClientTimeout.total (q.v.) for download-connections. The default is null, which will cause the default from the aiohttp library to be used. sock_connect_timeout number(double)\u00a6null false none aiohttp.ClientTimeout.sock_connect (q.v.) for download-connections. The default is null, which will cause the default from the aiohttp library to be used. name string false none A unique name for this remote. metadata_only boolean false none If True, only metadata about the content will be stored in Pulp. Clients will retrieve content from the remote URL. git_ref string false none A git ref. e.g.: branch, tag, or commit sha. Patchedansible.RoleRemote { \"name\": \"string\", \"url\": \"string\", \"ca_cert\": \"string\", \"client_cert\": \"string\", \"client_key\": \"string\", \"tls_validation\": true, \"proxy_url\": \"string\", \"proxy_username\": \"string\", \"proxy_password\": \"string\", \"username\": \"string\", \"password\": \"string\", \"pulp_labels\": {}, \"download_concurrency\": 1, \"max_retries\": 0, \"policy\": \"immediate\", \"total_timeout\": 0, \"connect_timeout\": 0, \"sock_connect_timeout\": 0, \"sock_read_timeout\": 0, \"headers\": [ {} ], \"rate_limit\": 0 } A serializer for Ansible Remotes. Properties Name Type Required Restrictions Description name string false none A unique name for this remote. url string false none The URL of an external content source. ca_cert string\u00a6null false none A PEM encoded CA certificate used to validate the server certificate presented by the remote server. client_cert string\u00a6null false none A PEM encoded client certificate used for authentication. client_key string\u00a6null false write-only A PEM encoded private key used for authentication. tls_validation boolean false none If True, TLS peer validation must be performed. proxy_url string\u00a6null false none The proxy URL. Format: scheme://host:port proxy_username string\u00a6null false write-only The username to authenticte to the proxy. proxy_password string\u00a6null false write-only The password to authenticate to the proxy. Extra leading and trailing whitespace characters are not trimmed. username string\u00a6null false write-only The username to be used for authentication when syncing. password string\u00a6null false write-only The password to be used for authentication when syncing. Extra leading and trailing whitespace characters are not trimmed. pulp_labels object false none none download_concurrency integer\u00a6null false none Total number of simultaneous connections. If not set then the default value will be used. max_retries integer\u00a6null false none Maximum number of retry attempts after a download failure. If not set then the default value (3) will be used. policy PolicyDb6Enum false none The policy to use when downloading content. total_timeout number(double)\u00a6null false none aiohttp.ClientTimeout.total (q.v.) for download-connections. The default is null, which will cause the default from the aiohttp library to be used. connect_timeout number(double)\u00a6null false none aiohttp.ClientTimeout.connect (q.v.) for download-connections. The default is null, which will cause the default from the aiohttp library to be used. sock_connect_timeout number(double)\u00a6null false none aiohttp.ClientTimeout.sock_connect (q.v.) for download-connections. The default is null, which will cause the default from the aiohttp library to be used. sock_read_timeout number(double)\u00a6null false none aiohttp.ClientTimeout.sock_read (q.v.) for download-connections. The default is null, which will cause the default from the aiohttp library to be used. headers [object] false none Headers for aiohttp.Clientsession rate_limit integer\u00a6null false none Limits requests per second for each concurrent downloader Patchedcontainer.ContainerDistribution { \"content_guard\": \"http://example.com\", \"pulp_labels\": {}, \"base_path\": \"string\", \"repository\": \"http://example.com\", \"name\": \"string\", \"repository_version\": \"http://example.com\", \"private\": true, \"description\": \"string\" } A serializer for ContainerDistribution. Properties Name Type Required Restrictions Description content_guard string(uri) false none An optional content-guard. If none is specified, a default one will be used. pulp_labels object false none none base_path string false none The base (relative) path component of the published url. Avoid paths that overlap with other distribution base paths (e.g. \"foo\" and \"foo/bar\") repository string(uri)\u00a6null false none The latest RepositoryVersion for this Repository will be served. name string false none A unique name. Ex, rawhide and stable . repository_version string(uri)\u00a6null false none RepositoryVersion to be served private boolean false none Restrict pull access to explicitly authorized users. Defaults to unrestricted pull access. description string\u00a6null false none An optional description. Patchedcontainer.ContainerPushRepository { \"pulp_labels\": {}, \"manifest_signing_service\": \"http://example.com\", \"description\": \"string\", \"retain_repo_versions\": 1, \"name\": \"string\" } Serializer for Container Push Repositories. Properties Name Type Required Restrictions Description pulp_labels object false none none manifest_signing_service string(uri)\u00a6null false none A reference to an associated signing service. description string\u00a6null false none An optional description. retain_repo_versions integer\u00a6null false none Retain X versions of the repository. Default is null which retains all versions. This is provided as a tech preview in Pulp 3 and may change in the future. name string false none A unique name for this repository. Patchedcontainer.ContainerRemote { \"name\": \"string\", \"url\": \"string\", \"ca_cert\": \"string\", \"client_cert\": \"string\", \"client_key\": \"string\", \"tls_validation\": true, \"proxy_url\": \"string\", \"proxy_username\": \"string\", \"proxy_password\": \"string\", \"username\": \"string\", \"password\": \"string\", \"pulp_labels\": {}, \"download_concurrency\": 1, \"max_retries\": 0, \"policy\": \"immediate\", \"total_timeout\": 0, \"connect_timeout\": 0, \"sock_connect_timeout\": 0, \"sock_read_timeout\": 0, \"headers\": [ {} ], \"rate_limit\": 0, \"upstream_name\": \"string\", \"include_tags\": [ \"string\" ], \"exclude_tags\": [ \"string\" ], \"sigstore\": \"http://example.com\" } A Serializer for ContainerRemote. Properties Name Type Required Restrictions Description name string false none A unique name for this remote. url string false none The URL of an external content source. ca_cert string\u00a6null false none A PEM encoded CA certificate used to validate the server certificate presented by the remote server. client_cert string\u00a6null false none A PEM encoded client certificate used for authentication. client_key string\u00a6null false write-only A PEM encoded private key used for authentication. tls_validation boolean false none If True, TLS peer validation must be performed. proxy_url string\u00a6null false none The proxy URL. Format: scheme://host:port proxy_username string\u00a6null false write-only The username to authenticte to the proxy. proxy_password string\u00a6null false write-only The password to authenticate to the proxy. Extra leading and trailing whitespace characters are not trimmed. username string\u00a6null false write-only The username to be used for authentication when syncing. password string\u00a6null false write-only The password to be used for authentication when syncing. Extra leading and trailing whitespace characters are not trimmed. pulp_labels object false none none download_concurrency integer\u00a6null false none Total number of simultaneous connections. If not set then the default value will be used. max_retries integer\u00a6null false none Maximum number of retry attempts after a download failure. If not set then the default value (3) will be used. policy Policy762Enum false none immediate - All manifests and blobs are downloaded and saved during a sync. on_demand - Only tags and manifests are downloaded. Blobs are not downloaded until they are requested for the first time by a client. streamed - Blobs are streamed to the client with every request and never saved. total_timeout number(double)\u00a6null false none aiohttp.ClientTimeout.total (q.v.) for download-connections. The default is null, which will cause the default from the aiohttp library to be used. connect_timeout number(double)\u00a6null false none aiohttp.ClientTimeout.connect (q.v.) for download-connections. The default is null, which will cause the default from the aiohttp library to be used. sock_connect_timeout number(double)\u00a6null false none aiohttp.ClientTimeout.sock_connect (q.v.) for download-connections. The default is null, which will cause the default from the aiohttp library to be used. sock_read_timeout number(double)\u00a6null false none aiohttp.ClientTimeout.sock_read (q.v.) for download-connections. The default is null, which will cause the default from the aiohttp library to be used. headers [object] false none Headers for aiohttp.Clientsession rate_limit integer\u00a6null false none Limits requests per second for each concurrent downloader upstream_name string false none Name of the upstream repository include_tags [string]\u00a6null false none A list of tags to include during sync. Wildcards *, ? are recognized. 'include_tags' is evaluated before 'exclude_tags'. exclude_tags [string]\u00a6null false none A list of tags to exclude during sync. Wildcards *, ? are recognized. 'exclude_tags' is evaluated after 'include_tags'. sigstore string(uri) false none A URL to a sigstore to download image signatures from Patchedcontainer.ContainerRepository { \"pulp_labels\": {}, \"name\": \"string\", \"description\": \"string\", \"retain_repo_versions\": 1, \"remote\": \"http://example.com\", \"manifest_signing_service\": \"http://example.com\" } Serializer for Container Repositories. Properties Name Type Required Restrictions Description pulp_labels object false none none name string false none A unique name for this repository. description string\u00a6null false none An optional description. retain_repo_versions integer\u00a6null false none Retain X versions of the repository. Default is null which retains all versions. This is provided as a tech preview in Pulp 3 and may change in the future. remote string(uri)\u00a6null false none An optional remote to use by default when syncing. manifest_signing_service string(uri)\u00a6null false none A reference to an associated signing service. Policy762Enum \"immediate\" Properties Name Type Required Restrictions Description anonymous string false none none Enumerated Values Property Value anonymous immediate anonymous on_demand anonymous streamed Policy8baEnum \"exclude\" Properties Name Type Required Restrictions Description anonymous string false none none Enumerated Values Property Value anonymous exclude anonymous include PolicyDb6Enum \"immediate\" Properties Name Type Required Restrictions Description anonymous string false none none Enumerated Values Property Value anonymous immediate anonymous When syncing, download all metadata and content now. ProgressReportResponse { \"message\": \"string\", \"code\": \"string\", \"state\": \"string\", \"total\": 0, \"done\": 0, \"suffix\": \"string\" } Base serializer for use with :class: pulpcore.app.models.Model This ensures that all Serializers provide values for the 'pulp_href` field. The class provides a default for the ref_name attribute in the ModelSerializers's Meta class. This ensures that the OpenAPI definitions of plugins are namespaced properly. Properties Name Type Required Restrictions Description message string false read-only The message shown to the user for the progress report. code string false read-only Identifies the type of progress report'. state string false read-only The current state of the progress report. The possible values are: 'waiting', 'skipped', 'running', 'completed', 'failed', 'canceled' and 'canceling'. The default is 'waiting'. total integer false read-only The total count of items. done integer false read-only The count of items already processed. Defaults to 0. suffix string\u00a6null false read-only The suffix to be shown with the progress report. PublicationResponse { \"pulp_href\": \"http://example.com\", \"pulp_created\": \"2019-08-24T14:15:22Z\", \"repository_version\": \"http://example.com\", \"repository\": \"http://example.com\" } Base serializer for use with :class: pulpcore.app.models.Model This ensures that all Serializers provide values for the 'pulp_href` field. The class provides a default for the ref_name attribute in the ModelSerializers's Meta class. This ensures that the OpenAPI definitions of plugins are namespaced properly. Properties Name Type Required Restrictions Description pulp_href string(uri) false read-only none pulp_created string(date-time) false read-only Timestamp of creation. repository_version string(uri) false none none repository string(uri) false none A URI of the repository to be published. PulpExport { \"task\": \"http://example.com\", \"full\": true, \"dry_run\": false, \"versions\": [ \"http://example.com\" ], \"chunk_size\": \"string\", \"start_versions\": [ \"http://example.com\" ] } Serializer for PulpExports. Properties Name Type Required Restrictions Description task string(uri)\u00a6null false none A URI of the task that ran the Export. full boolean false write-only Do a Full (true) or Incremental (false) export. dry_run boolean false write-only Generate report on what would be exported and disk-space required. versions [string] false write-only List of explicit repo-version hrefs to export (replaces current_version). chunk_size string false write-only Chunk export-tarfile into pieces of chunk_size bytes. Recognizes units of B/KB/MB/GB/TB. A chunk has a maximum size of 1TB. start_versions [string] false write-only List of explicit last-exported-repo-version hrefs (replaces last_export). PulpExportResponse { \"pulp_href\": \"http://example.com\", \"pulp_created\": \"2019-08-24T14:15:22Z\", \"task\": \"http://example.com\", \"exported_resources\": [ \"http://example.com\" ], \"params\": {}, \"output_file_info\": {}, \"toc_info\": {} } Serializer for PulpExports. Properties Name Type Required Restrictions Description pulp_href string(uri) false read-only none pulp_created string(date-time) false read-only Timestamp of creation. task string(uri)\u00a6null false none A URI of the task that ran the Export. exported_resources [string] false read-only Resources that were exported. params object false read-only Any additional parameters that were used to create the export. output_file_info object false read-only Dictionary of filename: sha256hash entries for export-output-file(s) toc_info object false read-only Filename and sha256-checksum of table-of-contents for this export PulpExporter { \"name\": \"string\", \"path\": \"string\", \"repositories\": [ \"http://example.com\" ], \"last_export\": \"http://example.com\" } Serializer for pulp exporters. Properties Name Type Required Restrictions Description name string true none Unique name of the file system exporter. path string true none File system directory to store exported tar.gzs. repositories [string] true none none last_export string(uri)\u00a6null false none Last attempted export for this PulpExporter PulpExporterResponse { \"pulp_href\": \"http://example.com\", \"pulp_created\": \"2019-08-24T14:15:22Z\", \"name\": \"string\", \"path\": \"string\", \"repositories\": [ \"http://example.com\" ], \"last_export\": \"http://example.com\" } Serializer for pulp exporters. Properties Name Type Required Restrictions Description pulp_href string(uri) false read-only none pulp_created string(date-time) false read-only Timestamp of creation. name string true none Unique name of the file system exporter. path string true none File system directory to store exported tar.gzs. repositories [string] true none none last_export string(uri)\u00a6null false none Last attempted export for this PulpExporter PulpImport { \"path\": \"string\", \"toc\": \"string\", \"create_repositories\": false } Serializer for call to import into Pulp. Properties Name Type Required Restrictions Description path string false none Path to export that will be imported. toc string false none Path to a table-of-contents file describing chunks to be validated, reassembled, and imported. create_repositories boolean false none If True, missing repositories will be automatically created during the import. PulpImportCheck { \"path\": \"string\", \"toc\": \"string\", \"repo_mapping\": \"string\" } Check validity of provided import-options. Provides the ability to check that an import is 'sane' without having to actually create an importer. Properties Name Type Required Restrictions Description path string false none Path to export-tar-gz that will be imported. toc string false none Path to a table-of-contents file describing chunks to be validated, reassembled, and imported. repo_mapping string false none Mapping of repo names in an export file to the repo names in Pulp. For example, if the export has a repo named 'foo' and the repo to import content into was 'bar', the mapping would be \"{'foo': 'bar'}\". PulpImportCheckResponse { \"toc\": { \"context\": \"string\", \"is_valid\": true, \"messages\": [ \"string\" ] }, \"path\": { \"context\": \"string\", \"is_valid\": true, \"messages\": [ \"string\" ] }, \"repo_mapping\": { \"context\": \"string\", \"is_valid\": true, \"messages\": [ \"string\" ] } } Return the response to a PulpImport import-check call. Properties Name Type Required Restrictions Description toc EvaluationResponse false none Evaluation of proposed 'toc' file for PulpImport path EvaluationResponse false none Evaluation of proposed 'path' file for PulpImport repo_mapping EvaluationResponse false none Evaluation of proposed 'repo_mapping' file for PulpImport PulpImporter { \"name\": \"string\", \"repo_mapping\": { \"property1\": \"string\", \"property2\": \"string\" } } Serializer for PulpImporters. Properties Name Type Required Restrictions Description name string true none Unique name of the Importer. repo_mapping object false none Mapping of repo names in an export file to the repo names in Pulp. For example, if the export has a repo named 'foo' and the repo to import content into was 'bar', the mapping would be \"{'foo': 'bar'}\". \u00bb additionalProperties string false none none PulpImporterResponse { \"pulp_href\": \"http://example.com\", \"pulp_created\": \"2019-08-24T14:15:22Z\", \"name\": \"string\", \"repo_mapping\": { \"property1\": \"string\", \"property2\": \"string\" } } Serializer for PulpImporters. Properties Name Type Required Restrictions Description pulp_href string(uri) false read-only none pulp_created string(date-time) false read-only Timestamp of creation. name string true none Unique name of the Importer. repo_mapping object false none Mapping of repo names in an export file to the repo names in Pulp. For example, if the export has a repo named 'foo' and the repo to import content into was 'bar', the mapping would be \"{'foo': 'bar'}\". \u00bb additionalProperties string false none none Purge { \"finished_before\": \"2022-10-16\", \"states\": [ \"completed\" ] } Properties Name Type Required Restrictions Description finished_before string(date-time) false none Purge tasks completed earlier than this timestamp. Format '%Y-%m-%d[T%H:%M:%S]' states [ StatesEnum ] false none List of task-states to be purged. Only 'final' states are allowed. RBACContentGuard { \"name\": \"string\", \"description\": \"string\" } Base serializer for use with :class: pulpcore.app.models.Model This ensures that all Serializers provide values for the 'pulp_href` field. The class provides a default for the ref_name attribute in the ModelSerializers's Meta class. This ensures that the OpenAPI definitions of plugins are namespaced properly. Properties Name Type Required Restrictions Description name string true none The unique name. description string\u00a6null false none An optional description. RBACContentGuardResponse { \"pulp_href\": \"http://example.com\", \"pulp_created\": \"2019-08-24T14:15:22Z\", \"name\": \"string\", \"description\": \"string\", \"users\": [ { \"username\": \"string\", \"pulp_href\": \"http://example.com\" } ], \"groups\": [ { \"name\": \"string\", \"pulp_href\": \"http://example.com\", \"id\": 0 } ] } Base serializer for use with :class: pulpcore.app.models.Model This ensures that all Serializers provide values for the 'pulp_href` field. The class provides a default for the ref_name attribute in the ModelSerializers's Meta class. This ensures that the OpenAPI definitions of plugins are namespaced properly. Properties Name Type Required Restrictions Description pulp_href string(uri) false read-only none pulp_created string(date-time) false read-only Timestamp of creation. name string true none The unique name. description string\u00a6null false none An optional description. users [ GroupUserResponse ] false read-only [Serializer for Users that belong to a Group.] groups [ GroupResponse ] false read-only [Serializer for Group.] ReclaimSpace { \"repo_hrefs\": [ null ], \"repo_versions_keeplist\": [ \"http://example.com\" ] } Serializer for reclaim disk space operation. Properties Name Type Required Restrictions Description repo_hrefs [any] true none Will reclaim space for the specified list of repos. Use ['*'] to specify all repos. repo_versions_keeplist [string] false none Will exclude repo versions from space reclaim. RecursiveManage { \"content_units\": [ null ] } Serializer for adding and removing content to/from a Container repository. Properties Name Type Required Restrictions Description content_units [any] false none A list of content units to operate on. RedisConnectionResponse { \"connected\": true } Serializer for information about the Redis connection Properties Name Type Required Restrictions Description connected boolean true none Info about whether the app can connect to Redis RemoteResponse { \"pulp_href\": \"http://example.com\", \"pulp_created\": \"2019-08-24T14:15:22Z\", \"name\": \"string\", \"url\": \"string\", \"ca_cert\": \"string\", \"client_cert\": \"string\", \"tls_validation\": true, \"proxy_url\": \"string\", \"pulp_labels\": {}, \"pulp_last_updated\": \"2019-08-24T14:15:22Z\", \"download_concurrency\": 1, \"max_retries\": 0, \"policy\": \"immediate\", \"total_timeout\": 0, \"connect_timeout\": 0, \"sock_connect_timeout\": 0, \"sock_read_timeout\": 0, \"headers\": [ {} ], \"rate_limit\": 0 } Every remote defined by a plugin should have a Remote serializer that inherits from this class. Please import from pulpcore.plugin.serializers rather than from this module directly. Properties Name Type Required Restrictions Description pulp_href string(uri) false read-only none pulp_created string(date-time) false read-only Timestamp of creation. name string true none A unique name for this remote. url string true none The URL of an external content source. ca_cert string\u00a6null false none A PEM encoded CA certificate used to validate the server certificate presented by the remote server. client_cert string\u00a6null false none A PEM encoded client certificate used for authentication. tls_validation boolean false none If True, TLS peer validation must be performed. proxy_url string\u00a6null false none The proxy URL. Format: scheme://host:port pulp_labels object false none none pulp_last_updated string(date-time) false read-only Timestamp of the most recent update of the remote. download_concurrency integer\u00a6null false none Total number of simultaneous connections. If not set then the default value will be used. max_retries integer\u00a6null false none Maximum number of retry attempts after a download failure. If not set then the default value (3) will be used. policy PolicyDb6Enum false none The policy to use when downloading content. total_timeout number(double)\u00a6null false none aiohttp.ClientTimeout.total (q.v.) for download-connections. The default is null, which will cause the default from the aiohttp library to be used. connect_timeout number(double)\u00a6null false none aiohttp.ClientTimeout.connect (q.v.) for download-connections. The default is null, which will cause the default from the aiohttp library to be used. sock_connect_timeout number(double)\u00a6null false none aiohttp.ClientTimeout.sock_connect (q.v.) for download-connections. The default is null, which will cause the default from the aiohttp library to be used. sock_read_timeout number(double)\u00a6null false none aiohttp.ClientTimeout.sock_read (q.v.) for download-connections. The default is null, which will cause the default from the aiohttp library to be used. headers [object] false none Headers for aiohttp.Clientsession rate_limit integer\u00a6null false none Limits requests per second for each concurrent downloader RemoveImage { \"digest\": \"string\" } A serializer for parsing and validating data associated with the image removal. Properties Name Type Required Restrictions Description digest string true none sha256 of the Manifest file RemoveSignatures { \"signed_with_key_id\": \"string\" } A serializer for parsing and validating data associated with the signatures removal. Properties Name Type Required Restrictions Description signed_with_key_id string true none key_id of the key the signatures were produced with RemoveSignaturesResponse { \"signed_with_key_id\": \"string\" } A serializer for parsing and validating data associated with the signatures removal. Properties Name Type Required Restrictions Description signed_with_key_id string true none key_id of the key the signatures were produced with Repair { \"verify_checksums\": true } Properties Name Type Required Restrictions Description verify_checksums boolean false none Will verify that the checksum of all stored files matches what saved in the database. Otherwise only the existence of the files will be checked. Enabled by default RepoMetadataResponse { \"published\": \"2019-08-24T14:15:22Z\" } A serializer to display RepositoryVersion metadata. Properties Name Type Required Restrictions Description published string(date-time) true none none RepositoryAddRemoveContent { \"add_content_units\": [ null ], \"remove_content_units\": [ null ], \"base_version\": \"http://example.com\" } Base serializer for use with :class: pulpcore.app.models.Model This ensures that all Serializers provide values for the 'pulp_href` field. The class provides a default for the ref_name attribute in the ModelSerializers's Meta class. This ensures that the OpenAPI definitions of plugins are namespaced properly. Properties Name Type Required Restrictions Description add_content_units [any] false none A list of content units to add to a new repository version. This content is added after remove_content_units are removed. remove_content_units [any] false none A list of content units to remove from the latest repository version. You may also specify '*' as an entry to remove all content. This content is removed before add_content_units are added. base_version string(uri) false none A repository version whose content will be used as the initial set of content for the new repository version RepositoryResponse { \"name\": \"string\", \"description\": \"string\", \"pulp_id\": \"f3ad2d41-3c12-4e29-ba19-4d3927e49b47\", \"pulp_last_updated\": \"2019-08-24T14:15:22Z\", \"content_count\": 0, \"gpgkey\": \"string\" } Properties Name Type Required Restrictions Description name string true none none description string\u00a6null false none none pulp_id string(uuid) false read-only none pulp_last_updated string(date-time) false read-only none content_count integer false read-only none gpgkey string true none none RepositorySign { \"manifest_signing_service\": \"http://example.com\", \"future_base_path\": \"string\", \"tags_list\": [ null ] } Serializer for container images signing. Properties Name Type Required Restrictions Description manifest_signing_service string(uri)\u00a6null false none A signing service to sign with. This will override a signing service set on the repo. future_base_path string false none Future base path content will be distributed at for sync repos tags_list [any] false none A list of tags to sign. RepositoryVersionResponse { \"pulp_href\": \"http://example.com\", \"pulp_created\": \"2019-08-24T14:15:22Z\", \"number\": 0, \"repository\": \"http://example.com\", \"base_version\": \"http://example.com\", \"content_summary\": { \"added\": { \"property1\": {}, \"property2\": {} }, \"removed\": { \"property1\": {}, \"property2\": {} }, \"present\": { \"property1\": {}, \"property2\": {} } } } Base serializer for use with :class: pulpcore.app.models.Model This ensures that all Serializers provide values for the 'pulp_href` field. The class provides a default for the ref_name attribute in the ModelSerializers's Meta class. This ensures that the OpenAPI definitions of plugins are namespaced properly. Properties Name Type Required Restrictions Description pulp_href string(uri) false read-only none pulp_created string(date-time) false read-only Timestamp of creation. number integer false read-only none repository string(uri) false read-only none base_version string(uri) false none A repository version whose content was used as the initial set of content for this repository version content_summary ContentSummaryResponse false read-only Various count summaries of the content in the version and the HREF to view them. Role { \"name\": \"string\", \"description\": \"string\", \"permissions\": [ \"string\" ] } Serializer for Role. Properties Name Type Required Restrictions Description name string true none The name of this role. description string\u00a6null false none An optional description. permissions [string] true none List of permissions defining the role. RoleResponse { \"pulp_href\": \"http://example.com\", \"pulp_created\": \"2019-08-24T14:15:22Z\", \"name\": \"string\", \"description\": \"string\", \"permissions\": [ \"string\" ], \"locked\": true } Serializer for Role. Properties Name Type Required Restrictions Description pulp_href string(uri) false read-only none pulp_created string(date-time) false read-only Timestamp of creation. name string true none The name of this role. description string\u00a6null false none An optional description. permissions [string] true none List of permissions defining the role. locked boolean false read-only True if the role is system managed. SigningServiceResponse { \"pulp_href\": \"http://example.com\", \"pulp_created\": \"2019-08-24T14:15:22Z\", \"name\": \"string\", \"public_key\": \"string\", \"pubkey_fingerprint\": \"string\", \"script\": \"string\" } A serializer for the model declaring a signing service. Properties Name Type Required Restrictions Description pulp_href string(uri) false read-only none pulp_created string(date-time) false read-only Timestamp of creation. name string true none A unique name used to recognize a script. public_key string true none The value of a public key used for the repository verification. pubkey_fingerprint string true none The fingerprint of the public key. script string true none An absolute path to a script which is going to be used for the signing. StatesEnum \"skipped\" Properties Name Type Required Restrictions Description anonymous string false none none Enumerated Values Property Value anonymous skipped anonymous completed anonymous failed anonymous canceled StatusResponse { \"versions\": [ { \"component\": \"string\", \"version\": \"string\", \"package\": \"string\" } ], \"online_workers\": [ { \"pulp_href\": \"http://example.com\", \"pulp_created\": \"2019-08-24T14:15:22Z\", \"name\": \"string\", \"last_heartbeat\": \"2019-08-24T14:15:22Z\", \"current_task\": \"http://example.com\" } ], \"online_content_apps\": [ { \"name\": \"string\", \"last_heartbeat\": \"2019-08-24T14:15:22Z\" } ], \"database_connection\": { \"connected\": true }, \"redis_connection\": { \"connected\": true }, \"storage\": { \"total\": 0, \"used\": 0, \"free\": 0 } } Serializer for the status information of the app Properties Name Type Required Restrictions Description versions [ VersionResponse ] true none Version information of Pulp components online_workers [ WorkerResponse ] true none List of online workers known to the application. An online worker is actively heartbeating and can respond to new work online_content_apps [ ContentAppStatusResponse ] true none List of online content apps known to the application. An online content app is actively heartbeating and can serve data to clients database_connection DatabaseConnectionResponse true none Database connection information redis_connection RedisConnectionResponse false none Redis connection information storage StorageResponse false none Storage information StorageResponse { \"total\": 0, \"used\": 0, \"free\": 0 } Serializer for information about the storage system Properties Name Type Required Restrictions Description total integer true none Total number of bytes used integer true none Number of bytes in use free integer true none Number of free bytes SyncList { \"name\": \"string\", \"policy\": \"exclude\", \"upstream_repository\": \"e4806caf-013f-4b45-852d-8383b790be1e\", \"distribution\": \"bfc61d85-c320-44a0-8e0a-6d4a25594a2d\", \"collections\": [ { \"namespace\": \"string\", \"name\": \"string\" } ], \"namespaces\": [ \"string\" ], \"groups\": \"string\" } Properties Name Type Required Restrictions Description name string true none none policy Policy8baEnum false none none upstream_repository string(uuid)\u00a6null false none none distribution string(uuid)\u00a6null false none none collections [ SyncListCollectionSummary ] true none none namespaces [string] true none none groups string true none none SyncListCollectionSummary { \"namespace\": \"string\", \"name\": \"string\" } Properties Name Type Required Restrictions Description namespace string true none none name string true none none SyncListCollectionSummaryResponse { \"namespace\": \"string\", \"name\": \"string\" } Properties Name Type Required Restrictions Description namespace string true none none name string true none none SyncListResponse { \"id\": 0, \"name\": \"string\", \"policy\": \"exclude\", \"upstream_repository\": \"e4806caf-013f-4b45-852d-8383b790be1e\", \"repository\": \"e3d1beef-8819-44ce-aeb0-6d1f16e4ee3b\", \"distribution\": \"bfc61d85-c320-44a0-8e0a-6d4a25594a2d\", \"collections\": [ { \"namespace\": \"string\", \"name\": \"string\" } ], \"namespaces\": [ \"string\" ], \"groups\": \"string\" } Properties Name Type Required Restrictions Description id integer false read-only none name string true none none policy Policy8baEnum false none none upstream_repository string(uuid)\u00a6null false none none repository string(uuid)\u00a6null false read-only none distribution string(uuid)\u00a6null false none none collections [ SyncListCollectionSummaryResponse ] true none none namespaces [string] true none none groups string true none none TagCopy { \"source_repository\": \"http://example.com\", \"source_repository_version\": \"http://example.com\", \"names\": [ null ] } Serializer for copying tags from a source repository to a destination repository. Properties Name Type Required Restrictions Description source_repository string(uri) false none A URI of the repository to copy content from. source_repository_version string(uri) false none A URI of the repository version to copy content from. names [any] false none A list of tag names to copy. TagImage { \"tag\": \"string\", \"digest\": \"string\" } A serializer for parsing and validating data associated with a manifest tagging. Properties Name Type Required Restrictions Description tag string true none A tag name digest string true none sha256 of the Manifest file TagResponse { \"name\": \"string\" } A serializer for the Tag model. Properties Name Type Required Restrictions Description name string false read-only none TaskGroupOperationResponse { \"task_group\": \"http://example.com\" } Serializer for asynchronous operations that return a task group. Properties Name Type Required Restrictions Description task_group string(uri) true none The href of the task group. TaskGroupResponse { \"pulp_href\": \"http://example.com\", \"description\": \"string\", \"all_tasks_dispatched\": true, \"waiting\": 0, \"skipped\": 0, \"running\": 0, \"completed\": 0, \"canceled\": 0, \"failed\": 0, \"canceling\": 0, \"group_progress_reports\": [ { \"message\": \"string\", \"code\": \"string\", \"total\": 0, \"done\": 0, \"suffix\": \"string\" } ], \"tasks\": [ { \"pulp_href\": \"http://example.com\", \"pulp_created\": \"2019-08-24T14:15:22Z\", \"name\": \"string\", \"state\": \"string\", \"started_at\": \"2019-08-24T14:15:22Z\", \"finished_at\": \"2019-08-24T14:15:22Z\", \"worker\": \"http://example.com\" } ] } Base serializer for use with :class: pulpcore.app.models.Model This ensures that all Serializers provide values for the 'pulp_href` field. The class provides a default for the ref_name attribute in the ModelSerializers's Meta class. This ensures that the OpenAPI definitions of plugins are namespaced properly. Properties Name Type Required Restrictions Description pulp_href string(uri) false read-only none description string true none A description of the task group. all_tasks_dispatched boolean true none Whether all tasks have been spawned for this task group. waiting integer false read-only Number of tasks in the 'waiting' state skipped integer false read-only Number of tasks in the 'skipped' state running integer false read-only Number of tasks in the 'running' state completed integer false read-only Number of tasks in the 'completed' state canceled integer false read-only Number of tasks in the 'canceled' state failed integer false read-only Number of tasks in the 'failed' state canceling integer false read-only Number of tasks in the 'canceling' state group_progress_reports [ GroupProgressReportResponse ] false read-only [Base serializer for use with :class: pulpcore.app.models.Model This ensures that all Serializers provide values for the 'pulp_href` field. The class provides a default for the ref_name attribute in the ModelSerializers's Meta class. This ensures that the OpenAPI definitions of plugins are namespaced properly.] tasks [ MinimalTaskResponse ] false read-only [Base serializer for use with :class: pulpcore.app.models.Model This ensures that all Serializers provide values for the 'pulp_href` field. The class provides a default for the ref_name attribute in the ModelSerializers's Meta class. This ensures that the OpenAPI definitions of plugins are namespaced properly.] TaskResponse { \"pulp_id\": \"f3ad2d41-3c12-4e29-ba19-4d3927e49b47\", \"name\": \"string\", \"created_at\": \"2019-08-24T14:15:22Z\", \"updated_at\": \"2019-08-24T14:15:22Z\", \"finished_at\": \"2019-08-24T14:15:22Z\", \"started_at\": \"2019-08-24T14:15:22Z\", \"state\": \"string\", \"error\": {}, \"worker\": {}, \"parent_task\": \"a47d3c72-d323-4ab8-b986-8424d3a63720\", \"child_tasks\": [ \"497f6eca-6276-4993-bfeb-53cbbbba6f08\" ], \"progress_reports\": [ { \"message\": \"string\", \"code\": \"string\", \"state\": \"string\", \"total\": 0, \"done\": 0, \"suffix\": \"string\" } ] } Properties Name Type Required Restrictions Description pulp_id string(uuid) true none none name string true none none created_at string(date-time) true none none updated_at string(date-time) true none none finished_at string(date-time) true none none started_at string(date-time) true none none state string true none none error object\u00a6null false none none worker object\u00a6null false read-only none parent_task string(uuid)\u00a6null false none none child_tasks [string] true none none progress_reports [ ProgressReportResponse ] false read-only [Base serializer for use with :class: pulpcore.app.models.Model This ensures that all Serializers provide values for the 'pulp_href` field. The class provides a default for the ref_name attribute in the ModelSerializers's Meta class. This ensures that the OpenAPI definitions of plugins are namespaced properly.] TaskScheduleResponse { \"pulp_href\": \"http://example.com\", \"pulp_created\": \"2019-08-24T14:15:22Z\", \"name\": \"string\", \"task_name\": \"string\", \"dispatch_interval\": \"string\", \"next_dispatch\": \"2019-08-24T14:15:22Z\", \"last_task\": \"http://example.com\" } Base serializer for use with :class: pulpcore.app.models.Model This ensures that all Serializers provide values for the 'pulp_href` field. The class provides a default for the ref_name attribute in the ModelSerializers's Meta class. This ensures that the OpenAPI definitions of plugins are namespaced properly. Properties Name Type Required Restrictions Description pulp_href string(uri) false read-only none pulp_created string(date-time) false read-only Timestamp of creation. name string true none The name of the task schedule. task_name string true none The name of the task to be scheduled. dispatch_interval string true none Periodicity of the schedule. next_dispatch string(date-time) false read-only Timestamp of the next time the task will be dispatched. last_task string(uri) false read-only The last task dispatched by this schedule. TaskSummaryResponse { \"pulp_id\": \"f3ad2d41-3c12-4e29-ba19-4d3927e49b47\", \"name\": \"string\", \"state\": \"string\", \"started_at\": \"2019-08-24T14:15:22Z\", \"finished_at\": \"2019-08-24T14:15:22Z\", \"href\": \"string\" } TaskSerializer but without detail fields. For use in /tasks/ / detail views. Properties Name Type Required Restrictions Description pulp_id string(uuid) true none none name string true none none state string true none none started_at string(date-time) true none none finished_at string(date-time) true none none href string false read-only none UnTagImage { \"tag\": \"string\" } A serializer for parsing and validating data associated with a manifest untagging. Properties Name Type Required Restrictions Description tag string true none A tag name UnpaginatedCollectionVersionResponse { \"version\": \"string\", \"href\": \"string\", \"created_at\": \"2019-08-24T14:15:22Z\", \"updated_at\": \"2019-08-24T14:15:22Z\", \"requires_ansible\": \"string\", \"artifact\": { \"filename\": \"string\", \"sha256\": \"string\", \"size\": 0 }, \"collection\": { \"id\": \"string\", \"name\": \"string\", \"href\": \"string\" }, \"download_url\": \"string\", \"name\": \"string\", \"namespace\": { \"name\": \"string\" }, \"signatures\": \"string\", \"metadata\": { \"authors\": [ \"string\" ], \"contents\": {}, \"dependencies\": {}, \"description\": \"string\", \"documentation\": \"string\", \"homepage\": \"string\", \"issues\": \"string\", \"license\": [ \"string\" ], \"repository\": \"string\", \"tags\": [ \"string\" ] }, \"git_url\": \"string\", \"git_commit_sha\": \"string\" } A serializer for unpaginated CollectionVersion. Properties Name Type Required Restrictions Description version string false read-only none href string false read-only none created_at string(date-time) true none none updated_at string(date-time) true none none requires_ansible string\u00a6null false none none artifact ArtifactRefResponse false read-only A serializer for an Artifact reference. collection CollectionRefResponse false read-only A serializer for a Collection reference. download_url string false read-only none name string false read-only none namespace CollectionNamespaceResponse false read-only A serializer for a Collection Version namespace field. signatures string false read-only none metadata CollectionMetadataResponse false read-only A serializer for a CollectionVersion metadata. git_url string false read-only none git_commit_sha string false read-only none Upload { \"size\": 0 } Serializer for chunked uploads. Properties Name Type Required Restrictions Description size integer true none The size of the upload in bytes. UploadChunk { \"file\": \"string\", \"sha256\": \"string\" } A mixin for validating unknown serializers' fields. Properties Name Type Required Restrictions Description file string(binary) true write-only A chunk of the uploaded file. sha256 string\u00a6null false write-only The SHA-256 checksum of the chunk if available. UploadChunkResponse { \"offset\": 0, \"size\": 0 } A mixin for validating unknown serializers' fields. Properties Name Type Required Restrictions Description offset integer false read-only none size integer false read-only none UploadCommit { \"sha256\": \"string\" } A mixin for validating unknown serializers' fields. Properties Name Type Required Restrictions Description sha256 string true none The expected sha256 checksum for the file. UploadDetailResponse { \"pulp_href\": \"http://example.com\", \"pulp_created\": \"2019-08-24T14:15:22Z\", \"size\": 0, \"completed\": \"2019-08-24T14:15:22Z\", \"chunks\": [ { \"offset\": 0, \"size\": 0 } ] } Serializer for chunked uploads. Properties Name Type Required Restrictions Description pulp_href string(uri) false read-only none pulp_created string(date-time) false read-only Timestamp of creation. size integer true none The size of the upload in bytes. completed string(date-time) false read-only Timestamp when upload is committed. chunks [ UploadChunkResponse ] false read-only [A mixin for validating unknown serializers' fields.] UploadResponse { \"pulp_href\": \"http://example.com\", \"pulp_created\": \"2019-08-24T14:15:22Z\", \"size\": 0, \"completed\": \"2019-08-24T14:15:22Z\" } Serializer for chunked uploads. Properties Name Type Required Restrictions Description pulp_href string(uri) false read-only none pulp_created string(date-time) false read-only Timestamp of creation. size integer true none The size of the upload in bytes. completed string(date-time) false read-only Timestamp when upload is committed. User { \"username\": \"string\", \"first_name\": \"string\", \"last_name\": \"string\", \"email\": \"user@example.com\", \"groups\": [ 0 ], \"password\": \"string\", \"is_superuser\": true } Properties Name Type Required Restrictions Description username string true none Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only. first_name string false none none last_name string false none none email string(email) false none none groups [integer] false none The groups this user belongs to. A user will get all permissions granted to each of their groups. password string false write-only none is_superuser boolean false none Designates that this user has all permissions without explicitly assigning them. UserGroup { \"name\": \"string\" } Serializer for Groups that belong to an User. Properties Name Type Required Restrictions Description name string true none Name. UserGroupResponse { \"name\": \"string\", \"pulp_href\": \"http://example.com\" } Serializer for Groups that belong to an User. Properties Name Type Required Restrictions Description name string true none Name. pulp_href string(uri) false read-only none UserResponse { \"id\": 0, \"username\": \"string\", \"first_name\": \"string\", \"last_name\": \"string\", \"email\": \"user@example.com\", \"groups\": [ 0 ], \"date_joined\": \"2019-08-24T14:15:22Z\", \"is_superuser\": true, \"auth_provider\": \"string\" } Properties Name Type Required Restrictions Description id integer false read-only none username string true none Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only. first_name string false none none last_name string false none none email string(email) false none none groups [integer] false none The groups this user belongs to. A user will get all permissions granted to each of their groups. date_joined string(date-time) false read-only none is_superuser boolean false none Designates that this user has all permissions without explicitly assigning them. auth_provider string false read-only none UserRole { \"role\": \"string\", \"content_object\": \"string\" } Serializer for UserRole. Properties Name Type Required Restrictions Description role string true none none content_object string\u00a6null true none pulp_href of the object for which role permissions should be asserted. If set to 'null', permissions will act on the model-level. UserRoleResponse { \"pulp_href\": \"http://example.com\", \"pulp_created\": \"2019-08-24T14:15:22Z\", \"role\": \"string\", \"content_object\": \"string\", \"description\": \"string\", \"permissions\": [ \"string\" ] } Serializer for UserRole. Properties Name Type Required Restrictions Description pulp_href string(uri) false read-only none pulp_created string(date-time) false read-only Timestamp of creation. role string true none none content_object string\u00a6null true none pulp_href of the object for which role permissions should be asserted. If set to 'null', permissions will act on the model-level. description string false read-only none permissions [string] false read-only none VersionResponse { \"component\": \"string\", \"version\": \"string\", \"package\": \"string\" } Serializer for the version information of Pulp components Properties Name Type Required Restrictions Description component string true none Name of a versioned component of Pulp version string true none Version of the component (e.g. 3.0.0) package string true none Python package name providing the component WorkerResponse { \"pulp_href\": \"http://example.com\", \"pulp_created\": \"2019-08-24T14:15:22Z\", \"name\": \"string\", \"last_heartbeat\": \"2019-08-24T14:15:22Z\", \"current_task\": \"http://example.com\" } Base serializer for use with :class: pulpcore.app.models.Model This ensures that all Serializers provide values for the 'pulp_href` field. The class provides a default for the ref_name attribute in the ModelSerializers's Meta class. This ensures that the OpenAPI definitions of plugins are namespaced properly. Properties Name Type Required Restrictions Description pulp_href string(uri) false read-only none pulp_created string(date-time) false read-only Timestamp of creation. name string false read-only The name of the worker. last_heartbeat string(date-time) false read-only Timestamp of the last time the worker talked to the service. current_task string(uri) false read-only The task this worker is currently executing, or empty if the worker is not currently assigned to a task. ansible.AnsibleDistribution { \"base_path\": \"string\", \"content_guard\": \"http://example.com\", \"name\": \"string\", \"repository\": \"http://example.com\", \"repository_version\": \"http://example.com\", \"pulp_labels\": {} } Serializer for Ansible Distributions. Properties Name Type Required Restrictions Description base_path string true none The base (relative) path component of the published url. Avoid paths that overlap with other distribution base paths (e.g. \"foo\" and \"foo/bar\") content_guard string(uri)\u00a6null false none An optional content-guard. name string true none A unique name. Ex, rawhide and stable . repository string(uri)\u00a6null false none The latest RepositoryVersion for this Repository will be served. repository_version string(uri)\u00a6null false none RepositoryVersion to be served pulp_labels object false none none ansible.AnsibleDistributionResponse { \"pulp_href\": \"http://example.com\", \"pulp_created\": \"2019-08-24T14:15:22Z\", \"base_path\": \"string\", \"content_guard\": \"http://example.com\", \"name\": \"string\", \"repository\": \"http://example.com\", \"repository_version\": \"http://example.com\", \"client_url\": \"string\", \"pulp_labels\": {} } Serializer for Ansible Distributions. Properties Name Type Required Restrictions Description pulp_href string(uri) false read-only none pulp_created string(date-time) false read-only Timestamp of creation. base_path string true none The base (relative) path component of the published url. Avoid paths that overlap with other distribution base paths (e.g. \"foo\" and \"foo/bar\") content_guard string(uri)\u00a6null false none An optional content-guard. name string true none A unique name. Ex, rawhide and stable . repository string(uri)\u00a6null false none The latest RepositoryVersion for this Repository will be served. repository_version string(uri)\u00a6null false none RepositoryVersion to be served client_url string false read-only The URL of a Collection content source. pulp_labels object false none none ansible.AnsibleRepository { \"pulp_labels\": {}, \"name\": \"string\", \"description\": \"string\", \"retain_repo_versions\": 1, \"remote\": \"http://example.com\", \"last_synced_metadata_time\": \"2019-08-24T14:15:22Z\", \"gpgkey\": \"string\" } Serializer for Ansible Repositories. Properties Name Type Required Restrictions Description pulp_labels object false none none name string true none A unique name for this repository. description string\u00a6null false none An optional description. retain_repo_versions integer\u00a6null false none Retain X versions of the repository. Default is null which retains all versions. This is provided as a tech preview in Pulp 3 and may change in the future. remote string(uri)\u00a6null false none An optional remote to use by default when syncing. last_synced_metadata_time string(date-time)\u00a6null false none Last synced metadata time. gpgkey string\u00a6null false none Gpg public key to verify collection signatures against ansible.AnsibleRepositoryResponse { \"pulp_href\": \"http://example.com\", \"pulp_created\": \"2019-08-24T14:15:22Z\", \"versions_href\": \"http://example.com\", \"pulp_labels\": {}, \"latest_version_href\": \"http://example.com\", \"name\": \"string\", \"description\": \"string\", \"retain_repo_versions\": 1, \"remote\": \"http://example.com\", \"last_synced_metadata_time\": \"2019-08-24T14:15:22Z\", \"gpgkey\": \"string\" } Serializer for Ansible Repositories. Properties Name Type Required Restrictions Description pulp_href string(uri) false read-only none pulp_created string(date-time) false read-only Timestamp of creation. versions_href string(uri) false read-only none pulp_labels object false none none latest_version_href string(uri) false read-only none name string true none A unique name for this repository. description string\u00a6null false none An optional description. retain_repo_versions integer\u00a6null false none Retain X versions of the repository. Default is null which retains all versions. This is provided as a tech preview in Pulp 3 and may change in the future. remote string(uri)\u00a6null false none An optional remote to use by default when syncing. last_synced_metadata_time string(date-time)\u00a6null false none Last synced metadata time. gpgkey string\u00a6null false none Gpg public key to verify collection signatures against ansible.Collection { \"name\": \"string\", \"namespace\": \"string\" } A serializer for Ansible Collections. Properties Name Type Required Restrictions Description name string true none The name of the Collection. namespace string true none The namespace of the Collection. ansible.CollectionRemote { \"url\": \"string\", \"auth_url\": \"string\", \"token\": \"string\", \"policy\": \"immediate\", \"requirements_file\": \"string\", \"created_at\": \"2019-08-24T14:15:22Z\", \"updated_at\": \"2019-08-24T14:15:22Z\", \"username\": \"string\", \"password\": \"string\", \"tls_validation\": true, \"client_key\": \"string\", \"client_cert\": \"string\", \"ca_cert\": \"string\", \"download_concurrency\": 1, \"proxy_url\": \"string\", \"proxy_username\": \"string\", \"proxy_password\": \"string\", \"rate_limit\": 0, \"signed_only\": false } A serializer for Collection Remotes. Properties Name Type Required Restrictions Description url string true none The URL of an external content source. auth_url string\u00a6null false none The URL to receive a session token from, e.g. used with Automation Hub. token string\u00a6null false write-only none policy PolicyDb6Enum false none The policy to use when downloading content. requirements_file string\u00a6null false none The string version of Collection requirements yaml. created_at string(date-time) false none none updated_at string(date-time) false none none username string\u00a6null false none Remote user. password string\u00a6null false write-only Remote password. tls_validation boolean false none If True, TLS peer validation must be performed. client_key string\u00a6null false write-only A PEM encoded private key used for authentication. client_cert string\u00a6null false none A PEM encoded client certificate used for authentication. ca_cert string\u00a6null false none A PEM encoded CA certificate used to validate the server certificate presented by the remote server. download_concurrency integer\u00a6null false none Total number of simultaneous connections. If not set then the default value will be used. proxy_url string\u00a6null false none The proxy URL. Format: scheme://host:port proxy_username string\u00a6null false none User for proxy authentication. proxy_password string\u00a6null false write-only Password for proxy authentication. rate_limit integer\u00a6null false none Limits requests per second for each concurrent downloader signed_only boolean false none Sync only collections that have a signature ansible.CollectionRemoteResponse { \"pk\": \"4af43191-2f37-4a16-8471-4e8e40c314af\", \"name\": \"string\", \"url\": \"string\", \"auth_url\": \"string\", \"policy\": \"immediate\", \"requirements_file\": \"string\", \"created_at\": \"2019-08-24T14:15:22Z\", \"updated_at\": \"2019-08-24T14:15:22Z\", \"username\": \"string\", \"tls_validation\": true, \"client_cert\": \"string\", \"ca_cert\": \"string\", \"last_sync_task\": \"string\", \"repositories\": [ { \"name\": \"string\", \"description\": \"string\", \"next_version\": 2147483647, \"distributions\": [ { \"name\": \"string\", \"base_path\": \"string\", \"content_guard\": \"75e6b91e-c196-4627-9383-ce2e1e08d705\", \"created_at\": \"2019-08-24T14:15:22Z\", \"updated_at\": \"2019-08-24T14:15:22Z\" } ], \"created_at\": \"2019-08-24T14:15:22Z\", \"updated_at\": \"2019-08-24T14:15:22Z\", \"last_sync_task\": \"string\" } ], \"pulp_href\": \"http://example.com\", \"download_concurrency\": 1, \"proxy_url\": \"string\", \"proxy_username\": \"string\", \"write_only_fields\": [ null ], \"rate_limit\": 0, \"signed_only\": false } A serializer for Collection Remotes. Properties Name Type Required Restrictions Description pk string(uuid) false read-only none name string false read-only none url string true none The URL of an external content source. auth_url string\u00a6null false none The URL to receive a session token from, e.g. used with Automation Hub. policy PolicyDb6Enum false none The policy to use when downloading content. requirements_file string\u00a6null false none The string version of Collection requirements yaml. created_at string(date-time) false none none updated_at string(date-time) false none none username string\u00a6null false none Remote user. tls_validation boolean false none If True, TLS peer validation must be performed. client_cert string\u00a6null false none A PEM encoded client certificate used for authentication. ca_cert string\u00a6null false none A PEM encoded CA certificate used to validate the server certificate presented by the remote server. last_sync_task string false read-only none repositories [ AnsibleRepositoryResponse ] false read-only none pulp_href string(uri) false read-only none download_concurrency integer\u00a6null false none Total number of simultaneous connections. If not set then the default value will be used. proxy_url string\u00a6null false none The proxy URL. Format: scheme://host:port proxy_username string\u00a6null false none User for proxy authentication. write_only_fields [any] false read-only none rate_limit integer\u00a6null false none Limits requests per second for each concurrent downloader signed_only boolean false none Sync only collections that have a signature ansible.CollectionResponse { \"name\": \"string\", \"namespace\": \"string\" } A serializer for Ansible Collections. Properties Name Type Required Restrictions Description name string true none The name of the Collection. namespace string true none The namespace of the Collection. ansible.CollectionVersion { \"upload\": \"http://example.com\", \"repository\": \"http://example.com\", \"file\": \"string\", \"name\": \"string\", \"namespace\": \"string\", \"version\": \"string\" } A serializer for CollectionVersion Content. Properties Name Type Required Restrictions Description upload string(uri) false write-only An uncommitted upload that may be turned into the artifact of the content unit. repository string(uri) false write-only A URI of a repository the new content unit should be associated with. file string(binary) false write-only An uploaded file that may be turned into the artifact of the content unit. name string true none The name of the collection. namespace string true none The namespace of the collection. version string true none The version of the collection. ansible.CollectionVersionResponse { \"pulp_href\": \"http://example.com\", \"artifact\": \"http://example.com\", \"pulp_created\": \"2019-08-24T14:15:22Z\", \"md5\": \"string\", \"sha1\": \"string\", \"sha224\": \"string\", \"sha256\": \"string\", \"sha384\": \"string\", \"sha512\": \"string\", \"id\": \"497f6eca-6276-4993-bfeb-53cbbbba6f08\", \"authors\": [ \"string\" ], \"contents\": {}, \"dependencies\": {}, \"description\": \"string\", \"docs_blob\": {}, \"manifest\": {}, \"files\": {}, \"documentation\": \"string\", \"homepage\": \"string\", \"issues\": \"string\", \"license\": [ \"string\" ], \"name\": \"string\", \"namespace\": \"string\", \"repository\": \"string\", \"tags\": [ { \"name\": \"string\" } ], \"version\": \"string\", \"requires_ansible\": \"string\" } A serializer for CollectionVersion Content. Properties Name Type Required Restrictions Description pulp_href string(uri) false read-only none artifact string(uri) false none Artifact file representing the physical content pulp_created string(date-time) false read-only Timestamp of creation. md5 string false read-only The MD5 checksum if available. sha1 string false read-only The SHA-1 checksum if available. sha224 string false read-only The SHA-224 checksum if available. sha256 string false read-only The SHA-256 checksum if available. sha384 string false read-only The SHA-384 checksum if available. sha512 string false read-only The SHA-512 checksum if available. id string(uuid) true none A collection identifier. authors [string] true none A list of the CollectionVersion content's authors. contents object true none A JSON field with data about the contents. dependencies object true none A dict declaring Collections that this collection requires to be installed for it to be usable. description string true none A short summary description of the collection. docs_blob object true none A JSON field holding the various documentation blobs in the collection. manifest object true none A JSON field holding MANIFEST.json data. files object true none A JSON field holding FILES.json data. documentation string true none The URL to any online docs. homepage string true none The URL to the homepage of the collection/project. issues string true none The URL to the collection issue tracker. license [string] true none A list of licenses for content inside of a collection. name string true none The name of the collection. namespace string true none The namespace of the collection. repository string true none The URL of the originating SCM repository. tags [ ansible.TagResponse ] false read-only [A serializer for nesting in the CollectionVersion model.] version string true none The version of the collection. requires_ansible string\u00a6null false none The version of Ansible required to use the collection. Multiple versions can be separated with a comma. ansible.CollectionVersionSignature { \"file\": \"string\", \"repository\": \"http://example.com\", \"signed_collection\": \"http://example.com\" } A serializer for signature models. Properties Name Type Required Restrictions Description file string(binary) true write-only An uploaded file that may be turned into the artifact of the content unit. repository string(uri) false write-only A URI of a repository the new content unit should be associated with. signed_collection string(uri) true none The content this signature is pointing to. ansible.CollectionVersionSignatureResponse { \"pulp_href\": \"http://example.com\", \"pulp_created\": \"2019-08-24T14:15:22Z\", \"signed_collection\": \"http://example.com\", \"pubkey_fingerprint\": \"string\", \"signing_service\": \"http://example.com\" } A serializer for signature models. Properties Name Type Required Restrictions Description pulp_href string(uri) false read-only none pulp_created string(date-time) false read-only Timestamp of creation. signed_collection string(uri) true none The content this signature is pointing to. pubkey_fingerprint string false read-only The fingerprint of the public key. signing_service string(uri)\u00a6null false read-only The signing service used to create the signature. ansible.GitRemote { \"max_retries\": 0, \"client_cert\": \"string\", \"rate_limit\": 0, \"headers\": [ {} ], \"proxy_password\": \"string\", \"connect_timeout\": 0, \"client_key\": \"string\", \"url\": \"string\", \"proxy_username\": \"string\", \"username\": \"string\", \"download_concurrency\": 1, \"tls_validation\": true, \"pulp_labels\": {}, \"password\": \"string\", \"sock_read_timeout\": 0, \"proxy_url\": \"string\", \"ca_cert\": \"string\", \"total_timeout\": 0, \"sock_connect_timeout\": 0, \"name\": \"string\", \"metadata_only\": true, \"git_ref\": \"string\" } A serializer for Git Collection Remotes. Properties Name Type Required Restrictions Description max_retries integer\u00a6null false none Maximum number of retry attempts after a download failure. If not set then the default value (3) will be used. client_cert string\u00a6null false none A PEM encoded client certificate used for authentication. rate_limit integer\u00a6null false none Limits requests per second for each concurrent downloader headers [object] false none Headers for aiohttp.Clientsession proxy_password string\u00a6null false write-only The password to authenticate to the proxy. Extra leading and trailing whitespace characters are not trimmed. connect_timeout number(double)\u00a6null false none aiohttp.ClientTimeout.connect (q.v.) for download-connections. The default is null, which will cause the default from the aiohttp library to be used. client_key string\u00a6null false write-only A PEM encoded private key used for authentication. url string true none The URL of an external content source. proxy_username string\u00a6null false write-only The username to authenticte to the proxy. username string\u00a6null false write-only The username to be used for authentication when syncing. download_concurrency integer\u00a6null false none Total number of simultaneous connections. If not set then the default value will be used. tls_validation boolean false none If True, TLS peer validation must be performed. pulp_labels object false none none password string\u00a6null false write-only The password to be used for authentication when syncing. Extra leading and trailing whitespace characters are not trimmed. sock_read_timeout number(double)\u00a6null false none aiohttp.ClientTimeout.sock_read (q.v.) for download-connections. The default is null, which will cause the default from the aiohttp library to be used. proxy_url string\u00a6null false none The proxy URL. Format: scheme://host:port ca_cert string\u00a6null false none A PEM encoded CA certificate used to validate the server certificate presented by the remote server. total_timeout number(double)\u00a6null false none aiohttp.ClientTimeout.total (q.v.) for download-connections. The default is null, which will cause the default from the aiohttp library to be used. sock_connect_timeout number(double)\u00a6null false none aiohttp.ClientTimeout.sock_connect (q.v.) for download-connections. The default is null, which will cause the default from the aiohttp library to be used. name string true none A unique name for this remote. metadata_only boolean false none If True, only metadata about the content will be stored in Pulp. Clients will retrieve content from the remote URL. git_ref string false none A git ref. e.g.: branch, tag, or commit sha. ansible.GitRemoteResponse { \"max_retries\": 0, \"client_cert\": \"string\", \"rate_limit\": 0, \"headers\": [ {} ], \"pulp_created\": \"2019-08-24T14:15:22Z\", \"connect_timeout\": 0, \"pulp_last_updated\": \"2019-08-24T14:15:22Z\", \"url\": \"string\", \"download_concurrency\": 1, \"tls_validation\": true, \"pulp_labels\": {}, \"pulp_href\": \"http://example.com\", \"sock_read_timeout\": 0, \"proxy_url\": \"string\", \"ca_cert\": \"string\", \"total_timeout\": 0, \"sock_connect_timeout\": 0, \"name\": \"string\", \"metadata_only\": true, \"git_ref\": \"string\" } A serializer for Git Collection Remotes. Properties Name Type Required Restrictions Description max_retries integer\u00a6null false none Maximum number of retry attempts after a download failure. If not set then the default value (3) will be used. client_cert string\u00a6null false none A PEM encoded client certificate used for authentication. rate_limit integer\u00a6null false none Limits requests per second for each concurrent downloader headers [object] false none Headers for aiohttp.Clientsession pulp_created string(date-time) false read-only Timestamp of creation. connect_timeout number(double)\u00a6null false none aiohttp.ClientTimeout.connect (q.v.) for download-connections. The default is null, which will cause the default from the aiohttp library to be used. pulp_last_updated string(date-time) false read-only Timestamp of the most recent update of the remote. url string true none The URL of an external content source. download_concurrency integer\u00a6null false none Total number of simultaneous connections. If not set then the default value will be used. tls_validation boolean false none If True, TLS peer validation must be performed. pulp_labels object false none none pulp_href string(uri) false read-only none sock_read_timeout number(double)\u00a6null false none aiohttp.ClientTimeout.sock_read (q.v.) for download-connections. The default is null, which will cause the default from the aiohttp library to be used. proxy_url string\u00a6null false none The proxy URL. Format: scheme://host:port ca_cert string\u00a6null false none A PEM encoded CA certificate used to validate the server certificate presented by the remote server. total_timeout number(double)\u00a6null false none aiohttp.ClientTimeout.total (q.v.) for download-connections. The default is null, which will cause the default from the aiohttp library to be used. sock_connect_timeout number(double)\u00a6null false none aiohttp.ClientTimeout.sock_connect (q.v.) for download-connections. The default is null, which will cause the default from the aiohttp library to be used. name string true none A unique name for this remote. metadata_only boolean false none If True, only metadata about the content will be stored in Pulp. Clients will retrieve content from the remote URL. git_ref string false none A git ref. e.g.: branch, tag, or commit sha. ansible.Role { \"artifact\": \"http://example.com\", \"version\": \"string\", \"name\": \"string\", \"namespace\": \"string\" } A serializer for Role versions. Properties Name Type Required Restrictions Description artifact string(uri) true none Artifact file representing the physical content version string true none none name string true none none namespace string true none none ansible.RoleRemote { \"name\": \"string\", \"url\": \"string\", \"ca_cert\": \"string\", \"client_cert\": \"string\", \"client_key\": \"string\", \"tls_validation\": true, \"proxy_url\": \"string\", \"proxy_username\": \"string\", \"proxy_password\": \"string\", \"username\": \"string\", \"password\": \"string\", \"pulp_labels\": {}, \"download_concurrency\": 1, \"max_retries\": 0, \"policy\": \"immediate\", \"total_timeout\": 0, \"connect_timeout\": 0, \"sock_connect_timeout\": 0, \"sock_read_timeout\": 0, \"headers\": [ {} ], \"rate_limit\": 0 } A serializer for Ansible Remotes. Properties Name Type Required Restrictions Description name string true none A unique name for this remote. url string true none The URL of an external content source. ca_cert string\u00a6null false none A PEM encoded CA certificate used to validate the server certificate presented by the remote server. client_cert string\u00a6null false none A PEM encoded client certificate used for authentication. client_key string\u00a6null false write-only A PEM encoded private key used for authentication. tls_validation boolean false none If True, TLS peer validation must be performed. proxy_url string\u00a6null false none The proxy URL. Format: scheme://host:port proxy_username string\u00a6null false write-only The username to authenticte to the proxy. proxy_password string\u00a6null false write-only The password to authenticate to the proxy. Extra leading and trailing whitespace characters are not trimmed. username string\u00a6null false write-only The username to be used for authentication when syncing. password string\u00a6null false write-only The password to be used for authentication when syncing. Extra leading and trailing whitespace characters are not trimmed. pulp_labels object false none none download_concurrency integer\u00a6null false none Total number of simultaneous connections. If not set then the default value will be used. max_retries integer\u00a6null false none Maximum number of retry attempts after a download failure. If not set then the default value (3) will be used. policy PolicyDb6Enum false none The policy to use when downloading content. total_timeout number(double)\u00a6null false none aiohttp.ClientTimeout.total (q.v.) for download-connections. The default is null, which will cause the default from the aiohttp library to be used. connect_timeout number(double)\u00a6null false none aiohttp.ClientTimeout.connect (q.v.) for download-connections. The default is null, which will cause the default from the aiohttp library to be used. sock_connect_timeout number(double)\u00a6null false none aiohttp.ClientTimeout.sock_connect (q.v.) for download-connections. The default is null, which will cause the default from the aiohttp library to be used. sock_read_timeout number(double)\u00a6null false none aiohttp.ClientTimeout.sock_read (q.v.) for download-connections. The default is null, which will cause the default from the aiohttp library to be used. headers [object] false none Headers for aiohttp.Clientsession rate_limit integer\u00a6null false none Limits requests per second for each concurrent downloader ansible.RoleRemoteResponse { \"pulp_href\": \"http://example.com\", \"pulp_created\": \"2019-08-24T14:15:22Z\", \"name\": \"string\", \"url\": \"string\", \"ca_cert\": \"string\", \"client_cert\": \"string\", \"tls_validation\": true, \"proxy_url\": \"string\", \"pulp_labels\": {}, \"pulp_last_updated\": \"2019-08-24T14:15:22Z\", \"download_concurrency\": 1, \"max_retries\": 0, \"policy\": \"immediate\", \"total_timeout\": 0, \"connect_timeout\": 0, \"sock_connect_timeout\": 0, \"sock_read_timeout\": 0, \"headers\": [ {} ], \"rate_limit\": 0 } A serializer for Ansible Remotes. Properties Name Type Required Restrictions Description pulp_href string(uri) false read-only none pulp_created string(date-time) false read-only Timestamp of creation. name string true none A unique name for this remote. url string true none The URL of an external content source. ca_cert string\u00a6null false none A PEM encoded CA certificate used to validate the server certificate presented by the remote server. client_cert string\u00a6null false none A PEM encoded client certificate used for authentication. tls_validation boolean false none If True, TLS peer validation must be performed. proxy_url string\u00a6null false none The proxy URL. Format: scheme://host:port pulp_labels object false none none pulp_last_updated string(date-time) false read-only Timestamp of the most recent update of the remote. download_concurrency integer\u00a6null false none Total number of simultaneous connections. If not set then the default value will be used. max_retries integer\u00a6null false none Maximum number of retry attempts after a download failure. If not set then the default value (3) will be used. policy PolicyDb6Enum false none The policy to use when downloading content. total_timeout number(double)\u00a6null false none aiohttp.ClientTimeout.total (q.v.) for download-connections. The default is null, which will cause the default from the aiohttp library to be used. connect_timeout number(double)\u00a6null false none aiohttp.ClientTimeout.connect (q.v.) for download-connections. The default is null, which will cause the default from the aiohttp library to be used. sock_connect_timeout number(double)\u00a6null false none aiohttp.ClientTimeout.sock_connect (q.v.) for download-connections. The default is null, which will cause the default from the aiohttp library to be used. sock_read_timeout number(double)\u00a6null false none aiohttp.ClientTimeout.sock_read (q.v.) for download-connections. The default is null, which will cause the default from the aiohttp library to be used. headers [object] false none Headers for aiohttp.Clientsession rate_limit integer\u00a6null false none Limits requests per second for each concurrent downloader ansible.RoleResponse { \"pulp_href\": \"http://example.com\", \"artifact\": \"http://example.com\", \"pulp_created\": \"2019-08-24T14:15:22Z\", \"version\": \"string\", \"name\": \"string\", \"namespace\": \"string\" } A serializer for Role versions. Properties Name Type Required Restrictions Description pulp_href string(uri) false read-only none artifact string(uri) true none Artifact file representing the physical content pulp_created string(date-time) false read-only Timestamp of creation. version string true none none name string true none none namespace string true none none ansible.TagResponse { \"name\": \"string\" } A serializer for nesting in the CollectionVersion model. Properties Name Type Required Restrictions Description name string false read-only The name of the Tag. container.BlobResponse { \"pulp_href\": \"http://example.com\", \"pulp_created\": \"2019-08-24T14:15:22Z\", \"artifact\": \"http://example.com\", \"digest\": \"string\" } Serializer for Blobs. Properties Name Type Required Restrictions Description pulp_href string(uri) false read-only none pulp_created string(date-time) false read-only Timestamp of creation. artifact string(uri) true none Artifact file representing the physical content digest string true none sha256 of the Blob file container.ContainerDistribution { \"content_guard\": \"http://example.com\", \"pulp_labels\": {}, \"base_path\": \"string\", \"repository\": \"http://example.com\", \"name\": \"string\", \"repository_version\": \"http://example.com\", \"private\": true, \"description\": \"string\" } A serializer for ContainerDistribution. Properties Name Type Required Restrictions Description content_guard string(uri) false none An optional content-guard. If none is specified, a default one will be used. pulp_labels object false none none base_path string true none The base (relative) path component of the published url. Avoid paths that overlap with other distribution base paths (e.g. \"foo\" and \"foo/bar\") repository string(uri)\u00a6null false none The latest RepositoryVersion for this Repository will be served. name string true none A unique name. Ex, rawhide and stable . repository_version string(uri)\u00a6null false none RepositoryVersion to be served private boolean false none Restrict pull access to explicitly authorized users. Defaults to unrestricted pull access. description string\u00a6null false none An optional description. container.ContainerDistributionResponse { \"content_guard\": \"http://example.com\", \"pulp_labels\": {}, \"pulp_created\": \"2019-08-24T14:15:22Z\", \"base_path\": \"string\", \"repository\": \"http://example.com\", \"pulp_href\": \"http://example.com\", \"name\": \"string\", \"repository_version\": \"http://example.com\", \"registry_path\": \"string\", \"namespace\": \"http://example.com\", \"private\": true, \"description\": \"string\" } A serializer for ContainerDistribution. Properties Name Type Required Restrictions Description content_guard string(uri) false none An optional content-guard. If none is specified, a default one will be used. pulp_labels object false none none pulp_created string(date-time) false read-only Timestamp of creation. base_path string true none The base (relative) path component of the published url. Avoid paths that overlap with other distribution base paths (e.g. \"foo\" and \"foo/bar\") repository string(uri)\u00a6null false none The latest RepositoryVersion for this Repository will be served. pulp_href string(uri) false read-only none name string true none A unique name. Ex, rawhide and stable . repository_version string(uri)\u00a6null false none RepositoryVersion to be served registry_path string false read-only The Registry hostname/name/ to use with docker pull command defined by this distribution. namespace string(uri) false read-only Namespace this distribution belongs to. private boolean false none Restrict pull access to explicitly authorized users. Defaults to unrestricted pull access. description string\u00a6null false none An optional description. container.ContainerNamespace { \"name\": \"string\" } Serializer for ContainerNamespaces. Properties Name Type Required Restrictions Description name string true none none container.ContainerNamespaceResponse { \"pulp_href\": \"http://example.com\", \"pulp_created\": \"2019-08-24T14:15:22Z\", \"name\": \"string\" } Serializer for ContainerNamespaces. Properties Name Type Required Restrictions Description pulp_href string(uri) false read-only none pulp_created string(date-time) false read-only Timestamp of creation. name string true none none container.ContainerPushRepository { \"pulp_labels\": {}, \"manifest_signing_service\": \"http://example.com\", \"description\": \"string\", \"retain_repo_versions\": 1, \"name\": \"string\" } Serializer for Container Push Repositories. Properties Name Type Required Restrictions Description pulp_labels object false none none manifest_signing_service string(uri)\u00a6null false none A reference to an associated signing service. description string\u00a6null false none An optional description. retain_repo_versions integer\u00a6null false none Retain X versions of the repository. Default is null which retains all versions. This is provided as a tech preview in Pulp 3 and may change in the future. name string true none A unique name for this repository. container.ContainerPushRepositoryResponse { \"pulp_labels\": {}, \"pulp_created\": \"2019-08-24T14:15:22Z\", \"manifest_signing_service\": \"http://example.com\", \"description\": \"string\", \"pulp_href\": \"http://example.com\", \"versions_href\": \"http://example.com\", \"retain_repo_versions\": 1, \"latest_version_href\": \"http://example.com\", \"name\": \"string\" } Serializer for Container Push Repositories. Properties Name Type Required Restrictions Description pulp_labels object false none none pulp_created string(date-time) false read-only Timestamp of creation. manifest_signing_service string(uri)\u00a6null false none A reference to an associated signing service. description string\u00a6null false none An optional description. pulp_href string(uri) false read-only none versions_href string(uri) false read-only none retain_repo_versions integer\u00a6null false none Retain X versions of the repository. Default is null which retains all versions. This is provided as a tech preview in Pulp 3 and may change in the future. latest_version_href string(uri) false read-only none name string true none A unique name for this repository. container.ContainerRemote { \"name\": \"string\", \"url\": \"string\", \"ca_cert\": \"string\", \"client_cert\": \"string\", \"client_key\": \"string\", \"tls_validation\": true, \"proxy_url\": \"string\", \"proxy_username\": \"string\", \"proxy_password\": \"string\", \"username\": \"string\", \"password\": \"string\", \"pulp_labels\": {}, \"download_concurrency\": 1, \"max_retries\": 0, \"policy\": \"immediate\", \"total_timeout\": 0, \"connect_timeout\": 0, \"sock_connect_timeout\": 0, \"sock_read_timeout\": 0, \"headers\": [ {} ], \"rate_limit\": 0, \"upstream_name\": \"string\", \"include_tags\": [ \"string\" ], \"exclude_tags\": [ \"string\" ], \"sigstore\": \"http://example.com\" } A Serializer for ContainerRemote. Properties Name Type Required Restrictions Description name string true none A unique name for this remote. url string true none The URL of an external content source. ca_cert string\u00a6null false none A PEM encoded CA certificate used to validate the server certificate presented by the remote server. client_cert string\u00a6null false none A PEM encoded client certificate used for authentication. client_key string\u00a6null false write-only A PEM encoded private key used for authentication. tls_validation boolean false none If True, TLS peer validation must be performed. proxy_url string\u00a6null false none The proxy URL. Format: scheme://host:port proxy_username string\u00a6null false write-only The username to authenticte to the proxy. proxy_password string\u00a6null false write-only The password to authenticate to the proxy. Extra leading and trailing whitespace characters are not trimmed. username string\u00a6null false write-only The username to be used for authentication when syncing. password string\u00a6null false write-only The password to be used for authentication when syncing. Extra leading and trailing whitespace characters are not trimmed. pulp_labels object false none none download_concurrency integer\u00a6null false none Total number of simultaneous connections. If not set then the default value will be used. max_retries integer\u00a6null false none Maximum number of retry attempts after a download failure. If not set then the default value (3) will be used. policy Policy762Enum false none immediate - All manifests and blobs are downloaded and saved during a sync. on_demand - Only tags and manifests are downloaded. Blobs are not downloaded until they are requested for the first time by a client. streamed - Blobs are streamed to the client with every request and never saved. total_timeout number(double)\u00a6null false none aiohttp.ClientTimeout.total (q.v.) for download-connections. The default is null, which will cause the default from the aiohttp library to be used. connect_timeout number(double)\u00a6null false none aiohttp.ClientTimeout.connect (q.v.) for download-connections. The default is null, which will cause the default from the aiohttp library to be used. sock_connect_timeout number(double)\u00a6null false none aiohttp.ClientTimeout.sock_connect (q.v.) for download-connections. The default is null, which will cause the default from the aiohttp library to be used. sock_read_timeout number(double)\u00a6null false none aiohttp.ClientTimeout.sock_read (q.v.) for download-connections. The default is null, which will cause the default from the aiohttp library to be used. headers [object] false none Headers for aiohttp.Clientsession rate_limit integer\u00a6null false none Limits requests per second for each concurrent downloader upstream_name string true none Name of the upstream repository include_tags [string]\u00a6null false none A list of tags to include during sync. Wildcards *, ? are recognized. 'include_tags' is evaluated before 'exclude_tags'. exclude_tags [string]\u00a6null false none A list of tags to exclude during sync. Wildcards *, ? are recognized. 'exclude_tags' is evaluated after 'include_tags'. sigstore string(uri) false none A URL to a sigstore to download image signatures from container.ContainerRemoteResponse { \"pulp_href\": \"http://example.com\", \"pulp_created\": \"2019-08-24T14:15:22Z\", \"name\": \"string\", \"url\": \"string\", \"ca_cert\": \"string\", \"client_cert\": \"string\", \"tls_validation\": true, \"proxy_url\": \"string\", \"pulp_labels\": {}, \"pulp_last_updated\": \"2019-08-24T14:15:22Z\", \"download_concurrency\": 1, \"max_retries\": 0, \"policy\": \"immediate\", \"total_timeout\": 0, \"connect_timeout\": 0, \"sock_connect_timeout\": 0, \"sock_read_timeout\": 0, \"headers\": [ {} ], \"rate_limit\": 0, \"upstream_name\": \"string\", \"include_tags\": [ \"string\" ], \"exclude_tags\": [ \"string\" ], \"sigstore\": \"http://example.com\" } A Serializer for ContainerRemote. Properties Name Type Required Restrictions Description pulp_href string(uri) false read-only none pulp_created string(date-time) false read-only Timestamp of creation. name string true none A unique name for this remote. url string true none The URL of an external content source. ca_cert string\u00a6null false none A PEM encoded CA certificate used to validate the server certificate presented by the remote server. client_cert string\u00a6null false none A PEM encoded client certificate used for authentication. tls_validation boolean false none If True, TLS peer validation must be performed. proxy_url string\u00a6null false none The proxy URL. Format: scheme://host:port pulp_labels object false none none pulp_last_updated string(date-time) false read-only Timestamp of the most recent update of the remote. download_concurrency integer\u00a6null false none Total number of simultaneous connections. If not set then the default value will be used. max_retries integer\u00a6null false none Maximum number of retry attempts after a download failure. If not set then the default value (3) will be used. policy Policy762Enum false none immediate - All manifests and blobs are downloaded and saved during a sync. on_demand - Only tags and manifests are downloaded. Blobs are not downloaded until they are requested for the first time by a client. streamed - Blobs are streamed to the client with every request and never saved. total_timeout number(double)\u00a6null false none aiohttp.ClientTimeout.total (q.v.) for download-connections. The default is null, which will cause the default from the aiohttp library to be used. connect_timeout number(double)\u00a6null false none aiohttp.ClientTimeout.connect (q.v.) for download-connections. The default is null, which will cause the default from the aiohttp library to be used. sock_connect_timeout number(double)\u00a6null false none aiohttp.ClientTimeout.sock_connect (q.v.) for download-connections. The default is null, which will cause the default from the aiohttp library to be used. sock_read_timeout number(double)\u00a6null false none aiohttp.ClientTimeout.sock_read (q.v.) for download-connections. The default is null, which will cause the default from the aiohttp library to be used. headers [object] false none Headers for aiohttp.Clientsession rate_limit integer\u00a6null false none Limits requests per second for each concurrent downloader upstream_name string true none Name of the upstream repository include_tags [string]\u00a6null false none A list of tags to include during sync. Wildcards *, ? are recognized. 'include_tags' is evaluated before 'exclude_tags'. exclude_tags [string]\u00a6null false none A list of tags to exclude during sync. Wildcards *, ? are recognized. 'exclude_tags' is evaluated after 'include_tags'. sigstore string(uri) false none A URL to a sigstore to download image signatures from container.ContainerRepository { \"pulp_labels\": {}, \"name\": \"string\", \"description\": \"string\", \"retain_repo_versions\": 1, \"remote\": \"http://example.com\", \"manifest_signing_service\": \"http://example.com\" } Serializer for Container Repositories. Properties Name Type Required Restrictions Description pulp_labels object false none none name string true none A unique name for this repository. description string\u00a6null false none An optional description. retain_repo_versions integer\u00a6null false none Retain X versions of the repository. Default is null which retains all versions. This is provided as a tech preview in Pulp 3 and may change in the future. remote string(uri)\u00a6null false none An optional remote to use by default when syncing. manifest_signing_service string(uri)\u00a6null false none A reference to an associated signing service. container.ContainerRepositoryResponse { \"pulp_href\": \"http://example.com\", \"pulp_created\": \"2019-08-24T14:15:22Z\", \"versions_href\": \"http://example.com\", \"pulp_labels\": {}, \"latest_version_href\": \"http://example.com\", \"name\": \"string\", \"description\": \"string\", \"retain_repo_versions\": 1, \"remote\": \"http://example.com\", \"manifest_signing_service\": \"http://example.com\" } Serializer for Container Repositories. Properties Name Type Required Restrictions Description pulp_href string(uri) false read-only none pulp_created string(date-time) false read-only Timestamp of creation. versions_href string(uri) false read-only none pulp_labels object false none none latest_version_href string(uri) false read-only none name string true none A unique name for this repository. description string\u00a6null false none An optional description. retain_repo_versions integer\u00a6null false none Retain X versions of the repository. Default is null which retains all versions. This is provided as a tech preview in Pulp 3 and may change in the future. remote string(uri)\u00a6null false none An optional remote to use by default when syncing. manifest_signing_service string(uri)\u00a6null false none A reference to an associated signing service. container.ManifestResponse { \"pulp_href\": \"http://example.com\", \"pulp_created\": \"2019-08-24T14:15:22Z\", \"artifact\": \"http://example.com\", \"digest\": \"string\", \"schema_version\": 0, \"media_type\": \"string\", \"listed_manifests\": [ \"http://example.com\" ], \"config_blob\": \"http://example.com\", \"blobs\": [ \"http://example.com\" ] } Serializer for Manifests. Properties Name Type Required Restrictions Description pulp_href string(uri) false read-only none pulp_created string(date-time) false read-only Timestamp of creation. artifact string(uri) true none Artifact file representing the physical content digest string true none sha256 of the Manifest file schema_version integer true none Manifest schema version media_type string true none Manifest media type of the file listed_manifests [string] true none Manifests that are referenced by this Manifest List config_blob string(uri) false none Blob that contains configuration for this Manifest blobs [string] true none Blobs that are referenced by this Manifest container.ManifestSignatureResponse { \"pulp_href\": \"http://example.com\", \"pulp_created\": \"2019-08-24T14:15:22Z\", \"name\": \"string\", \"digest\": \"string\", \"type\": \"string\", \"key_id\": \"string\", \"timestamp\": 0, \"creator\": \"string\", \"signed_manifest\": \"http://example.com\" } Serializer for image manifest signatures. Properties Name Type Required Restrictions Description pulp_href string(uri) false read-only none pulp_created string(date-time) false read-only Timestamp of creation. name string true none Signature name in the format of digest_algo:manifest_digest@random_32_chars digest string true none sha256 digest of the signature blob type string true none Container signature type, e.g. 'atomic' key_id string true none Signing key ID timestamp integer true none Timestamp of a signature creator string true none Signature creator signed_manifest string(uri) true none Manifest that is signed container.TagResponse { \"pulp_href\": \"http://example.com\", \"pulp_created\": \"2019-08-24T14:15:22Z\", \"name\": \"string\", \"tagged_manifest\": \"http://example.com\" } Serializer for Tags. Properties Name Type Required Restrictions Description pulp_href string(uri) false read-only none pulp_created string(date-time) false read-only Timestamp of creation. name string true none Tag name tagged_manifest string(uri) true none Manifest that is tagged galaxy.ContainerRegistryRemoteResponse { \"id\": \"497f6eca-6276-4993-bfeb-53cbbbba6f08\", \"pulp_href\": \"http://example.com\", \"name\": \"string\", \"url\": \"string\", \"policy\": \"immediate\", \"created_at\": \"2019-08-24T14:15:22Z\", \"updated_at\": \"2019-08-24T14:15:22Z\", \"tls_validation\": true, \"client_cert\": \"string\", \"ca_cert\": \"string\", \"last_sync_task\": \"string\", \"download_concurrency\": 1, \"proxy_url\": \"string\", \"write_only_fields\": [ null ], \"rate_limit\": 0, \"is_indexable\": true } Every remote defined by a plugin should have a Remote serializer that inherits from this class. Please import from pulpcore.plugin.serializers rather than from this module directly. Properties Name Type Required Restrictions Description id string(uuid) false none none pulp_href string(uri) false read-only none name string true none A unique name for this remote. url string true none The URL of an external content source. policy PolicyDb6Enum false none The policy to use when downloading content. created_at string(date-time) false none none updated_at string(date-time) false none none tls_validation boolean false none If True, TLS peer validation must be performed. client_cert string\u00a6null false none A PEM encoded client certificate used for authentication. ca_cert string\u00a6null false none A PEM encoded CA certificate used to validate the server certificate presented by the remote server. last_sync_task string false read-only none download_concurrency integer\u00a6null false none Total number of simultaneous connections. If not set then the default value will be used. proxy_url string\u00a6null false none The proxy URL. Format: scheme://host:port write_only_fields [any] false read-only none rate_limit integer\u00a6null false none Limits requests per second for each concurrent downloader is_indexable boolean false read-only none galaxy.Login { \"username\": \"string\", \"password\": \"string\" } Properties Name Type Required Restrictions Description username string true none none password string true none none galaxy.LoginResponse { \"username\": \"string\", \"password\": \"string\" } Properties Name Type Required Restrictions Description username string true none none password string true none none","title":"Automation Hub API v3"},{"location":"automation-hub/#authentication","text":"HTTP Authentication, scheme: basic","title":"Authentication"},{"location":"automation-hub/#upload_collection","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Content-Type\": []string{\"multipart/form-data\"}, \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"POST\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/ansible/collections/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const inputBody = '{ \"file\": \"string\", \"sha256\": \"string\", \"expected_namespace\": \"string\", \"expected_name\": \"string\", \"expected_version\": \"string\" }'; const headers = { 'Content-Type':'multipart/form-data', 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/ansible/collections/', { method: 'POST', body: inputBody, headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Content-Type': 'multipart/form-data', 'Accept': 'application/json' } r = requests.post('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/ansible/collections/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Content-Type' => 'multipart/form-data', 'Accept' => 'application/json' } result = RestClient.post 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/ansible/collections/', params: { }, headers: headers p JSON.parse(result) POST /ansible/collections/ Upload a collection Create an artifact and trigger an asynchronous task to create Collection content from it. Body parameter file: string sha256: string expected_namespace: string expected_name: string expected_version: string","title":"upload_collection"},{"location":"automation-hub/#ansible_collections_list","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/ansible/collections/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/ansible/collections/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/ansible/collections/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/ansible/collections/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/pulp/api/v3/ansible/collections/ List collections Viewset for Ansible Collections.","title":"ansible_collections_list"},{"location":"automation-hub/#enumerated-values","text":"Parameter Value ordering -group_roles ordering -name ordering -namespace ordering -pk ordering -pulp_created ordering -pulp_id ordering -pulp_labels ordering -pulp_last_updated ordering -synclist ordering -user_roles ordering -versions ordering group_roles ordering name ordering namespace ordering pk ordering pulp_created ordering pulp_id ordering pulp_labels ordering pulp_last_updated ordering synclist ordering user_roles ordering versions Example responses 200 Response { \"count\": 123, \"next\": \"http://api.example.org/accounts/?offset=400&limit=100\", \"previous\": \"http://api.example.org/accounts/?offset=200&limit=100\", \"results\": [ { \"name\": \"string\", \"namespace\": \"string\" } ] }","title":"Enumerated Values"},{"location":"automation-hub/#ansible_collections_read","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/ansible/collections/{pulp_id}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/ansible/collections/{pulp_id}/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/ansible/collections/{pulp_id}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/ansible/collections/{pulp_id}/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/pulp/api/v3/ansible/collections/{pulp_id}/ Inspect a collection Viewset for Ansible Collections.","title":"ansible_collections_read"},{"location":"automation-hub/#api_automation_hub_read","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/', { method: 'GET' }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/') print(r.json()) require 'rest-client' require 'json' result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/', params: { } p JSON.parse(result) GET /api/automation-hub/","title":"api_automation_hub_read"},{"location":"automation-hub/#api_automation_hub__ui_read","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/', { method: 'GET' }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/') print(r.json()) require 'rest-client' require 'json' result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/', params: { } p JSON.parse(result) GET /api/automation-hub/_ui/","title":"api_automation_hub__ui_read"},{"location":"automation-hub/#api_automation_hub__ui_v1_auth_login_get","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/auth/login/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/auth/login/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/auth/login/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/auth/login/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/_ui/v1/auth/login/ Example responses 200 Response { \"username\": \"string\", \"password\": \"string\" }","title":"api_automation_hub__ui_v1_auth_login_get"},{"location":"automation-hub/#api_automation_hub__ui_v1_auth_login_post","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Content-Type\": []string{\"application/json\"}, \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"POST\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/auth/login/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const inputBody = '{ \"username\": \"string\", \"password\": \"string\" }'; const headers = { 'Content-Type':'application/json', 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/auth/login/', { method: 'POST', body: inputBody, headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Content-Type': 'application/json', 'Accept': 'application/json' } r = requests.post('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/auth/login/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Content-Type' => 'application/json', 'Accept' => 'application/json' } result = RestClient.post 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/auth/login/', params: { }, headers: headers p JSON.parse(result) POST /api/automation-hub/_ui/v1/auth/login/ Body parameter { \"username\": \"string\", \"password\": \"string\" } username: string password: string","title":"api_automation_hub__ui_v1_auth_login_post"},{"location":"automation-hub/#api_automation_hub__ui_v1_auth_logout_post","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"POST\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/auth/logout/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/auth/logout/', { method: 'POST' }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests r = requests.post('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/auth/logout/') print(r.json()) require 'rest-client' require 'json' result = RestClient.post 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/auth/logout/', params: { } p JSON.parse(result) POST /api/automation-hub/_ui/v1/auth/logout/","title":"api_automation_hub__ui_v1_auth_logout_post"},{"location":"automation-hub/#api_automation_hub__ui_v1_collection_versions_list","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/collection-versions/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/collection-versions/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/collection-versions/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/collection-versions/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/_ui/v1/collection-versions/ List collection versions","title":"api_automation_hub__ui_v1_collection_versions_list"},{"location":"automation-hub/#enumerated-values_1","text":"Parameter Value sort -collection sort -namespace sort -pulp_created sort -version sort collection sort namespace sort pulp_created sort version Example responses 200 Response { \"meta\": { \"count\": 123 }, \"links\": { \"first\": \"string\", \"previous\": \"string\", \"next\": \"string\", \"last\": \"string\" }, \"data\": [ { \"username\": \"string\", \"password\": \"string\" } ] }","title":"Enumerated Values"},{"location":"automation-hub/#api_automation_hub__ui_v1_collection_versions_read","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/collection-versions/{version}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/collection-versions/{version}/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/collection-versions/{version}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/collection-versions/{version}/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/_ui/v1/collection-versions/{version}/ Retrieve collection version","title":"api_automation_hub__ui_v1_collection_versions_read"},{"location":"automation-hub/#_api_automation-hub__ui_v1_collection_signing_api_automation_hub__ui_v1_collection_signing_sign","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"POST\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/collection_signing/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/collection_signing/', { method: 'POST' }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests r = requests.post('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/collection_signing/') print(r.json()) require 'rest-client' require 'json' result = RestClient.post 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/collection_signing/', params: { } p JSON.parse(result) POST /api/automation-hub/_ui/v1/collection_signing/","title":"_api_automation-hub__ui_v1_collection_signing_api_automation_hub__ui_v1_collection_signing_sign"},{"location":"automation-hub/#api_automation-hub__ui_v1_collection_signingpath_api_automation_hub__ui_v1_collection_signing_sign","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"POST\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/collection_signing/{path}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/collection_signing/{path}/', { method: 'POST' }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests r = requests.post('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/collection_signing/{path}/') print(r.json()) require 'rest-client' require 'json' result = RestClient.post 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/collection_signing/{path}/', params: { } p JSON.parse(result) POST /api/automation-hub/_ui/v1/collection_signing/{path}/","title":"api_automation-hub__ui_v1_collection_signing{path}_api_automation_hub__ui_v1_collection_signing_sign"},{"location":"automation-hub/#api_automation-hub__ui_v1_collection_signingpath_namespace_api_automation_hub__ui_v1_collection_signing_sign","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"POST\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/collection_signing/{path}/{namespace}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/collection_signing/{path}/{namespace}/', { method: 'POST' }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests r = requests.post('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/collection_signing/{path}/{namespace}/') print(r.json()) require 'rest-client' require 'json' result = RestClient.post 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/collection_signing/{path}/{namespace}/', params: { } p JSON.parse(result) POST /api/automation-hub/_ui/v1/collection_signing/{path}/{namespace}/","title":"api_automation-hub__ui_v1_collection_signing{path}_{namespace}_api_automation_hub__ui_v1_collection_signing_sign"},{"location":"automation-hub/#api_automation-hub__ui_v1_collection_signingpathnamespacecollection_api_automation_hub__ui_v1_collection_signing_sign","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"POST\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/collection_signing/{path}/{namespace}/{collection}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/collection_signing/{path}/{namespace}/{collection}/', { method: 'POST' }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests r = requests.post('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/collection_signing/{path}/{namespace}/{collection}/') print(r.json()) require 'rest-client' require 'json' result = RestClient.post 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/collection_signing/{path}/{namespace}/{collection}/', params: { } p JSON.parse(result) POST /api/automation-hub/_ui/v1/collection_signing/{path}/{namespace}/{collection}/","title":"api_automation-hub__ui_v1_collection_signing{path}{namespace}{collection}_api_automation_hub__ui_v1_collection_signing_sign"},{"location":"automation-hub/#api_automation-hub__ui_v1_collection_signingpathnamespacecollection_version_api_automation_hub__ui_v1_collection_signing_sign","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"POST\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/collection_signing/{path}/{namespace}/{collection}/{version}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/collection_signing/{path}/{namespace}/{collection}/{version}/', { method: 'POST' }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests r = requests.post('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/collection_signing/{path}/{namespace}/{collection}/{version}/') print(r.json()) require 'rest-client' require 'json' result = RestClient.post 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/collection_signing/{path}/{namespace}/{collection}/{version}/', params: { } p JSON.parse(result) POST /api/automation-hub/_ui/v1/collection_signing/{path}/{namespace}/{collection}/{version}/","title":"api_automation-hub__ui_v1_collection_signing{path}{namespace}{collection}_{version}_api_automation_hub__ui_v1_collection_signing_sign"},{"location":"automation-hub/#api_automation_hub__ui_v1_controllers_get","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/controllers/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/controllers/', { method: 'GET' }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/controllers/') print(r.json()) require 'rest-client' require 'json' result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/controllers/', params: { } p JSON.parse(result) GET /api/automation-hub/_ui/v1/controllers/","title":"api_automation_hub__ui_v1_controllers_get"},{"location":"automation-hub/#api_automation_hub__ui_v1_distributions_list","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/distributions/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/distributions/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/distributions/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/distributions/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/_ui/v1/distributions/ List ansible distributions","title":"api_automation_hub__ui_v1_distributions_list"},{"location":"automation-hub/#api_automation_hub__ui_v1_distributions_read","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/distributions/{pulp_id}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/distributions/{pulp_id}/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/distributions/{pulp_id}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/distributions/{pulp_id}/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/_ui/v1/distributions/{pulp_id}/ Inspect an ansible distribution","title":"api_automation_hub__ui_v1_distributions_read"},{"location":"automation-hub/#api_automation_hub__ui_v1_feature_flags_get","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/feature-flags/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/feature-flags/', { method: 'GET' }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/feature-flags/') print(r.json()) require 'rest-client' require 'json' result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/feature-flags/', params: { } p JSON.parse(result) GET /api/automation-hub/_ui/v1/feature-flags/","title":"api_automation_hub__ui_v1_feature_flags_get"},{"location":"automation-hub/#_api_automation-hub__ui_v1_groups_groups_list","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/groups/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/groups/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/groups/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/groups/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/_ui/v1/groups/ List groups ViewSet for Group. NOTE: This API endpoint is in \"tech preview\" and subject to change","title":"_api_automation-hub__ui_v1_groups_groups_list"},{"location":"automation-hub/#enumerated-values_2","text":"Parameter Value sort -name sort name Example responses 200 Response { \"meta\": { \"count\": 123 }, \"links\": { \"first\": \"string\", \"previous\": \"string\", \"next\": \"string\", \"last\": \"string\" }, \"data\": [ { \"name\": \"string\", \"pulp_href\": \"http://example.com\", \"id\": 0 } ] }","title":"Enumerated Values"},{"location":"automation-hub/#_api_automation-hub__ui_v1_groups_groups_create","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Content-Type\": []string{\"application/json\"}, \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"POST\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/groups/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const inputBody = '{ \"name\": \"string\" }'; const headers = { 'Content-Type':'application/json', 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/groups/', { method: 'POST', body: inputBody, headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Content-Type': 'application/json', 'Accept': 'application/json' } r = requests.post('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/groups/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Content-Type' => 'application/json', 'Accept' => 'application/json' } result = RestClient.post 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/groups/', params: { }, headers: headers p JSON.parse(result) POST /api/automation-hub/_ui/v1/groups/ Create a group ViewSet for Group. NOTE: This API endpoint is in \"tech preview\" and subject to change Body parameter { \"name\": \"string\" } name: string","title":"_api_automation-hub__ui_v1_groups_groups_create"},{"location":"automation-hub/#api_automation-hub__ui_v1_groupsid_groups_read","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/groups/{id}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/groups/{id}/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/groups/{id}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/groups/{id}/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/_ui/v1/groups/{id}/ Inspect a group ViewSet for Group. NOTE: This API endpoint is in \"tech preview\" and subject to change","title":"api_automation-hub__ui_v1_groups{id}_groups_read"},{"location":"automation-hub/#api_automation-hub__ui_v1_groupsid_groups_delete","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"DELETE\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/groups/{id}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/groups/{id}/', { method: 'DELETE' }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests r = requests.delete('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/groups/{id}/') print(r.json()) require 'rest-client' require 'json' result = RestClient.delete 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/groups/{id}/', params: { } p JSON.parse(result) DELETE /api/automation-hub/_ui/v1/groups/{id}/ Delete a group ViewSet for Group. NOTE: This API endpoint is in \"tech preview\" and subject to change","title":"api_automation-hub__ui_v1_groups{id}_groups_delete"},{"location":"automation-hub/#_api_automation-hub_pulp_api_v3_groups_groups_list","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/groups/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/groups/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/groups/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/groups/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/pulp/api/v3/groups/ List groups ViewSet for Group. NOTE: This API endpoint is in \"tech preview\" and subject to change","title":"_api_automation-hub_pulp_api_v3_groups_groups_list"},{"location":"automation-hub/#enumerated-values_3","text":"Parameter Value ordering -id ordering -name ordering -object_roles ordering -permissions ordering -pk ordering -user ordering id ordering name ordering object_roles ordering permissions ordering pk ordering user Example responses 200 Response { \"meta\": { \"count\": 123 }, \"links\": { \"first\": \"string\", \"previous\": \"string\", \"next\": \"string\", \"last\": \"string\" }, \"data\": [ { \"name\": \"string\", \"pulp_href\": \"http://example.com\", \"id\": 0 } ] }","title":"Enumerated Values"},{"location":"automation-hub/#_api_automation-hub_pulp_api_v3_groups_groups_create","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Content-Type\": []string{\"application/json\"}, \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"POST\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/groups/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const inputBody = '{ \"name\": \"string\" }'; const headers = { 'Content-Type':'application/json', 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/groups/', { method: 'POST', body: inputBody, headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Content-Type': 'application/json', 'Accept': 'application/json' } r = requests.post('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/groups/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Content-Type' => 'application/json', 'Accept' => 'application/json' } result = RestClient.post 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/groups/', params: { }, headers: headers p JSON.parse(result) POST /api/automation-hub/pulp/api/v3/groups/ Create a group ViewSet for Group. NOTE: This API endpoint is in \"tech preview\" and subject to change Body parameter { \"name\": \"string\" } name: string","title":"_api_automation-hub_pulp_api_v3_groups_groups_create"},{"location":"automation-hub/#api_automation-hub_pulp_api_v3_groupsid_groups_read","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/groups/{id}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/groups/{id}/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/groups/{id}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/groups/{id}/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/pulp/api/v3/groups/{id}/ Inspect a group ViewSet for Group. NOTE: This API endpoint is in \"tech preview\" and subject to change","title":"api_automation-hub_pulp_api_v3_groups{id}_groups_read"},{"location":"automation-hub/#groups_update","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Content-Type\": []string{\"application/json\"}, \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"PUT\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/groups/{id}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const inputBody = '{ \"name\": \"string\" }'; const headers = { 'Content-Type':'application/json', 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/groups/{id}/', { method: 'PUT', body: inputBody, headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Content-Type': 'application/json', 'Accept': 'application/json' } r = requests.put('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/groups/{id}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Content-Type' => 'application/json', 'Accept' => 'application/json' } result = RestClient.put 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/groups/{id}/', params: { }, headers: headers p JSON.parse(result) PUT /api/automation-hub/pulp/api/v3/groups/{id}/ Update a group ViewSet for Group. NOTE: This API endpoint is in \"tech preview\" and subject to change Body parameter { \"name\": \"string\" } name: string","title":"groups_update"},{"location":"automation-hub/#groups_partial_update","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Content-Type\": []string{\"application/json\"}, \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"PATCH\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/groups/{id}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const inputBody = '{ \"name\": \"string\" }'; const headers = { 'Content-Type':'application/json', 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/groups/{id}/', { method: 'PATCH', body: inputBody, headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Content-Type': 'application/json', 'Accept': 'application/json' } r = requests.patch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/groups/{id}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Content-Type' => 'application/json', 'Accept' => 'application/json' } result = RestClient.patch 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/groups/{id}/', params: { }, headers: headers p JSON.parse(result) PATCH /api/automation-hub/pulp/api/v3/groups/{id}/ Update a group ViewSet for Group. NOTE: This API endpoint is in \"tech preview\" and subject to change Body parameter { \"name\": \"string\" } name: string","title":"groups_partial_update"},{"location":"automation-hub/#api_automation-hub_pulp_api_v3_groupsid_groups_delete","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"DELETE\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/groups/{id}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/groups/{id}/', { method: 'DELETE' }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests r = requests.delete('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/groups/{id}/') print(r.json()) require 'rest-client' require 'json' result = RestClient.delete 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/groups/{id}/', params: { } p JSON.parse(result) DELETE /api/automation-hub/pulp/api/v3/groups/{id}/ Delete a group ViewSet for Group. NOTE: This API endpoint is in \"tech preview\" and subject to change","title":"api_automation-hub_pulp_api_v3_groups{id}_groups_delete"},{"location":"automation-hub/#groups_add_role","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Content-Type\": []string{\"application/json\"}, \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"POST\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/groups/{id}/add_role/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const inputBody = '{ \"users\": [], \"groups\": [], \"role\": \"string\" }'; const headers = { 'Content-Type':'application/json', 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/groups/{id}/add_role/', { method: 'POST', body: inputBody, headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Content-Type': 'application/json', 'Accept': 'application/json' } r = requests.post('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/groups/{id}/add_role/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Content-Type' => 'application/json', 'Accept' => 'application/json' } result = RestClient.post 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/groups/{id}/add_role/', params: { }, headers: headers p JSON.parse(result) POST /api/automation-hub/pulp/api/v3/groups/{id}/add_role/ Add a role for this object to users/groups. Body parameter { \"users\": [], \"groups\": [], \"role\": \"string\" } users: [] groups: [] role: string","title":"groups_add_role"},{"location":"automation-hub/#groups_list_roles","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/groups/{id}/list_roles/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/groups/{id}/list_roles/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/groups/{id}/list_roles/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/groups/{id}/list_roles/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/pulp/api/v3/groups/{id}/list_roles/ List roles assigned to this object.","title":"groups_list_roles"},{"location":"automation-hub/#groups_my_permissions","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/groups/{id}/my_permissions/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/groups/{id}/my_permissions/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/groups/{id}/my_permissions/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/groups/{id}/my_permissions/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/pulp/api/v3/groups/{id}/my_permissions/ List permissions available to the current user on this object.","title":"groups_my_permissions"},{"location":"automation-hub/#groups_remove_role","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Content-Type\": []string{\"application/json\"}, \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"POST\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/groups/{id}/remove_role/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const inputBody = '{ \"users\": [], \"groups\": [], \"role\": \"string\" }'; const headers = { 'Content-Type':'application/json', 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/groups/{id}/remove_role/', { method: 'POST', body: inputBody, headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Content-Type': 'application/json', 'Accept': 'application/json' } r = requests.post('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/groups/{id}/remove_role/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Content-Type' => 'application/json', 'Accept' => 'application/json' } result = RestClient.post 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/groups/{id}/remove_role/', params: { }, headers: headers p JSON.parse(result) POST /api/automation-hub/pulp/api/v3/groups/{id}/remove_role/ Remove a role for this object from users/groups. Body parameter { \"users\": [], \"groups\": [], \"role\": \"string\" } users: [] groups: [] role: string","title":"groups_remove_role"},{"location":"automation-hub/#api_automation-hub__ui_v1_groupsgroup_pk_users_groups_users_list","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/groups/{group_pk}/users/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/groups/{group_pk}/users/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/groups/{group_pk}/users/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/groups/{group_pk}/users/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/_ui/v1/groups/{group_pk}/users/ List users List group users.","title":"api_automation-hub__ui_v1_groups{group_pk}_users_groups_users_list"},{"location":"automation-hub/#api_automation-hub__ui_v1_groupsgroup_pk_users_groups_users_create","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Content-Type\": []string{\"application/json\"}, \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"POST\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/groups/{group_pk}/users/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const inputBody = '{ \"username\": \"string\" }'; const headers = { 'Content-Type':'application/json', 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/groups/{group_pk}/users/', { method: 'POST', body: inputBody, headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Content-Type': 'application/json', 'Accept': 'application/json' } r = requests.post('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/groups/{group_pk}/users/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Content-Type' => 'application/json', 'Accept' => 'application/json' } result = RestClient.post 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/groups/{group_pk}/users/', params: { }, headers: headers p JSON.parse(result) POST /api/automation-hub/_ui/v1/groups/{group_pk}/users/ Create an user Add a user to a group. Body parameter { \"username\": \"string\" } username: string","title":"api_automation-hub__ui_v1_groups{group_pk}_users_groups_users_create"},{"location":"automation-hub/#api_automation-hub__ui_v1_groupsgroup_pkusersid_groups_users_delete","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"DELETE\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/groups/{group_pk}/users/{id}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/groups/{group_pk}/users/{id}/', { method: 'DELETE' }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests r = requests.delete('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/groups/{group_pk}/users/{id}/') print(r.json()) require 'rest-client' require 'json' result = RestClient.delete 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/groups/{group_pk}/users/{id}/', params: { } p JSON.parse(result) DELETE /api/automation-hub/_ui/v1/groups/{group_pk}/users/{id}/ Delete an user Remove a user from a group.","title":"api_automation-hub__ui_v1_groups{group_pk}users{id}_groups_users_delete"},{"location":"automation-hub/#api_automation-hub_pulp_api_v3_groupsgroup_pk_users_groups_users_list","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/groups/{group_pk}/users/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/groups/{group_pk}/users/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/groups/{group_pk}/users/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/groups/{group_pk}/users/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/pulp/api/v3/groups/{group_pk}/users/ List users List group users.","title":"api_automation-hub_pulp_api_v3_groups{group_pk}_users_groups_users_list"},{"location":"automation-hub/#api_automation-hub_pulp_api_v3_groupsgroup_pk_users_groups_users_create","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Content-Type\": []string{\"application/json\"}, \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"POST\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/groups/{group_pk}/users/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const inputBody = '{ \"username\": \"string\" }'; const headers = { 'Content-Type':'application/json', 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/groups/{group_pk}/users/', { method: 'POST', body: inputBody, headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Content-Type': 'application/json', 'Accept': 'application/json' } r = requests.post('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/groups/{group_pk}/users/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Content-Type' => 'application/json', 'Accept' => 'application/json' } result = RestClient.post 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/groups/{group_pk}/users/', params: { }, headers: headers p JSON.parse(result) POST /api/automation-hub/pulp/api/v3/groups/{group_pk}/users/ Create an user Add a user to a group. Body parameter { \"username\": \"string\" } username: string","title":"api_automation-hub_pulp_api_v3_groups{group_pk}_users_groups_users_create"},{"location":"automation-hub/#api_automation-hub_pulp_api_v3_groupsgroup_pkusersid_groups_users_delete","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"DELETE\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/groups/{group_pk}/users/{id}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/groups/{group_pk}/users/{id}/', { method: 'DELETE' }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests r = requests.delete('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/groups/{group_pk}/users/{id}/') print(r.json()) require 'rest-client' require 'json' result = RestClient.delete 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/groups/{group_pk}/users/{id}/', params: { } p JSON.parse(result) DELETE /api/automation-hub/pulp/api/v3/groups/{group_pk}/users/{id}/ Delete an user Remove a user from a group.","title":"api_automation-hub_pulp_api_v3_groups{group_pk}users{id}_groups_users_delete"},{"location":"automation-hub/#api_automation_hub__ui_v1_imports_collections_list","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/imports/collections/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/imports/collections/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/imports/collections/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/imports/collections/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/_ui/v1/imports/collections/ List collection imports ViewSet for CollectionImports.","title":"api_automation_hub__ui_v1_imports_collections_list"},{"location":"automation-hub/#enumerated-values_4","text":"Parameter Value sort -created sort created Example responses 200 Response { \"meta\": { \"count\": 123 }, \"links\": { \"first\": \"string\", \"previous\": \"string\", \"next\": \"string\", \"last\": \"string\" }, \"data\": [ { \"id\": \"497f6eca-6276-4993-bfeb-53cbbbba6f08\", \"state\": \"string\", \"namespace\": \"string\", \"name\": \"string\", \"version\": \"string\", \"created_at\": \"2019-08-24T14:15:22Z\", \"updated_at\": \"2019-08-24T14:15:22Z\", \"started_at\": \"2019-08-24T14:15:22Z\", \"finished_at\": \"2019-08-24T14:15:22Z\" } ] }","title":"Enumerated Values"},{"location":"automation-hub/#api_automation_hub__ui_v1_imports_collections_read","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/imports/collections/{task_id}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/imports/collections/{task_id}/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/imports/collections/{task_id}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/imports/collections/{task_id}/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/_ui/v1/imports/collections/{task_id}/ Retrieve collection import Returns a CollectionImport object.","title":"api_automation_hub__ui_v1_imports_collections_read"},{"location":"automation-hub/#api_automation_hub__ui_v1_landing_page_read","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/landing-page/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/landing-page/', { method: 'GET' }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/landing-page/') print(r.json()) require 'rest-client' require 'json' result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/landing-page/', params: { } p JSON.parse(result) GET /api/automation-hub/_ui/v1/landing-page/","title":"api_automation_hub__ui_v1_landing_page_read"},{"location":"automation-hub/#api_automation_hub__ui_v1_me_read","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/me/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/me/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/me/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/me/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/_ui/v1/me/ Example responses 200 Response { \"id\": 0, \"username\": \"string\", \"first_name\": \"string\", \"last_name\": \"string\", \"email\": \"user@example.com\", \"groups\": [ 0 ], \"date_joined\": \"2019-08-24T14:15:22Z\", \"is_superuser\": true, \"auth_provider\": \"string\", \"model_permissions\": {}, \"is_anonymous\": \"string\" }","title":"api_automation_hub__ui_v1_me_read"},{"location":"automation-hub/#api_automation_hub__ui_v1_me_update","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Content-Type\": []string{\"application/json\"}, \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"PUT\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/me/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const inputBody = '{ \"username\": \"string\", \"first_name\": \"string\", \"last_name\": \"string\", \"email\": \"user@example.com\", \"password\": \"string\", \"is_superuser\": true }'; const headers = { 'Content-Type':'application/json', 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/me/', { method: 'PUT', body: inputBody, headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Content-Type': 'application/json', 'Accept': 'application/json' } r = requests.put('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/me/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Content-Type' => 'application/json', 'Accept' => 'application/json' } result = RestClient.put 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/me/', params: { }, headers: headers p JSON.parse(result) PUT /api/automation-hub/_ui/v1/me/ Body parameter { \"username\": \"string\", \"first_name\": \"string\", \"last_name\": \"string\", \"email\": \"user@example.com\", \"password\": \"string\", \"is_superuser\": true } username: string first_name: string last_name: string email: user@example.com password: string is_superuser: true","title":"api_automation_hub__ui_v1_me_update"},{"location":"automation-hub/#api_automation_hub__ui_v1_my_distributions_list","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/my-distributions/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/my-distributions/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/my-distributions/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/my-distributions/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/_ui/v1/my-distributions/ List ansible distributions","title":"api_automation_hub__ui_v1_my_distributions_list"},{"location":"automation-hub/#api_automation_hub__ui_v1_my_distributions_read","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/my-distributions/{pulp_id}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/my-distributions/{pulp_id}/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/my-distributions/{pulp_id}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/my-distributions/{pulp_id}/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/_ui/v1/my-distributions/{pulp_id}/ Inspect an ansible distribution","title":"api_automation_hub__ui_v1_my_distributions_read"},{"location":"automation-hub/#api_automation_hub__ui_v1_my_namespaces_list","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/my-namespaces/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/my-namespaces/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/my-namespaces/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/my-namespaces/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/_ui/v1/my-namespaces/ List namespaces","title":"api_automation_hub__ui_v1_my_namespaces_list"},{"location":"automation-hub/#enumerated-values_5","text":"Parameter Value sort -company sort -id sort -name sort company sort id sort name Example responses 200 Response { \"meta\": { \"count\": 123 }, \"links\": { \"first\": \"string\", \"previous\": \"string\", \"next\": \"string\", \"last\": \"string\" }, \"data\": [ { \"pulp_href\": \"http://example.com\", \"id\": 0, \"name\": \"string\", \"company\": \"string\", \"email\": \"string\", \"avatar_url\": \"http://example.com\", \"description\": \"string\", \"groups\": \"string\", \"related_fields\": { \"my_permissions\": {} } } ] }","title":"Enumerated Values"},{"location":"automation-hub/#api_automation_hub__ui_v1_my_namespaces_create","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Content-Type\": []string{\"application/json\"}, \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"POST\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/my-namespaces/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const inputBody = '{ \"name\": \"string\", \"company\": \"string\", \"email\": \"string\", \"avatar_url\": \"http://example.com\", \"description\": \"string\", \"links\": [ { \"name\": \"string\", \"url\": \"string\" } ], \"groups\": \"string\", \"resources\": \"string\" }'; const headers = { 'Content-Type':'application/json', 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/my-namespaces/', { method: 'POST', body: inputBody, headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Content-Type': 'application/json', 'Accept': 'application/json' } r = requests.post('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/my-namespaces/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Content-Type' => 'application/json', 'Accept' => 'application/json' } result = RestClient.post 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/my-namespaces/', params: { }, headers: headers p JSON.parse(result) POST /api/automation-hub/_ui/v1/my-namespaces/ Create a namespace Override to validate for name duplication before serializer validation. Body parameter { \"name\": \"string\", \"company\": \"string\", \"email\": \"string\", \"avatar_url\": \"http://example.com\", \"description\": \"string\", \"links\": [ { \"name\": \"string\", \"url\": \"string\" } ], \"groups\": \"string\", \"resources\": \"string\" } name: string company: string email: string avatar_url: http://example.com description: string links: - name: string url: string groups: string resources: string","title":"api_automation_hub__ui_v1_my_namespaces_create"},{"location":"automation-hub/#api_automation_hub__ui_v1_my_namespaces_read","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/my-namespaces/{name}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/my-namespaces/{name}/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/my-namespaces/{name}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/my-namespaces/{name}/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/_ui/v1/my-namespaces/{name}/ Inspect a namespace","title":"api_automation_hub__ui_v1_my_namespaces_read"},{"location":"automation-hub/#api_automation_hub__ui_v1_my_namespaces_update","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Content-Type\": []string{\"application/json\"}, \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"PUT\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/my-namespaces/{name}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const inputBody = '{ \"name\": \"string\", \"company\": \"string\", \"email\": \"string\", \"avatar_url\": \"http://example.com\", \"description\": \"string\", \"links\": [ { \"name\": \"string\", \"url\": \"string\" } ], \"groups\": \"string\", \"resources\": \"string\" }'; const headers = { 'Content-Type':'application/json', 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/my-namespaces/{name}/', { method: 'PUT', body: inputBody, headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Content-Type': 'application/json', 'Accept': 'application/json' } r = requests.put('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/my-namespaces/{name}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Content-Type' => 'application/json', 'Accept' => 'application/json' } result = RestClient.put 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/my-namespaces/{name}/', params: { }, headers: headers p JSON.parse(result) PUT /api/automation-hub/_ui/v1/my-namespaces/{name}/ Update a namespace Body parameter { \"name\": \"string\", \"company\": \"string\", \"email\": \"string\", \"avatar_url\": \"http://example.com\", \"description\": \"string\", \"links\": [ { \"name\": \"string\", \"url\": \"string\" } ], \"groups\": \"string\", \"resources\": \"string\" } name: string company: string email: string avatar_url: http://example.com description: string links: - name: string url: string groups: string resources: string","title":"api_automation_hub__ui_v1_my_namespaces_update"},{"location":"automation-hub/#api_automation_hub__ui_v1_my_namespaces_partial_update","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Content-Type\": []string{\"application/json\"}, \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"PATCH\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/my-namespaces/{name}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const inputBody = '{ \"name\": \"string\", \"company\": \"string\", \"email\": \"string\", \"avatar_url\": \"http://example.com\", \"description\": \"string\", \"links\": [ { \"name\": \"string\", \"url\": \"string\" } ], \"groups\": \"string\", \"resources\": \"string\" }'; const headers = { 'Content-Type':'application/json', 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/my-namespaces/{name}/', { method: 'PATCH', body: inputBody, headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Content-Type': 'application/json', 'Accept': 'application/json' } r = requests.patch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/my-namespaces/{name}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Content-Type' => 'application/json', 'Accept' => 'application/json' } result = RestClient.patch 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/my-namespaces/{name}/', params: { }, headers: headers p JSON.parse(result) PATCH /api/automation-hub/_ui/v1/my-namespaces/{name}/ Update a namespace Body parameter { \"name\": \"string\", \"company\": \"string\", \"email\": \"string\", \"avatar_url\": \"http://example.com\", \"description\": \"string\", \"links\": [ { \"name\": \"string\", \"url\": \"string\" } ], \"groups\": \"string\", \"resources\": \"string\" } name: string company: string email: string avatar_url: http://example.com description: string links: - name: string url: string groups: string resources: string","title":"api_automation_hub__ui_v1_my_namespaces_partial_update"},{"location":"automation-hub/#api_automation_hub__ui_v1_my_namespaces_delete","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"DELETE\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/my-namespaces/{name}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/my-namespaces/{name}/', { method: 'DELETE' }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests r = requests.delete('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/my-namespaces/{name}/') print(r.json()) require 'rest-client' require 'json' result = RestClient.delete 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/my-namespaces/{name}/', params: { } p JSON.parse(result) DELETE /api/automation-hub/_ui/v1/my-namespaces/{name}/ Delete a namespace Delete a namespace. Perform a check to see if there are any collections in the namespace. If there are, return a failure. Delete the inbound pulp distro and repository Delete the namespace object. return: Response(status=204)","title":"api_automation_hub__ui_v1_my_namespaces_delete"},{"location":"automation-hub/#api_automation_hub__ui_v1_my_synclists_list","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/my-synclists/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/my-synclists/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/my-synclists/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/my-synclists/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/_ui/v1/my-synclists/ List sync lists","title":"api_automation_hub__ui_v1_my_synclists_list"},{"location":"automation-hub/#api_automation_hub__ui_v1_my_synclists_create","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Content-Type\": []string{\"application/json\"}, \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"POST\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/my-synclists/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const inputBody = '{ \"name\": \"string\", \"policy\": \"exclude\", \"upstream_repository\": \"e4806caf-013f-4b45-852d-8383b790be1e\", \"distribution\": \"bfc61d85-c320-44a0-8e0a-6d4a25594a2d\", \"collections\": [ { \"namespace\": \"string\", \"name\": \"string\" } ], \"namespaces\": [ \"string\" ], \"groups\": \"string\" }'; const headers = { 'Content-Type':'application/json', 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/my-synclists/', { method: 'POST', body: inputBody, headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Content-Type': 'application/json', 'Accept': 'application/json' } r = requests.post('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/my-synclists/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Content-Type' => 'application/json', 'Accept' => 'application/json' } result = RestClient.post 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/my-synclists/', params: { }, headers: headers p JSON.parse(result) POST /api/automation-hub/_ui/v1/my-synclists/ Create a sync list Body parameter { \"name\": \"string\", \"policy\": \"exclude\", \"upstream_repository\": \"e4806caf-013f-4b45-852d-8383b790be1e\", \"distribution\": \"bfc61d85-c320-44a0-8e0a-6d4a25594a2d\", \"collections\": [ { \"namespace\": \"string\", \"name\": \"string\" } ], \"namespaces\": [ \"string\" ], \"groups\": \"string\" } name: string policy: exclude upstream_repository: e4806caf-013f-4b45-852d-8383b790be1e distribution: bfc61d85-c320-44a0-8e0a-6d4a25594a2d collections: - namespace: string name: string namespaces: - string groups: string","title":"api_automation_hub__ui_v1_my_synclists_create"},{"location":"automation-hub/#api_automation_hub__ui_v1_my_synclists_read","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/my-synclists/{id}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/my-synclists/{id}/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/my-synclists/{id}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/my-synclists/{id}/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/_ui/v1/my-synclists/{id}/ Inspect a sync list","title":"api_automation_hub__ui_v1_my_synclists_read"},{"location":"automation-hub/#api_automation_hub__ui_v1_my_synclists_update","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Content-Type\": []string{\"application/json\"}, \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"PUT\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/my-synclists/{id}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const inputBody = '{ \"name\": \"string\", \"policy\": \"exclude\", \"upstream_repository\": \"e4806caf-013f-4b45-852d-8383b790be1e\", \"distribution\": \"bfc61d85-c320-44a0-8e0a-6d4a25594a2d\", \"collections\": [ { \"namespace\": \"string\", \"name\": \"string\" } ], \"namespaces\": [ \"string\" ], \"groups\": \"string\" }'; const headers = { 'Content-Type':'application/json', 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/my-synclists/{id}/', { method: 'PUT', body: inputBody, headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Content-Type': 'application/json', 'Accept': 'application/json' } r = requests.put('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/my-synclists/{id}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Content-Type' => 'application/json', 'Accept' => 'application/json' } result = RestClient.put 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/my-synclists/{id}/', params: { }, headers: headers p JSON.parse(result) PUT /api/automation-hub/_ui/v1/my-synclists/{id}/ Update a sync list Body parameter { \"name\": \"string\", \"policy\": \"exclude\", \"upstream_repository\": \"e4806caf-013f-4b45-852d-8383b790be1e\", \"distribution\": \"bfc61d85-c320-44a0-8e0a-6d4a25594a2d\", \"collections\": [ { \"namespace\": \"string\", \"name\": \"string\" } ], \"namespaces\": [ \"string\" ], \"groups\": \"string\" } name: string policy: exclude upstream_repository: e4806caf-013f-4b45-852d-8383b790be1e distribution: bfc61d85-c320-44a0-8e0a-6d4a25594a2d collections: - namespace: string name: string namespaces: - string groups: string","title":"api_automation_hub__ui_v1_my_synclists_update"},{"location":"automation-hub/#api_automation_hub__ui_v1_my_synclists_partial_update","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Content-Type\": []string{\"application/json\"}, \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"PATCH\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/my-synclists/{id}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const inputBody = '{ \"name\": \"string\", \"policy\": \"exclude\", \"upstream_repository\": \"e4806caf-013f-4b45-852d-8383b790be1e\", \"distribution\": \"bfc61d85-c320-44a0-8e0a-6d4a25594a2d\", \"collections\": [ { \"namespace\": \"string\", \"name\": \"string\" } ], \"namespaces\": [ \"string\" ], \"groups\": \"string\" }'; const headers = { 'Content-Type':'application/json', 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/my-synclists/{id}/', { method: 'PATCH', body: inputBody, headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Content-Type': 'application/json', 'Accept': 'application/json' } r = requests.patch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/my-synclists/{id}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Content-Type' => 'application/json', 'Accept' => 'application/json' } result = RestClient.patch 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/my-synclists/{id}/', params: { }, headers: headers p JSON.parse(result) PATCH /api/automation-hub/_ui/v1/my-synclists/{id}/ Update a sync list Body parameter { \"name\": \"string\", \"policy\": \"exclude\", \"upstream_repository\": \"e4806caf-013f-4b45-852d-8383b790be1e\", \"distribution\": \"bfc61d85-c320-44a0-8e0a-6d4a25594a2d\", \"collections\": [ { \"namespace\": \"string\", \"name\": \"string\" } ], \"namespaces\": [ \"string\" ], \"groups\": \"string\" } name: string policy: exclude upstream_repository: e4806caf-013f-4b45-852d-8383b790be1e distribution: bfc61d85-c320-44a0-8e0a-6d4a25594a2d collections: - namespace: string name: string namespaces: - string groups: string","title":"api_automation_hub__ui_v1_my_synclists_partial_update"},{"location":"automation-hub/#api_automation_hub__ui_v1_my_synclists_delete","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"DELETE\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/my-synclists/{id}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/my-synclists/{id}/', { method: 'DELETE' }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests r = requests.delete('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/my-synclists/{id}/') print(r.json()) require 'rest-client' require 'json' result = RestClient.delete 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/my-synclists/{id}/', params: { } p JSON.parse(result) DELETE /api/automation-hub/_ui/v1/my-synclists/{id}/ Delete a sync list","title":"api_automation_hub__ui_v1_my_synclists_delete"},{"location":"automation-hub/#api_automation_hub__ui_v1_my_synclists_curate_curate","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Content-Type\": []string{\"application/json\"}, \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"POST\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/my-synclists/{id}/curate/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const inputBody = '{ \"name\": \"string\", \"policy\": \"exclude\", \"upstream_repository\": \"e4806caf-013f-4b45-852d-8383b790be1e\", \"distribution\": \"bfc61d85-c320-44a0-8e0a-6d4a25594a2d\", \"collections\": [ { \"namespace\": \"string\", \"name\": \"string\" } ], \"namespaces\": [ \"string\" ], \"groups\": \"string\" }'; const headers = { 'Content-Type':'application/json', 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/my-synclists/{id}/curate/', { method: 'POST', body: inputBody, headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Content-Type': 'application/json', 'Accept': 'application/json' } r = requests.post('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/my-synclists/{id}/curate/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Content-Type' => 'application/json', 'Accept' => 'application/json' } result = RestClient.post 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/my-synclists/{id}/curate/', params: { }, headers: headers p JSON.parse(result) POST /api/automation-hub/_ui/v1/my-synclists/{id}/curate/ Body parameter { \"name\": \"string\", \"policy\": \"exclude\", \"upstream_repository\": \"e4806caf-013f-4b45-852d-8383b790be1e\", \"distribution\": \"bfc61d85-c320-44a0-8e0a-6d4a25594a2d\", \"collections\": [ { \"namespace\": \"string\", \"name\": \"string\" } ], \"namespaces\": [ \"string\" ], \"groups\": \"string\" } name: string policy: exclude upstream_repository: e4806caf-013f-4b45-852d-8383b790be1e distribution: bfc61d85-c320-44a0-8e0a-6d4a25594a2d collections: - namespace: string name: string namespaces: - string groups: string","title":"api_automation_hub__ui_v1_my_synclists_curate_curate"},{"location":"automation-hub/#api_automation_hub__ui_v1_namespaces_list","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/namespaces/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/namespaces/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/namespaces/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/namespaces/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/_ui/v1/namespaces/ List namespaces","title":"api_automation_hub__ui_v1_namespaces_list"},{"location":"automation-hub/#enumerated-values_6","text":"Parameter Value sort -company sort -id sort -name sort company sort id sort name Example responses 200 Response { \"meta\": { \"count\": 123 }, \"links\": { \"first\": \"string\", \"previous\": \"string\", \"next\": \"string\", \"last\": \"string\" }, \"data\": [ { \"pulp_href\": \"http://example.com\", \"id\": 0, \"name\": \"string\", \"company\": \"string\", \"email\": \"string\", \"avatar_url\": \"http://example.com\", \"description\": \"string\", \"groups\": \"string\", \"related_fields\": { \"my_permissions\": {} } } ] }","title":"Enumerated Values"},{"location":"automation-hub/#api_automation_hub__ui_v1_namespaces_create","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Content-Type\": []string{\"application/json\"}, \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"POST\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/namespaces/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const inputBody = '{ \"name\": \"string\", \"company\": \"string\", \"email\": \"string\", \"avatar_url\": \"http://example.com\", \"description\": \"string\", \"links\": [ { \"name\": \"string\", \"url\": \"string\" } ], \"groups\": \"string\", \"resources\": \"string\" }'; const headers = { 'Content-Type':'application/json', 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/namespaces/', { method: 'POST', body: inputBody, headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Content-Type': 'application/json', 'Accept': 'application/json' } r = requests.post('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/namespaces/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Content-Type' => 'application/json', 'Accept' => 'application/json' } result = RestClient.post 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/namespaces/', params: { }, headers: headers p JSON.parse(result) POST /api/automation-hub/_ui/v1/namespaces/ Create a namespace Override to validate for name duplication before serializer validation. Body parameter { \"name\": \"string\", \"company\": \"string\", \"email\": \"string\", \"avatar_url\": \"http://example.com\", \"description\": \"string\", \"links\": [ { \"name\": \"string\", \"url\": \"string\" } ], \"groups\": \"string\", \"resources\": \"string\" } name: string company: string email: string avatar_url: http://example.com description: string links: - name: string url: string groups: string resources: string","title":"api_automation_hub__ui_v1_namespaces_create"},{"location":"automation-hub/#api_automation_hub__ui_v1_namespaces_read","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/namespaces/{name}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/namespaces/{name}/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/namespaces/{name}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/namespaces/{name}/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/_ui/v1/namespaces/{name}/ Inspect a namespace","title":"api_automation_hub__ui_v1_namespaces_read"},{"location":"automation-hub/#api_automation_hub__ui_v1_namespaces_update","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Content-Type\": []string{\"application/json\"}, \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"PUT\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/namespaces/{name}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const inputBody = '{ \"name\": \"string\", \"company\": \"string\", \"email\": \"string\", \"avatar_url\": \"http://example.com\", \"description\": \"string\", \"links\": [ { \"name\": \"string\", \"url\": \"string\" } ], \"groups\": \"string\", \"resources\": \"string\" }'; const headers = { 'Content-Type':'application/json', 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/namespaces/{name}/', { method: 'PUT', body: inputBody, headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Content-Type': 'application/json', 'Accept': 'application/json' } r = requests.put('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/namespaces/{name}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Content-Type' => 'application/json', 'Accept' => 'application/json' } result = RestClient.put 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/namespaces/{name}/', params: { }, headers: headers p JSON.parse(result) PUT /api/automation-hub/_ui/v1/namespaces/{name}/ Update a namespace Body parameter { \"name\": \"string\", \"company\": \"string\", \"email\": \"string\", \"avatar_url\": \"http://example.com\", \"description\": \"string\", \"links\": [ { \"name\": \"string\", \"url\": \"string\" } ], \"groups\": \"string\", \"resources\": \"string\" } name: string company: string email: string avatar_url: http://example.com description: string links: - name: string url: string groups: string resources: string","title":"api_automation_hub__ui_v1_namespaces_update"},{"location":"automation-hub/#api_automation_hub__ui_v1_namespaces_partial_update","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Content-Type\": []string{\"application/json\"}, \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"PATCH\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/namespaces/{name}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const inputBody = '{ \"name\": \"string\", \"company\": \"string\", \"email\": \"string\", \"avatar_url\": \"http://example.com\", \"description\": \"string\", \"links\": [ { \"name\": \"string\", \"url\": \"string\" } ], \"groups\": \"string\", \"resources\": \"string\" }'; const headers = { 'Content-Type':'application/json', 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/namespaces/{name}/', { method: 'PATCH', body: inputBody, headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Content-Type': 'application/json', 'Accept': 'application/json' } r = requests.patch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/namespaces/{name}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Content-Type' => 'application/json', 'Accept' => 'application/json' } result = RestClient.patch 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/namespaces/{name}/', params: { }, headers: headers p JSON.parse(result) PATCH /api/automation-hub/_ui/v1/namespaces/{name}/ Update a namespace Body parameter { \"name\": \"string\", \"company\": \"string\", \"email\": \"string\", \"avatar_url\": \"http://example.com\", \"description\": \"string\", \"links\": [ { \"name\": \"string\", \"url\": \"string\" } ], \"groups\": \"string\", \"resources\": \"string\" } name: string company: string email: string avatar_url: http://example.com description: string links: - name: string url: string groups: string resources: string","title":"api_automation_hub__ui_v1_namespaces_partial_update"},{"location":"automation-hub/#api_automation_hub__ui_v1_namespaces_delete","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"DELETE\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/namespaces/{name}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/namespaces/{name}/', { method: 'DELETE' }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests r = requests.delete('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/namespaces/{name}/') print(r.json()) require 'rest-client' require 'json' result = RestClient.delete 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/namespaces/{name}/', params: { } p JSON.parse(result) DELETE /api/automation-hub/_ui/v1/namespaces/{name}/ Delete a namespace Delete a namespace. Perform a check to see if there are any collections in the namespace. If there are, return a failure. Delete the inbound pulp distro and repository Delete the namespace object. return: Response(status=204)","title":"api_automation_hub__ui_v1_namespaces_delete"},{"location":"automation-hub/#api_automation_hub__ui_v1_remotes_list","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/remotes/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/remotes/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/remotes/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/remotes/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/_ui/v1/remotes/ List collection remotes","title":"api_automation_hub__ui_v1_remotes_list"},{"location":"automation-hub/#api_automation_hub__ui_v1_remotes_create","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Content-Type\": []string{\"application/json\"}, \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"POST\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/remotes/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const inputBody = '{ \"url\": \"string\", \"auth_url\": \"string\", \"token\": \"string\", \"policy\": \"immediate\", \"requirements_file\": \"string\", \"created_at\": \"2019-08-24T14:15:22Z\", \"updated_at\": \"2019-08-24T14:15:22Z\", \"username\": \"string\", \"password\": \"string\", \"tls_validation\": true, \"client_key\": \"string\", \"client_cert\": \"string\", \"ca_cert\": \"string\", \"download_concurrency\": 1, \"proxy_url\": \"string\", \"proxy_username\": \"string\", \"proxy_password\": \"string\", \"rate_limit\": 0, \"signed_only\": false }'; const headers = { 'Content-Type':'application/json', 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/remotes/', { method: 'POST', body: inputBody, headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Content-Type': 'application/json', 'Accept': 'application/json' } r = requests.post('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/remotes/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Content-Type' => 'application/json', 'Accept' => 'application/json' } result = RestClient.post 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/remotes/', params: { }, headers: headers p JSON.parse(result) POST /api/automation-hub/_ui/v1/remotes/ Create a collection remote Body parameter { \"url\": \"string\", \"auth_url\": \"string\", \"token\": \"string\", \"policy\": \"immediate\", \"requirements_file\": \"string\", \"created_at\": \"2019-08-24T14:15:22Z\", \"updated_at\": \"2019-08-24T14:15:22Z\", \"username\": \"string\", \"password\": \"string\", \"tls_validation\": true, \"client_key\": \"string\", \"client_cert\": \"string\", \"ca_cert\": \"string\", \"download_concurrency\": 1, \"proxy_url\": \"string\", \"proxy_username\": \"string\", \"proxy_password\": \"string\", \"rate_limit\": 0, \"signed_only\": false } url: string auth_url: string token: string policy: immediate requirements_file: string created_at: 2019-08-24T14:15:22Z updated_at: 2019-08-24T14:15:22Z username: string password: string tls_validation: true client_key: string client_cert: string ca_cert: string download_concurrency: 1 proxy_url: string proxy_username: string proxy_password: string rate_limit: 0 signed_only: false","title":"api_automation_hub__ui_v1_remotes_create"},{"location":"automation-hub/#api_automation_hub__ui_v1_remotes_read","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/remotes/{pulp_id}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/remotes/{pulp_id}/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/remotes/{pulp_id}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/remotes/{pulp_id}/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/_ui/v1/remotes/{pulp_id}/ Inspect a collection remote","title":"api_automation_hub__ui_v1_remotes_read"},{"location":"automation-hub/#api_automation_hub__ui_v1_remotes_update","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Content-Type\": []string{\"application/json\"}, \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"PUT\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/remotes/{pulp_id}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const inputBody = '{ \"url\": \"string\", \"auth_url\": \"string\", \"token\": \"string\", \"policy\": \"immediate\", \"requirements_file\": \"string\", \"created_at\": \"2019-08-24T14:15:22Z\", \"updated_at\": \"2019-08-24T14:15:22Z\", \"username\": \"string\", \"password\": \"string\", \"tls_validation\": true, \"client_key\": \"string\", \"client_cert\": \"string\", \"ca_cert\": \"string\", \"download_concurrency\": 1, \"proxy_url\": \"string\", \"proxy_username\": \"string\", \"proxy_password\": \"string\", \"rate_limit\": 0, \"signed_only\": false }'; const headers = { 'Content-Type':'application/json', 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/remotes/{pulp_id}/', { method: 'PUT', body: inputBody, headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Content-Type': 'application/json', 'Accept': 'application/json' } r = requests.put('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/remotes/{pulp_id}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Content-Type' => 'application/json', 'Accept' => 'application/json' } result = RestClient.put 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/remotes/{pulp_id}/', params: { }, headers: headers p JSON.parse(result) PUT /api/automation-hub/_ui/v1/remotes/{pulp_id}/ Update a collection remote Body parameter { \"url\": \"string\", \"auth_url\": \"string\", \"token\": \"string\", \"policy\": \"immediate\", \"requirements_file\": \"string\", \"created_at\": \"2019-08-24T14:15:22Z\", \"updated_at\": \"2019-08-24T14:15:22Z\", \"username\": \"string\", \"password\": \"string\", \"tls_validation\": true, \"client_key\": \"string\", \"client_cert\": \"string\", \"ca_cert\": \"string\", \"download_concurrency\": 1, \"proxy_url\": \"string\", \"proxy_username\": \"string\", \"proxy_password\": \"string\", \"rate_limit\": 0, \"signed_only\": false } url: string auth_url: string token: string policy: immediate requirements_file: string created_at: 2019-08-24T14:15:22Z updated_at: 2019-08-24T14:15:22Z username: string password: string tls_validation: true client_key: string client_cert: string ca_cert: string download_concurrency: 1 proxy_url: string proxy_username: string proxy_password: string rate_limit: 0 signed_only: false","title":"api_automation_hub__ui_v1_remotes_update"},{"location":"automation-hub/#api_automation_hub__ui_v1_remotes_partial_update","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Content-Type\": []string{\"application/json\"}, \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"PATCH\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/remotes/{pulp_id}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const inputBody = '{ \"url\": \"string\", \"auth_url\": \"string\", \"token\": \"string\", \"policy\": \"immediate\", \"requirements_file\": \"string\", \"created_at\": \"2019-08-24T14:15:22Z\", \"updated_at\": \"2019-08-24T14:15:22Z\", \"username\": \"string\", \"password\": \"string\", \"tls_validation\": true, \"client_key\": \"string\", \"client_cert\": \"string\", \"ca_cert\": \"string\", \"download_concurrency\": 1, \"proxy_url\": \"string\", \"proxy_username\": \"string\", \"proxy_password\": \"string\", \"rate_limit\": 0, \"signed_only\": false }'; const headers = { 'Content-Type':'application/json', 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/remotes/{pulp_id}/', { method: 'PATCH', body: inputBody, headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Content-Type': 'application/json', 'Accept': 'application/json' } r = requests.patch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/remotes/{pulp_id}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Content-Type' => 'application/json', 'Accept' => 'application/json' } result = RestClient.patch 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/remotes/{pulp_id}/', params: { }, headers: headers p JSON.parse(result) PATCH /api/automation-hub/_ui/v1/remotes/{pulp_id}/ Update a collection remote Body parameter { \"url\": \"string\", \"auth_url\": \"string\", \"token\": \"string\", \"policy\": \"immediate\", \"requirements_file\": \"string\", \"created_at\": \"2019-08-24T14:15:22Z\", \"updated_at\": \"2019-08-24T14:15:22Z\", \"username\": \"string\", \"password\": \"string\", \"tls_validation\": true, \"client_key\": \"string\", \"client_cert\": \"string\", \"ca_cert\": \"string\", \"download_concurrency\": 1, \"proxy_url\": \"string\", \"proxy_username\": \"string\", \"proxy_password\": \"string\", \"rate_limit\": 0, \"signed_only\": false } url: string auth_url: string token: string policy: immediate requirements_file: string created_at: 2019-08-24T14:15:22Z updated_at: 2019-08-24T14:15:22Z username: string password: string tls_validation: true client_key: string client_cert: string ca_cert: string download_concurrency: 1 proxy_url: string proxy_username: string proxy_password: string rate_limit: 0 signed_only: false","title":"api_automation_hub__ui_v1_remotes_partial_update"},{"location":"automation-hub/#api_automation_hub__ui_v1_remotes_delete","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"DELETE\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/remotes/{pulp_id}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/remotes/{pulp_id}/', { method: 'DELETE' }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests r = requests.delete('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/remotes/{pulp_id}/') print(r.json()) require 'rest-client' require 'json' result = RestClient.delete 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/remotes/{pulp_id}/', params: { } p JSON.parse(result) DELETE /api/automation-hub/_ui/v1/remotes/{pulp_id}/ Delete a collection remote","title":"api_automation_hub__ui_v1_remotes_delete"},{"location":"automation-hub/#api_automation_hub__ui_v1_repo_list","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/repo/{distro_base_path}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/repo/{distro_base_path}/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/repo/{distro_base_path}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/repo/{distro_base_path}/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/_ui/v1/repo/{distro_base_path}/ Viewset that uses CollectionVersion's within distribution to display data for Collection's. Collection list is filterable by FilterSet and includes latest CollectionVersion. Collection detail includes CollectionVersion that is latest or via query param 'version'.","title":"api_automation_hub__ui_v1_repo_list"},{"location":"automation-hub/#enumerated-values_7","text":"Parameter Value ordering -_artifacts ordering -authors ordering -collection ordering -content_ptr ordering -contentartifact ordering -contents ordering -dependencies ordering -description ordering -docs_blob ordering -documentation ordering -download_logs ordering -files ordering -group_roles ordering -homepage ordering -is_highest ordering -issues ordering -license ordering -manifest ordering -name ordering -namespace ordering -pk ordering -pulp_created ordering -pulp_id ordering -pulp_labels ordering -pulp_last_updated ordering -pulp_type ordering -repositories ordering -repository ordering -requires_ansible ordering -search_vector ordering -signatures ordering -tags ordering -timestamp_of_interest ordering -upstream_id ordering -user_roles ordering -version ordering -version_memberships ordering _artifacts ordering authors ordering collection ordering content_ptr ordering contentartifact ordering contents ordering dependencies ordering description ordering docs_blob ordering documentation ordering download_logs ordering files ordering group_roles ordering homepage ordering is_highest ordering issues ordering license ordering manifest ordering name ordering namespace ordering pk ordering pulp_created ordering pulp_id ordering pulp_labels ordering pulp_last_updated ordering pulp_type ordering repositories ordering repository ordering requires_ansible ordering search_vector ordering signatures ordering tags ordering timestamp_of_interest ordering upstream_id ordering user_roles ordering version ordering version_memberships Example responses 200 Response { \"meta\": { \"count\": 123 }, \"links\": { \"first\": \"string\", \"previous\": \"string\", \"next\": \"string\", \"last\": \"string\" }, \"data\": [ { \"username\": \"string\", \"password\": \"string\" } ] }","title":"Enumerated Values"},{"location":"automation-hub/#api_automation_hub__ui_v1_repo_read","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/repo/{distro_base_path}/{namespace}/{name}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/repo/{distro_base_path}/{namespace}/{name}/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/repo/{distro_base_path}/{namespace}/{name}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/repo/{distro_base_path}/{namespace}/{name}/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/_ui/v1/repo/{distro_base_path}/{namespace}/{name}/ Viewset that uses CollectionVersion's within distribution to display data for Collection's. Collection list is filterable by FilterSet and includes latest CollectionVersion. Collection detail includes CollectionVersion that is latest or via query param 'version'.","title":"api_automation_hub__ui_v1_repo_read"},{"location":"automation-hub/#api_automation_hub__ui_v1_settings_get","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/settings/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/settings/', { method: 'GET' }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/settings/') print(r.json()) require 'rest-client' require 'json' result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/settings/', params: { } p JSON.parse(result) GET /api/automation-hub/_ui/v1/settings/","title":"api_automation_hub__ui_v1_settings_get"},{"location":"automation-hub/#api_automation_hub__ui_v1_synclists_list","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/synclists/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/synclists/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/synclists/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/synclists/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/_ui/v1/synclists/ List sync lists","title":"api_automation_hub__ui_v1_synclists_list"},{"location":"automation-hub/#api_automation_hub__ui_v1_synclists_create","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Content-Type\": []string{\"application/json\"}, \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"POST\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/synclists/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const inputBody = '{ \"name\": \"string\", \"policy\": \"exclude\", \"upstream_repository\": \"e4806caf-013f-4b45-852d-8383b790be1e\", \"distribution\": \"bfc61d85-c320-44a0-8e0a-6d4a25594a2d\", \"collections\": [ { \"namespace\": \"string\", \"name\": \"string\" } ], \"namespaces\": [ \"string\" ], \"groups\": \"string\" }'; const headers = { 'Content-Type':'application/json', 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/synclists/', { method: 'POST', body: inputBody, headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Content-Type': 'application/json', 'Accept': 'application/json' } r = requests.post('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/synclists/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Content-Type' => 'application/json', 'Accept' => 'application/json' } result = RestClient.post 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/synclists/', params: { }, headers: headers p JSON.parse(result) POST /api/automation-hub/_ui/v1/synclists/ Create a sync list Body parameter { \"name\": \"string\", \"policy\": \"exclude\", \"upstream_repository\": \"e4806caf-013f-4b45-852d-8383b790be1e\", \"distribution\": \"bfc61d85-c320-44a0-8e0a-6d4a25594a2d\", \"collections\": [ { \"namespace\": \"string\", \"name\": \"string\" } ], \"namespaces\": [ \"string\" ], \"groups\": \"string\" } name: string policy: exclude upstream_repository: e4806caf-013f-4b45-852d-8383b790be1e distribution: bfc61d85-c320-44a0-8e0a-6d4a25594a2d collections: - namespace: string name: string namespaces: - string groups: string","title":"api_automation_hub__ui_v1_synclists_create"},{"location":"automation-hub/#api_automation_hub__ui_v1_synclists_read","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/synclists/{id}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/synclists/{id}/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/synclists/{id}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/synclists/{id}/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/_ui/v1/synclists/{id}/ Inspect a sync list","title":"api_automation_hub__ui_v1_synclists_read"},{"location":"automation-hub/#api_automation_hub__ui_v1_synclists_update","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Content-Type\": []string{\"application/json\"}, \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"PUT\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/synclists/{id}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const inputBody = '{ \"name\": \"string\", \"policy\": \"exclude\", \"upstream_repository\": \"e4806caf-013f-4b45-852d-8383b790be1e\", \"distribution\": \"bfc61d85-c320-44a0-8e0a-6d4a25594a2d\", \"collections\": [ { \"namespace\": \"string\", \"name\": \"string\" } ], \"namespaces\": [ \"string\" ], \"groups\": \"string\" }'; const headers = { 'Content-Type':'application/json', 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/synclists/{id}/', { method: 'PUT', body: inputBody, headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Content-Type': 'application/json', 'Accept': 'application/json' } r = requests.put('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/synclists/{id}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Content-Type' => 'application/json', 'Accept' => 'application/json' } result = RestClient.put 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/synclists/{id}/', params: { }, headers: headers p JSON.parse(result) PUT /api/automation-hub/_ui/v1/synclists/{id}/ Update a sync list Body parameter { \"name\": \"string\", \"policy\": \"exclude\", \"upstream_repository\": \"e4806caf-013f-4b45-852d-8383b790be1e\", \"distribution\": \"bfc61d85-c320-44a0-8e0a-6d4a25594a2d\", \"collections\": [ { \"namespace\": \"string\", \"name\": \"string\" } ], \"namespaces\": [ \"string\" ], \"groups\": \"string\" } name: string policy: exclude upstream_repository: e4806caf-013f-4b45-852d-8383b790be1e distribution: bfc61d85-c320-44a0-8e0a-6d4a25594a2d collections: - namespace: string name: string namespaces: - string groups: string","title":"api_automation_hub__ui_v1_synclists_update"},{"location":"automation-hub/#api_automation_hub__ui_v1_synclists_partial_update","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Content-Type\": []string{\"application/json\"}, \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"PATCH\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/synclists/{id}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const inputBody = '{ \"name\": \"string\", \"policy\": \"exclude\", \"upstream_repository\": \"e4806caf-013f-4b45-852d-8383b790be1e\", \"distribution\": \"bfc61d85-c320-44a0-8e0a-6d4a25594a2d\", \"collections\": [ { \"namespace\": \"string\", \"name\": \"string\" } ], \"namespaces\": [ \"string\" ], \"groups\": \"string\" }'; const headers = { 'Content-Type':'application/json', 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/synclists/{id}/', { method: 'PATCH', body: inputBody, headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Content-Type': 'application/json', 'Accept': 'application/json' } r = requests.patch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/synclists/{id}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Content-Type' => 'application/json', 'Accept' => 'application/json' } result = RestClient.patch 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/synclists/{id}/', params: { }, headers: headers p JSON.parse(result) PATCH /api/automation-hub/_ui/v1/synclists/{id}/ Update a sync list Body parameter { \"name\": \"string\", \"policy\": \"exclude\", \"upstream_repository\": \"e4806caf-013f-4b45-852d-8383b790be1e\", \"distribution\": \"bfc61d85-c320-44a0-8e0a-6d4a25594a2d\", \"collections\": [ { \"namespace\": \"string\", \"name\": \"string\" } ], \"namespaces\": [ \"string\" ], \"groups\": \"string\" } name: string policy: exclude upstream_repository: e4806caf-013f-4b45-852d-8383b790be1e distribution: bfc61d85-c320-44a0-8e0a-6d4a25594a2d collections: - namespace: string name: string namespaces: - string groups: string","title":"api_automation_hub__ui_v1_synclists_partial_update"},{"location":"automation-hub/#api_automation_hub__ui_v1_synclists_delete","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"DELETE\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/synclists/{id}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/synclists/{id}/', { method: 'DELETE' }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests r = requests.delete('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/synclists/{id}/') print(r.json()) require 'rest-client' require 'json' result = RestClient.delete 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/synclists/{id}/', params: { } p JSON.parse(result) DELETE /api/automation-hub/_ui/v1/synclists/{id}/ Delete a sync list","title":"api_automation_hub__ui_v1_synclists_delete"},{"location":"automation-hub/#api_automation_hub__ui_v1_tags_list","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/tags/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/tags/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/tags/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/tags/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/_ui/v1/tags/ List tags","title":"api_automation_hub__ui_v1_tags_list"},{"location":"automation-hub/#api_automation_hub__ui_v1_users_list","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/users/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/users/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/users/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/users/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/_ui/v1/users/ List users","title":"api_automation_hub__ui_v1_users_list"},{"location":"automation-hub/#enumerated-values_8","text":"Parameter Value sort -date_joined sort -email sort -first_name sort -last_name sort -username sort date_joined sort email sort first_name sort last_name sort username Example responses 200 Response { \"meta\": { \"count\": 123 }, \"links\": { \"first\": \"string\", \"previous\": \"string\", \"next\": \"string\", \"last\": \"string\" }, \"data\": [ { \"id\": 0, \"username\": \"string\", \"first_name\": \"string\", \"last_name\": \"string\", \"email\": \"user@example.com\", \"groups\": [ 0 ], \"date_joined\": \"2019-08-24T14:15:22Z\", \"is_superuser\": true, \"auth_provider\": \"string\" } ] }","title":"Enumerated Values"},{"location":"automation-hub/#api_automation_hub__ui_v1_users_create","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Content-Type\": []string{\"application/json\"}, \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"POST\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/users/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const inputBody = '{ \"username\": \"string\", \"first_name\": \"string\", \"last_name\": \"string\", \"email\": \"user@example.com\", \"groups\": [ 0 ], \"password\": \"string\", \"is_superuser\": true }'; const headers = { 'Content-Type':'application/json', 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/users/', { method: 'POST', body: inputBody, headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Content-Type': 'application/json', 'Accept': 'application/json' } r = requests.post('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/users/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Content-Type' => 'application/json', 'Accept' => 'application/json' } result = RestClient.post 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/users/', params: { }, headers: headers p JSON.parse(result) POST /api/automation-hub/_ui/v1/users/ Create an user Body parameter { \"username\": \"string\", \"first_name\": \"string\", \"last_name\": \"string\", \"email\": \"user@example.com\", \"groups\": [ 0 ], \"password\": \"string\", \"is_superuser\": true } username: string first_name: string last_name: string email: user@example.com groups: - 0 password: string is_superuser: true","title":"api_automation_hub__ui_v1_users_create"},{"location":"automation-hub/#api_automation_hub__ui_v1_users_read","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/users/{id}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/users/{id}/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/users/{id}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/users/{id}/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/_ui/v1/users/{id}/ Inspect an user","title":"api_automation_hub__ui_v1_users_read"},{"location":"automation-hub/#api_automation_hub__ui_v1_users_update","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Content-Type\": []string{\"application/json\"}, \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"PUT\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/users/{id}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const inputBody = '{ \"username\": \"string\", \"first_name\": \"string\", \"last_name\": \"string\", \"email\": \"user@example.com\", \"groups\": [ 0 ], \"password\": \"string\", \"is_superuser\": true }'; const headers = { 'Content-Type':'application/json', 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/users/{id}/', { method: 'PUT', body: inputBody, headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Content-Type': 'application/json', 'Accept': 'application/json' } r = requests.put('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/users/{id}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Content-Type' => 'application/json', 'Accept' => 'application/json' } result = RestClient.put 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/users/{id}/', params: { }, headers: headers p JSON.parse(result) PUT /api/automation-hub/_ui/v1/users/{id}/ Update an user Body parameter { \"username\": \"string\", \"first_name\": \"string\", \"last_name\": \"string\", \"email\": \"user@example.com\", \"groups\": [ 0 ], \"password\": \"string\", \"is_superuser\": true } username: string first_name: string last_name: string email: user@example.com groups: - 0 password: string is_superuser: true","title":"api_automation_hub__ui_v1_users_update"},{"location":"automation-hub/#api_automation_hub__ui_v1_users_partial_update","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Content-Type\": []string{\"application/json\"}, \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"PATCH\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/users/{id}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const inputBody = '{ \"username\": \"string\", \"first_name\": \"string\", \"last_name\": \"string\", \"email\": \"user@example.com\", \"groups\": [ 0 ], \"password\": \"string\", \"is_superuser\": true }'; const headers = { 'Content-Type':'application/json', 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/users/{id}/', { method: 'PATCH', body: inputBody, headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Content-Type': 'application/json', 'Accept': 'application/json' } r = requests.patch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/users/{id}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Content-Type' => 'application/json', 'Accept' => 'application/json' } result = RestClient.patch 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/users/{id}/', params: { }, headers: headers p JSON.parse(result) PATCH /api/automation-hub/_ui/v1/users/{id}/ Update an user Body parameter { \"username\": \"string\", \"first_name\": \"string\", \"last_name\": \"string\", \"email\": \"user@example.com\", \"groups\": [ 0 ], \"password\": \"string\", \"is_superuser\": true } username: string first_name: string last_name: string email: user@example.com groups: - 0 password: string is_superuser: true","title":"api_automation_hub__ui_v1_users_partial_update"},{"location":"automation-hub/#api_automation_hub__ui_v1_users_delete","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"DELETE\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/users/{id}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/users/{id}/', { method: 'DELETE' }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests r = requests.delete('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/users/{id}/') print(r.json()) require 'rest-client' require 'json' result = RestClient.delete 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/_ui/v1/users/{id}/', params: { } p JSON.parse(result) DELETE /api/automation-hub/_ui/v1/users/{id}/ Delete an user","title":"api_automation_hub__ui_v1_users_delete"},{"location":"automation-hub/#api_automation_hub_api_read","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/api/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/api/', { method: 'GET' }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/api/') print(r.json()) require 'rest-client' require 'json' result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/api/', params: { } p JSON.parse(result) GET /api/automation-hub/api/","title":"api_automation_hub_api_read"},{"location":"automation-hub/#api_automation_hub_content_read","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/content/{path}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/content/{path}/', { method: 'GET' }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/content/{path}/') print(r.json()) require 'rest-client' require 'json' result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/content/{path}/', params: { } p JSON.parse(result) GET /api/automation-hub/content/{path}/","title":"api_automation_hub_content_read"},{"location":"automation-hub/#api_automation_hub_content_api_read","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/content/{path}/api/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/content/{path}/api/', { method: 'GET' }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/content/{path}/api/') print(r.json()) require 'rest-client' require 'json' result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/content/{path}/api/', params: { } p JSON.parse(result) GET /api/automation-hub/content/{path}/api/","title":"api_automation_hub_content_api_read"},{"location":"automation-hub/#api_automation_hub_content_v3_read","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/content/{path}/v3/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/content/{path}/v3/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/content/{path}/v3/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/content/{path}/v3/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/content/{path}/v3/ Legacy v3 endpoint.","title":"api_automation_hub_content_v3_read"},{"location":"automation-hub/#api_automation_hub_content_v3_artifacts_collections_create","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Content-Type\": []string{\"multipart/form-data\"}, \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"POST\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/content/{path}/v3/artifacts/collections/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const inputBody = '{ \"file\": \"string\", \"sha256\": \"string\" }'; const headers = { 'Content-Type':'multipart/form-data', 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/content/{path}/v3/artifacts/collections/', { method: 'POST', body: inputBody, headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Content-Type': 'multipart/form-data', 'Accept': 'application/json' } r = requests.post('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/content/{path}/v3/artifacts/collections/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Content-Type' => 'multipart/form-data', 'Accept' => 'application/json' } result = RestClient.post 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/content/{path}/v3/artifacts/collections/', params: { }, headers: headers p JSON.parse(result) POST /api/automation-hub/content/{path}/v3/artifacts/collections/ Upload a collection Create an artifact and trigger an asynchronous task to create Collection content from it. Body parameter file: string sha256: string","title":"api_automation_hub_content_v3_artifacts_collections_create"},{"location":"automation-hub/#api_automation_hub_content_v3_plugin_ansible_content_collections_artifacts_create","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Content-Type\": []string{\"multipart/form-data\"}, \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"POST\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/content/{path}/v3/plugin/ansible/content/{distro_base_path}/collections/artifacts/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const inputBody = '{ \"file\": \"string\", \"sha256\": \"string\" }'; const headers = { 'Content-Type':'multipart/form-data', 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/content/{path}/v3/plugin/ansible/content/{distro_base_path}/collections/artifacts/', { method: 'POST', body: inputBody, headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Content-Type': 'multipart/form-data', 'Accept': 'application/json' } r = requests.post('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/content/{path}/v3/plugin/ansible/content/{distro_base_path}/collections/artifacts/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Content-Type' => 'multipart/form-data', 'Accept' => 'application/json' } result = RestClient.post 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/content/{path}/v3/plugin/ansible/content/{distro_base_path}/collections/artifacts/', params: { }, headers: headers p JSON.parse(result) POST /api/automation-hub/content/{path}/v3/plugin/ansible/content/{distro_base_path}/collections/artifacts/ Upload a collection Create an artifact and trigger an asynchronous task to create Collection content from it. Body parameter file: string sha256: string","title":"api_automation_hub_content_v3_plugin_ansible_content_collections_artifacts_create"},{"location":"automation-hub/#api_automation_hub_v3_artifacts_collections_create","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Content-Type\": []string{\"multipart/form-data\"}, \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"POST\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/artifacts/collections/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const inputBody = '{ \"file\": \"string\", \"sha256\": \"string\" }'; const headers = { 'Content-Type':'multipart/form-data', 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/artifacts/collections/', { method: 'POST', body: inputBody, headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Content-Type': 'multipart/form-data', 'Accept': 'application/json' } r = requests.post('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/artifacts/collections/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Content-Type' => 'multipart/form-data', 'Accept' => 'application/json' } result = RestClient.post 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/artifacts/collections/', params: { }, headers: headers p JSON.parse(result) POST /api/automation-hub/v3/artifacts/collections/ Upload a collection Create an artifact and trigger an asynchronous task to create Collection content from it. Body parameter file: string sha256: string","title":"api_automation_hub_v3_artifacts_collections_create"},{"location":"automation-hub/#api_automation_hub_v3_plugin_ansible_content_collections_artifacts_create","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Content-Type\": []string{\"multipart/form-data\"}, \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"POST\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/plugin/ansible/content/{distro_base_path}/collections/artifacts/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const inputBody = '{ \"file\": \"string\", \"sha256\": \"string\" }'; const headers = { 'Content-Type':'multipart/form-data', 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/plugin/ansible/content/{distro_base_path}/collections/artifacts/', { method: 'POST', body: inputBody, headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Content-Type': 'multipart/form-data', 'Accept': 'application/json' } r = requests.post('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/plugin/ansible/content/{distro_base_path}/collections/artifacts/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Content-Type' => 'multipart/form-data', 'Accept' => 'application/json' } result = RestClient.post 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/plugin/ansible/content/{distro_base_path}/collections/artifacts/', params: { }, headers: headers p JSON.parse(result) POST /api/automation-hub/v3/plugin/ansible/content/{distro_base_path}/collections/artifacts/ Upload a collection Create an artifact and trigger an asynchronous task to create Collection content from it. Body parameter file: string sha256: string","title":"api_automation_hub_v3_plugin_ansible_content_collections_artifacts_create"},{"location":"automation-hub/#pulp_ansible_galaxy_api_v3_artifacts_collections_create","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Content-Type\": []string{\"multipart/form-data\"}, \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"POST\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/{path}/api/v3/artifacts/collections/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const inputBody = '{ \"file\": \"string\", \"sha256\": \"string\", \"expected_namespace\": \"string\", \"expected_name\": \"string\", \"expected_version\": \"string\" }'; const headers = { 'Content-Type':'multipart/form-data', 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/{path}/api/v3/artifacts/collections/', { method: 'POST', body: inputBody, headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Content-Type': 'multipart/form-data', 'Accept': 'application/json' } r = requests.post('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/{path}/api/v3/artifacts/collections/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Content-Type' => 'multipart/form-data', 'Accept' => 'application/json' } result = RestClient.post 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/{path}/api/v3/artifacts/collections/', params: { }, headers: headers p JSON.parse(result) POST /pulp_ansible/galaxy/{path}/api/v3/artifacts/collections/ Upload a collection Create an artifact and trigger an asynchronous task to create Collection content from it. Body parameter file: string sha256: string expected_namespace: string expected_name: string expected_version: string","title":"pulp_ansible_galaxy_api_v3_artifacts_collections_create"},{"location":"automation-hub/#pulp_ansible_galaxy_api_v3_plugin_ansible_content_collections_artifacts_create","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Content-Type\": []string{\"multipart/form-data\"}, \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"POST\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/{path}/api/v3/plugin/ansible/content/{distro_base_path}/collections/artifacts/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const inputBody = '{ \"file\": \"string\", \"sha256\": \"string\", \"expected_namespace\": \"string\", \"expected_name\": \"string\", \"expected_version\": \"string\" }'; const headers = { 'Content-Type':'multipart/form-data', 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/{path}/api/v3/plugin/ansible/content/{distro_base_path}/collections/artifacts/', { method: 'POST', body: inputBody, headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Content-Type': 'multipart/form-data', 'Accept': 'application/json' } r = requests.post('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/{path}/api/v3/plugin/ansible/content/{distro_base_path}/collections/artifacts/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Content-Type' => 'multipart/form-data', 'Accept' => 'application/json' } result = RestClient.post 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/{path}/api/v3/plugin/ansible/content/{distro_base_path}/collections/artifacts/', params: { }, headers: headers p JSON.parse(result) POST /pulp_ansible/galaxy/{path}/api/v3/plugin/ansible/content/{distro_base_path}/collections/artifacts/ Upload a collection Create an artifact and trigger an asynchronous task to create Collection content from it. Body parameter file: string sha256: string expected_namespace: string expected_name: string expected_version: string","title":"pulp_ansible_galaxy_api_v3_plugin_ansible_content_collections_artifacts_create"},{"location":"automation-hub/#pulp_ansible_galaxy_default_api_v3_artifacts_collections_create","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Content-Type\": []string{\"multipart/form-data\"}, \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"POST\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/default/api/v3/artifacts/collections/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const inputBody = '{ \"file\": \"string\", \"sha256\": \"string\", \"expected_namespace\": \"string\", \"expected_name\": \"string\", \"expected_version\": \"string\" }'; const headers = { 'Content-Type':'multipart/form-data', 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/default/api/v3/artifacts/collections/', { method: 'POST', body: inputBody, headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Content-Type': 'multipart/form-data', 'Accept': 'application/json' } r = requests.post('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/default/api/v3/artifacts/collections/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Content-Type' => 'multipart/form-data', 'Accept' => 'application/json' } result = RestClient.post 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/default/api/v3/artifacts/collections/', params: { }, headers: headers p JSON.parse(result) POST /pulp_ansible/galaxy/default/api/v3/artifacts/collections/ Upload a collection Create an artifact and trigger an asynchronous task to create Collection content from it. Body parameter file: string sha256: string expected_namespace: string expected_name: string expected_version: string","title":"pulp_ansible_galaxy_default_api_v3_artifacts_collections_create"},{"location":"automation-hub/#pulp_ansible_galaxy_default_api_v3_plugin_ansible_content_collections_artifacts_create","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Content-Type\": []string{\"multipart/form-data\"}, \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"POST\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/default/api/v3/plugin/ansible/content/{distro_base_path}/collections/artifacts/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const inputBody = '{ \"file\": \"string\", \"sha256\": \"string\", \"expected_namespace\": \"string\", \"expected_name\": \"string\", \"expected_version\": \"string\" }'; const headers = { 'Content-Type':'multipart/form-data', 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/default/api/v3/plugin/ansible/content/{distro_base_path}/collections/artifacts/', { method: 'POST', body: inputBody, headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Content-Type': 'multipart/form-data', 'Accept': 'application/json' } r = requests.post('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/default/api/v3/plugin/ansible/content/{distro_base_path}/collections/artifacts/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Content-Type' => 'multipart/form-data', 'Accept' => 'application/json' } result = RestClient.post 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/default/api/v3/plugin/ansible/content/{distro_base_path}/collections/artifacts/', params: { }, headers: headers p JSON.parse(result) POST /pulp_ansible/galaxy/default/api/v3/plugin/ansible/content/{distro_base_path}/collections/artifacts/ Upload a collection Create an artifact and trigger an asynchronous task to create Collection content from it. Body parameter file: string sha256: string expected_namespace: string expected_name: string expected_version: string","title":"pulp_ansible_galaxy_default_api_v3_plugin_ansible_content_collections_artifacts_create"},{"location":"automation-hub/#api_automation_hub_content_v3_artifacts_collections_get","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/content/{path}/v3/artifacts/collections/{path}/{filename}\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/content/{path}/v3/artifacts/collections/{path}/{filename}', { method: 'GET' }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/content/{path}/v3/artifacts/collections/{path}/{filename}') print(r.json()) require 'rest-client' require 'json' result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/content/{path}/v3/artifacts/collections/{path}/{filename}', params: { } p JSON.parse(result) GET /api/automation-hub/content/{path}/v3/artifacts/collections/{path}/{filename} Download collection.","title":"api_automation_hub_content_v3_artifacts_collections_get"},{"location":"automation-hub/#api_automation_hub_content_v3_collection_versions_all_get","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/content/{path}/v3/collection_versions/all/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/content/{path}/v3/collection_versions/all/', { method: 'GET' }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/content/{path}/v3/collection_versions/all/') print(r.json()) require 'rest-client' require 'json' result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/content/{path}/v3/collection_versions/all/', params: { } p JSON.parse(result) GET /api/automation-hub/content/{path}/v3/collection_versions/all/","title":"api_automation_hub_content_v3_collection_versions_all_get"},{"location":"automation-hub/#api_automation_hub_content_v3_collections_list","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/content/{path}/v3/collections/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/content/{path}/v3/collections/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/content/{path}/v3/collections/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/content/{path}/v3/collections/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/content/{path}/v3/collections/ Legacy v3 endpoint.","title":"api_automation_hub_content_v3_collections_list"},{"location":"automation-hub/#enumerated-values_9","text":"Parameter Value ordering -group_roles ordering -name ordering -namespace ordering -pk ordering -pulp_created ordering -pulp_id ordering -pulp_labels ordering -pulp_last_updated ordering -synclist ordering -user_roles ordering -versions ordering group_roles ordering name ordering namespace ordering pk ordering pulp_created ordering pulp_id ordering pulp_labels ordering pulp_last_updated ordering synclist ordering user_roles ordering versions Example responses 202 Response { \"meta\": { \"count\": 123 }, \"links\": { \"first\": \"string\", \"previous\": \"string\", \"next\": \"string\", \"last\": \"string\" }, \"data\": [ { \"href\": \"string\", \"namespace\": \"string\", \"name\": \"string\", \"deprecated\": true, \"versions_url\": \"string\", \"highest_version\": {}, \"created_at\": \"2019-08-24T14:15:22Z\", \"updated_at\": \"2019-08-24T14:15:22Z\" } ] }","title":"Enumerated Values"},{"location":"automation-hub/#api_automation_hub_content_v3_collections_read","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/content/{path}/v3/collections/{namespace}/{name}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/content/{path}/v3/collections/{namespace}/{name}/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/content/{path}/v3/collections/{namespace}/{name}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/content/{path}/v3/collections/{namespace}/{name}/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/content/{path}/v3/collections/{namespace}/{name}/ Legacy v3 endpoint.","title":"api_automation_hub_content_v3_collections_read"},{"location":"automation-hub/#api_automation_hub_content_v3_collections_update","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Content-Type\": []string{\"application/json\"}, \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"PATCH\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/content/{path}/v3/collections/{namespace}/{name}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const inputBody = '{}'; const headers = { 'Content-Type':'application/json', 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/content/{path}/v3/collections/{namespace}/{name}/', { method: 'PATCH', body: inputBody, headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Content-Type': 'application/json', 'Accept': 'application/json' } r = requests.patch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/content/{path}/v3/collections/{namespace}/{name}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Content-Type' => 'application/json', 'Accept' => 'application/json' } result = RestClient.patch 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/content/{path}/v3/collections/{namespace}/{name}/', params: { }, headers: headers p JSON.parse(result) PATCH /api/automation-hub/content/{path}/v3/collections/{namespace}/{name}/ Legacy v3 endpoint. Body parameter {} {}","title":"api_automation_hub_content_v3_collections_update"},{"location":"automation-hub/#api_automation_hub_content_v3_collections_delete","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"DELETE\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/content/{path}/v3/collections/{namespace}/{name}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/content/{path}/v3/collections/{namespace}/{name}/', { method: 'DELETE', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.delete('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/content/{path}/v3/collections/{namespace}/{name}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.delete 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/content/{path}/v3/collections/{namespace}/{name}/', params: { }, headers: headers p JSON.parse(result) DELETE /api/automation-hub/content/{path}/v3/collections/{namespace}/{name}/ Legacy v3 endpoint.","title":"api_automation_hub_content_v3_collections_delete"},{"location":"automation-hub/#api_automation_hub_content_v3_collections_versions_list","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/content/{path}/v3/collections/{namespace}/{name}/versions/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/content/{path}/v3/collections/{namespace}/{name}/versions/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/content/{path}/v3/collections/{namespace}/{name}/versions/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/content/{path}/v3/collections/{namespace}/{name}/versions/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/content/{path}/v3/collections/{namespace}/{name}/versions/ Legacy v3 endpoint.","title":"api_automation_hub_content_v3_collections_versions_list"},{"location":"automation-hub/#enumerated-values_10","text":"Parameter Value ordering -_artifacts ordering -authors ordering -collection ordering -content_ptr ordering -contentartifact ordering -contents ordering -dependencies ordering -description ordering -docs_blob ordering -documentation ordering -download_logs ordering -files ordering -group_roles ordering -homepage ordering -is_highest ordering -issues ordering -license ordering -manifest ordering -name ordering -namespace ordering -pk ordering -pulp_created ordering -pulp_id ordering -pulp_labels ordering -pulp_last_updated ordering -pulp_type ordering -repositories ordering -repository ordering -requires_ansible ordering -search_vector ordering -signatures ordering -tags ordering -timestamp_of_interest ordering -upstream_id ordering -user_roles ordering -version ordering -version_memberships ordering _artifacts ordering authors ordering collection ordering content_ptr ordering contentartifact ordering contents ordering dependencies ordering description ordering docs_blob ordering documentation ordering download_logs ordering files ordering group_roles ordering homepage ordering is_highest ordering issues ordering license ordering manifest ordering name ordering namespace ordering pk ordering pulp_created ordering pulp_id ordering pulp_labels ordering pulp_last_updated ordering pulp_type ordering repositories ordering repository ordering requires_ansible ordering search_vector ordering signatures ordering tags ordering timestamp_of_interest ordering upstream_id ordering user_roles ordering version ordering version_memberships Example responses 202 Response { \"meta\": { \"count\": 123 }, \"links\": { \"first\": \"string\", \"previous\": \"string\", \"next\": \"string\", \"last\": \"string\" }, \"data\": [ { \"version\": \"string\", \"href\": \"string\", \"created_at\": \"2019-08-24T14:15:22Z\", \"updated_at\": \"2019-08-24T14:15:22Z\", \"requires_ansible\": \"string\" } ] }","title":"Enumerated Values"},{"location":"automation-hub/#api_automation_hub_content_v3_collections_versions_read","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/content/{path}/v3/collections/{namespace}/{name}/versions/{version}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/content/{path}/v3/collections/{namespace}/{name}/versions/{version}/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/content/{path}/v3/collections/{namespace}/{name}/versions/{version}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/content/{path}/v3/collections/{namespace}/{name}/versions/{version}/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/content/{path}/v3/collections/{namespace}/{name}/versions/{version}/ Legacy v3 endpoint.","title":"api_automation_hub_content_v3_collections_versions_read"},{"location":"automation-hub/#api_automation_hub_content_v3_collections_versions_delete","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"DELETE\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/content/{path}/v3/collections/{namespace}/{name}/versions/{version}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/content/{path}/v3/collections/{namespace}/{name}/versions/{version}/', { method: 'DELETE', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.delete('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/content/{path}/v3/collections/{namespace}/{name}/versions/{version}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.delete 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/content/{path}/v3/collections/{namespace}/{name}/versions/{version}/', params: { }, headers: headers p JSON.parse(result) DELETE /api/automation-hub/content/{path}/v3/collections/{namespace}/{name}/versions/{version}/ Legacy v3 endpoint.","title":"api_automation_hub_content_v3_collections_versions_delete"},{"location":"automation-hub/#api_automation_hub_content_v3_collections_versions_copy_copy_content","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"POST\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/content/{path}/v3/collections/{namespace}/{name}/versions/{version}/copy/{source_path}/{dest_path}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/content/{path}/v3/collections/{namespace}/{name}/versions/{version}/copy/{source_path}/{dest_path}/', { method: 'POST' }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests r = requests.post('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/content/{path}/v3/collections/{namespace}/{name}/versions/{version}/copy/{source_path}/{dest_path}/') print(r.json()) require 'rest-client' require 'json' result = RestClient.post 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/content/{path}/v3/collections/{namespace}/{name}/versions/{version}/copy/{source_path}/{dest_path}/', params: { } p JSON.parse(result) POST /api/automation-hub/content/{path}/v3/collections/{namespace}/{name}/versions/{version}/copy/{source_path}/{dest_path}/ Copy collection version from one repository to another.","title":"api_automation_hub_content_v3_collections_versions_copy_copy_content"},{"location":"automation-hub/#api_automation_hub_content_v3_collections_versions_docs_blob_read","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/content/{path}/v3/collections/{namespace}/{name}/versions/{version}/docs-blob/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/content/{path}/v3/collections/{namespace}/{name}/versions/{version}/docs-blob/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/content/{path}/v3/collections/{namespace}/{name}/versions/{version}/docs-blob/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/content/{path}/v3/collections/{namespace}/{name}/versions/{version}/docs-blob/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/content/{path}/v3/collections/{namespace}/{name}/versions/{version}/docs-blob/ Legacy v3 endpoint.","title":"api_automation_hub_content_v3_collections_versions_docs_blob_read"},{"location":"automation-hub/#api_automation_hub_content_v3_collections_versions_move_move_content","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"POST\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/content/{path}/v3/collections/{namespace}/{name}/versions/{version}/move/{source_path}/{dest_path}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/content/{path}/v3/collections/{namespace}/{name}/versions/{version}/move/{source_path}/{dest_path}/', { method: 'POST' }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests r = requests.post('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/content/{path}/v3/collections/{namespace}/{name}/versions/{version}/move/{source_path}/{dest_path}/') print(r.json()) require 'rest-client' require 'json' result = RestClient.post 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/content/{path}/v3/collections/{namespace}/{name}/versions/{version}/move/{source_path}/{dest_path}/', params: { } p JSON.parse(result) POST /api/automation-hub/content/{path}/v3/collections/{namespace}/{name}/versions/{version}/move/{source_path}/{dest_path}/ Remove content from source repo and add to destination repo. Creates new RepositoryVersion of source repo without content included. Creates new RepositoryVersion of destination repo with content included.","title":"api_automation_hub_content_v3_collections_versions_move_move_content"},{"location":"automation-hub/#api_automation_hub_content_v3_collections_all_get","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/content/{path}/v3/collections/all/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/content/{path}/v3/collections/all/', { method: 'GET' }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/content/{path}/v3/collections/all/') print(r.json()) require 'rest-client' require 'json' result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/content/{path}/v3/collections/all/', params: { } p JSON.parse(result) GET /api/automation-hub/content/{path}/v3/collections/all/","title":"api_automation_hub_content_v3_collections_all_get"},{"location":"automation-hub/#api_automation_hub_content_v3_excludes_read","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/content/{path}/v3/excludes/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/content/{path}/v3/excludes/', { method: 'GET' }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/content/{path}/v3/excludes/') print(r.json()) require 'rest-client' require 'json' result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/content/{path}/v3/excludes/', params: { } p JSON.parse(result) GET /api/automation-hub/content/{path}/v3/excludes/","title":"api_automation_hub_content_v3_excludes_read"},{"location":"automation-hub/#enumerated-values_11","text":"Parameter Value format json format yaml","title":"Enumerated Values"},{"location":"automation-hub/#api_automation_hub_content_v3_imports_collections_read","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/content/{path}/v3/imports/collections/{task}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/content/{path}/v3/imports/collections/{task}/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/content/{path}/v3/imports/collections/{task}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/content/{path}/v3/imports/collections/{task}/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/content/{path}/v3/imports/collections/{task}/ Inspect a collection import Legacy v3 endpoint.","title":"api_automation_hub_content_v3_imports_collections_read"},{"location":"automation-hub/#api_automation_hub_content_v3_plugin_ansible_client_configuration_get","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/content/{path}/v3/plugin/ansible/client-configuration/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/content/{path}/v3/plugin/ansible/client-configuration/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/content/{path}/v3/plugin/ansible/client-configuration/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/content/{path}/v3/plugin/ansible/client-configuration/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/content/{path}/v3/plugin/ansible/client-configuration/ Get the client configs.","title":"api_automation_hub_content_v3_plugin_ansible_client_configuration_get"},{"location":"automation-hub/#api_automation_hub_content_v3_plugin_ansible_content_collections_read","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/content/{path}/v3/plugin/ansible/content/{distro_base_path}/collections/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/content/{path}/v3/plugin/ansible/content/{distro_base_path}/collections/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/content/{path}/v3/plugin/ansible/content/{distro_base_path}/collections/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/content/{path}/v3/plugin/ansible/content/{distro_base_path}/collections/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/content/{path}/v3/plugin/ansible/content/{distro_base_path}/collections/ ViewSet for Repository Metadata.","title":"api_automation_hub_content_v3_plugin_ansible_content_collections_read"},{"location":"automation-hub/#api_automation_hub_content_v3_plugin_ansible_content_collections_all_collections_list","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/content/{path}/v3/plugin/ansible/content/{distro_base_path}/collections/all-collections/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/content/{path}/v3/plugin/ansible/content/{distro_base_path}/collections/all-collections/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/content/{path}/v3/plugin/ansible/content/{distro_base_path}/collections/all-collections/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/content/{path}/v3/plugin/ansible/content/{distro_base_path}/collections/all-collections/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/content/{path}/v3/plugin/ansible/content/{distro_base_path}/collections/all-collections/ Unpaginated ViewSet for Collections.","title":"api_automation_hub_content_v3_plugin_ansible_content_collections_all_collections_list"},{"location":"automation-hub/#enumerated-values_12","text":"Parameter Value ordering -group_roles ordering -name ordering -namespace ordering -pk ordering -pulp_created ordering -pulp_id ordering -pulp_labels ordering -pulp_last_updated ordering -synclist ordering -user_roles ordering -versions ordering group_roles ordering name ordering namespace ordering pk ordering pulp_created ordering pulp_id ordering pulp_labels ordering pulp_last_updated ordering synclist ordering user_roles ordering versions Example responses 200 Response [ { \"href\": \"string\", \"namespace\": \"string\", \"name\": \"string\", \"deprecated\": true, \"versions_url\": \"string\", \"highest_version\": {}, \"created_at\": \"2019-08-24T14:15:22Z\", \"updated_at\": \"2019-08-24T14:15:22Z\" } ]","title":"Enumerated Values"},{"location":"automation-hub/#api_automation_hub_content_v3_plugin_ansible_content_collections_all_versions_list","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/content/{path}/v3/plugin/ansible/content/{distro_base_path}/collections/all-versions/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/content/{path}/v3/plugin/ansible/content/{distro_base_path}/collections/all-versions/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/content/{path}/v3/plugin/ansible/content/{distro_base_path}/collections/all-versions/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/content/{path}/v3/plugin/ansible/content/{distro_base_path}/collections/all-versions/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/content/{path}/v3/plugin/ansible/content/{distro_base_path}/collections/all-versions/ Returns paginated CollectionVersions list.","title":"api_automation_hub_content_v3_plugin_ansible_content_collections_all_versions_list"},{"location":"automation-hub/#api_automation_hub_content_v3_plugin_ansible_content_collections_artifacts_download","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/content/{path}/v3/plugin/ansible/content/{distro_base_path}/collections/artifacts/{filename}\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/content/{path}/v3/plugin/ansible/content/{distro_base_path}/collections/artifacts/{filename}', { method: 'GET' }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/content/{path}/v3/plugin/ansible/content/{distro_base_path}/collections/artifacts/{filename}') print(r.json()) require 'rest-client' require 'json' result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/content/{path}/v3/plugin/ansible/content/{distro_base_path}/collections/artifacts/{filename}', params: { } p JSON.parse(result) GET /api/automation-hub/content/{path}/v3/plugin/ansible/content/{distro_base_path}/collections/artifacts/{filename}","title":"api_automation_hub_content_v3_plugin_ansible_content_collections_artifacts_download"},{"location":"automation-hub/#api_automation_hub_content_v3_plugin_ansible_content_collections_index_list","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/content/{path}/v3/plugin/ansible/content/{distro_base_path}/collections/index/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/content/{path}/v3/plugin/ansible/content/{distro_base_path}/collections/index/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/content/{path}/v3/plugin/ansible/content/{distro_base_path}/collections/index/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/content/{path}/v3/plugin/ansible/content/{distro_base_path}/collections/index/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/content/{path}/v3/plugin/ansible/content/{distro_base_path}/collections/index/ ViewSet for Collections.","title":"api_automation_hub_content_v3_plugin_ansible_content_collections_index_list"},{"location":"automation-hub/#enumerated-values_13","text":"Parameter Value ordering -group_roles ordering -name ordering -namespace ordering -pk ordering -pulp_created ordering -pulp_id ordering -pulp_labels ordering -pulp_last_updated ordering -synclist ordering -user_roles ordering -versions ordering group_roles ordering name ordering namespace ordering pk ordering pulp_created ordering pulp_id ordering pulp_labels ordering pulp_last_updated ordering synclist ordering user_roles ordering versions Example responses 200 Response { \"meta\": { \"count\": 123 }, \"links\": { \"first\": \"string\", \"previous\": \"string\", \"next\": \"string\", \"last\": \"string\" }, \"data\": [ { \"href\": \"string\", \"namespace\": \"string\", \"name\": \"string\", \"deprecated\": true, \"versions_url\": \"string\", \"highest_version\": {}, \"created_at\": \"2019-08-24T14:15:22Z\", \"updated_at\": \"2019-08-24T14:15:22Z\" } ] }","title":"Enumerated Values"},{"location":"automation-hub/#api_automation_hub_content_v3_plugin_ansible_content_collections_index_read","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/content/{path}/v3/plugin/ansible/content/{distro_base_path}/collections/index/{namespace}/{name}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/content/{path}/v3/plugin/ansible/content/{distro_base_path}/collections/index/{namespace}/{name}/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/content/{path}/v3/plugin/ansible/content/{distro_base_path}/collections/index/{namespace}/{name}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/content/{path}/v3/plugin/ansible/content/{distro_base_path}/collections/index/{namespace}/{name}/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/content/{path}/v3/plugin/ansible/content/{distro_base_path}/collections/index/{namespace}/{name}/ ViewSet for Collections.","title":"api_automation_hub_content_v3_plugin_ansible_content_collections_index_read"},{"location":"automation-hub/#api_automation_hub_content_v3_plugin_ansible_content_collections_index_update","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Content-Type\": []string{\"application/json\"}, \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"PATCH\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/content/{path}/v3/plugin/ansible/content/{distro_base_path}/collections/index/{namespace}/{name}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const inputBody = '{}'; const headers = { 'Content-Type':'application/json', 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/content/{path}/v3/plugin/ansible/content/{distro_base_path}/collections/index/{namespace}/{name}/', { method: 'PATCH', body: inputBody, headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Content-Type': 'application/json', 'Accept': 'application/json' } r = requests.patch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/content/{path}/v3/plugin/ansible/content/{distro_base_path}/collections/index/{namespace}/{name}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Content-Type' => 'application/json', 'Accept' => 'application/json' } result = RestClient.patch 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/content/{path}/v3/plugin/ansible/content/{distro_base_path}/collections/index/{namespace}/{name}/', params: { }, headers: headers p JSON.parse(result) PATCH /api/automation-hub/content/{path}/v3/plugin/ansible/content/{distro_base_path}/collections/index/{namespace}/{name}/ Trigger an asynchronous update task Body parameter {} {}","title":"api_automation_hub_content_v3_plugin_ansible_content_collections_index_update"},{"location":"automation-hub/#api_automation_hub_content_v3_plugin_ansible_content_collections_index_delete","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"DELETE\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/content/{path}/v3/plugin/ansible/content/{distro_base_path}/collections/index/{namespace}/{name}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/content/{path}/v3/plugin/ansible/content/{distro_base_path}/collections/index/{namespace}/{name}/', { method: 'DELETE', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.delete('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/content/{path}/v3/plugin/ansible/content/{distro_base_path}/collections/index/{namespace}/{name}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.delete 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/content/{path}/v3/plugin/ansible/content/{distro_base_path}/collections/index/{namespace}/{name}/', params: { }, headers: headers p JSON.parse(result) DELETE /api/automation-hub/content/{path}/v3/plugin/ansible/content/{distro_base_path}/collections/index/{namespace}/{name}/ Trigger an asynchronous delete task","title":"api_automation_hub_content_v3_plugin_ansible_content_collections_index_delete"},{"location":"automation-hub/#api_automation_hub_content_v3_plugin_ansible_content_collections_index_versions_list","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/content/{path}/v3/plugin/ansible/content/{distro_base_path}/collections/index/{namespace}/{name}/versions/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/content/{path}/v3/plugin/ansible/content/{distro_base_path}/collections/index/{namespace}/{name}/versions/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/content/{path}/v3/plugin/ansible/content/{distro_base_path}/collections/index/{namespace}/{name}/versions/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/content/{path}/v3/plugin/ansible/content/{distro_base_path}/collections/index/{namespace}/{name}/versions/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/content/{path}/v3/plugin/ansible/content/{distro_base_path}/collections/index/{namespace}/{name}/versions/ Returns paginated CollectionVersions list.","title":"api_automation_hub_content_v3_plugin_ansible_content_collections_index_versions_list"},{"location":"automation-hub/#enumerated-values_14","text":"Parameter Value ordering -_artifacts ordering -authors ordering -collection ordering -content_ptr ordering -contentartifact ordering -contents ordering -dependencies ordering -description ordering -docs_blob ordering -documentation ordering -download_logs ordering -files ordering -group_roles ordering -homepage ordering -is_highest ordering -issues ordering -license ordering -manifest ordering -name ordering -namespace ordering -pk ordering -pulp_created ordering -pulp_id ordering -pulp_labels ordering -pulp_last_updated ordering -pulp_type ordering -repositories ordering -repository ordering -requires_ansible ordering -search_vector ordering -signatures ordering -tags ordering -timestamp_of_interest ordering -upstream_id ordering -user_roles ordering -version ordering -version_memberships ordering _artifacts ordering authors ordering collection ordering content_ptr ordering contentartifact ordering contents ordering dependencies ordering description ordering docs_blob ordering documentation ordering download_logs ordering files ordering group_roles ordering homepage ordering is_highest ordering issues ordering license ordering manifest ordering name ordering namespace ordering pk ordering pulp_created ordering pulp_id ordering pulp_labels ordering pulp_last_updated ordering pulp_type ordering repositories ordering repository ordering requires_ansible ordering search_vector ordering signatures ordering tags ordering timestamp_of_interest ordering upstream_id ordering user_roles ordering version ordering version_memberships Example responses 202 Response { \"meta\": { \"count\": 123 }, \"links\": { \"first\": \"string\", \"previous\": \"string\", \"next\": \"string\", \"last\": \"string\" }, \"data\": [ { \"version\": \"string\", \"href\": \"string\", \"created_at\": \"2019-08-24T14:15:22Z\", \"updated_at\": \"2019-08-24T14:15:22Z\", \"requires_ansible\": \"string\" } ] }","title":"Enumerated Values"},{"location":"automation-hub/#api_automation_hub_content_v3_plugin_ansible_content_collections_index_versions_read","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/content/{path}/v3/plugin/ansible/content/{distro_base_path}/collections/index/{namespace}/{name}/versions/{version}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/content/{path}/v3/plugin/ansible/content/{distro_base_path}/collections/index/{namespace}/{name}/versions/{version}/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/content/{path}/v3/plugin/ansible/content/{distro_base_path}/collections/index/{namespace}/{name}/versions/{version}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/content/{path}/v3/plugin/ansible/content/{distro_base_path}/collections/index/{namespace}/{name}/versions/{version}/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/content/{path}/v3/plugin/ansible/content/{distro_base_path}/collections/index/{namespace}/{name}/versions/{version}/ Returns a CollectionVersion object.","title":"api_automation_hub_content_v3_plugin_ansible_content_collections_index_versions_read"},{"location":"automation-hub/#api_automation_hub_content_v3_plugin_ansible_content_collections_index_versions_delete","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"DELETE\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/content/{path}/v3/plugin/ansible/content/{distro_base_path}/collections/index/{namespace}/{name}/versions/{version}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/content/{path}/v3/plugin/ansible/content/{distro_base_path}/collections/index/{namespace}/{name}/versions/{version}/', { method: 'DELETE', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.delete('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/content/{path}/v3/plugin/ansible/content/{distro_base_path}/collections/index/{namespace}/{name}/versions/{version}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.delete 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/content/{path}/v3/plugin/ansible/content/{distro_base_path}/collections/index/{namespace}/{name}/versions/{version}/', params: { }, headers: headers p JSON.parse(result) DELETE /api/automation-hub/content/{path}/v3/plugin/ansible/content/{distro_base_path}/collections/index/{namespace}/{name}/versions/{version}/ Trigger an asynchronous delete task","title":"api_automation_hub_content_v3_plugin_ansible_content_collections_index_versions_delete"},{"location":"automation-hub/#api_automation_hub_content_v3_plugin_ansible_content_collections_index_versions_docs_blob_read","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/content/{path}/v3/plugin/ansible/content/{distro_base_path}/collections/index/{namespace}/{name}/versions/{version}/docs-blob/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/content/{path}/v3/plugin/ansible/content/{distro_base_path}/collections/index/{namespace}/{name}/versions/{version}/docs-blob/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/content/{path}/v3/plugin/ansible/content/{distro_base_path}/collections/index/{namespace}/{name}/versions/{version}/docs-blob/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/content/{path}/v3/plugin/ansible/content/{distro_base_path}/collections/index/{namespace}/{name}/versions/{version}/docs-blob/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/content/{path}/v3/plugin/ansible/content/{distro_base_path}/collections/index/{namespace}/{name}/versions/{version}/docs-blob/ Returns a CollectionVersion object.","title":"api_automation_hub_content_v3_plugin_ansible_content_collections_index_versions_docs_blob_read"},{"location":"automation-hub/#api_automation_hub_content_v3_plugin_ansible_imports_collections_read","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/content/{path}/v3/plugin/ansible/imports/collections/{task}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/content/{path}/v3/plugin/ansible/imports/collections/{task}/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/content/{path}/v3/plugin/ansible/imports/collections/{task}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/content/{path}/v3/plugin/ansible/imports/collections/{task}/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/content/{path}/v3/plugin/ansible/imports/collections/{task}/ Inspect a collection import Returns a CollectionImport object.","title":"api_automation_hub_content_v3_plugin_ansible_imports_collections_read"},{"location":"automation-hub/#api_automation_hub_content_v3_sync_sync","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"POST\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/content/{path}/v3/sync/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/content/{path}/v3/sync/', { method: 'POST', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.post('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/content/{path}/v3/sync/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.post 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/content/{path}/v3/sync/', params: { }, headers: headers p JSON.parse(result) POST /api/automation-hub/content/{path}/v3/sync/ Trigger an asynchronous sync task","title":"api_automation_hub_content_v3_sync_sync"},{"location":"automation-hub/#api_automation_hub_content_v3_sync_config_read","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/content/{path}/v3/sync/config/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/content/{path}/v3/sync/config/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/content/{path}/v3/sync/config/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/content/{path}/v3/sync/config/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/content/{path}/v3/sync/config/","title":"api_automation_hub_content_v3_sync_config_read"},{"location":"automation-hub/#api_automation_hub_content_v3_sync_config_update","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Content-Type\": []string{\"application/json\"}, \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"PUT\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/content/{path}/v3/sync/config/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const inputBody = '{ \"url\": \"string\", \"auth_url\": \"string\", \"token\": \"string\", \"policy\": \"immediate\", \"requirements_file\": \"string\", \"created_at\": \"2019-08-24T14:15:22Z\", \"updated_at\": \"2019-08-24T14:15:22Z\", \"username\": \"string\", \"password\": \"string\", \"tls_validation\": true, \"client_key\": \"string\", \"client_cert\": \"string\", \"ca_cert\": \"string\", \"download_concurrency\": 1, \"proxy_url\": \"string\", \"proxy_username\": \"string\", \"proxy_password\": \"string\", \"rate_limit\": 0, \"signed_only\": false }'; const headers = { 'Content-Type':'application/json', 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/content/{path}/v3/sync/config/', { method: 'PUT', body: inputBody, headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Content-Type': 'application/json', 'Accept': 'application/json' } r = requests.put('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/content/{path}/v3/sync/config/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Content-Type' => 'application/json', 'Accept' => 'application/json' } result = RestClient.put 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/content/{path}/v3/sync/config/', params: { }, headers: headers p JSON.parse(result) PUT /api/automation-hub/content/{path}/v3/sync/config/ Body parameter { \"url\": \"string\", \"auth_url\": \"string\", \"token\": \"string\", \"policy\": \"immediate\", \"requirements_file\": \"string\", \"created_at\": \"2019-08-24T14:15:22Z\", \"updated_at\": \"2019-08-24T14:15:22Z\", \"username\": \"string\", \"password\": \"string\", \"tls_validation\": true, \"client_key\": \"string\", \"client_cert\": \"string\", \"ca_cert\": \"string\", \"download_concurrency\": 1, \"proxy_url\": \"string\", \"proxy_username\": \"string\", \"proxy_password\": \"string\", \"rate_limit\": 0, \"signed_only\": false } url: string auth_url: string token: string policy: immediate requirements_file: string created_at: 2019-08-24T14:15:22Z updated_at: 2019-08-24T14:15:22Z username: string password: string tls_validation: true client_key: string client_cert: string ca_cert: string download_concurrency: 1 proxy_url: string proxy_username: string proxy_password: string rate_limit: 0 signed_only: false","title":"api_automation_hub_content_v3_sync_config_update"},{"location":"automation-hub/#api_automation-hub_contentpath_v3_tasks_tasks_list","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/content/{path}/v3/tasks/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/content/{path}/v3/tasks/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/content/{path}/v3/tasks/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/content/{path}/v3/tasks/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/content/{path}/v3/tasks/ List tasks A customized named ModelViewSet that knows how to register itself with the Pulp API router. This viewset is discoverable by its name. \"Normal\" Django Models and Master/Detail models are supported by the register_with method. Attributes: lookup_field (str): The name of the field by which an object should be looked up, in addition to any parent lookups if this ViewSet is nested. Defaults to 'pk' endpoint_name (str): The name of the final path segment that should identify the ViewSet's collection endpoint. nest_prefix (str): Optional prefix under which this ViewSet should be nested. This must correspond to the \"parent_prefix\" of a router with rest_framework_nested.NestedMixin. None indicates this ViewSet should not be nested. parent_lookup_kwargs (dict): Optional mapping of key names that would appear in self.kwargs to django model filter expressions that can be used with the corresponding value from self.kwargs, used only by a nested ViewSet to filter based on the parent object's identity. schema (DefaultSchema): The schema class to use by default in a viewset.","title":"api_automation-hub_content{path}_v3_tasks_tasks_list"},{"location":"automation-hub/#enumerated-values_15","text":"Parameter Value ordering -args ordering -child_tasks ordering -created_resources ordering -error ordering -export ordering -finished_at ordering -group_roles ordering -import ordering -kwargs ordering -logging_cid ordering -name ordering -parent_task ordering -pk ordering -progress_reports ordering -pulp_created ordering -pulp_id ordering -pulp_labels ordering -pulp_last_updated ordering -reserved_resources_record ordering -started_at ordering -state ordering -task_group ordering -taskschedule ordering -user_roles ordering -worker ordering args ordering child_tasks ordering created_resources ordering error ordering export ordering finished_at ordering group_roles ordering import ordering kwargs ordering logging_cid ordering name ordering parent_task ordering pk ordering progress_reports ordering pulp_created ordering pulp_id ordering pulp_labels ordering pulp_last_updated ordering reserved_resources_record ordering started_at ordering state ordering task_group ordering taskschedule ordering user_roles ordering worker state canceled state canceling state completed state failed state running state skipped state waiting Example responses 200 Response { \"meta\": { \"count\": 123 }, \"links\": { \"first\": \"string\", \"previous\": \"string\", \"next\": \"string\", \"last\": \"string\" }, \"data\": [ { \"pulp_id\": \"f3ad2d41-3c12-4e29-ba19-4d3927e49b47\", \"name\": \"string\", \"state\": \"string\", \"started_at\": \"2019-08-24T14:15:22Z\", \"finished_at\": \"2019-08-24T14:15:22Z\", \"href\": \"string\" } ] }","title":"Enumerated Values"},{"location":"automation-hub/#api_automation-hub_contentpathv3_taskspulp_id_tasks_read","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/content/{path}/v3/tasks/{pulp_id}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/content/{path}/v3/tasks/{pulp_id}/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/content/{path}/v3/tasks/{pulp_id}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/content/{path}/v3/tasks/{pulp_id}/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/content/{path}/v3/tasks/{pulp_id}/ Inspect a task A customized named ModelViewSet that knows how to register itself with the Pulp API router. This viewset is discoverable by its name. \"Normal\" Django Models and Master/Detail models are supported by the register_with method. Attributes: lookup_field (str): The name of the field by which an object should be looked up, in addition to any parent lookups if this ViewSet is nested. Defaults to 'pk' endpoint_name (str): The name of the final path segment that should identify the ViewSet's collection endpoint. nest_prefix (str): Optional prefix under which this ViewSet should be nested. This must correspond to the \"parent_prefix\" of a router with rest_framework_nested.NestedMixin. None indicates this ViewSet should not be nested. parent_lookup_kwargs (dict): Optional mapping of key names that would appear in self.kwargs to django model filter expressions that can be used with the corresponding value from self.kwargs, used only by a nested ViewSet to filter based on the parent object's identity. schema (DefaultSchema): The schema class to use by default in a viewset.","title":"api_automation-hub_content{path}v3_tasks{pulp_id}_tasks_read"},{"location":"automation-hub/#_api_automation-hub_pulp_api_v3_tasks_tasks_list","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/tasks/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/tasks/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/tasks/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/tasks/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/pulp/api/v3/tasks/ List tasks A customized named ModelViewSet that knows how to register itself with the Pulp API router. This viewset is discoverable by its name. \"Normal\" Django Models and Master/Detail models are supported by the register_with method. Attributes: lookup_field (str): The name of the field by which an object should be looked up, in addition to any parent lookups if this ViewSet is nested. Defaults to 'pk' endpoint_name (str): The name of the final path segment that should identify the ViewSet's collection endpoint. nest_prefix (str): Optional prefix under which this ViewSet should be nested. This must correspond to the \"parent_prefix\" of a router with rest_framework_nested.NestedMixin. None indicates this ViewSet should not be nested. parent_lookup_kwargs (dict): Optional mapping of key names that would appear in self.kwargs to django model filter expressions that can be used with the corresponding value from self.kwargs, used only by a nested ViewSet to filter based on the parent object's identity. schema (DefaultSchema): The schema class to use by default in a viewset.","title":"_api_automation-hub_pulp_api_v3_tasks_tasks_list"},{"location":"automation-hub/#enumerated-values_16","text":"Parameter Value ordering -args ordering -child_tasks ordering -created_resources ordering -error ordering -export ordering -finished_at ordering -group_roles ordering -import ordering -kwargs ordering -logging_cid ordering -name ordering -parent_task ordering -pk ordering -progress_reports ordering -pulp_created ordering -pulp_id ordering -pulp_labels ordering -pulp_last_updated ordering -reserved_resources_record ordering -started_at ordering -state ordering -task_group ordering -taskschedule ordering -user_roles ordering -worker ordering args ordering child_tasks ordering created_resources ordering error ordering export ordering finished_at ordering group_roles ordering import ordering kwargs ordering logging_cid ordering name ordering parent_task ordering pk ordering progress_reports ordering pulp_created ordering pulp_id ordering pulp_labels ordering pulp_last_updated ordering reserved_resources_record ordering started_at ordering state ordering task_group ordering taskschedule ordering user_roles ordering worker state canceled state canceling state completed state failed state running state skipped state waiting Example responses 200 Response { \"count\": 123, \"next\": \"http://api.example.org/accounts/?offset=400&limit=100\", \"previous\": \"http://api.example.org/accounts/?offset=200&limit=100\", \"results\": [ { \"pulp_id\": \"f3ad2d41-3c12-4e29-ba19-4d3927e49b47\", \"name\": \"string\", \"created_at\": \"2019-08-24T14:15:22Z\", \"updated_at\": \"2019-08-24T14:15:22Z\", \"finished_at\": \"2019-08-24T14:15:22Z\", \"started_at\": \"2019-08-24T14:15:22Z\", \"state\": \"string\", \"error\": {}, \"worker\": {}, \"parent_task\": \"a47d3c72-d323-4ab8-b986-8424d3a63720\", \"child_tasks\": [ \"497f6eca-6276-4993-bfeb-53cbbbba6f08\" ], \"progress_reports\": [ { \"message\": \"string\", \"code\": \"string\", \"state\": \"string\", \"total\": 0, \"done\": 0, \"suffix\": \"string\" } ] } ] }","title":"Enumerated Values"},{"location":"automation-hub/#api_automation-hub_pulp_api_v3_taskspulp_id_tasks_read","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/tasks/{pulp_id}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/tasks/{pulp_id}/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/tasks/{pulp_id}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/tasks/{pulp_id}/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/pulp/api/v3/tasks/{pulp_id}/ Inspect a task A customized named ModelViewSet that knows how to register itself with the Pulp API router. This viewset is discoverable by its name. \"Normal\" Django Models and Master/Detail models are supported by the register_with method. Attributes: lookup_field (str): The name of the field by which an object should be looked up, in addition to any parent lookups if this ViewSet is nested. Defaults to 'pk' endpoint_name (str): The name of the final path segment that should identify the ViewSet's collection endpoint. nest_prefix (str): Optional prefix under which this ViewSet should be nested. This must correspond to the \"parent_prefix\" of a router with rest_framework_nested.NestedMixin. None indicates this ViewSet should not be nested. parent_lookup_kwargs (dict): Optional mapping of key names that would appear in self.kwargs to django model filter expressions that can be used with the corresponding value from self.kwargs, used only by a nested ViewSet to filter based on the parent object's identity. schema (DefaultSchema): The schema class to use by default in a viewset.","title":"api_automation-hub_pulp_api_v3_tasks{pulp_id}_tasks_read"},{"location":"automation-hub/#tasks_cancel","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Content-Type\": []string{\"application/json\"}, \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"PATCH\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/tasks/{pulp_id}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const inputBody = '{ \"state\": \"string\" }'; const headers = { 'Content-Type':'application/json', 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/tasks/{pulp_id}/', { method: 'PATCH', body: inputBody, headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Content-Type': 'application/json', 'Accept': 'application/json' } r = requests.patch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/tasks/{pulp_id}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Content-Type' => 'application/json', 'Accept' => 'application/json' } result = RestClient.patch 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/tasks/{pulp_id}/', params: { }, headers: headers p JSON.parse(result) PATCH /api/automation-hub/pulp/api/v3/tasks/{pulp_id}/ Cancel a task This operation cancels a task. Body parameter { \"state\": \"string\" } state: string","title":"tasks_cancel"},{"location":"automation-hub/#tasks_delete","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"DELETE\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/tasks/{pulp_id}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/tasks/{pulp_id}/', { method: 'DELETE' }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests r = requests.delete('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/tasks/{pulp_id}/') print(r.json()) require 'rest-client' require 'json' result = RestClient.delete 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/tasks/{pulp_id}/', params: { } p JSON.parse(result) DELETE /api/automation-hub/pulp/api/v3/tasks/{pulp_id}/ Delete a task A customized named ModelViewSet that knows how to register itself with the Pulp API router. This viewset is discoverable by its name. \"Normal\" Django Models and Master/Detail models are supported by the register_with method. Attributes: lookup_field (str): The name of the field by which an object should be looked up, in addition to any parent lookups if this ViewSet is nested. Defaults to 'pk' endpoint_name (str): The name of the final path segment that should identify the ViewSet's collection endpoint. nest_prefix (str): Optional prefix under which this ViewSet should be nested. This must correspond to the \"parent_prefix\" of a router with rest_framework_nested.NestedMixin. None indicates this ViewSet should not be nested. parent_lookup_kwargs (dict): Optional mapping of key names that would appear in self.kwargs to django model filter expressions that can be used with the corresponding value from self.kwargs, used only by a nested ViewSet to filter based on the parent object's identity. schema (DefaultSchema): The schema class to use by default in a viewset.","title":"tasks_delete"},{"location":"automation-hub/#tasks_add_role","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Content-Type\": []string{\"application/json\"}, \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"POST\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/tasks/{pulp_id}/add_role/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const inputBody = '{ \"users\": [], \"groups\": [], \"role\": \"string\" }'; const headers = { 'Content-Type':'application/json', 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/tasks/{pulp_id}/add_role/', { method: 'POST', body: inputBody, headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Content-Type': 'application/json', 'Accept': 'application/json' } r = requests.post('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/tasks/{pulp_id}/add_role/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Content-Type' => 'application/json', 'Accept' => 'application/json' } result = RestClient.post 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/tasks/{pulp_id}/add_role/', params: { }, headers: headers p JSON.parse(result) POST /api/automation-hub/pulp/api/v3/tasks/{pulp_id}/add_role/ Add a role for this object to users/groups. Body parameter { \"users\": [], \"groups\": [], \"role\": \"string\" } users: [] groups: [] role: string","title":"tasks_add_role"},{"location":"automation-hub/#tasks_list_roles","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/tasks/{pulp_id}/list_roles/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/tasks/{pulp_id}/list_roles/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/tasks/{pulp_id}/list_roles/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/tasks/{pulp_id}/list_roles/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/pulp/api/v3/tasks/{pulp_id}/list_roles/ List roles assigned to this object.","title":"tasks_list_roles"},{"location":"automation-hub/#tasks_my_permissions","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/tasks/{pulp_id}/my_permissions/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/tasks/{pulp_id}/my_permissions/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/tasks/{pulp_id}/my_permissions/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/tasks/{pulp_id}/my_permissions/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/pulp/api/v3/tasks/{pulp_id}/my_permissions/ List permissions available to the current user on this object.","title":"tasks_my_permissions"},{"location":"automation-hub/#tasks_remove_role","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Content-Type\": []string{\"application/json\"}, \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"POST\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/tasks/{pulp_id}/remove_role/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const inputBody = '{ \"users\": [], \"groups\": [], \"role\": \"string\" }'; const headers = { 'Content-Type':'application/json', 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/tasks/{pulp_id}/remove_role/', { method: 'POST', body: inputBody, headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Content-Type': 'application/json', 'Accept': 'application/json' } r = requests.post('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/tasks/{pulp_id}/remove_role/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Content-Type' => 'application/json', 'Accept' => 'application/json' } result = RestClient.post 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/tasks/{pulp_id}/remove_role/', params: { }, headers: headers p JSON.parse(result) POST /api/automation-hub/pulp/api/v3/tasks/{pulp_id}/remove_role/ Remove a role for this object from users/groups. Body parameter { \"users\": [], \"groups\": [], \"role\": \"string\" } users: [] groups: [] role: string","title":"tasks_remove_role"},{"location":"automation-hub/#tasks_purge","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Content-Type\": []string{\"application/json\"}, \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"POST\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/tasks/purge/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const inputBody = '{ \"finished_before\": \"2022-10-16\", \"states\": [ \"completed\" ] }'; const headers = { 'Content-Type':'application/json', 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/tasks/purge/', { method: 'POST', body: inputBody, headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Content-Type': 'application/json', 'Accept': 'application/json' } r = requests.post('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/tasks/purge/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Content-Type' => 'application/json', 'Accept' => 'application/json' } result = RestClient.post 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/tasks/purge/', params: { }, headers: headers p JSON.parse(result) POST /api/automation-hub/pulp/api/v3/tasks/purge/ Purge Completed Tasks Trigger an asynchronous task that deletes completed tasks that finished prior to a specified timestamp (tech-preview, may change in the future). Body parameter { \"finished_before\": \"2022-10-16\", \"states\": [ \"completed\" ] } finished_before: 2022-10-16 states: - completed","title":"tasks_purge"},{"location":"automation-hub/#_api_automation-hub_v3_tasks_tasks_list","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/tasks/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/tasks/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/tasks/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/tasks/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/v3/tasks/ List tasks A customized named ModelViewSet that knows how to register itself with the Pulp API router. This viewset is discoverable by its name. \"Normal\" Django Models and Master/Detail models are supported by the register_with method. Attributes: lookup_field (str): The name of the field by which an object should be looked up, in addition to any parent lookups if this ViewSet is nested. Defaults to 'pk' endpoint_name (str): The name of the final path segment that should identify the ViewSet's collection endpoint. nest_prefix (str): Optional prefix under which this ViewSet should be nested. This must correspond to the \"parent_prefix\" of a router with rest_framework_nested.NestedMixin. None indicates this ViewSet should not be nested. parent_lookup_kwargs (dict): Optional mapping of key names that would appear in self.kwargs to django model filter expressions that can be used with the corresponding value from self.kwargs, used only by a nested ViewSet to filter based on the parent object's identity. schema (DefaultSchema): The schema class to use by default in a viewset.","title":"_api_automation-hub_v3_tasks_tasks_list"},{"location":"automation-hub/#enumerated-values_17","text":"Parameter Value ordering -args ordering -child_tasks ordering -created_resources ordering -error ordering -export ordering -finished_at ordering -group_roles ordering -import ordering -kwargs ordering -logging_cid ordering -name ordering -parent_task ordering -pk ordering -progress_reports ordering -pulp_created ordering -pulp_id ordering -pulp_labels ordering -pulp_last_updated ordering -reserved_resources_record ordering -started_at ordering -state ordering -task_group ordering -taskschedule ordering -user_roles ordering -worker ordering args ordering child_tasks ordering created_resources ordering error ordering export ordering finished_at ordering group_roles ordering import ordering kwargs ordering logging_cid ordering name ordering parent_task ordering pk ordering progress_reports ordering pulp_created ordering pulp_id ordering pulp_labels ordering pulp_last_updated ordering reserved_resources_record ordering started_at ordering state ordering task_group ordering taskschedule ordering user_roles ordering worker state canceled state canceling state completed state failed state running state skipped state waiting Example responses 200 Response { \"meta\": { \"count\": 123 }, \"links\": { \"first\": \"string\", \"previous\": \"string\", \"next\": \"string\", \"last\": \"string\" }, \"data\": [ { \"pulp_id\": \"f3ad2d41-3c12-4e29-ba19-4d3927e49b47\", \"name\": \"string\", \"state\": \"string\", \"started_at\": \"2019-08-24T14:15:22Z\", \"finished_at\": \"2019-08-24T14:15:22Z\", \"href\": \"string\" } ] }","title":"Enumerated Values"},{"location":"automation-hub/#api_automation-hub_v3_taskspulp_id_tasks_read","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/tasks/{pulp_id}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/tasks/{pulp_id}/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/tasks/{pulp_id}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/tasks/{pulp_id}/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/v3/tasks/{pulp_id}/ Inspect a task A customized named ModelViewSet that knows how to register itself with the Pulp API router. This viewset is discoverable by its name. \"Normal\" Django Models and Master/Detail models are supported by the register_with method. Attributes: lookup_field (str): The name of the field by which an object should be looked up, in addition to any parent lookups if this ViewSet is nested. Defaults to 'pk' endpoint_name (str): The name of the final path segment that should identify the ViewSet's collection endpoint. nest_prefix (str): Optional prefix under which this ViewSet should be nested. This must correspond to the \"parent_prefix\" of a router with rest_framework_nested.NestedMixin. None indicates this ViewSet should not be nested. parent_lookup_kwargs (dict): Optional mapping of key names that would appear in self.kwargs to django model filter expressions that can be used with the corresponding value from self.kwargs, used only by a nested ViewSet to filter based on the parent object's identity. schema (DefaultSchema): The schema class to use by default in a viewset.","title":"api_automation-hub_v3_tasks{pulp_id}_tasks_read"},{"location":"automation-hub/#access_policies_list","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/access_policies/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/access_policies/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/access_policies/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/access_policies/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/pulp/api/v3/access_policies/ List access policys ViewSet for AccessPolicy. NOTE: This API endpoint is in \"tech preview\" and subject to change","title":"access_policies_list"},{"location":"automation-hub/#enumerated-values_18","text":"Parameter Value ordering -creation_hooks ordering -customized ordering -group_roles ordering -pk ordering -pulp_created ordering -pulp_id ordering -pulp_labels ordering -pulp_last_updated ordering -queryset_scoping ordering -statements ordering -user_roles ordering -viewset_name ordering creation_hooks ordering customized ordering group_roles ordering pk ordering pulp_created ordering pulp_id ordering pulp_labels ordering pulp_last_updated ordering queryset_scoping ordering statements ordering user_roles ordering viewset_name Example responses 200 Response { \"count\": 123, \"next\": \"http://api.example.org/accounts/?offset=400&limit=100\", \"previous\": \"http://api.example.org/accounts/?offset=200&limit=100\", \"results\": [ { \"pulp_href\": \"http://example.com\", \"pulp_created\": \"2019-08-24T14:15:22Z\", \"permissions_assignment\": [ {} ], \"creation_hooks\": [ {} ], \"statements\": [ {} ], \"viewset_name\": \"string\", \"customized\": true, \"queryset_scoping\": {} } ] }","title":"Enumerated Values"},{"location":"automation-hub/#access_policies_read","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/access_policies/{pulp_id}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/access_policies/{pulp_id}/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/access_policies/{pulp_id}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/access_policies/{pulp_id}/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/pulp/api/v3/access_policies/{pulp_id}/ Inspect an access policy ViewSet for AccessPolicy. NOTE: This API endpoint is in \"tech preview\" and subject to change","title":"access_policies_read"},{"location":"automation-hub/#access_policies_update","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Content-Type\": []string{\"application/json\"}, \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"PUT\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/access_policies/{pulp_id}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const inputBody = '{ \"permissions_assignment\": [ {} ], \"creation_hooks\": [ {} ], \"statements\": [ {} ], \"queryset_scoping\": {} }'; const headers = { 'Content-Type':'application/json', 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/access_policies/{pulp_id}/', { method: 'PUT', body: inputBody, headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Content-Type': 'application/json', 'Accept': 'application/json' } r = requests.put('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/access_policies/{pulp_id}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Content-Type' => 'application/json', 'Accept' => 'application/json' } result = RestClient.put 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/access_policies/{pulp_id}/', params: { }, headers: headers p JSON.parse(result) PUT /api/automation-hub/pulp/api/v3/access_policies/{pulp_id}/ Update an access policy ViewSet for AccessPolicy. NOTE: This API endpoint is in \"tech preview\" and subject to change Body parameter { \"permissions_assignment\": [ {} ], \"creation_hooks\": [ {} ], \"statements\": [ {} ], \"queryset_scoping\": {} } permissions_assignment: - {} creation_hooks: - {} statements: - {} queryset_scoping: {}","title":"access_policies_update"},{"location":"automation-hub/#access_policies_partial_update","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Content-Type\": []string{\"application/json\"}, \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"PATCH\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/access_policies/{pulp_id}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const inputBody = '{ \"permissions_assignment\": [ {} ], \"creation_hooks\": [ {} ], \"statements\": [ {} ], \"queryset_scoping\": {} }'; const headers = { 'Content-Type':'application/json', 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/access_policies/{pulp_id}/', { method: 'PATCH', body: inputBody, headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Content-Type': 'application/json', 'Accept': 'application/json' } r = requests.patch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/access_policies/{pulp_id}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Content-Type' => 'application/json', 'Accept' => 'application/json' } result = RestClient.patch 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/access_policies/{pulp_id}/', params: { }, headers: headers p JSON.parse(result) PATCH /api/automation-hub/pulp/api/v3/access_policies/{pulp_id}/ Update an access policy ViewSet for AccessPolicy. NOTE: This API endpoint is in \"tech preview\" and subject to change Body parameter { \"permissions_assignment\": [ {} ], \"creation_hooks\": [ {} ], \"statements\": [ {} ], \"queryset_scoping\": {} } permissions_assignment: - {} creation_hooks: - {} statements: - {} queryset_scoping: {}","title":"access_policies_partial_update"},{"location":"automation-hub/#access_policies_reset","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"POST\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/access_policies/{pulp_id}/reset/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/access_policies/{pulp_id}/reset/', { method: 'POST', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.post('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/access_policies/{pulp_id}/reset/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.post 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/access_policies/{pulp_id}/reset/', params: { }, headers: headers p JSON.parse(result) POST /api/automation-hub/pulp/api/v3/access_policies/{pulp_id}/reset/ Reset the access policy to its uncustomized default value.","title":"access_policies_reset"},{"location":"automation-hub/#artifacts_list","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/artifacts/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/artifacts/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/artifacts/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/artifacts/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/pulp/api/v3/artifacts/ List artifacts A customized named ModelViewSet that knows how to register itself with the Pulp API router. This viewset is discoverable by its name. \"Normal\" Django Models and Master/Detail models are supported by the register_with method. Attributes: lookup_field (str): The name of the field by which an object should be looked up, in addition to any parent lookups if this ViewSet is nested. Defaults to 'pk' endpoint_name (str): The name of the final path segment that should identify the ViewSet's collection endpoint. nest_prefix (str): Optional prefix under which this ViewSet should be nested. This must correspond to the \"parent_prefix\" of a router with rest_framework_nested.NestedMixin. None indicates this ViewSet should not be nested. parent_lookup_kwargs (dict): Optional mapping of key names that would appear in self.kwargs to django model filter expressions that can be used with the corresponding value from self.kwargs, used only by a nested ViewSet to filter based on the parent object's identity. schema (DefaultSchema): The schema class to use by default in a viewset.","title":"artifacts_list"},{"location":"automation-hub/#enumerated-values_19","text":"Parameter Value ordering -content ordering -content_memberships ordering -file ordering -group_roles ordering -md5 ordering -pk ordering -pulp_created ordering -pulp_id ordering -pulp_labels ordering -pulp_last_updated ordering -sha1 ordering -sha224 ordering -sha256 ordering -sha384 ordering -sha512 ordering -size ordering -timestamp_of_interest ordering -uploads ordering -user_roles ordering content ordering content_memberships ordering file ordering group_roles ordering md5 ordering pk ordering pulp_created ordering pulp_id ordering pulp_labels ordering pulp_last_updated ordering sha1 ordering sha224 ordering sha256 ordering sha384 ordering sha512 ordering size ordering timestamp_of_interest ordering uploads ordering user_roles Example responses 200 Response { \"count\": 123, \"next\": \"http://api.example.org/accounts/?offset=400&limit=100\", \"previous\": \"http://api.example.org/accounts/?offset=200&limit=100\", \"results\": [ { \"pulp_href\": \"http://example.com\", \"pulp_created\": \"2019-08-24T14:15:22Z\", \"file\": \"string\", \"size\": 0, \"md5\": \"string\", \"sha1\": \"string\", \"sha224\": \"string\", \"sha256\": \"string\", \"sha384\": \"string\", \"sha512\": \"string\" } ] }","title":"Enumerated Values"},{"location":"automation-hub/#artifacts_create","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Content-Type\": []string{\"multipart/form-data\"}, \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"POST\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/artifacts/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const inputBody = '{ \"file\": \"string\", \"size\": 0, \"md5\": \"string\", \"sha1\": \"string\", \"sha224\": \"string\", \"sha256\": \"string\", \"sha384\": \"string\", \"sha512\": \"string\" }'; const headers = { 'Content-Type':'multipart/form-data', 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/artifacts/', { method: 'POST', body: inputBody, headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Content-Type': 'multipart/form-data', 'Accept': 'application/json' } r = requests.post('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/artifacts/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Content-Type' => 'multipart/form-data', 'Accept' => 'application/json' } result = RestClient.post 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/artifacts/', params: { }, headers: headers p JSON.parse(result) POST /api/automation-hub/pulp/api/v3/artifacts/ Create an artifact A customized named ModelViewSet that knows how to register itself with the Pulp API router. This viewset is discoverable by its name. \"Normal\" Django Models and Master/Detail models are supported by the register_with method. Attributes: lookup_field (str): The name of the field by which an object should be looked up, in addition to any parent lookups if this ViewSet is nested. Defaults to 'pk' endpoint_name (str): The name of the final path segment that should identify the ViewSet's collection endpoint. nest_prefix (str): Optional prefix under which this ViewSet should be nested. This must correspond to the \"parent_prefix\" of a router with rest_framework_nested.NestedMixin. None indicates this ViewSet should not be nested. parent_lookup_kwargs (dict): Optional mapping of key names that would appear in self.kwargs to django model filter expressions that can be used with the corresponding value from self.kwargs, used only by a nested ViewSet to filter based on the parent object's identity. schema (DefaultSchema): The schema class to use by default in a viewset. Body parameter file: string size: 0 md5: string sha1: string sha224: string sha256: string sha384: string sha512: string","title":"artifacts_create"},{"location":"automation-hub/#artifacts_read","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/artifacts/{pulp_id}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/artifacts/{pulp_id}/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/artifacts/{pulp_id}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/artifacts/{pulp_id}/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/pulp/api/v3/artifacts/{pulp_id}/ Inspect an artifact A customized named ModelViewSet that knows how to register itself with the Pulp API router. This viewset is discoverable by its name. \"Normal\" Django Models and Master/Detail models are supported by the register_with method. Attributes: lookup_field (str): The name of the field by which an object should be looked up, in addition to any parent lookups if this ViewSet is nested. Defaults to 'pk' endpoint_name (str): The name of the final path segment that should identify the ViewSet's collection endpoint. nest_prefix (str): Optional prefix under which this ViewSet should be nested. This must correspond to the \"parent_prefix\" of a router with rest_framework_nested.NestedMixin. None indicates this ViewSet should not be nested. parent_lookup_kwargs (dict): Optional mapping of key names that would appear in self.kwargs to django model filter expressions that can be used with the corresponding value from self.kwargs, used only by a nested ViewSet to filter based on the parent object's identity. schema (DefaultSchema): The schema class to use by default in a viewset.","title":"artifacts_read"},{"location":"automation-hub/#artifacts_delete","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"DELETE\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/artifacts/{pulp_id}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/artifacts/{pulp_id}/', { method: 'DELETE' }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests r = requests.delete('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/artifacts/{pulp_id}/') print(r.json()) require 'rest-client' require 'json' result = RestClient.delete 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/artifacts/{pulp_id}/', params: { } p JSON.parse(result) DELETE /api/automation-hub/pulp/api/v3/artifacts/{pulp_id}/ Delete an artifact Remove Artifact only if it is not associated with any Content.","title":"artifacts_delete"},{"location":"automation-hub/#content_list","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/content/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/content/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/content/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/content/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/pulp/api/v3/content/ List content Endpoint to list all content.","title":"content_list"},{"location":"automation-hub/#enumerated-values_20","text":"Parameter Value ordering -pk ordering pk Example responses 200 Response { \"count\": 123, \"next\": \"http://api.example.org/accounts/?offset=400&limit=100\", \"previous\": \"http://api.example.org/accounts/?offset=200&limit=100\", \"results\": [ { \"pulp_href\": \"http://example.com\", \"pulp_created\": \"2019-08-24T14:15:22Z\", \"artifacts\": {} } ] }","title":"Enumerated Values"},{"location":"automation-hub/#content_ansible_collection_deprecations_list","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/content/ansible/collection_deprecations/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/content/ansible/collection_deprecations/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/content/ansible/collection_deprecations/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/content/ansible/collection_deprecations/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/pulp/api/v3/content/ansible/collection_deprecations/ List ansible collection deprecateds ViewSet for AnsibleCollectionDeprecated.","title":"content_ansible_collection_deprecations_list"},{"location":"automation-hub/#enumerated-values_21","text":"Parameter Value ordering -pk ordering pk Example responses 200 Response { \"count\": 123, \"next\": \"http://api.example.org/accounts/?offset=400&limit=100\", \"previous\": \"http://api.example.org/accounts/?offset=200&limit=100\", \"results\": [ { \"name\": \"string\", \"namespace\": \"string\" } ] }","title":"Enumerated Values"},{"location":"automation-hub/#content_ansible_collection_deprecations_create","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Content-Type\": []string{\"application/json\"}, \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"POST\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/content/ansible/collection_deprecations/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const inputBody = '{ \"name\": \"string\", \"namespace\": \"string\" }'; const headers = { 'Content-Type':'application/json', 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/content/ansible/collection_deprecations/', { method: 'POST', body: inputBody, headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Content-Type': 'application/json', 'Accept': 'application/json' } r = requests.post('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/content/ansible/collection_deprecations/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Content-Type' => 'application/json', 'Accept' => 'application/json' } result = RestClient.post 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/content/ansible/collection_deprecations/', params: { }, headers: headers p JSON.parse(result) POST /api/automation-hub/pulp/api/v3/content/ansible/collection_deprecations/ Create an ansible collection deprecated ViewSet for AnsibleCollectionDeprecated. Body parameter { \"name\": \"string\", \"namespace\": \"string\" } name: string namespace: string","title":"content_ansible_collection_deprecations_create"},{"location":"automation-hub/#content_ansible_collection_deprecations_read","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/content/ansible/collection_deprecations/{pulp_id}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/content/ansible/collection_deprecations/{pulp_id}/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/content/ansible/collection_deprecations/{pulp_id}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/content/ansible/collection_deprecations/{pulp_id}/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/pulp/api/v3/content/ansible/collection_deprecations/{pulp_id}/ Inspect an ansible collection deprecated ViewSet for AnsibleCollectionDeprecated.","title":"content_ansible_collection_deprecations_read"},{"location":"automation-hub/#content_ansible_collection_signatures_list","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/content/ansible/collection_signatures/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/content/ansible/collection_signatures/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/content/ansible/collection_signatures/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/content/ansible/collection_signatures/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/pulp/api/v3/content/ansible/collection_signatures/ List collection version signatures ViewSet for looking at signature objects for CollectionVersion content.","title":"content_ansible_collection_signatures_list"},{"location":"automation-hub/#enumerated-values_22","text":"Parameter Value ordering -_artifacts ordering -content_ptr ordering -contentartifact ordering -data ordering -digest ordering -download_logs ordering -group_roles ordering -pk ordering -pubkey_fingerprint ordering -pulp_created ordering -pulp_id ordering -pulp_labels ordering -pulp_last_updated ordering -pulp_type ordering -repositories ordering -signed_collection ordering -signing_service ordering -timestamp_of_interest ordering -upstream_id ordering -user_roles ordering -version_memberships ordering _artifacts ordering content_ptr ordering contentartifact ordering data ordering digest ordering download_logs ordering group_roles ordering pk ordering pubkey_fingerprint ordering pulp_created ordering pulp_id ordering pulp_labels ordering pulp_last_updated ordering pulp_type ordering repositories ordering signed_collection ordering signing_service ordering timestamp_of_interest ordering upstream_id ordering user_roles ordering version_memberships Example responses 200 Response { \"count\": 123, \"next\": \"http://api.example.org/accounts/?offset=400&limit=100\", \"previous\": \"http://api.example.org/accounts/?offset=200&limit=100\", \"results\": [ { \"pulp_href\": \"http://example.com\", \"pulp_created\": \"2019-08-24T14:15:22Z\", \"signed_collection\": \"http://example.com\", \"pubkey_fingerprint\": \"string\", \"signing_service\": \"http://example.com\" } ] }","title":"Enumerated Values"},{"location":"automation-hub/#content_ansible_collection_signatures_create","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Content-Type\": []string{\"multipart/form-data\"}, \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"POST\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/content/ansible/collection_signatures/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const inputBody = '{ \"file\": \"string\", \"repository\": \"http://example.com\", \"signed_collection\": \"http://example.com\" }'; const headers = { 'Content-Type':'multipart/form-data', 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/content/ansible/collection_signatures/', { method: 'POST', body: inputBody, headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Content-Type': 'multipart/form-data', 'Accept': 'application/json' } r = requests.post('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/content/ansible/collection_signatures/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Content-Type' => 'multipart/form-data', 'Accept' => 'application/json' } result = RestClient.post 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/content/ansible/collection_signatures/', params: { }, headers: headers p JSON.parse(result) POST /api/automation-hub/pulp/api/v3/content/ansible/collection_signatures/ Create a collection version signature Trigger an asynchronous task to create content,optionally create new repository version. Body parameter file: string repository: http://example.com signed_collection: http://example.com","title":"content_ansible_collection_signatures_create"},{"location":"automation-hub/#content_ansible_collection_signatures_read","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/content/ansible/collection_signatures/{pulp_id}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/content/ansible/collection_signatures/{pulp_id}/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/content/ansible/collection_signatures/{pulp_id}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/content/ansible/collection_signatures/{pulp_id}/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/pulp/api/v3/content/ansible/collection_signatures/{pulp_id}/ Inspect a collection version signature ViewSet for looking at signature objects for CollectionVersion content.","title":"content_ansible_collection_signatures_read"},{"location":"automation-hub/#content_ansible_collection_versions_list","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/content/ansible/collection_versions/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/content/ansible/collection_versions/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/content/ansible/collection_versions/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/content/ansible/collection_versions/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/pulp/api/v3/content/ansible/collection_versions/ List collection versions ViewSet for Ansible Collection.","title":"content_ansible_collection_versions_list"},{"location":"automation-hub/#enumerated-values_23","text":"Parameter Value ordering -_artifacts ordering -authors ordering -collection ordering -content_ptr ordering -contentartifact ordering -contents ordering -dependencies ordering -description ordering -docs_blob ordering -documentation ordering -download_logs ordering -files ordering -group_roles ordering -homepage ordering -is_highest ordering -issues ordering -license ordering -manifest ordering -name ordering -namespace ordering -pk ordering -pulp_created ordering -pulp_id ordering -pulp_labels ordering -pulp_last_updated ordering -pulp_type ordering -repositories ordering -repository ordering -requires_ansible ordering -search_vector ordering -signatures ordering -tags ordering -timestamp_of_interest ordering -upstream_id ordering -user_roles ordering -version ordering -version_memberships ordering _artifacts ordering authors ordering collection ordering content_ptr ordering contentartifact ordering contents ordering dependencies ordering description ordering docs_blob ordering documentation ordering download_logs ordering files ordering group_roles ordering homepage ordering is_highest ordering issues ordering license ordering manifest ordering name ordering namespace ordering pk ordering pulp_created ordering pulp_id ordering pulp_labels ordering pulp_last_updated ordering pulp_type ordering repositories ordering repository ordering requires_ansible ordering search_vector ordering signatures ordering tags ordering timestamp_of_interest ordering upstream_id ordering user_roles ordering version ordering version_memberships Example responses 200 Response { \"count\": 123, \"next\": \"http://api.example.org/accounts/?offset=400&limit=100\", \"previous\": \"http://api.example.org/accounts/?offset=200&limit=100\", \"results\": [ { \"pulp_href\": \"http://example.com\", \"artifact\": \"http://example.com\", \"pulp_created\": \"2019-08-24T14:15:22Z\", \"md5\": \"string\", \"sha1\": \"string\", \"sha224\": \"string\", \"sha256\": \"string\", \"sha384\": \"string\", \"sha512\": \"string\", \"id\": \"497f6eca-6276-4993-bfeb-53cbbbba6f08\", \"authors\": [ \"string\" ], \"contents\": {}, \"dependencies\": {}, \"description\": \"string\", \"docs_blob\": {}, \"manifest\": {}, \"files\": {}, \"documentation\": \"string\", \"homepage\": \"string\", \"issues\": \"string\", \"license\": [ \"string\" ], \"name\": \"string\", \"namespace\": \"string\", \"repository\": \"string\", \"tags\": [ { \"name\": \"string\" } ], \"version\": \"string\", \"requires_ansible\": \"string\" } ] }","title":"Enumerated Values"},{"location":"automation-hub/#content_ansible_collection_versions_create","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Content-Type\": []string{\"multipart/form-data\"}, \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"POST\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/content/ansible/collection_versions/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const inputBody = '{ \"upload\": \"http://example.com\", \"repository\": \"http://example.com\", \"file\": \"string\", \"name\": \"string\", \"namespace\": \"string\", \"version\": \"string\" }'; const headers = { 'Content-Type':'multipart/form-data', 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/content/ansible/collection_versions/', { method: 'POST', body: inputBody, headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Content-Type': 'multipart/form-data', 'Accept': 'application/json' } r = requests.post('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/content/ansible/collection_versions/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Content-Type' => 'multipart/form-data', 'Accept' => 'application/json' } result = RestClient.post 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/content/ansible/collection_versions/', params: { }, headers: headers p JSON.parse(result) POST /api/automation-hub/pulp/api/v3/content/ansible/collection_versions/ Create a collection version Trigger an asynchronous task to create content,optionally create new repository version. Body parameter upload: http://example.com repository: http://example.com file: string name: string namespace: string version: string","title":"content_ansible_collection_versions_create"},{"location":"automation-hub/#content_ansible_collection_versions_read","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/content/ansible/collection_versions/{pulp_id}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/content/ansible/collection_versions/{pulp_id}/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/content/ansible/collection_versions/{pulp_id}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/content/ansible/collection_versions/{pulp_id}/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/pulp/api/v3/content/ansible/collection_versions/{pulp_id}/ Inspect a collection version ViewSet for Ansible Collection.","title":"content_ansible_collection_versions_read"},{"location":"automation-hub/#content_ansible_roles_list","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/content/ansible/roles/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/content/ansible/roles/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/content/ansible/roles/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/content/ansible/roles/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/pulp/api/v3/content/ansible/roles/ List roles ViewSet for Role.","title":"content_ansible_roles_list"},{"location":"automation-hub/#enumerated-values_24","text":"Parameter Value ordering -_artifacts ordering -content_ptr ordering -contentartifact ordering -download_logs ordering -group_roles ordering -name ordering -namespace ordering -pk ordering -pulp_created ordering -pulp_id ordering -pulp_labels ordering -pulp_last_updated ordering -pulp_type ordering -repositories ordering -timestamp_of_interest ordering -upstream_id ordering -user_roles ordering -version ordering -version_memberships ordering _artifacts ordering content_ptr ordering contentartifact ordering download_logs ordering group_roles ordering name ordering namespace ordering pk ordering pulp_created ordering pulp_id ordering pulp_labels ordering pulp_last_updated ordering pulp_type ordering repositories ordering timestamp_of_interest ordering upstream_id ordering user_roles ordering version ordering version_memberships Example responses 200 Response { \"count\": 123, \"next\": \"http://api.example.org/accounts/?offset=400&limit=100\", \"previous\": \"http://api.example.org/accounts/?offset=200&limit=100\", \"results\": [ { \"pulp_href\": \"http://example.com\", \"artifact\": \"http://example.com\", \"pulp_created\": \"2019-08-24T14:15:22Z\", \"version\": \"string\", \"name\": \"string\", \"namespace\": \"string\" } ] }","title":"Enumerated Values"},{"location":"automation-hub/#content_ansible_roles_create","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Content-Type\": []string{\"application/json\"}, \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"POST\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/content/ansible/roles/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const inputBody = '{ \"artifact\": \"http://example.com\", \"version\": \"string\", \"name\": \"string\", \"namespace\": \"string\" }'; const headers = { 'Content-Type':'application/json', 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/content/ansible/roles/', { method: 'POST', body: inputBody, headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Content-Type': 'application/json', 'Accept': 'application/json' } r = requests.post('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/content/ansible/roles/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Content-Type' => 'application/json', 'Accept' => 'application/json' } result = RestClient.post 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/content/ansible/roles/', params: { }, headers: headers p JSON.parse(result) POST /api/automation-hub/pulp/api/v3/content/ansible/roles/ Create a role ViewSet for Role. Body parameter { \"artifact\": \"http://example.com\", \"version\": \"string\", \"name\": \"string\", \"namespace\": \"string\" } artifact: http://example.com version: string name: string namespace: string","title":"content_ansible_roles_create"},{"location":"automation-hub/#content_ansible_roles_read","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/content/ansible/roles/{pulp_id}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/content/ansible/roles/{pulp_id}/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/content/ansible/roles/{pulp_id}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/content/ansible/roles/{pulp_id}/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/pulp/api/v3/content/ansible/roles/{pulp_id}/ Inspect a role ViewSet for Role.","title":"content_ansible_roles_read"},{"location":"automation-hub/#content_container_blobs_list","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/content/container/blobs/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/content/container/blobs/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/content/container/blobs/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/content/container/blobs/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/pulp/api/v3/content/container/blobs/ List blobs ViewSet for Blobs.","title":"content_container_blobs_list"},{"location":"automation-hub/#enumerated-values_25","text":"Parameter Value ordering -_artifacts ordering -config_blob ordering -container_manifest ordering -content_ptr ordering -contentartifact ordering -digest ordering -download_logs ordering -group_roles ordering -manifest_blobs ordering -pk ordering -pulp_created ordering -pulp_id ordering -pulp_labels ordering -pulp_last_updated ordering -pulp_type ordering -repositories ordering -timestamp_of_interest ordering -upstream_id ordering -user_roles ordering -version_memberships ordering _artifacts ordering config_blob ordering container_manifest ordering content_ptr ordering contentartifact ordering digest ordering download_logs ordering group_roles ordering manifest_blobs ordering pk ordering pulp_created ordering pulp_id ordering pulp_labels ordering pulp_last_updated ordering pulp_type ordering repositories ordering timestamp_of_interest ordering upstream_id ordering user_roles ordering version_memberships Example responses 200 Response { \"count\": 123, \"next\": \"http://api.example.org/accounts/?offset=400&limit=100\", \"previous\": \"http://api.example.org/accounts/?offset=200&limit=100\", \"results\": [ { \"pulp_href\": \"http://example.com\", \"pulp_created\": \"2019-08-24T14:15:22Z\", \"artifact\": \"http://example.com\", \"digest\": \"string\" } ] }","title":"Enumerated Values"},{"location":"automation-hub/#content_container_blobs_read","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/content/container/blobs/{pulp_id}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/content/container/blobs/{pulp_id}/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/content/container/blobs/{pulp_id}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/content/container/blobs/{pulp_id}/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/pulp/api/v3/content/container/blobs/{pulp_id}/ Inspect a blob ViewSet for Blobs.","title":"content_container_blobs_read"},{"location":"automation-hub/#content_container_manifests_list","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/content/container/manifests/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/content/container/manifests/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/content/container/manifests/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/content/container/manifests/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/pulp/api/v3/content/container/manifests/ List manifests ViewSet for Manifest.","title":"content_container_manifests_list"},{"location":"automation-hub/#enumerated-values_26","text":"Parameter Value media_type application/vnd.docker.distribution.manifest.list.v2+json media_type application/vnd.docker.distribution.manifest.v1+json media_type application/vnd.docker.distribution.manifest.v2+json media_type application/vnd.oci.image.index.v1+json media_type application/vnd.oci.image.manifest.v1+json ordering -_artifacts ordering -blob_manifests ordering -blobs ordering -config_blob ordering -container_manifest ordering -content_ptr ordering -contentartifact ordering -digest ordering -download_logs ordering -group_roles ordering -image_manifests ordering -listed_manifests ordering -manifest_lists ordering -media_type ordering -pk ordering -pulp_created ordering -pulp_id ordering -pulp_labels ordering -pulp_last_updated ordering -pulp_type ordering -repositories ordering -schema_version ordering -signed_manifests ordering -tagged_manifests ordering -timestamp_of_interest ordering -upstream_id ordering -user_roles ordering -version_memberships ordering _artifacts ordering blob_manifests ordering blobs ordering config_blob ordering container_manifest ordering content_ptr ordering contentartifact ordering digest ordering download_logs ordering group_roles ordering image_manifests ordering listed_manifests ordering manifest_lists ordering media_type ordering pk ordering pulp_created ordering pulp_id ordering pulp_labels ordering pulp_last_updated ordering pulp_type ordering repositories ordering schema_version ordering signed_manifests ordering tagged_manifests ordering timestamp_of_interest ordering upstream_id ordering user_roles ordering version_memberships Example responses 200 Response { \"count\": 123, \"next\": \"http://api.example.org/accounts/?offset=400&limit=100\", \"previous\": \"http://api.example.org/accounts/?offset=200&limit=100\", \"results\": [ { \"pulp_href\": \"http://example.com\", \"pulp_created\": \"2019-08-24T14:15:22Z\", \"artifact\": \"http://example.com\", \"digest\": \"string\", \"schema_version\": 0, \"media_type\": \"string\", \"listed_manifests\": [ \"http://example.com\" ], \"config_blob\": \"http://example.com\", \"blobs\": [ \"http://example.com\" ] } ] }","title":"Enumerated Values"},{"location":"automation-hub/#content_container_manifests_read","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/content/container/manifests/{pulp_id}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/content/container/manifests/{pulp_id}/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/content/container/manifests/{pulp_id}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/content/container/manifests/{pulp_id}/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/pulp/api/v3/content/container/manifests/{pulp_id}/ Inspect a manifest ViewSet for Manifest.","title":"content_container_manifests_read"},{"location":"automation-hub/#content_container_signatures_list","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/content/container/signatures/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/content/container/signatures/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/content/container/signatures/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/content/container/signatures/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/pulp/api/v3/content/container/signatures/ List manifest signatures ViewSet for image signatures.","title":"content_container_signatures_list"},{"location":"automation-hub/#enumerated-values_27","text":"Parameter Value ordering -_artifacts ordering -content_ptr ordering -contentartifact ordering -creator ordering -data ordering -digest ordering -download_logs ordering -group_roles ordering -key_id ordering -name ordering -pk ordering -pulp_created ordering -pulp_id ordering -pulp_labels ordering -pulp_last_updated ordering -pulp_type ordering -repositories ordering -signed_manifest ordering -timestamp ordering -timestamp_of_interest ordering -type ordering -upstream_id ordering -user_roles ordering -version_memberships ordering _artifacts ordering content_ptr ordering contentartifact ordering creator ordering data ordering digest ordering download_logs ordering group_roles ordering key_id ordering name ordering pk ordering pulp_created ordering pulp_id ordering pulp_labels ordering pulp_last_updated ordering pulp_type ordering repositories ordering signed_manifest ordering timestamp ordering timestamp_of_interest ordering type ordering upstream_id ordering user_roles ordering version_memberships Example responses 200 Response { \"count\": 123, \"next\": \"http://api.example.org/accounts/?offset=400&limit=100\", \"previous\": \"http://api.example.org/accounts/?offset=200&limit=100\", \"results\": [ { \"pulp_href\": \"http://example.com\", \"pulp_created\": \"2019-08-24T14:15:22Z\", \"name\": \"string\", \"digest\": \"string\", \"type\": \"string\", \"key_id\": \"string\", \"timestamp\": 0, \"creator\": \"string\", \"signed_manifest\": \"http://example.com\" } ] }","title":"Enumerated Values"},{"location":"automation-hub/#content_container_signatures_read","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/content/container/signatures/{pulp_id}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/content/container/signatures/{pulp_id}/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/content/container/signatures/{pulp_id}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/content/container/signatures/{pulp_id}/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/pulp/api/v3/content/container/signatures/{pulp_id}/ Inspect a manifest signature ViewSet for image signatures.","title":"content_container_signatures_read"},{"location":"automation-hub/#content_container_tags_list","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/content/container/tags/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/content/container/tags/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/content/container/tags/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/content/container/tags/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/pulp/api/v3/content/container/tags/ List tags ViewSet for Tag.","title":"content_container_tags_list"},{"location":"automation-hub/#enumerated-values_28","text":"Parameter Value media_type application/vnd.docker.distribution.manifest.list.v2+json media_type application/vnd.docker.distribution.manifest.v1+json media_type application/vnd.docker.distribution.manifest.v2+json media_type application/vnd.oci.image.index.v1+json media_type application/vnd.oci.image.manifest.v1+json ordering -_artifacts ordering -content_ptr ordering -contentartifact ordering -download_logs ordering -group_roles ordering -name ordering -pk ordering -pulp_created ordering -pulp_id ordering -pulp_labels ordering -pulp_last_updated ordering -pulp_type ordering -repositories ordering -tagged_manifest ordering -timestamp_of_interest ordering -upstream_id ordering -user_roles ordering -version_memberships ordering _artifacts ordering content_ptr ordering contentartifact ordering download_logs ordering group_roles ordering name ordering pk ordering pulp_created ordering pulp_id ordering pulp_labels ordering pulp_last_updated ordering pulp_type ordering repositories ordering tagged_manifest ordering timestamp_of_interest ordering upstream_id ordering user_roles ordering version_memberships Example responses 200 Response { \"count\": 123, \"next\": \"http://api.example.org/accounts/?offset=400&limit=100\", \"previous\": \"http://api.example.org/accounts/?offset=200&limit=100\", \"results\": [ { \"pulp_href\": \"http://example.com\", \"pulp_created\": \"2019-08-24T14:15:22Z\", \"name\": \"string\", \"tagged_manifest\": \"http://example.com\" } ] }","title":"Enumerated Values"},{"location":"automation-hub/#content_container_tags_read","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/content/container/tags/{pulp_id}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/content/container/tags/{pulp_id}/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/content/container/tags/{pulp_id}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/content/container/tags/{pulp_id}/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/pulp/api/v3/content/container/tags/{pulp_id}/ Inspect a tag ViewSet for Tag.","title":"content_container_tags_read"},{"location":"automation-hub/#contentguards_list","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/contentguards/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/contentguards/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/contentguards/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/contentguards/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/pulp/api/v3/contentguards/ List content guards Endpoint to list all contentguards.","title":"contentguards_list"},{"location":"automation-hub/#enumerated-values_29","text":"Parameter Value ordering -basedistribution ordering -core_contentredirectcontentguard ordering -core_rbaccontentguard ordering -description ordering -distribution ordering -group_roles ordering -name ordering -pk ordering -pulp_created ordering -pulp_id ordering -pulp_labels ordering -pulp_last_updated ordering -pulp_type ordering -user_roles ordering basedistribution ordering core_contentredirectcontentguard ordering core_rbaccontentguard ordering description ordering distribution ordering group_roles ordering name ordering pk ordering pulp_created ordering pulp_id ordering pulp_labels ordering pulp_last_updated ordering pulp_type ordering user_roles Example responses 200 Response { \"count\": 123, \"next\": \"http://api.example.org/accounts/?offset=400&limit=100\", \"previous\": \"http://api.example.org/accounts/?offset=200&limit=100\", \"results\": [ { \"pulp_href\": \"http://example.com\", \"pulp_created\": \"2019-08-24T14:15:22Z\", \"name\": \"string\", \"description\": \"string\" } ] }","title":"Enumerated Values"},{"location":"automation-hub/#contentguards_core_content_redirect_list","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/contentguards/core/content_redirect/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/contentguards/core/content_redirect/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/contentguards/core/content_redirect/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/contentguards/core/content_redirect/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/pulp/api/v3/contentguards/core/content_redirect/ List content redirect content guards Content guard to protect preauthenticated redirects to the content app.","title":"contentguards_core_content_redirect_list"},{"location":"automation-hub/#enumerated-values_30","text":"Parameter Value ordering -basedistribution ordering -core_contentredirectcontentguard ordering -core_rbaccontentguard ordering -description ordering -distribution ordering -group_roles ordering -name ordering -pk ordering -pulp_created ordering -pulp_id ordering -pulp_labels ordering -pulp_last_updated ordering -pulp_type ordering -user_roles ordering basedistribution ordering core_contentredirectcontentguard ordering core_rbaccontentguard ordering description ordering distribution ordering group_roles ordering name ordering pk ordering pulp_created ordering pulp_id ordering pulp_labels ordering pulp_last_updated ordering pulp_type ordering user_roles Example responses 200 Response { \"count\": 123, \"next\": \"http://api.example.org/accounts/?offset=400&limit=100\", \"previous\": \"http://api.example.org/accounts/?offset=200&limit=100\", \"results\": [ { \"pulp_href\": \"http://example.com\", \"pulp_created\": \"2019-08-24T14:15:22Z\", \"name\": \"string\", \"description\": \"string\" } ] }","title":"Enumerated Values"},{"location":"automation-hub/#contentguards_core_content_redirect_create","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Content-Type\": []string{\"application/json\"}, \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"POST\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/contentguards/core/content_redirect/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const inputBody = '{ \"name\": \"string\", \"description\": \"string\" }'; const headers = { 'Content-Type':'application/json', 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/contentguards/core/content_redirect/', { method: 'POST', body: inputBody, headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Content-Type': 'application/json', 'Accept': 'application/json' } r = requests.post('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/contentguards/core/content_redirect/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Content-Type' => 'application/json', 'Accept' => 'application/json' } result = RestClient.post 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/contentguards/core/content_redirect/', params: { }, headers: headers p JSON.parse(result) POST /api/automation-hub/pulp/api/v3/contentguards/core/content_redirect/ Create a content redirect content guard Content guard to protect preauthenticated redirects to the content app. Body parameter { \"name\": \"string\", \"description\": \"string\" } name: string description: string","title":"contentguards_core_content_redirect_create"},{"location":"automation-hub/#contentguards_core_content_redirect_read","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/contentguards/core/content_redirect/{pulp_id}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/contentguards/core/content_redirect/{pulp_id}/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/contentguards/core/content_redirect/{pulp_id}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/contentguards/core/content_redirect/{pulp_id}/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/pulp/api/v3/contentguards/core/content_redirect/{pulp_id}/ Inspect a content redirect content guard Content guard to protect preauthenticated redirects to the content app.","title":"contentguards_core_content_redirect_read"},{"location":"automation-hub/#contentguards_core_content_redirect_update","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Content-Type\": []string{\"application/json\"}, \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"PUT\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/contentguards/core/content_redirect/{pulp_id}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const inputBody = '{ \"name\": \"string\", \"description\": \"string\" }'; const headers = { 'Content-Type':'application/json', 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/contentguards/core/content_redirect/{pulp_id}/', { method: 'PUT', body: inputBody, headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Content-Type': 'application/json', 'Accept': 'application/json' } r = requests.put('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/contentguards/core/content_redirect/{pulp_id}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Content-Type' => 'application/json', 'Accept' => 'application/json' } result = RestClient.put 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/contentguards/core/content_redirect/{pulp_id}/', params: { }, headers: headers p JSON.parse(result) PUT /api/automation-hub/pulp/api/v3/contentguards/core/content_redirect/{pulp_id}/ Update a content redirect content guard Content guard to protect preauthenticated redirects to the content app. Body parameter { \"name\": \"string\", \"description\": \"string\" } name: string description: string","title":"contentguards_core_content_redirect_update"},{"location":"automation-hub/#contentguards_core_content_redirect_partial_update","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Content-Type\": []string{\"application/json\"}, \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"PATCH\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/contentguards/core/content_redirect/{pulp_id}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const inputBody = '{ \"name\": \"string\", \"description\": \"string\" }'; const headers = { 'Content-Type':'application/json', 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/contentguards/core/content_redirect/{pulp_id}/', { method: 'PATCH', body: inputBody, headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Content-Type': 'application/json', 'Accept': 'application/json' } r = requests.patch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/contentguards/core/content_redirect/{pulp_id}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Content-Type' => 'application/json', 'Accept' => 'application/json' } result = RestClient.patch 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/contentguards/core/content_redirect/{pulp_id}/', params: { }, headers: headers p JSON.parse(result) PATCH /api/automation-hub/pulp/api/v3/contentguards/core/content_redirect/{pulp_id}/ Update a content redirect content guard Content guard to protect preauthenticated redirects to the content app. Body parameter { \"name\": \"string\", \"description\": \"string\" } name: string description: string","title":"contentguards_core_content_redirect_partial_update"},{"location":"automation-hub/#contentguards_core_content_redirect_delete","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"DELETE\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/contentguards/core/content_redirect/{pulp_id}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/contentguards/core/content_redirect/{pulp_id}/', { method: 'DELETE' }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests r = requests.delete('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/contentguards/core/content_redirect/{pulp_id}/') print(r.json()) require 'rest-client' require 'json' result = RestClient.delete 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/contentguards/core/content_redirect/{pulp_id}/', params: { } p JSON.parse(result) DELETE /api/automation-hub/pulp/api/v3/contentguards/core/content_redirect/{pulp_id}/ Delete a content redirect content guard Content guard to protect preauthenticated redirects to the content app.","title":"contentguards_core_content_redirect_delete"},{"location":"automation-hub/#contentguards_core_content_redirect_add_role","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Content-Type\": []string{\"application/json\"}, \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"POST\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/contentguards/core/content_redirect/{pulp_id}/add_role/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const inputBody = '{ \"users\": [], \"groups\": [], \"role\": \"string\" }'; const headers = { 'Content-Type':'application/json', 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/contentguards/core/content_redirect/{pulp_id}/add_role/', { method: 'POST', body: inputBody, headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Content-Type': 'application/json', 'Accept': 'application/json' } r = requests.post('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/contentguards/core/content_redirect/{pulp_id}/add_role/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Content-Type' => 'application/json', 'Accept' => 'application/json' } result = RestClient.post 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/contentguards/core/content_redirect/{pulp_id}/add_role/', params: { }, headers: headers p JSON.parse(result) POST /api/automation-hub/pulp/api/v3/contentguards/core/content_redirect/{pulp_id}/add_role/ Add a role for this object to users/groups. Body parameter { \"users\": [], \"groups\": [], \"role\": \"string\" } users: [] groups: [] role: string","title":"contentguards_core_content_redirect_add_role"},{"location":"automation-hub/#contentguards_core_content_redirect_list_roles","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/contentguards/core/content_redirect/{pulp_id}/list_roles/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/contentguards/core/content_redirect/{pulp_id}/list_roles/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/contentguards/core/content_redirect/{pulp_id}/list_roles/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/contentguards/core/content_redirect/{pulp_id}/list_roles/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/pulp/api/v3/contentguards/core/content_redirect/{pulp_id}/list_roles/ List roles assigned to this object.","title":"contentguards_core_content_redirect_list_roles"},{"location":"automation-hub/#contentguards_core_content_redirect_my_permissions","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/contentguards/core/content_redirect/{pulp_id}/my_permissions/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/contentguards/core/content_redirect/{pulp_id}/my_permissions/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/contentguards/core/content_redirect/{pulp_id}/my_permissions/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/contentguards/core/content_redirect/{pulp_id}/my_permissions/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/pulp/api/v3/contentguards/core/content_redirect/{pulp_id}/my_permissions/ List permissions available to the current user on this object.","title":"contentguards_core_content_redirect_my_permissions"},{"location":"automation-hub/#contentguards_core_content_redirect_remove_role","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Content-Type\": []string{\"application/json\"}, \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"POST\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/contentguards/core/content_redirect/{pulp_id}/remove_role/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const inputBody = '{ \"users\": [], \"groups\": [], \"role\": \"string\" }'; const headers = { 'Content-Type':'application/json', 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/contentguards/core/content_redirect/{pulp_id}/remove_role/', { method: 'POST', body: inputBody, headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Content-Type': 'application/json', 'Accept': 'application/json' } r = requests.post('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/contentguards/core/content_redirect/{pulp_id}/remove_role/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Content-Type' => 'application/json', 'Accept' => 'application/json' } result = RestClient.post 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/contentguards/core/content_redirect/{pulp_id}/remove_role/', params: { }, headers: headers p JSON.parse(result) POST /api/automation-hub/pulp/api/v3/contentguards/core/content_redirect/{pulp_id}/remove_role/ Remove a role for this object from users/groups. Body parameter { \"users\": [], \"groups\": [], \"role\": \"string\" } users: [] groups: [] role: string","title":"contentguards_core_content_redirect_remove_role"},{"location":"automation-hub/#contentguards_core_rbac_list","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/contentguards/core/rbac/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/contentguards/core/rbac/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/contentguards/core/rbac/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/contentguards/core/rbac/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/pulp/api/v3/contentguards/core/rbac/ List rbac content guards Viewset for creating contentguards that use RBAC to protect content. Has add and remove actions for managing permission for users and groups to download content protected by this guard.","title":"contentguards_core_rbac_list"},{"location":"automation-hub/#enumerated-values_31","text":"Parameter Value ordering -basedistribution ordering -core_contentredirectcontentguard ordering -core_rbaccontentguard ordering -description ordering -distribution ordering -group_roles ordering -name ordering -pk ordering -pulp_created ordering -pulp_id ordering -pulp_labels ordering -pulp_last_updated ordering -pulp_type ordering -user_roles ordering basedistribution ordering core_contentredirectcontentguard ordering core_rbaccontentguard ordering description ordering distribution ordering group_roles ordering name ordering pk ordering pulp_created ordering pulp_id ordering pulp_labels ordering pulp_last_updated ordering pulp_type ordering user_roles Example responses 200 Response { \"count\": 123, \"next\": \"http://api.example.org/accounts/?offset=400&limit=100\", \"previous\": \"http://api.example.org/accounts/?offset=200&limit=100\", \"results\": [ { \"pulp_href\": \"http://example.com\", \"pulp_created\": \"2019-08-24T14:15:22Z\", \"name\": \"string\", \"description\": \"string\", \"users\": [ { \"username\": \"string\", \"pulp_href\": \"http://example.com\" } ], \"groups\": [ { \"name\": \"string\", \"pulp_href\": \"http://example.com\", \"id\": 0 } ] } ] }","title":"Enumerated Values"},{"location":"automation-hub/#contentguards_core_rbac_create","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Content-Type\": []string{\"application/json\"}, \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"POST\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/contentguards/core/rbac/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const inputBody = '{ \"name\": \"string\", \"description\": \"string\" }'; const headers = { 'Content-Type':'application/json', 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/contentguards/core/rbac/', { method: 'POST', body: inputBody, headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Content-Type': 'application/json', 'Accept': 'application/json' } r = requests.post('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/contentguards/core/rbac/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Content-Type' => 'application/json', 'Accept' => 'application/json' } result = RestClient.post 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/contentguards/core/rbac/', params: { }, headers: headers p JSON.parse(result) POST /api/automation-hub/pulp/api/v3/contentguards/core/rbac/ Create a rbac content guard Viewset for creating contentguards that use RBAC to protect content. Has add and remove actions for managing permission for users and groups to download content protected by this guard. Body parameter { \"name\": \"string\", \"description\": \"string\" } name: string description: string","title":"contentguards_core_rbac_create"},{"location":"automation-hub/#contentguards_core_rbac_read","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/contentguards/core/rbac/{pulp_id}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/contentguards/core/rbac/{pulp_id}/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/contentguards/core/rbac/{pulp_id}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/contentguards/core/rbac/{pulp_id}/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/pulp/api/v3/contentguards/core/rbac/{pulp_id}/ Inspect a rbac content guard Viewset for creating contentguards that use RBAC to protect content. Has add and remove actions for managing permission for users and groups to download content protected by this guard.","title":"contentguards_core_rbac_read"},{"location":"automation-hub/#contentguards_core_rbac_update","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Content-Type\": []string{\"application/json\"}, \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"PUT\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/contentguards/core/rbac/{pulp_id}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const inputBody = '{ \"name\": \"string\", \"description\": \"string\" }'; const headers = { 'Content-Type':'application/json', 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/contentguards/core/rbac/{pulp_id}/', { method: 'PUT', body: inputBody, headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Content-Type': 'application/json', 'Accept': 'application/json' } r = requests.put('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/contentguards/core/rbac/{pulp_id}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Content-Type' => 'application/json', 'Accept' => 'application/json' } result = RestClient.put 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/contentguards/core/rbac/{pulp_id}/', params: { }, headers: headers p JSON.parse(result) PUT /api/automation-hub/pulp/api/v3/contentguards/core/rbac/{pulp_id}/ Update a rbac content guard Viewset for creating contentguards that use RBAC to protect content. Has add and remove actions for managing permission for users and groups to download content protected by this guard. Body parameter { \"name\": \"string\", \"description\": \"string\" } name: string description: string","title":"contentguards_core_rbac_update"},{"location":"automation-hub/#contentguards_core_rbac_partial_update","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Content-Type\": []string{\"application/json\"}, \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"PATCH\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/contentguards/core/rbac/{pulp_id}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const inputBody = '{ \"name\": \"string\", \"description\": \"string\" }'; const headers = { 'Content-Type':'application/json', 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/contentguards/core/rbac/{pulp_id}/', { method: 'PATCH', body: inputBody, headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Content-Type': 'application/json', 'Accept': 'application/json' } r = requests.patch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/contentguards/core/rbac/{pulp_id}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Content-Type' => 'application/json', 'Accept' => 'application/json' } result = RestClient.patch 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/contentguards/core/rbac/{pulp_id}/', params: { }, headers: headers p JSON.parse(result) PATCH /api/automation-hub/pulp/api/v3/contentguards/core/rbac/{pulp_id}/ Update a rbac content guard Viewset for creating contentguards that use RBAC to protect content. Has add and remove actions for managing permission for users and groups to download content protected by this guard. Body parameter { \"name\": \"string\", \"description\": \"string\" } name: string description: string","title":"contentguards_core_rbac_partial_update"},{"location":"automation-hub/#contentguards_core_rbac_delete","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"DELETE\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/contentguards/core/rbac/{pulp_id}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/contentguards/core/rbac/{pulp_id}/', { method: 'DELETE' }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests r = requests.delete('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/contentguards/core/rbac/{pulp_id}/') print(r.json()) require 'rest-client' require 'json' result = RestClient.delete 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/contentguards/core/rbac/{pulp_id}/', params: { } p JSON.parse(result) DELETE /api/automation-hub/pulp/api/v3/contentguards/core/rbac/{pulp_id}/ Delete a rbac content guard Viewset for creating contentguards that use RBAC to protect content. Has add and remove actions for managing permission for users and groups to download content protected by this guard.","title":"contentguards_core_rbac_delete"},{"location":"automation-hub/#contentguards_core_rbac_add_role","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Content-Type\": []string{\"application/json\"}, \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"POST\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/contentguards/core/rbac/{pulp_id}/add_role/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const inputBody = '{ \"users\": [], \"groups\": [], \"role\": \"string\" }'; const headers = { 'Content-Type':'application/json', 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/contentguards/core/rbac/{pulp_id}/add_role/', { method: 'POST', body: inputBody, headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Content-Type': 'application/json', 'Accept': 'application/json' } r = requests.post('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/contentguards/core/rbac/{pulp_id}/add_role/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Content-Type' => 'application/json', 'Accept' => 'application/json' } result = RestClient.post 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/contentguards/core/rbac/{pulp_id}/add_role/', params: { }, headers: headers p JSON.parse(result) POST /api/automation-hub/pulp/api/v3/contentguards/core/rbac/{pulp_id}/add_role/ Add a role for this object to users/groups. Body parameter { \"users\": [], \"groups\": [], \"role\": \"string\" } users: [] groups: [] role: string","title":"contentguards_core_rbac_add_role"},{"location":"automation-hub/#contentguards_core_rbac_list_roles","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/contentguards/core/rbac/{pulp_id}/list_roles/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/contentguards/core/rbac/{pulp_id}/list_roles/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/contentguards/core/rbac/{pulp_id}/list_roles/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/contentguards/core/rbac/{pulp_id}/list_roles/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/pulp/api/v3/contentguards/core/rbac/{pulp_id}/list_roles/ List roles assigned to this object.","title":"contentguards_core_rbac_list_roles"},{"location":"automation-hub/#contentguards_core_rbac_my_permissions","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/contentguards/core/rbac/{pulp_id}/my_permissions/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/contentguards/core/rbac/{pulp_id}/my_permissions/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/contentguards/core/rbac/{pulp_id}/my_permissions/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/contentguards/core/rbac/{pulp_id}/my_permissions/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/pulp/api/v3/contentguards/core/rbac/{pulp_id}/my_permissions/ List permissions available to the current user on this object.","title":"contentguards_core_rbac_my_permissions"},{"location":"automation-hub/#contentguards_core_rbac_remove_role","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Content-Type\": []string{\"application/json\"}, \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"POST\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/contentguards/core/rbac/{pulp_id}/remove_role/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const inputBody = '{ \"users\": [], \"groups\": [], \"role\": \"string\" }'; const headers = { 'Content-Type':'application/json', 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/contentguards/core/rbac/{pulp_id}/remove_role/', { method: 'POST', body: inputBody, headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Content-Type': 'application/json', 'Accept': 'application/json' } r = requests.post('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/contentguards/core/rbac/{pulp_id}/remove_role/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Content-Type' => 'application/json', 'Accept' => 'application/json' } result = RestClient.post 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/contentguards/core/rbac/{pulp_id}/remove_role/', params: { }, headers: headers p JSON.parse(result) POST /api/automation-hub/pulp/api/v3/contentguards/core/rbac/{pulp_id}/remove_role/ Remove a role for this object from users/groups. Body parameter { \"users\": [], \"groups\": [], \"role\": \"string\" } users: [] groups: [] role: string","title":"contentguards_core_rbac_remove_role"},{"location":"automation-hub/#distributions_list","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/distributions/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/distributions/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/distributions/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/distributions/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/pulp/api/v3/distributions/ List distributions A customized named ModelViewSet that knows how to register itself with the Pulp API router. This viewset is discoverable by its name. \"Normal\" Django Models and Master/Detail models are supported by the register_with method. Attributes: lookup_field (str): The name of the field by which an object should be looked up, in addition to any parent lookups if this ViewSet is nested. Defaults to 'pk' endpoint_name (str): The name of the final path segment that should identify the ViewSet's collection endpoint. nest_prefix (str): Optional prefix under which this ViewSet should be nested. This must correspond to the \"parent_prefix\" of a router with rest_framework_nested.NestedMixin. None indicates this ViewSet should not be nested. parent_lookup_kwargs (dict): Optional mapping of key names that would appear in self.kwargs to django model filter expressions that can be used with the corresponding value from self.kwargs, used only by a nested ViewSet to filter based on the parent object's identity. schema (DefaultSchema): The schema class to use by default in a viewset.","title":"distributions_list"},{"location":"automation-hub/#enumerated-values_32","text":"Parameter Value ordering -ansible_ansibledistribution ordering -base_path ordering -container_containerdistribution ordering -content_guard ordering -group_roles ordering -name ordering -pk ordering -publication ordering -pulp_created ordering -pulp_id ordering -pulp_labels ordering -pulp_last_updated ordering -pulp_type ordering -remote ordering -repository ordering -repository_version ordering -user_roles ordering ansible_ansibledistribution ordering base_path ordering container_containerdistribution ordering content_guard ordering group_roles ordering name ordering pk ordering publication ordering pulp_created ordering pulp_id ordering pulp_labels ordering pulp_last_updated ordering pulp_type ordering remote ordering repository ordering repository_version ordering user_roles Example responses 200 Response { \"meta\": { \"count\": 123 }, \"links\": { \"first\": \"string\", \"previous\": \"string\", \"next\": \"string\", \"last\": \"string\" }, \"data\": [ { \"pulp_id\": \"f3ad2d41-3c12-4e29-ba19-4d3927e49b47\", \"name\": \"string\", \"base_path\": \"string\", \"repository\": { \"name\": \"string\", \"description\": \"string\", \"pulp_id\": \"f3ad2d41-3c12-4e29-ba19-4d3927e49b47\", \"pulp_last_updated\": \"2019-08-24T14:15:22Z\", \"content_count\": 0, \"gpgkey\": \"string\" } } ] }","title":"Enumerated Values"},{"location":"automation-hub/#distributions_ansible_ansible_list","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/distributions/ansible/ansible/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/distributions/ansible/ansible/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/distributions/ansible/ansible/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/distributions/ansible/ansible/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/pulp/api/v3/distributions/ansible/ansible/ List ansible distributions ViewSet for Ansible Distributions.","title":"distributions_ansible_ansible_list"},{"location":"automation-hub/#enumerated-values_33","text":"Parameter Value ordering -ansible_ansibledistribution ordering -base_path ordering -container_containerdistribution ordering -content_guard ordering -group_roles ordering -name ordering -pk ordering -publication ordering -pulp_created ordering -pulp_id ordering -pulp_labels ordering -pulp_last_updated ordering -pulp_type ordering -remote ordering -repository ordering -repository_version ordering -user_roles ordering ansible_ansibledistribution ordering base_path ordering container_containerdistribution ordering content_guard ordering group_roles ordering name ordering pk ordering publication ordering pulp_created ordering pulp_id ordering pulp_labels ordering pulp_last_updated ordering pulp_type ordering remote ordering repository ordering repository_version ordering user_roles Example responses 200 Response { \"count\": 123, \"next\": \"http://api.example.org/accounts/?offset=400&limit=100\", \"previous\": \"http://api.example.org/accounts/?offset=200&limit=100\", \"results\": [ { \"pulp_href\": \"http://example.com\", \"pulp_created\": \"2019-08-24T14:15:22Z\", \"base_path\": \"string\", \"content_guard\": \"http://example.com\", \"name\": \"string\", \"repository\": \"http://example.com\", \"repository_version\": \"http://example.com\", \"client_url\": \"string\", \"pulp_labels\": {} } ] }","title":"Enumerated Values"},{"location":"automation-hub/#distributions_ansible_ansible_create","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Content-Type\": []string{\"application/json\"}, \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"POST\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/distributions/ansible/ansible/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const inputBody = '{ \"base_path\": \"string\", \"content_guard\": \"http://example.com\", \"name\": \"string\", \"repository\": \"http://example.com\", \"repository_version\": \"http://example.com\", \"pulp_labels\": {} }'; const headers = { 'Content-Type':'application/json', 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/distributions/ansible/ansible/', { method: 'POST', body: inputBody, headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Content-Type': 'application/json', 'Accept': 'application/json' } r = requests.post('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/distributions/ansible/ansible/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Content-Type' => 'application/json', 'Accept' => 'application/json' } result = RestClient.post 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/distributions/ansible/ansible/', params: { }, headers: headers p JSON.parse(result) POST /api/automation-hub/pulp/api/v3/distributions/ansible/ansible/ Create an ansible distribution Trigger an asynchronous create task Body parameter { \"base_path\": \"string\", \"content_guard\": \"http://example.com\", \"name\": \"string\", \"repository\": \"http://example.com\", \"repository_version\": \"http://example.com\", \"pulp_labels\": {} } base_path: string content_guard: http://example.com name: string repository: http://example.com repository_version: http://example.com pulp_labels: {}","title":"distributions_ansible_ansible_create"},{"location":"automation-hub/#distributions_ansible_ansible_read","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/distributions/ansible/ansible/{pulp_id}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/distributions/ansible/ansible/{pulp_id}/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/distributions/ansible/ansible/{pulp_id}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/distributions/ansible/ansible/{pulp_id}/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/pulp/api/v3/distributions/ansible/ansible/{pulp_id}/ Inspect an ansible distribution ViewSet for Ansible Distributions.","title":"distributions_ansible_ansible_read"},{"location":"automation-hub/#distributions_ansible_ansible_update","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Content-Type\": []string{\"application/json\"}, \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"PUT\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/distributions/ansible/ansible/{pulp_id}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const inputBody = '{ \"base_path\": \"string\", \"content_guard\": \"http://example.com\", \"name\": \"string\", \"repository\": \"http://example.com\", \"repository_version\": \"http://example.com\", \"pulp_labels\": {} }'; const headers = { 'Content-Type':'application/json', 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/distributions/ansible/ansible/{pulp_id}/', { method: 'PUT', body: inputBody, headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Content-Type': 'application/json', 'Accept': 'application/json' } r = requests.put('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/distributions/ansible/ansible/{pulp_id}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Content-Type' => 'application/json', 'Accept' => 'application/json' } result = RestClient.put 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/distributions/ansible/ansible/{pulp_id}/', params: { }, headers: headers p JSON.parse(result) PUT /api/automation-hub/pulp/api/v3/distributions/ansible/ansible/{pulp_id}/ Update an ansible distribution Trigger an asynchronous update task Body parameter { \"base_path\": \"string\", \"content_guard\": \"http://example.com\", \"name\": \"string\", \"repository\": \"http://example.com\", \"repository_version\": \"http://example.com\", \"pulp_labels\": {} } base_path: string content_guard: http://example.com name: string repository: http://example.com repository_version: http://example.com pulp_labels: {}","title":"distributions_ansible_ansible_update"},{"location":"automation-hub/#distributions_ansible_ansible_partial_update","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Content-Type\": []string{\"application/json\"}, \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"PATCH\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/distributions/ansible/ansible/{pulp_id}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const inputBody = '{ \"base_path\": \"string\", \"content_guard\": \"http://example.com\", \"name\": \"string\", \"repository\": \"http://example.com\", \"repository_version\": \"http://example.com\", \"pulp_labels\": {} }'; const headers = { 'Content-Type':'application/json', 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/distributions/ansible/ansible/{pulp_id}/', { method: 'PATCH', body: inputBody, headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Content-Type': 'application/json', 'Accept': 'application/json' } r = requests.patch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/distributions/ansible/ansible/{pulp_id}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Content-Type' => 'application/json', 'Accept' => 'application/json' } result = RestClient.patch 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/distributions/ansible/ansible/{pulp_id}/', params: { }, headers: headers p JSON.parse(result) PATCH /api/automation-hub/pulp/api/v3/distributions/ansible/ansible/{pulp_id}/ Update an ansible distribution Trigger an asynchronous partial update task Body parameter { \"base_path\": \"string\", \"content_guard\": \"http://example.com\", \"name\": \"string\", \"repository\": \"http://example.com\", \"repository_version\": \"http://example.com\", \"pulp_labels\": {} } base_path: string content_guard: http://example.com name: string repository: http://example.com repository_version: http://example.com pulp_labels: {}","title":"distributions_ansible_ansible_partial_update"},{"location":"automation-hub/#distributions_ansible_ansible_delete","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"DELETE\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/distributions/ansible/ansible/{pulp_id}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/distributions/ansible/ansible/{pulp_id}/', { method: 'DELETE', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.delete('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/distributions/ansible/ansible/{pulp_id}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.delete 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/distributions/ansible/ansible/{pulp_id}/', params: { }, headers: headers p JSON.parse(result) DELETE /api/automation-hub/pulp/api/v3/distributions/ansible/ansible/{pulp_id}/ Delete an ansible distribution Trigger an asynchronous delete task","title":"distributions_ansible_ansible_delete"},{"location":"automation-hub/#distributions_container_container_list","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/distributions/container/container/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/distributions/container/container/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/distributions/container/container/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/distributions/container/container/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/pulp/api/v3/distributions/container/container/ List container distributions The Container Distribution will serve the latest version of a Repository if repository is specified. The Container Distribution will serve a specific repository version if repository_version . Note that either repository or repository_version can be set on a Container Distribution, but not both.","title":"distributions_container_container_list"},{"location":"automation-hub/#enumerated-values_34","text":"Parameter Value ordering -base_path ordering -containerdistroreadme ordering -content_guard ordering -description ordering -distribution_ptr ordering -group_roles ordering -name ordering -namespace ordering -pk ordering -private ordering -publication ordering -pulp_created ordering -pulp_id ordering -pulp_labels ordering -pulp_last_updated ordering -pulp_type ordering -remote ordering -repository ordering -repository_version ordering -user_roles ordering base_path ordering containerdistroreadme ordering content_guard ordering description ordering distribution_ptr ordering group_roles ordering name ordering namespace ordering pk ordering private ordering publication ordering pulp_created ordering pulp_id ordering pulp_labels ordering pulp_last_updated ordering pulp_type ordering remote ordering repository ordering repository_version ordering user_roles Example responses 200 Response { \"count\": 123, \"next\": \"http://api.example.org/accounts/?offset=400&limit=100\", \"previous\": \"http://api.example.org/accounts/?offset=200&limit=100\", \"results\": [ { \"content_guard\": \"http://example.com\", \"pulp_labels\": {}, \"pulp_created\": \"2019-08-24T14:15:22Z\", \"base_path\": \"string\", \"repository\": \"http://example.com\", \"pulp_href\": \"http://example.com\", \"name\": \"string\", \"repository_version\": \"http://example.com\", \"registry_path\": \"string\", \"namespace\": \"http://example.com\", \"private\": true, \"description\": \"string\" } ] }","title":"Enumerated Values"},{"location":"automation-hub/#distributions_container_container_create","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Content-Type\": []string{\"application/json\"}, \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"POST\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/distributions/container/container/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const inputBody = '{ \"content_guard\": \"http://example.com\", \"pulp_labels\": {}, \"base_path\": \"string\", \"repository\": \"http://example.com\", \"name\": \"string\", \"repository_version\": \"http://example.com\", \"private\": true, \"description\": \"string\" }'; const headers = { 'Content-Type':'application/json', 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/distributions/container/container/', { method: 'POST', body: inputBody, headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Content-Type': 'application/json', 'Accept': 'application/json' } r = requests.post('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/distributions/container/container/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Content-Type' => 'application/json', 'Accept' => 'application/json' } result = RestClient.post 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/distributions/container/container/', params: { }, headers: headers p JSON.parse(result) POST /api/automation-hub/pulp/api/v3/distributions/container/container/ Create a container distribution Trigger an asynchronous create task Body parameter { \"content_guard\": \"http://example.com\", \"pulp_labels\": {}, \"base_path\": \"string\", \"repository\": \"http://example.com\", \"name\": \"string\", \"repository_version\": \"http://example.com\", \"private\": true, \"description\": \"string\" } content_guard: http://example.com pulp_labels: {} base_path: string repository: http://example.com name: string repository_version: http://example.com private: true description: string","title":"distributions_container_container_create"},{"location":"automation-hub/#distributions_container_container_read","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/distributions/container/container/{pulp_id}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/distributions/container/container/{pulp_id}/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/distributions/container/container/{pulp_id}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/distributions/container/container/{pulp_id}/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/pulp/api/v3/distributions/container/container/{pulp_id}/ Inspect a container distribution The Container Distribution will serve the latest version of a Repository if repository is specified. The Container Distribution will serve a specific repository version if repository_version . Note that either repository or repository_version can be set on a Container Distribution, but not both.","title":"distributions_container_container_read"},{"location":"automation-hub/#distributions_container_container_update","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Content-Type\": []string{\"application/json\"}, \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"PUT\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/distributions/container/container/{pulp_id}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const inputBody = '{ \"content_guard\": \"http://example.com\", \"pulp_labels\": {}, \"base_path\": \"string\", \"repository\": \"http://example.com\", \"name\": \"string\", \"repository_version\": \"http://example.com\", \"private\": true, \"description\": \"string\" }'; const headers = { 'Content-Type':'application/json', 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/distributions/container/container/{pulp_id}/', { method: 'PUT', body: inputBody, headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Content-Type': 'application/json', 'Accept': 'application/json' } r = requests.put('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/distributions/container/container/{pulp_id}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Content-Type' => 'application/json', 'Accept' => 'application/json' } result = RestClient.put 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/distributions/container/container/{pulp_id}/', params: { }, headers: headers p JSON.parse(result) PUT /api/automation-hub/pulp/api/v3/distributions/container/container/{pulp_id}/ Update a container distribution Trigger an asynchronous update task Body parameter { \"content_guard\": \"http://example.com\", \"pulp_labels\": {}, \"base_path\": \"string\", \"repository\": \"http://example.com\", \"name\": \"string\", \"repository_version\": \"http://example.com\", \"private\": true, \"description\": \"string\" } content_guard: http://example.com pulp_labels: {} base_path: string repository: http://example.com name: string repository_version: http://example.com private: true description: string","title":"distributions_container_container_update"},{"location":"automation-hub/#distributions_container_container_partial_update","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Content-Type\": []string{\"application/json\"}, \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"PATCH\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/distributions/container/container/{pulp_id}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const inputBody = '{ \"content_guard\": \"http://example.com\", \"pulp_labels\": {}, \"base_path\": \"string\", \"repository\": \"http://example.com\", \"name\": \"string\", \"repository_version\": \"http://example.com\", \"private\": true, \"description\": \"string\" }'; const headers = { 'Content-Type':'application/json', 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/distributions/container/container/{pulp_id}/', { method: 'PATCH', body: inputBody, headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Content-Type': 'application/json', 'Accept': 'application/json' } r = requests.patch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/distributions/container/container/{pulp_id}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Content-Type' => 'application/json', 'Accept' => 'application/json' } result = RestClient.patch 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/distributions/container/container/{pulp_id}/', params: { }, headers: headers p JSON.parse(result) PATCH /api/automation-hub/pulp/api/v3/distributions/container/container/{pulp_id}/ Update a container distribution Trigger an asynchronous partial update task Body parameter { \"content_guard\": \"http://example.com\", \"pulp_labels\": {}, \"base_path\": \"string\", \"repository\": \"http://example.com\", \"name\": \"string\", \"repository_version\": \"http://example.com\", \"private\": true, \"description\": \"string\" } content_guard: http://example.com pulp_labels: {} base_path: string repository: http://example.com name: string repository_version: http://example.com private: true description: string","title":"distributions_container_container_partial_update"},{"location":"automation-hub/#distributions_container_container_delete","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"DELETE\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/distributions/container/container/{pulp_id}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/distributions/container/container/{pulp_id}/', { method: 'DELETE', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.delete('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/distributions/container/container/{pulp_id}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.delete 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/distributions/container/container/{pulp_id}/', params: { }, headers: headers p JSON.parse(result) DELETE /api/automation-hub/pulp/api/v3/distributions/container/container/{pulp_id}/ Delete a container distribution Trigger an asynchronous delete task","title":"distributions_container_container_delete"},{"location":"automation-hub/#distributions_container_container_add_role","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Content-Type\": []string{\"application/json\"}, \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"POST\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/distributions/container/container/{pulp_id}/add_role/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const inputBody = '{ \"users\": [], \"groups\": [], \"role\": \"string\" }'; const headers = { 'Content-Type':'application/json', 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/distributions/container/container/{pulp_id}/add_role/', { method: 'POST', body: inputBody, headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Content-Type': 'application/json', 'Accept': 'application/json' } r = requests.post('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/distributions/container/container/{pulp_id}/add_role/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Content-Type' => 'application/json', 'Accept' => 'application/json' } result = RestClient.post 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/distributions/container/container/{pulp_id}/add_role/', params: { }, headers: headers p JSON.parse(result) POST /api/automation-hub/pulp/api/v3/distributions/container/container/{pulp_id}/add_role/ Add a role for this object to users/groups. Body parameter { \"users\": [], \"groups\": [], \"role\": \"string\" } users: [] groups: [] role: string","title":"distributions_container_container_add_role"},{"location":"automation-hub/#distributions_container_container_list_roles","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/distributions/container/container/{pulp_id}/list_roles/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/distributions/container/container/{pulp_id}/list_roles/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/distributions/container/container/{pulp_id}/list_roles/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/distributions/container/container/{pulp_id}/list_roles/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/pulp/api/v3/distributions/container/container/{pulp_id}/list_roles/ List roles assigned to this object.","title":"distributions_container_container_list_roles"},{"location":"automation-hub/#distributions_container_container_my_permissions","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/distributions/container/container/{pulp_id}/my_permissions/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/distributions/container/container/{pulp_id}/my_permissions/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/distributions/container/container/{pulp_id}/my_permissions/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/distributions/container/container/{pulp_id}/my_permissions/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/pulp/api/v3/distributions/container/container/{pulp_id}/my_permissions/ List permissions available to the current user on this object.","title":"distributions_container_container_my_permissions"},{"location":"automation-hub/#distributions_container_container_remove_role","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Content-Type\": []string{\"application/json\"}, \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"POST\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/distributions/container/container/{pulp_id}/remove_role/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const inputBody = '{ \"users\": [], \"groups\": [], \"role\": \"string\" }'; const headers = { 'Content-Type':'application/json', 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/distributions/container/container/{pulp_id}/remove_role/', { method: 'POST', body: inputBody, headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Content-Type': 'application/json', 'Accept': 'application/json' } r = requests.post('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/distributions/container/container/{pulp_id}/remove_role/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Content-Type' => 'application/json', 'Accept' => 'application/json' } result = RestClient.post 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/distributions/container/container/{pulp_id}/remove_role/', params: { }, headers: headers p JSON.parse(result) POST /api/automation-hub/pulp/api/v3/distributions/container/container/{pulp_id}/remove_role/ Remove a role for this object from users/groups. Body parameter { \"users\": [], \"groups\": [], \"role\": \"string\" } users: [] groups: [] role: string","title":"distributions_container_container_remove_role"},{"location":"automation-hub/#docs_apijson_get","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/vnd.oai.openapi+json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/docs/api.json\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/vnd.oai.openapi+json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/docs/api.json', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/vnd.oai.openapi+json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/docs/api.json', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/vnd.oai.openapi+json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/docs/api.json', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/pulp/api/v3/docs/api.json OpenApi3 schema for this API. Format can be selected via content negotiation. YAML: application/vnd.oai.openapi JSON: application/vnd.oai.openapi+json","title":"docs_api.json_get"},{"location":"automation-hub/#enumerated-values_35","text":"Parameter Value lang en-us lang es lang fr lang ja lang ko lang nl lang zh-hans Example responses 200 Response {}","title":"Enumerated Values"},{"location":"automation-hub/#docs_apiyaml_get","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/vnd.oai.openapi\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/docs/api.yaml\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/vnd.oai.openapi' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/docs/api.yaml', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/vnd.oai.openapi' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/docs/api.yaml', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/vnd.oai.openapi' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/docs/api.yaml', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/pulp/api/v3/docs/api.yaml OpenApi3 schema for this API. Format can be selected via content negotiation. YAML: application/vnd.oai.openapi JSON: application/vnd.oai.openapi+json","title":"docs_api.yaml_get"},{"location":"automation-hub/#enumerated-values_36","text":"Parameter Value lang en-us lang es lang fr lang ja lang ko lang nl lang zh-hans Example responses 200 Response","title":"Enumerated Values"},{"location":"automation-hub/#exporters_core_filesystem_list","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/exporters/core/filesystem/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/exporters/core/filesystem/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/exporters/core/filesystem/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/exporters/core/filesystem/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/pulp/api/v3/exporters/core/filesystem/ List filesystem exporters Endpoint for managing FilesystemExporters. FilesystemExporters are provided as a tech preview.","title":"exporters_core_filesystem_list"},{"location":"automation-hub/#enumerated-values_37","text":"Parameter Value ordering -core_fs_exporter ordering -core_pulp_exporter ordering -export ordering -group_roles ordering -name ordering -pk ordering -pulp_created ordering -pulp_id ordering -pulp_labels ordering -pulp_last_updated ordering -pulp_type ordering -user_roles ordering core_fs_exporter ordering core_pulp_exporter ordering export ordering group_roles ordering name ordering pk ordering pulp_created ordering pulp_id ordering pulp_labels ordering pulp_last_updated ordering pulp_type ordering user_roles Example responses 200 Response { \"count\": 123, \"next\": \"http://api.example.org/accounts/?offset=400&limit=100\", \"previous\": \"http://api.example.org/accounts/?offset=200&limit=100\", \"results\": [ { \"pulp_href\": \"http://example.com\", \"pulp_created\": \"2019-08-24T14:15:22Z\", \"name\": \"string\", \"path\": \"string\", \"method\": \"write\" } ] }","title":"Enumerated Values"},{"location":"automation-hub/#exporters_core_filesystem_create","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Content-Type\": []string{\"application/json\"}, \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"POST\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/exporters/core/filesystem/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const inputBody = '{ \"name\": \"string\", \"path\": \"string\", \"method\": \"write\" }'; const headers = { 'Content-Type':'application/json', 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/exporters/core/filesystem/', { method: 'POST', body: inputBody, headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Content-Type': 'application/json', 'Accept': 'application/json' } r = requests.post('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/exporters/core/filesystem/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Content-Type' => 'application/json', 'Accept' => 'application/json' } result = RestClient.post 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/exporters/core/filesystem/', params: { }, headers: headers p JSON.parse(result) POST /api/automation-hub/pulp/api/v3/exporters/core/filesystem/ Create a filesystem exporter Endpoint for managing FilesystemExporters. FilesystemExporters are provided as a tech preview. Body parameter { \"name\": \"string\", \"path\": \"string\", \"method\": \"write\" } name: string path: string method: write","title":"exporters_core_filesystem_create"},{"location":"automation-hub/#exporters_core_filesystem_read","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/exporters/core/filesystem/{pulp_id}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/exporters/core/filesystem/{pulp_id}/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/exporters/core/filesystem/{pulp_id}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/exporters/core/filesystem/{pulp_id}/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/pulp/api/v3/exporters/core/filesystem/{pulp_id}/ Inspect a filesystem exporter Endpoint for managing FilesystemExporters. FilesystemExporters are provided as a tech preview.","title":"exporters_core_filesystem_read"},{"location":"automation-hub/#exporters_core_filesystem_update","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Content-Type\": []string{\"application/json\"}, \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"PUT\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/exporters/core/filesystem/{pulp_id}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const inputBody = '{ \"name\": \"string\", \"path\": \"string\", \"method\": \"write\" }'; const headers = { 'Content-Type':'application/json', 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/exporters/core/filesystem/{pulp_id}/', { method: 'PUT', body: inputBody, headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Content-Type': 'application/json', 'Accept': 'application/json' } r = requests.put('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/exporters/core/filesystem/{pulp_id}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Content-Type' => 'application/json', 'Accept' => 'application/json' } result = RestClient.put 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/exporters/core/filesystem/{pulp_id}/', params: { }, headers: headers p JSON.parse(result) PUT /api/automation-hub/pulp/api/v3/exporters/core/filesystem/{pulp_id}/ Update a filesystem exporter Trigger an asynchronous update task Body parameter { \"name\": \"string\", \"path\": \"string\", \"method\": \"write\" } name: string path: string method: write","title":"exporters_core_filesystem_update"},{"location":"automation-hub/#exporters_core_filesystem_partial_update","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Content-Type\": []string{\"application/json\"}, \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"PATCH\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/exporters/core/filesystem/{pulp_id}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const inputBody = '{ \"name\": \"string\", \"path\": \"string\", \"method\": \"write\" }'; const headers = { 'Content-Type':'application/json', 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/exporters/core/filesystem/{pulp_id}/', { method: 'PATCH', body: inputBody, headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Content-Type': 'application/json', 'Accept': 'application/json' } r = requests.patch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/exporters/core/filesystem/{pulp_id}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Content-Type' => 'application/json', 'Accept' => 'application/json' } result = RestClient.patch 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/exporters/core/filesystem/{pulp_id}/', params: { }, headers: headers p JSON.parse(result) PATCH /api/automation-hub/pulp/api/v3/exporters/core/filesystem/{pulp_id}/ Update a filesystem exporter Trigger an asynchronous partial update task Body parameter { \"name\": \"string\", \"path\": \"string\", \"method\": \"write\" } name: string path: string method: write","title":"exporters_core_filesystem_partial_update"},{"location":"automation-hub/#exporters_core_filesystem_delete","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"DELETE\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/exporters/core/filesystem/{pulp_id}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/exporters/core/filesystem/{pulp_id}/', { method: 'DELETE', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.delete('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/exporters/core/filesystem/{pulp_id}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.delete 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/exporters/core/filesystem/{pulp_id}/', params: { }, headers: headers p JSON.parse(result) DELETE /api/automation-hub/pulp/api/v3/exporters/core/filesystem/{pulp_id}/ Delete a filesystem exporter Trigger an asynchronous delete task","title":"exporters_core_filesystem_delete"},{"location":"automation-hub/#exporters_core_filesystem_exports_list","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/exporters/core/filesystem/{exporter_pk}/exports/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/exporters/core/filesystem/{exporter_pk}/exports/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/exporters/core/filesystem/{exporter_pk}/exports/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/exporters/core/filesystem/{exporter_pk}/exports/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/pulp/api/v3/exporters/core/filesystem/{exporter_pk}/exports/ List filesystem exports Endpoint for managing FilesystemExports. This endpoint is provided as a tech preview.","title":"exporters_core_filesystem_exports_list"},{"location":"automation-hub/#exporters_core_filesystem_exports_create","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Content-Type\": []string{\"application/json\"}, \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"POST\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/exporters/core/filesystem/{exporter_pk}/exports/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const inputBody = '{ \"task\": \"http://example.com\", \"publication\": \"http://example.com\", \"repository_version\": \"http://example.com\" }'; const headers = { 'Content-Type':'application/json', 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/exporters/core/filesystem/{exporter_pk}/exports/', { method: 'POST', body: inputBody, headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Content-Type': 'application/json', 'Accept': 'application/json' } r = requests.post('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/exporters/core/filesystem/{exporter_pk}/exports/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Content-Type' => 'application/json', 'Accept' => 'application/json' } result = RestClient.post 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/exporters/core/filesystem/{exporter_pk}/exports/', params: { }, headers: headers p JSON.parse(result) POST /api/automation-hub/pulp/api/v3/exporters/core/filesystem/{exporter_pk}/exports/ Create a filesystem export Trigger an asynchronous task to export files to the filesystem Body parameter { \"task\": \"http://example.com\", \"publication\": \"http://example.com\", \"repository_version\": \"http://example.com\" } task: http://example.com publication: http://example.com repository_version: http://example.com","title":"exporters_core_filesystem_exports_create"},{"location":"automation-hub/#exporters_core_filesystem_exports_read","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/exporters/core/filesystem/{exporter_pk}/exports/{pulp_id}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/exporters/core/filesystem/{exporter_pk}/exports/{pulp_id}/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/exporters/core/filesystem/{exporter_pk}/exports/{pulp_id}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/exporters/core/filesystem/{exporter_pk}/exports/{pulp_id}/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/pulp/api/v3/exporters/core/filesystem/{exporter_pk}/exports/{pulp_id}/ Inspect a filesystem export Endpoint for managing FilesystemExports. This endpoint is provided as a tech preview.","title":"exporters_core_filesystem_exports_read"},{"location":"automation-hub/#exporters_core_filesystem_exports_delete","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"DELETE\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/exporters/core/filesystem/{exporter_pk}/exports/{pulp_id}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/exporters/core/filesystem/{exporter_pk}/exports/{pulp_id}/', { method: 'DELETE' }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests r = requests.delete('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/exporters/core/filesystem/{exporter_pk}/exports/{pulp_id}/') print(r.json()) require 'rest-client' require 'json' result = RestClient.delete 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/exporters/core/filesystem/{exporter_pk}/exports/{pulp_id}/', params: { } p JSON.parse(result) DELETE /api/automation-hub/pulp/api/v3/exporters/core/filesystem/{exporter_pk}/exports/{pulp_id}/ Delete a filesystem export Endpoint for managing FilesystemExports. This endpoint is provided as a tech preview.","title":"exporters_core_filesystem_exports_delete"},{"location":"automation-hub/#exporters_core_pulp_list","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/exporters/core/pulp/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/exporters/core/pulp/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/exporters/core/pulp/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/exporters/core/pulp/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/pulp/api/v3/exporters/core/pulp/ List pulp exporters ViewSet for viewing PulpExporters.","title":"exporters_core_pulp_list"},{"location":"automation-hub/#enumerated-values_38","text":"Parameter Value ordering -core_fs_exporter ordering -core_pulp_exporter ordering -export ordering -group_roles ordering -name ordering -pk ordering -pulp_created ordering -pulp_id ordering -pulp_labels ordering -pulp_last_updated ordering -pulp_type ordering -user_roles ordering core_fs_exporter ordering core_pulp_exporter ordering export ordering group_roles ordering name ordering pk ordering pulp_created ordering pulp_id ordering pulp_labels ordering pulp_last_updated ordering pulp_type ordering user_roles Example responses 200 Response { \"count\": 123, \"next\": \"http://api.example.org/accounts/?offset=400&limit=100\", \"previous\": \"http://api.example.org/accounts/?offset=200&limit=100\", \"results\": [ { \"pulp_href\": \"http://example.com\", \"pulp_created\": \"2019-08-24T14:15:22Z\", \"name\": \"string\", \"path\": \"string\", \"repositories\": [ \"http://example.com\" ], \"last_export\": \"http://example.com\" } ] }","title":"Enumerated Values"},{"location":"automation-hub/#exporters_core_pulp_create","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Content-Type\": []string{\"application/json\"}, \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"POST\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/exporters/core/pulp/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const inputBody = '{ \"name\": \"string\", \"path\": \"string\", \"repositories\": [ \"http://example.com\" ], \"last_export\": \"http://example.com\" }'; const headers = { 'Content-Type':'application/json', 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/exporters/core/pulp/', { method: 'POST', body: inputBody, headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Content-Type': 'application/json', 'Accept': 'application/json' } r = requests.post('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/exporters/core/pulp/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Content-Type' => 'application/json', 'Accept' => 'application/json' } result = RestClient.post 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/exporters/core/pulp/', params: { }, headers: headers p JSON.parse(result) POST /api/automation-hub/pulp/api/v3/exporters/core/pulp/ Create a pulp exporter ViewSet for viewing PulpExporters. Body parameter { \"name\": \"string\", \"path\": \"string\", \"repositories\": [ \"http://example.com\" ], \"last_export\": \"http://example.com\" } name: string path: string repositories: - http://example.com last_export: http://example.com","title":"exporters_core_pulp_create"},{"location":"automation-hub/#exporters_core_pulp_read","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/exporters/core/pulp/{pulp_id}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/exporters/core/pulp/{pulp_id}/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/exporters/core/pulp/{pulp_id}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/exporters/core/pulp/{pulp_id}/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/pulp/api/v3/exporters/core/pulp/{pulp_id}/ Inspect a pulp exporter ViewSet for viewing PulpExporters.","title":"exporters_core_pulp_read"},{"location":"automation-hub/#exporters_core_pulp_update","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Content-Type\": []string{\"application/json\"}, \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"PUT\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/exporters/core/pulp/{pulp_id}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const inputBody = '{ \"name\": \"string\", \"path\": \"string\", \"repositories\": [ \"http://example.com\" ], \"last_export\": \"http://example.com\" }'; const headers = { 'Content-Type':'application/json', 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/exporters/core/pulp/{pulp_id}/', { method: 'PUT', body: inputBody, headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Content-Type': 'application/json', 'Accept': 'application/json' } r = requests.put('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/exporters/core/pulp/{pulp_id}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Content-Type' => 'application/json', 'Accept' => 'application/json' } result = RestClient.put 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/exporters/core/pulp/{pulp_id}/', params: { }, headers: headers p JSON.parse(result) PUT /api/automation-hub/pulp/api/v3/exporters/core/pulp/{pulp_id}/ Update a pulp exporter Trigger an asynchronous update task Body parameter { \"name\": \"string\", \"path\": \"string\", \"repositories\": [ \"http://example.com\" ], \"last_export\": \"http://example.com\" } name: string path: string repositories: - http://example.com last_export: http://example.com","title":"exporters_core_pulp_update"},{"location":"automation-hub/#exporters_core_pulp_partial_update","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Content-Type\": []string{\"application/json\"}, \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"PATCH\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/exporters/core/pulp/{pulp_id}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const inputBody = '{ \"name\": \"string\", \"path\": \"string\", \"repositories\": [ \"http://example.com\" ], \"last_export\": \"http://example.com\" }'; const headers = { 'Content-Type':'application/json', 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/exporters/core/pulp/{pulp_id}/', { method: 'PATCH', body: inputBody, headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Content-Type': 'application/json', 'Accept': 'application/json' } r = requests.patch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/exporters/core/pulp/{pulp_id}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Content-Type' => 'application/json', 'Accept' => 'application/json' } result = RestClient.patch 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/exporters/core/pulp/{pulp_id}/', params: { }, headers: headers p JSON.parse(result) PATCH /api/automation-hub/pulp/api/v3/exporters/core/pulp/{pulp_id}/ Update a pulp exporter Trigger an asynchronous partial update task Body parameter { \"name\": \"string\", \"path\": \"string\", \"repositories\": [ \"http://example.com\" ], \"last_export\": \"http://example.com\" } name: string path: string repositories: - http://example.com last_export: http://example.com","title":"exporters_core_pulp_partial_update"},{"location":"automation-hub/#exporters_core_pulp_delete","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"DELETE\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/exporters/core/pulp/{pulp_id}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/exporters/core/pulp/{pulp_id}/', { method: 'DELETE', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.delete('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/exporters/core/pulp/{pulp_id}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.delete 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/exporters/core/pulp/{pulp_id}/', params: { }, headers: headers p JSON.parse(result) DELETE /api/automation-hub/pulp/api/v3/exporters/core/pulp/{pulp_id}/ Delete a pulp exporter Trigger an asynchronous delete task","title":"exporters_core_pulp_delete"},{"location":"automation-hub/#exporters_core_pulp_exports_list","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/exporters/core/pulp/{exporter_pk}/exports/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/exporters/core/pulp/{exporter_pk}/exports/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/exporters/core/pulp/{exporter_pk}/exports/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/exporters/core/pulp/{exporter_pk}/exports/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/pulp/api/v3/exporters/core/pulp/{exporter_pk}/exports/ List pulp exports ViewSet for viewing exports from a PulpExporter.","title":"exporters_core_pulp_exports_list"},{"location":"automation-hub/#exporters_core_pulp_exports_create","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Content-Type\": []string{\"application/json\"}, \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"POST\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/exporters/core/pulp/{exporter_pk}/exports/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const inputBody = '{ \"task\": \"http://example.com\", \"full\": true, \"dry_run\": false, \"versions\": [ \"http://example.com\" ], \"chunk_size\": \"string\", \"start_versions\": [ \"http://example.com\" ] }'; const headers = { 'Content-Type':'application/json', 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/exporters/core/pulp/{exporter_pk}/exports/', { method: 'POST', body: inputBody, headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Content-Type': 'application/json', 'Accept': 'application/json' } r = requests.post('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/exporters/core/pulp/{exporter_pk}/exports/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Content-Type' => 'application/json', 'Accept' => 'application/json' } result = RestClient.post 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/exporters/core/pulp/{exporter_pk}/exports/', params: { }, headers: headers p JSON.parse(result) POST /api/automation-hub/pulp/api/v3/exporters/core/pulp/{exporter_pk}/exports/ Create a pulp export Trigger an asynchronous task to export a set of repositories Body parameter { \"task\": \"http://example.com\", \"full\": true, \"dry_run\": false, \"versions\": [ \"http://example.com\" ], \"chunk_size\": \"string\", \"start_versions\": [ \"http://example.com\" ] } task: http://example.com full: true dry_run: false versions: - http://example.com chunk_size: string start_versions: - http://example.com","title":"exporters_core_pulp_exports_create"},{"location":"automation-hub/#exporters_core_pulp_exports_read","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/exporters/core/pulp/{exporter_pk}/exports/{pulp_id}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/exporters/core/pulp/{exporter_pk}/exports/{pulp_id}/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/exporters/core/pulp/{exporter_pk}/exports/{pulp_id}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/exporters/core/pulp/{exporter_pk}/exports/{pulp_id}/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/pulp/api/v3/exporters/core/pulp/{exporter_pk}/exports/{pulp_id}/ Inspect a pulp export ViewSet for viewing exports from a PulpExporter.","title":"exporters_core_pulp_exports_read"},{"location":"automation-hub/#exporters_core_pulp_exports_delete","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"DELETE\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/exporters/core/pulp/{exporter_pk}/exports/{pulp_id}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/exporters/core/pulp/{exporter_pk}/exports/{pulp_id}/', { method: 'DELETE' }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests r = requests.delete('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/exporters/core/pulp/{exporter_pk}/exports/{pulp_id}/') print(r.json()) require 'rest-client' require 'json' result = RestClient.delete 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/exporters/core/pulp/{exporter_pk}/exports/{pulp_id}/', params: { } p JSON.parse(result) DELETE /api/automation-hub/pulp/api/v3/exporters/core/pulp/{exporter_pk}/exports/{pulp_id}/ Delete a pulp export ViewSet for viewing exports from a PulpExporter.","title":"exporters_core_pulp_exports_delete"},{"location":"automation-hub/#galaxy_ng_container_distribution_proxy_read","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/galaxy_ng/container-distribution-proxy/{pulp_id}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/galaxy_ng/container-distribution-proxy/{pulp_id}/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/galaxy_ng/container-distribution-proxy/{pulp_id}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/galaxy_ng/container-distribution-proxy/{pulp_id}/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/pulp/api/v3/galaxy_ng/container-distribution-proxy/{pulp_id}/ Inspect a container distribution A customized named ModelViewSet that knows how to register itself with the Pulp API router. This viewset is discoverable by its name. \"Normal\" Django Models and Master/Detail models are supported by the register_with method. Attributes: lookup_field (str): The name of the field by which an object should be looked up, in addition to any parent lookups if this ViewSet is nested. Defaults to 'pk' endpoint_name (str): The name of the final path segment that should identify the ViewSet's collection endpoint. nest_prefix (str): Optional prefix under which this ViewSet should be nested. This must correspond to the \"parent_prefix\" of a router with rest_framework_nested.NestedMixin. None indicates this ViewSet should not be nested. parent_lookup_kwargs (dict): Optional mapping of key names that would appear in self.kwargs to django model filter expressions that can be used with the corresponding value from self.kwargs, used only by a nested ViewSet to filter based on the parent object's identity. schema (DefaultSchema): The schema class to use by default in a viewset.","title":"galaxy_ng_container_distribution_proxy_read"},{"location":"automation-hub/#galaxy_ng_registry_remote_read","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/galaxy_ng/registry-remote/{pulp_id}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/galaxy_ng/registry-remote/{pulp_id}/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/galaxy_ng/registry-remote/{pulp_id}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/galaxy_ng/registry-remote/{pulp_id}/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/pulp/api/v3/galaxy_ng/registry-remote/{pulp_id}/ Inspect a container registry remote A customized named ModelViewSet that knows how to register itself with the Pulp API router. This viewset is discoverable by its name. \"Normal\" Django Models and Master/Detail models are supported by the register_with method. Attributes: lookup_field (str): The name of the field by which an object should be looked up, in addition to any parent lookups if this ViewSet is nested. Defaults to 'pk' endpoint_name (str): The name of the final path segment that should identify the ViewSet's collection endpoint. nest_prefix (str): Optional prefix under which this ViewSet should be nested. This must correspond to the \"parent_prefix\" of a router with rest_framework_nested.NestedMixin. None indicates this ViewSet should not be nested. parent_lookup_kwargs (dict): Optional mapping of key names that would appear in self.kwargs to django model filter expressions that can be used with the corresponding value from self.kwargs, used only by a nested ViewSet to filter based on the parent object's identity. schema (DefaultSchema): The schema class to use by default in a viewset.","title":"galaxy_ng_registry_remote_read"},{"location":"automation-hub/#groups_roles_list","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/groups/{group_pk}/roles/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/groups/{group_pk}/roles/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/groups/{group_pk}/roles/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/groups/{group_pk}/roles/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/pulp/api/v3/groups/{group_pk}/roles/ List group roles ViewSet for GroupRole. NOTE: This API endpoint is in \"tech preview\" and subject to change","title":"groups_roles_list"},{"location":"automation-hub/#enumerated-values_39","text":"Parameter Value ordering -description ordering -pk ordering -pulp_created ordering -role ordering description ordering pk ordering pulp_created ordering role Example responses 200 Response { \"count\": 123, \"next\": \"http://api.example.org/accounts/?offset=400&limit=100\", \"previous\": \"http://api.example.org/accounts/?offset=200&limit=100\", \"results\": [ { \"pulp_href\": \"http://example.com\", \"pulp_created\": \"2019-08-24T14:15:22Z\", \"role\": \"string\", \"content_object\": \"string\", \"description\": \"string\", \"permissions\": [ \"string\" ] } ] }","title":"Enumerated Values"},{"location":"automation-hub/#groups_roles_create","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Content-Type\": []string{\"application/json\"}, \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"POST\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/groups/{group_pk}/roles/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const inputBody = '{ \"role\": \"string\", \"content_object\": \"string\" }'; const headers = { 'Content-Type':'application/json', 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/groups/{group_pk}/roles/', { method: 'POST', body: inputBody, headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Content-Type': 'application/json', 'Accept': 'application/json' } r = requests.post('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/groups/{group_pk}/roles/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Content-Type' => 'application/json', 'Accept' => 'application/json' } result = RestClient.post 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/groups/{group_pk}/roles/', params: { }, headers: headers p JSON.parse(result) POST /api/automation-hub/pulp/api/v3/groups/{group_pk}/roles/ Create a group role ViewSet for GroupRole. NOTE: This API endpoint is in \"tech preview\" and subject to change Body parameter { \"role\": \"string\", \"content_object\": \"string\" } role: string content_object: string","title":"groups_roles_create"},{"location":"automation-hub/#groups_roles_read","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/groups/{group_pk}/roles/{pulp_id}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/groups/{group_pk}/roles/{pulp_id}/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/groups/{group_pk}/roles/{pulp_id}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/groups/{group_pk}/roles/{pulp_id}/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/pulp/api/v3/groups/{group_pk}/roles/{pulp_id}/ Inspect a group role ViewSet for GroupRole. NOTE: This API endpoint is in \"tech preview\" and subject to change","title":"groups_roles_read"},{"location":"automation-hub/#groups_roles_delete","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"DELETE\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/groups/{group_pk}/roles/{pulp_id}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/groups/{group_pk}/roles/{pulp_id}/', { method: 'DELETE' }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests r = requests.delete('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/groups/{group_pk}/roles/{pulp_id}/') print(r.json()) require 'rest-client' require 'json' result = RestClient.delete 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/groups/{group_pk}/roles/{pulp_id}/', params: { } p JSON.parse(result) DELETE /api/automation-hub/pulp/api/v3/groups/{group_pk}/roles/{pulp_id}/ Delete a group role ViewSet for GroupRole. NOTE: This API endpoint is in \"tech preview\" and subject to change","title":"groups_roles_delete"},{"location":"automation-hub/#importers_core_pulp_list","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/importers/core/pulp/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/importers/core/pulp/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/importers/core/pulp/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/importers/core/pulp/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/pulp/api/v3/importers/core/pulp/ List pulp importers ViewSet for PulpImporters.","title":"importers_core_pulp_list"},{"location":"automation-hub/#enumerated-values_40","text":"Parameter Value ordering -core_pulp_importer ordering -group_roles ordering -import ordering -name ordering -pk ordering -pulp_created ordering -pulp_id ordering -pulp_labels ordering -pulp_last_updated ordering -pulp_type ordering -user_roles ordering core_pulp_importer ordering group_roles ordering import ordering name ordering pk ordering pulp_created ordering pulp_id ordering pulp_labels ordering pulp_last_updated ordering pulp_type ordering user_roles Example responses 200 Response { \"count\": 123, \"next\": \"http://api.example.org/accounts/?offset=400&limit=100\", \"previous\": \"http://api.example.org/accounts/?offset=200&limit=100\", \"results\": [ { \"pulp_href\": \"http://example.com\", \"pulp_created\": \"2019-08-24T14:15:22Z\", \"name\": \"string\", \"repo_mapping\": { \"property1\": \"string\", \"property2\": \"string\" } } ] }","title":"Enumerated Values"},{"location":"automation-hub/#importers_core_pulp_create","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Content-Type\": []string{\"application/json\"}, \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"POST\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/importers/core/pulp/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const inputBody = '{ \"name\": \"string\", \"repo_mapping\": { \"property1\": \"string\", \"property2\": \"string\" } }'; const headers = { 'Content-Type':'application/json', 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/importers/core/pulp/', { method: 'POST', body: inputBody, headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Content-Type': 'application/json', 'Accept': 'application/json' } r = requests.post('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/importers/core/pulp/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Content-Type' => 'application/json', 'Accept' => 'application/json' } result = RestClient.post 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/importers/core/pulp/', params: { }, headers: headers p JSON.parse(result) POST /api/automation-hub/pulp/api/v3/importers/core/pulp/ Create a pulp importer ViewSet for PulpImporters. Body parameter { \"name\": \"string\", \"repo_mapping\": { \"property1\": \"string\", \"property2\": \"string\" } } name: string repo_mapping: property1: string property2: string","title":"importers_core_pulp_create"},{"location":"automation-hub/#importers_core_pulp_read","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/importers/core/pulp/{pulp_id}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/importers/core/pulp/{pulp_id}/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/importers/core/pulp/{pulp_id}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/importers/core/pulp/{pulp_id}/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/pulp/api/v3/importers/core/pulp/{pulp_id}/ Inspect a pulp importer ViewSet for PulpImporters.","title":"importers_core_pulp_read"},{"location":"automation-hub/#importers_core_pulp_update","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Content-Type\": []string{\"application/json\"}, \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"PUT\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/importers/core/pulp/{pulp_id}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const inputBody = '{ \"name\": \"string\", \"repo_mapping\": { \"property1\": \"string\", \"property2\": \"string\" } }'; const headers = { 'Content-Type':'application/json', 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/importers/core/pulp/{pulp_id}/', { method: 'PUT', body: inputBody, headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Content-Type': 'application/json', 'Accept': 'application/json' } r = requests.put('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/importers/core/pulp/{pulp_id}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Content-Type' => 'application/json', 'Accept' => 'application/json' } result = RestClient.put 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/importers/core/pulp/{pulp_id}/', params: { }, headers: headers p JSON.parse(result) PUT /api/automation-hub/pulp/api/v3/importers/core/pulp/{pulp_id}/ Update a pulp importer ViewSet for PulpImporters. Body parameter { \"name\": \"string\", \"repo_mapping\": { \"property1\": \"string\", \"property2\": \"string\" } } name: string repo_mapping: property1: string property2: string","title":"importers_core_pulp_update"},{"location":"automation-hub/#importers_core_pulp_partial_update","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Content-Type\": []string{\"application/json\"}, \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"PATCH\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/importers/core/pulp/{pulp_id}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const inputBody = '{ \"name\": \"string\", \"repo_mapping\": { \"property1\": \"string\", \"property2\": \"string\" } }'; const headers = { 'Content-Type':'application/json', 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/importers/core/pulp/{pulp_id}/', { method: 'PATCH', body: inputBody, headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Content-Type': 'application/json', 'Accept': 'application/json' } r = requests.patch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/importers/core/pulp/{pulp_id}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Content-Type' => 'application/json', 'Accept' => 'application/json' } result = RestClient.patch 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/importers/core/pulp/{pulp_id}/', params: { }, headers: headers p JSON.parse(result) PATCH /api/automation-hub/pulp/api/v3/importers/core/pulp/{pulp_id}/ Update a pulp importer ViewSet for PulpImporters. Body parameter { \"name\": \"string\", \"repo_mapping\": { \"property1\": \"string\", \"property2\": \"string\" } } name: string repo_mapping: property1: string property2: string","title":"importers_core_pulp_partial_update"},{"location":"automation-hub/#importers_core_pulp_delete","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"DELETE\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/importers/core/pulp/{pulp_id}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/importers/core/pulp/{pulp_id}/', { method: 'DELETE' }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests r = requests.delete('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/importers/core/pulp/{pulp_id}/') print(r.json()) require 'rest-client' require 'json' result = RestClient.delete 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/importers/core/pulp/{pulp_id}/', params: { } p JSON.parse(result) DELETE /api/automation-hub/pulp/api/v3/importers/core/pulp/{pulp_id}/ Delete a pulp importer ViewSet for PulpImporters.","title":"importers_core_pulp_delete"},{"location":"automation-hub/#importers_core_pulp_imports_list","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/importers/core/pulp/{importer_pk}/imports/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/importers/core/pulp/{importer_pk}/imports/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/importers/core/pulp/{importer_pk}/imports/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/importers/core/pulp/{importer_pk}/imports/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/pulp/api/v3/importers/core/pulp/{importer_pk}/imports/ List pulp imports ViewSet for PulpImports.","title":"importers_core_pulp_imports_list"},{"location":"automation-hub/#importers_core_pulp_imports_create","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Content-Type\": []string{\"application/json\"}, \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"POST\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/importers/core/pulp/{importer_pk}/imports/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const inputBody = '{ \"path\": \"string\", \"toc\": \"string\", \"create_repositories\": false }'; const headers = { 'Content-Type':'application/json', 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/importers/core/pulp/{importer_pk}/imports/', { method: 'POST', body: inputBody, headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Content-Type': 'application/json', 'Accept': 'application/json' } r = requests.post('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/importers/core/pulp/{importer_pk}/imports/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Content-Type' => 'application/json', 'Accept' => 'application/json' } result = RestClient.post 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/importers/core/pulp/{importer_pk}/imports/', params: { }, headers: headers p JSON.parse(result) POST /api/automation-hub/pulp/api/v3/importers/core/pulp/{importer_pk}/imports/ Create a pulp import Trigger an asynchronous task to import a Pulp export. Body parameter { \"path\": \"string\", \"toc\": \"string\", \"create_repositories\": false } path: string toc: string create_repositories: false","title":"importers_core_pulp_imports_create"},{"location":"automation-hub/#importers_core_pulp_imports_read","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/importers/core/pulp/{importer_pk}/imports/{pulp_id}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/importers/core/pulp/{importer_pk}/imports/{pulp_id}/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/importers/core/pulp/{importer_pk}/imports/{pulp_id}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/importers/core/pulp/{importer_pk}/imports/{pulp_id}/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/pulp/api/v3/importers/core/pulp/{importer_pk}/imports/{pulp_id}/ Inspect a pulp import ViewSet for PulpImports.","title":"importers_core_pulp_imports_read"},{"location":"automation-hub/#importers_core_pulp_imports_delete","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"DELETE\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/importers/core/pulp/{importer_pk}/imports/{pulp_id}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/importers/core/pulp/{importer_pk}/imports/{pulp_id}/', { method: 'DELETE' }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests r = requests.delete('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/importers/core/pulp/{importer_pk}/imports/{pulp_id}/') print(r.json()) require 'rest-client' require 'json' result = RestClient.delete 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/importers/core/pulp/{importer_pk}/imports/{pulp_id}/', params: { } p JSON.parse(result) DELETE /api/automation-hub/pulp/api/v3/importers/core/pulp/{importer_pk}/imports/{pulp_id}/ Delete a pulp import ViewSet for PulpImports.","title":"importers_core_pulp_imports_delete"},{"location":"automation-hub/#pulp_import_check_post","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Content-Type\": []string{\"application/json\"}, \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"POST\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/importers/core/pulp/import-check/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const inputBody = '{ \"path\": \"string\", \"toc\": \"string\", \"repo_mapping\": \"string\" }'; const headers = { 'Content-Type':'application/json', 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/importers/core/pulp/import-check/', { method: 'POST', body: inputBody, headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Content-Type': 'application/json', 'Accept': 'application/json' } r = requests.post('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/importers/core/pulp/import-check/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Content-Type' => 'application/json', 'Accept' => 'application/json' } result = RestClient.post 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/importers/core/pulp/import-check/', params: { }, headers: headers p JSON.parse(result) POST /api/automation-hub/pulp/api/v3/importers/core/pulp/import-check/ Validate the parameters to be used for a PulpImport call Evaluates validity of proposed PulpImport parameters 'toc', 'path', and 'repo_mapping'. Checks that toc, path are in ALLOWED_IMPORT_PATHS if ALLOWED: Checks that toc, path exist and are readable If toc specified, checks that containing dir is writeable Checks that repo_mapping is valid JSON Body parameter { \"path\": \"string\", \"toc\": \"string\", \"repo_mapping\": \"string\" } path: string toc: string repo_mapping: string","title":"pulp_import_check_post"},{"location":"automation-hub/#orphans_delete","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"DELETE\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/orphans/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/orphans/', { method: 'DELETE', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.delete('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/orphans/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.delete 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/orphans/', params: { }, headers: headers p JSON.parse(result) DELETE /api/automation-hub/pulp/api/v3/orphans/ Delete orphans DEPRECATED! Trigger an asynchronous task that deletes all orphaned content and artifacts. Use the POST /pulp/api/v3/orphans/cleanup/ call instead. Example responses 202 Response { \"task\": \"http://example.com\" }","title":"orphans_delete"},{"location":"automation-hub/#orphans_cleanup_cleanup","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Content-Type\": []string{\"application/json\"}, \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"POST\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/orphans/cleanup/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const inputBody = '{ \"content_hrefs\": [ null ], \"orphan_protection_time\": 0 }'; const headers = { 'Content-Type':'application/json', 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/orphans/cleanup/', { method: 'POST', body: inputBody, headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Content-Type': 'application/json', 'Accept': 'application/json' } r = requests.post('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/orphans/cleanup/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Content-Type' => 'application/json', 'Accept' => 'application/json' } result = RestClient.post 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/orphans/cleanup/', params: { }, headers: headers p JSON.parse(result) POST /api/automation-hub/pulp/api/v3/orphans/cleanup/ Trigger an asynchronous orphan cleanup operation. Body parameter { \"content_hrefs\": [ null ], \"orphan_protection_time\": 0 } content_hrefs: - null orphan_protection_time: 0","title":"orphans_cleanup_cleanup"},{"location":"automation-hub/#publications_list","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/publications/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/publications/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/publications/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/publications/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/pulp/api/v3/publications/ List publications A customized named ModelViewSet that knows how to register itself with the Pulp API router. This viewset is discoverable by its name. \"Normal\" Django Models and Master/Detail models are supported by the register_with method. Attributes: lookup_field (str): The name of the field by which an object should be looked up, in addition to any parent lookups if this ViewSet is nested. Defaults to 'pk' endpoint_name (str): The name of the final path segment that should identify the ViewSet's collection endpoint. nest_prefix (str): Optional prefix under which this ViewSet should be nested. This must correspond to the \"parent_prefix\" of a router with rest_framework_nested.NestedMixin. None indicates this ViewSet should not be nested. parent_lookup_kwargs (dict): Optional mapping of key names that would appear in self.kwargs to django model filter expressions that can be used with the corresponding value from self.kwargs, used only by a nested ViewSet to filter based on the parent object's identity. schema (DefaultSchema): The schema class to use by default in a viewset.","title":"publications_list"},{"location":"automation-hub/#enumerated-values_41","text":"Parameter Value ordering -complete ordering -distribution ordering -group_roles ordering -pass_through ordering -pk ordering -published_artifact ordering -published_metadata ordering -pulp_created ordering -pulp_id ordering -pulp_labels ordering -pulp_last_updated ordering -pulp_type ordering -repository_version ordering -user_roles ordering complete ordering distribution ordering group_roles ordering pass_through ordering pk ordering published_artifact ordering published_metadata ordering pulp_created ordering pulp_id ordering pulp_labels ordering pulp_last_updated ordering pulp_type ordering repository_version ordering user_roles Example responses 200 Response { \"count\": 123, \"next\": \"http://api.example.org/accounts/?offset=400&limit=100\", \"previous\": \"http://api.example.org/accounts/?offset=200&limit=100\", \"results\": [ { \"pulp_href\": \"http://example.com\", \"pulp_created\": \"2019-08-24T14:15:22Z\", \"repository_version\": \"http://example.com\", \"repository\": \"http://example.com\" } ] }","title":"Enumerated Values"},{"location":"automation-hub/#pulp_ansible_namespaces_list","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/pulp_ansible/namespaces/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/pulp_ansible/namespaces/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/pulp_ansible/namespaces/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/pulp_ansible/namespaces/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/pulp/api/v3/pulp_ansible/namespaces/ List namespaces A customized named ModelViewSet that knows how to register itself with the Pulp API router. This viewset is discoverable by its name. \"Normal\" Django Models and Master/Detail models are supported by the register_with method. Attributes: lookup_field (str): The name of the field by which an object should be looked up, in addition to any parent lookups if this ViewSet is nested. Defaults to 'pk' endpoint_name (str): The name of the final path segment that should identify the ViewSet's collection endpoint. nest_prefix (str): Optional prefix under which this ViewSet should be nested. This must correspond to the \"parent_prefix\" of a router with rest_framework_nested.NestedMixin. None indicates this ViewSet should not be nested. parent_lookup_kwargs (dict): Optional mapping of key names that would appear in self.kwargs to django model filter expressions that can be used with the corresponding value from self.kwargs, used only by a nested ViewSet to filter based on the parent object's identity. schema (DefaultSchema): The schema class to use by default in a viewset.","title":"pulp_ansible_namespaces_list"},{"location":"automation-hub/#pulp_ansible_namespaces_read","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/pulp_ansible/namespaces/{id}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/pulp_ansible/namespaces/{id}/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/pulp_ansible/namespaces/{id}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/pulp_ansible/namespaces/{id}/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/pulp/api/v3/pulp_ansible/namespaces/{id}/ Inspect a namespace A customized named ModelViewSet that knows how to register itself with the Pulp API router. This viewset is discoverable by its name. \"Normal\" Django Models and Master/Detail models are supported by the register_with method. Attributes: lookup_field (str): The name of the field by which an object should be looked up, in addition to any parent lookups if this ViewSet is nested. Defaults to 'pk' endpoint_name (str): The name of the final path segment that should identify the ViewSet's collection endpoint. nest_prefix (str): Optional prefix under which this ViewSet should be nested. This must correspond to the \"parent_prefix\" of a router with rest_framework_nested.NestedMixin. None indicates this ViewSet should not be nested. parent_lookup_kwargs (dict): Optional mapping of key names that would appear in self.kwargs to django model filter expressions that can be used with the corresponding value from self.kwargs, used only by a nested ViewSet to filter based on the parent object's identity. schema (DefaultSchema): The schema class to use by default in a viewset.","title":"pulp_ansible_namespaces_read"},{"location":"automation-hub/#pulp_ansible_tags_list","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/pulp_ansible/tags/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/pulp_ansible/tags/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/pulp_ansible/tags/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/pulp_ansible/tags/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/pulp/api/v3/pulp_ansible/tags/ List tags ViewSet for Tag models.","title":"pulp_ansible_tags_list"},{"location":"automation-hub/#pulp_container_namespaces_list","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/pulp_container/namespaces/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/pulp_container/namespaces/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/pulp_container/namespaces/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/pulp_container/namespaces/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/pulp/api/v3/pulp_container/namespaces/ List container namespaces ViewSet for ContainerNamespaces.","title":"pulp_container_namespaces_list"},{"location":"automation-hub/#enumerated-values_42","text":"Parameter Value ordering -container_distributions ordering -group_roles ordering -name ordering -pk ordering -pulp_created ordering -pulp_id ordering -pulp_labels ordering -pulp_last_updated ordering -user_roles ordering container_distributions ordering group_roles ordering name ordering pk ordering pulp_created ordering pulp_id ordering pulp_labels ordering pulp_last_updated ordering user_roles Example responses 200 Response { \"count\": 123, \"next\": \"http://api.example.org/accounts/?offset=400&limit=100\", \"previous\": \"http://api.example.org/accounts/?offset=200&limit=100\", \"results\": [ { \"pulp_href\": \"http://example.com\", \"pulp_created\": \"2019-08-24T14:15:22Z\", \"name\": \"string\" } ] }","title":"Enumerated Values"},{"location":"automation-hub/#pulp_container_namespaces_create","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Content-Type\": []string{\"application/json\"}, \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"POST\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/pulp_container/namespaces/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const inputBody = '{ \"name\": \"string\" }'; const headers = { 'Content-Type':'application/json', 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/pulp_container/namespaces/', { method: 'POST', body: inputBody, headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Content-Type': 'application/json', 'Accept': 'application/json' } r = requests.post('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/pulp_container/namespaces/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Content-Type' => 'application/json', 'Accept' => 'application/json' } result = RestClient.post 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/pulp_container/namespaces/', params: { }, headers: headers p JSON.parse(result) POST /api/automation-hub/pulp/api/v3/pulp_container/namespaces/ Create a container namespace ViewSet for ContainerNamespaces. Body parameter { \"name\": \"string\" } name: string","title":"pulp_container_namespaces_create"},{"location":"automation-hub/#pulp_container_namespaces_read","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/pulp_container/namespaces/{pulp_id}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/pulp_container/namespaces/{pulp_id}/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/pulp_container/namespaces/{pulp_id}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/pulp_container/namespaces/{pulp_id}/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/pulp/api/v3/pulp_container/namespaces/{pulp_id}/ Inspect a container namespace ViewSet for ContainerNamespaces.","title":"pulp_container_namespaces_read"},{"location":"automation-hub/#pulp_container_namespaces_delete","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"DELETE\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/pulp_container/namespaces/{pulp_id}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/pulp_container/namespaces/{pulp_id}/', { method: 'DELETE', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.delete('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/pulp_container/namespaces/{pulp_id}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.delete 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/pulp_container/namespaces/{pulp_id}/', params: { }, headers: headers p JSON.parse(result) DELETE /api/automation-hub/pulp/api/v3/pulp_container/namespaces/{pulp_id}/ Delete a container namespace Trigger an asynchronous delete task","title":"pulp_container_namespaces_delete"},{"location":"automation-hub/#pulp_container_namespaces_add_role","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Content-Type\": []string{\"application/json\"}, \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"POST\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/pulp_container/namespaces/{pulp_id}/add_role/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const inputBody = '{ \"users\": [], \"groups\": [], \"role\": \"string\" }'; const headers = { 'Content-Type':'application/json', 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/pulp_container/namespaces/{pulp_id}/add_role/', { method: 'POST', body: inputBody, headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Content-Type': 'application/json', 'Accept': 'application/json' } r = requests.post('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/pulp_container/namespaces/{pulp_id}/add_role/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Content-Type' => 'application/json', 'Accept' => 'application/json' } result = RestClient.post 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/pulp_container/namespaces/{pulp_id}/add_role/', params: { }, headers: headers p JSON.parse(result) POST /api/automation-hub/pulp/api/v3/pulp_container/namespaces/{pulp_id}/add_role/ Add a role for this object to users/groups. Body parameter { \"users\": [], \"groups\": [], \"role\": \"string\" } users: [] groups: [] role: string","title":"pulp_container_namespaces_add_role"},{"location":"automation-hub/#pulp_container_namespaces_list_roles","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/pulp_container/namespaces/{pulp_id}/list_roles/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/pulp_container/namespaces/{pulp_id}/list_roles/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/pulp_container/namespaces/{pulp_id}/list_roles/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/pulp_container/namespaces/{pulp_id}/list_roles/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/pulp/api/v3/pulp_container/namespaces/{pulp_id}/list_roles/ List roles assigned to this object.","title":"pulp_container_namespaces_list_roles"},{"location":"automation-hub/#pulp_container_namespaces_my_permissions","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/pulp_container/namespaces/{pulp_id}/my_permissions/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/pulp_container/namespaces/{pulp_id}/my_permissions/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/pulp_container/namespaces/{pulp_id}/my_permissions/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/pulp_container/namespaces/{pulp_id}/my_permissions/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/pulp/api/v3/pulp_container/namespaces/{pulp_id}/my_permissions/ List permissions available to the current user on this object.","title":"pulp_container_namespaces_my_permissions"},{"location":"automation-hub/#pulp_container_namespaces_remove_role","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Content-Type\": []string{\"application/json\"}, \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"POST\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/pulp_container/namespaces/{pulp_id}/remove_role/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const inputBody = '{ \"users\": [], \"groups\": [], \"role\": \"string\" }'; const headers = { 'Content-Type':'application/json', 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/pulp_container/namespaces/{pulp_id}/remove_role/', { method: 'POST', body: inputBody, headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Content-Type': 'application/json', 'Accept': 'application/json' } r = requests.post('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/pulp_container/namespaces/{pulp_id}/remove_role/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Content-Type' => 'application/json', 'Accept' => 'application/json' } result = RestClient.post 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/pulp_container/namespaces/{pulp_id}/remove_role/', params: { }, headers: headers p JSON.parse(result) POST /api/automation-hub/pulp/api/v3/pulp_container/namespaces/{pulp_id}/remove_role/ Remove a role for this object from users/groups. Body parameter { \"users\": [], \"groups\": [], \"role\": \"string\" } users: [] groups: [] role: string","title":"pulp_container_namespaces_remove_role"},{"location":"automation-hub/#remotes_list","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/remotes/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/remotes/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/remotes/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/remotes/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/pulp/api/v3/remotes/ List remotes A customized named ModelViewSet that knows how to register itself with the Pulp API router. This viewset is discoverable by its name. \"Normal\" Django Models and Master/Detail models are supported by the register_with method. Attributes: lookup_field (str): The name of the field by which an object should be looked up, in addition to any parent lookups if this ViewSet is nested. Defaults to 'pk' endpoint_name (str): The name of the final path segment that should identify the ViewSet's collection endpoint. nest_prefix (str): Optional prefix under which this ViewSet should be nested. This must correspond to the \"parent_prefix\" of a router with rest_framework_nested.NestedMixin. None indicates this ViewSet should not be nested. parent_lookup_kwargs (dict): Optional mapping of key names that would appear in self.kwargs to django model filter expressions that can be used with the corresponding value from self.kwargs, used only by a nested ViewSet to filter based on the parent object's identity. schema (DefaultSchema): The schema class to use by default in a viewset.","title":"remotes_list"},{"location":"automation-hub/#enumerated-values_43","text":"Parameter Value ordering -alternatecontentsource ordering -ansible_collectionremote ordering -ansible_gitremote ordering -ansible_roleremote ordering -basedistribution ordering -ca_cert ordering -client_cert ordering -client_key ordering -connect_timeout ordering -container_containerremote ordering -distribution ordering -download_concurrency ordering -galaxy_containerregistryremote ordering -group_roles ordering -headers ordering -max_retries ordering -name ordering -password ordering -pk ordering -policy ordering -proxy_password ordering -proxy_url ordering -proxy_username ordering -pulp_created ordering -pulp_id ordering -pulp_labels ordering -pulp_last_updated ordering -pulp_type ordering -rate_limit ordering -remoteartifact ordering -repository ordering -sock_connect_timeout ordering -sock_read_timeout ordering -tls_validation ordering -total_timeout ordering -url ordering -user_roles ordering -username ordering alternatecontentsource ordering ansible_collectionremote ordering ansible_gitremote ordering ansible_roleremote ordering basedistribution ordering ca_cert ordering client_cert ordering client_key ordering connect_timeout ordering container_containerremote ordering distribution ordering download_concurrency ordering galaxy_containerregistryremote ordering group_roles ordering headers ordering max_retries ordering name ordering password ordering pk ordering policy ordering proxy_password ordering proxy_url ordering proxy_username ordering pulp_created ordering pulp_id ordering pulp_labels ordering pulp_last_updated ordering pulp_type ordering rate_limit ordering remoteartifact ordering repository ordering sock_connect_timeout ordering sock_read_timeout ordering tls_validation ordering total_timeout ordering url ordering user_roles ordering username Example responses 200 Response { \"count\": 123, \"next\": \"http://api.example.org/accounts/?offset=400&limit=100\", \"previous\": \"http://api.example.org/accounts/?offset=200&limit=100\", \"results\": [ { \"pulp_href\": \"http://example.com\", \"pulp_created\": \"2019-08-24T14:15:22Z\", \"name\": \"string\", \"url\": \"string\", \"ca_cert\": \"string\", \"client_cert\": \"string\", \"tls_validation\": true, \"proxy_url\": \"string\", \"pulp_labels\": {}, \"pulp_last_updated\": \"2019-08-24T14:15:22Z\", \"download_concurrency\": 1, \"max_retries\": 0, \"policy\": \"immediate\", \"total_timeout\": 0, \"connect_timeout\": 0, \"sock_connect_timeout\": 0, \"sock_read_timeout\": 0, \"headers\": [ {} ], \"rate_limit\": 0 } ] }","title":"Enumerated Values"},{"location":"automation-hub/#remotes_ansible_collection_list","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/remotes/ansible/collection/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/remotes/ansible/collection/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/remotes/ansible/collection/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/remotes/ansible/collection/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/pulp/api/v3/remotes/ansible/collection/ List collection remotes ViewSet for Collection Remotes.","title":"remotes_ansible_collection_list"},{"location":"automation-hub/#enumerated-values_44","text":"Parameter Value ordering -alternatecontentsource ordering -ansible_collectionremote ordering -ansible_gitremote ordering -ansible_roleremote ordering -basedistribution ordering -ca_cert ordering -client_cert ordering -client_key ordering -connect_timeout ordering -container_containerremote ordering -distribution ordering -download_concurrency ordering -galaxy_containerregistryremote ordering -group_roles ordering -headers ordering -max_retries ordering -name ordering -password ordering -pk ordering -policy ordering -proxy_password ordering -proxy_url ordering -proxy_username ordering -pulp_created ordering -pulp_id ordering -pulp_labels ordering -pulp_last_updated ordering -pulp_type ordering -rate_limit ordering -remoteartifact ordering -repository ordering -sock_connect_timeout ordering -sock_read_timeout ordering -tls_validation ordering -total_timeout ordering -url ordering -user_roles ordering -username ordering alternatecontentsource ordering ansible_collectionremote ordering ansible_gitremote ordering ansible_roleremote ordering basedistribution ordering ca_cert ordering client_cert ordering client_key ordering connect_timeout ordering container_containerremote ordering distribution ordering download_concurrency ordering galaxy_containerregistryremote ordering group_roles ordering headers ordering max_retries ordering name ordering password ordering pk ordering policy ordering proxy_password ordering proxy_url ordering proxy_username ordering pulp_created ordering pulp_id ordering pulp_labels ordering pulp_last_updated ordering pulp_type ordering rate_limit ordering remoteartifact ordering repository ordering sock_connect_timeout ordering sock_read_timeout ordering tls_validation ordering total_timeout ordering url ordering user_roles ordering username Example responses 200 Response { \"meta\": { \"count\": 123 }, \"links\": { \"first\": \"string\", \"previous\": \"string\", \"next\": \"string\", \"last\": \"string\" }, \"data\": [ { \"pk\": \"4af43191-2f37-4a16-8471-4e8e40c314af\", \"name\": \"string\", \"url\": \"string\", \"auth_url\": \"string\", \"policy\": \"immediate\", \"requirements_file\": \"string\", \"created_at\": \"2019-08-24T14:15:22Z\", \"updated_at\": \"2019-08-24T14:15:22Z\", \"username\": \"string\", \"tls_validation\": true, \"client_cert\": \"string\", \"ca_cert\": \"string\", \"last_sync_task\": \"string\", \"repositories\": [ { \"name\": \"string\", \"description\": \"string\", \"next_version\": 2147483647, \"distributions\": [ { \"name\": \"string\", \"base_path\": \"string\", \"content_guard\": \"75e6b91e-c196-4627-9383-ce2e1e08d705\", \"created_at\": \"2019-08-24T14:15:22Z\", \"updated_at\": \"2019-08-24T14:15:22Z\" } ], \"created_at\": \"2019-08-24T14:15:22Z\", \"updated_at\": \"2019-08-24T14:15:22Z\", \"last_sync_task\": \"string\" } ], \"pulp_href\": \"http://example.com\", \"download_concurrency\": 1, \"proxy_url\": \"string\", \"proxy_username\": \"string\", \"write_only_fields\": [ null ], \"rate_limit\": 0, \"signed_only\": false } ] }","title":"Enumerated Values"},{"location":"automation-hub/#remotes_ansible_collection_create","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Content-Type\": []string{\"application/json\"}, \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"POST\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/remotes/ansible/collection/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const inputBody = '{ \"url\": \"string\", \"auth_url\": \"string\", \"token\": \"string\", \"policy\": \"immediate\", \"requirements_file\": \"string\", \"created_at\": \"2019-08-24T14:15:22Z\", \"updated_at\": \"2019-08-24T14:15:22Z\", \"username\": \"string\", \"password\": \"string\", \"tls_validation\": true, \"client_key\": \"string\", \"client_cert\": \"string\", \"ca_cert\": \"string\", \"download_concurrency\": 1, \"proxy_url\": \"string\", \"proxy_username\": \"string\", \"proxy_password\": \"string\", \"rate_limit\": 0, \"signed_only\": false }'; const headers = { 'Content-Type':'application/json', 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/remotes/ansible/collection/', { method: 'POST', body: inputBody, headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Content-Type': 'application/json', 'Accept': 'application/json' } r = requests.post('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/remotes/ansible/collection/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Content-Type' => 'application/json', 'Accept' => 'application/json' } result = RestClient.post 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/remotes/ansible/collection/', params: { }, headers: headers p JSON.parse(result) POST /api/automation-hub/pulp/api/v3/remotes/ansible/collection/ Create a collection remote ViewSet for Collection Remotes. Body parameter { \"url\": \"string\", \"auth_url\": \"string\", \"token\": \"string\", \"policy\": \"immediate\", \"requirements_file\": \"string\", \"created_at\": \"2019-08-24T14:15:22Z\", \"updated_at\": \"2019-08-24T14:15:22Z\", \"username\": \"string\", \"password\": \"string\", \"tls_validation\": true, \"client_key\": \"string\", \"client_cert\": \"string\", \"ca_cert\": \"string\", \"download_concurrency\": 1, \"proxy_url\": \"string\", \"proxy_username\": \"string\", \"proxy_password\": \"string\", \"rate_limit\": 0, \"signed_only\": false } url: string auth_url: string token: string policy: immediate requirements_file: string created_at: 2019-08-24T14:15:22Z updated_at: 2019-08-24T14:15:22Z username: string password: string tls_validation: true client_key: string client_cert: string ca_cert: string download_concurrency: 1 proxy_url: string proxy_username: string proxy_password: string rate_limit: 0 signed_only: false","title":"remotes_ansible_collection_create"},{"location":"automation-hub/#remotes_ansible_collection_read","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/remotes/ansible/collection/{pulp_id}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/remotes/ansible/collection/{pulp_id}/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/remotes/ansible/collection/{pulp_id}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/remotes/ansible/collection/{pulp_id}/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/pulp/api/v3/remotes/ansible/collection/{pulp_id}/ Inspect a collection remote ViewSet for Collection Remotes.","title":"remotes_ansible_collection_read"},{"location":"automation-hub/#remotes_ansible_collection_update","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Content-Type\": []string{\"application/json\"}, \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"PUT\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/remotes/ansible/collection/{pulp_id}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const inputBody = '{ \"url\": \"string\", \"auth_url\": \"string\", \"token\": \"string\", \"policy\": \"immediate\", \"requirements_file\": \"string\", \"created_at\": \"2019-08-24T14:15:22Z\", \"updated_at\": \"2019-08-24T14:15:22Z\", \"username\": \"string\", \"password\": \"string\", \"tls_validation\": true, \"client_key\": \"string\", \"client_cert\": \"string\", \"ca_cert\": \"string\", \"download_concurrency\": 1, \"proxy_url\": \"string\", \"proxy_username\": \"string\", \"proxy_password\": \"string\", \"rate_limit\": 0, \"signed_only\": false }'; const headers = { 'Content-Type':'application/json', 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/remotes/ansible/collection/{pulp_id}/', { method: 'PUT', body: inputBody, headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Content-Type': 'application/json', 'Accept': 'application/json' } r = requests.put('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/remotes/ansible/collection/{pulp_id}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Content-Type' => 'application/json', 'Accept' => 'application/json' } result = RestClient.put 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/remotes/ansible/collection/{pulp_id}/', params: { }, headers: headers p JSON.parse(result) PUT /api/automation-hub/pulp/api/v3/remotes/ansible/collection/{pulp_id}/ Update a collection remote Trigger an asynchronous update task Body parameter { \"url\": \"string\", \"auth_url\": \"string\", \"token\": \"string\", \"policy\": \"immediate\", \"requirements_file\": \"string\", \"created_at\": \"2019-08-24T14:15:22Z\", \"updated_at\": \"2019-08-24T14:15:22Z\", \"username\": \"string\", \"password\": \"string\", \"tls_validation\": true, \"client_key\": \"string\", \"client_cert\": \"string\", \"ca_cert\": \"string\", \"download_concurrency\": 1, \"proxy_url\": \"string\", \"proxy_username\": \"string\", \"proxy_password\": \"string\", \"rate_limit\": 0, \"signed_only\": false } url: string auth_url: string token: string policy: immediate requirements_file: string created_at: 2019-08-24T14:15:22Z updated_at: 2019-08-24T14:15:22Z username: string password: string tls_validation: true client_key: string client_cert: string ca_cert: string download_concurrency: 1 proxy_url: string proxy_username: string proxy_password: string rate_limit: 0 signed_only: false","title":"remotes_ansible_collection_update"},{"location":"automation-hub/#remotes_ansible_collection_partial_update","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Content-Type\": []string{\"application/json\"}, \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"PATCH\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/remotes/ansible/collection/{pulp_id}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const inputBody = '{ \"url\": \"string\", \"auth_url\": \"string\", \"token\": \"string\", \"policy\": \"immediate\", \"requirements_file\": \"string\", \"created_at\": \"2019-08-24T14:15:22Z\", \"updated_at\": \"2019-08-24T14:15:22Z\", \"username\": \"string\", \"password\": \"string\", \"tls_validation\": true, \"client_key\": \"string\", \"client_cert\": \"string\", \"ca_cert\": \"string\", \"download_concurrency\": 1, \"proxy_url\": \"string\", \"proxy_username\": \"string\", \"proxy_password\": \"string\", \"rate_limit\": 0, \"signed_only\": false }'; const headers = { 'Content-Type':'application/json', 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/remotes/ansible/collection/{pulp_id}/', { method: 'PATCH', body: inputBody, headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Content-Type': 'application/json', 'Accept': 'application/json' } r = requests.patch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/remotes/ansible/collection/{pulp_id}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Content-Type' => 'application/json', 'Accept' => 'application/json' } result = RestClient.patch 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/remotes/ansible/collection/{pulp_id}/', params: { }, headers: headers p JSON.parse(result) PATCH /api/automation-hub/pulp/api/v3/remotes/ansible/collection/{pulp_id}/ Update a collection remote Trigger an asynchronous partial update task Body parameter { \"url\": \"string\", \"auth_url\": \"string\", \"token\": \"string\", \"policy\": \"immediate\", \"requirements_file\": \"string\", \"created_at\": \"2019-08-24T14:15:22Z\", \"updated_at\": \"2019-08-24T14:15:22Z\", \"username\": \"string\", \"password\": \"string\", \"tls_validation\": true, \"client_key\": \"string\", \"client_cert\": \"string\", \"ca_cert\": \"string\", \"download_concurrency\": 1, \"proxy_url\": \"string\", \"proxy_username\": \"string\", \"proxy_password\": \"string\", \"rate_limit\": 0, \"signed_only\": false } url: string auth_url: string token: string policy: immediate requirements_file: string created_at: 2019-08-24T14:15:22Z updated_at: 2019-08-24T14:15:22Z username: string password: string tls_validation: true client_key: string client_cert: string ca_cert: string download_concurrency: 1 proxy_url: string proxy_username: string proxy_password: string rate_limit: 0 signed_only: false","title":"remotes_ansible_collection_partial_update"},{"location":"automation-hub/#remotes_ansible_collection_delete","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"DELETE\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/remotes/ansible/collection/{pulp_id}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/remotes/ansible/collection/{pulp_id}/', { method: 'DELETE', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.delete('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/remotes/ansible/collection/{pulp_id}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.delete 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/remotes/ansible/collection/{pulp_id}/', params: { }, headers: headers p JSON.parse(result) DELETE /api/automation-hub/pulp/api/v3/remotes/ansible/collection/{pulp_id}/ Delete a collection remote Trigger an asynchronous delete task","title":"remotes_ansible_collection_delete"},{"location":"automation-hub/#remotes_ansible_git_list","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/remotes/ansible/git/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/remotes/ansible/git/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/remotes/ansible/git/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/remotes/ansible/git/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/pulp/api/v3/remotes/ansible/git/ List git remotes ViewSet for Ansible Remotes. This is a tech preview feature. The functionality may change in the future.","title":"remotes_ansible_git_list"},{"location":"automation-hub/#enumerated-values_45","text":"Parameter Value ordering -alternatecontentsource ordering -ansible_collectionremote ordering -ansible_gitremote ordering -ansible_roleremote ordering -basedistribution ordering -ca_cert ordering -client_cert ordering -client_key ordering -connect_timeout ordering -container_containerremote ordering -distribution ordering -download_concurrency ordering -galaxy_containerregistryremote ordering -group_roles ordering -headers ordering -max_retries ordering -name ordering -password ordering -pk ordering -policy ordering -proxy_password ordering -proxy_url ordering -proxy_username ordering -pulp_created ordering -pulp_id ordering -pulp_labels ordering -pulp_last_updated ordering -pulp_type ordering -rate_limit ordering -remoteartifact ordering -repository ordering -sock_connect_timeout ordering -sock_read_timeout ordering -tls_validation ordering -total_timeout ordering -url ordering -user_roles ordering -username ordering alternatecontentsource ordering ansible_collectionremote ordering ansible_gitremote ordering ansible_roleremote ordering basedistribution ordering ca_cert ordering client_cert ordering client_key ordering connect_timeout ordering container_containerremote ordering distribution ordering download_concurrency ordering galaxy_containerregistryremote ordering group_roles ordering headers ordering max_retries ordering name ordering password ordering pk ordering policy ordering proxy_password ordering proxy_url ordering proxy_username ordering pulp_created ordering pulp_id ordering pulp_labels ordering pulp_last_updated ordering pulp_type ordering rate_limit ordering remoteartifact ordering repository ordering sock_connect_timeout ordering sock_read_timeout ordering tls_validation ordering total_timeout ordering url ordering user_roles ordering username Example responses 200 Response { \"count\": 123, \"next\": \"http://api.example.org/accounts/?offset=400&limit=100\", \"previous\": \"http://api.example.org/accounts/?offset=200&limit=100\", \"results\": [ { \"max_retries\": 0, \"client_cert\": \"string\", \"rate_limit\": 0, \"headers\": [ {} ], \"pulp_created\": \"2019-08-24T14:15:22Z\", \"connect_timeout\": 0, \"pulp_last_updated\": \"2019-08-24T14:15:22Z\", \"url\": \"string\", \"download_concurrency\": 1, \"tls_validation\": true, \"pulp_labels\": {}, \"pulp_href\": \"http://example.com\", \"sock_read_timeout\": 0, \"proxy_url\": \"string\", \"ca_cert\": \"string\", \"total_timeout\": 0, \"sock_connect_timeout\": 0, \"name\": \"string\", \"metadata_only\": true, \"git_ref\": \"string\" } ] }","title":"Enumerated Values"},{"location":"automation-hub/#remotes_ansible_git_create","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Content-Type\": []string{\"application/json\"}, \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"POST\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/remotes/ansible/git/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const inputBody = '{ \"max_retries\": 0, \"client_cert\": \"string\", \"rate_limit\": 0, \"headers\": [ {} ], \"proxy_password\": \"string\", \"connect_timeout\": 0, \"client_key\": \"string\", \"url\": \"string\", \"proxy_username\": \"string\", \"username\": \"string\", \"download_concurrency\": 1, \"tls_validation\": true, \"pulp_labels\": {}, \"password\": \"string\", \"sock_read_timeout\": 0, \"proxy_url\": \"string\", \"ca_cert\": \"string\", \"total_timeout\": 0, \"sock_connect_timeout\": 0, \"name\": \"string\", \"metadata_only\": true, \"git_ref\": \"string\" }'; const headers = { 'Content-Type':'application/json', 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/remotes/ansible/git/', { method: 'POST', body: inputBody, headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Content-Type': 'application/json', 'Accept': 'application/json' } r = requests.post('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/remotes/ansible/git/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Content-Type' => 'application/json', 'Accept' => 'application/json' } result = RestClient.post 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/remotes/ansible/git/', params: { }, headers: headers p JSON.parse(result) POST /api/automation-hub/pulp/api/v3/remotes/ansible/git/ Create a git remote ViewSet for Ansible Remotes. This is a tech preview feature. The functionality may change in the future. Body parameter { \"max_retries\": 0, \"client_cert\": \"string\", \"rate_limit\": 0, \"headers\": [ {} ], \"proxy_password\": \"string\", \"connect_timeout\": 0, \"client_key\": \"string\", \"url\": \"string\", \"proxy_username\": \"string\", \"username\": \"string\", \"download_concurrency\": 1, \"tls_validation\": true, \"pulp_labels\": {}, \"password\": \"string\", \"sock_read_timeout\": 0, \"proxy_url\": \"string\", \"ca_cert\": \"string\", \"total_timeout\": 0, \"sock_connect_timeout\": 0, \"name\": \"string\", \"metadata_only\": true, \"git_ref\": \"string\" } max_retries: 0 client_cert: string rate_limit: 0 headers: - {} proxy_password: string connect_timeout: 0 client_key: string url: string proxy_username: string username: string download_concurrency: 1 tls_validation: true pulp_labels: {} password: string sock_read_timeout: 0 proxy_url: string ca_cert: string total_timeout: 0 sock_connect_timeout: 0 name: string metadata_only: true git_ref: string","title":"remotes_ansible_git_create"},{"location":"automation-hub/#remotes_ansible_git_read","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/remotes/ansible/git/{pulp_id}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/remotes/ansible/git/{pulp_id}/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/remotes/ansible/git/{pulp_id}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/remotes/ansible/git/{pulp_id}/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/pulp/api/v3/remotes/ansible/git/{pulp_id}/ Inspect a git remote ViewSet for Ansible Remotes. This is a tech preview feature. The functionality may change in the future.","title":"remotes_ansible_git_read"},{"location":"automation-hub/#remotes_ansible_git_update","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Content-Type\": []string{\"application/json\"}, \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"PUT\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/remotes/ansible/git/{pulp_id}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const inputBody = '{ \"max_retries\": 0, \"client_cert\": \"string\", \"rate_limit\": 0, \"headers\": [ {} ], \"proxy_password\": \"string\", \"connect_timeout\": 0, \"client_key\": \"string\", \"url\": \"string\", \"proxy_username\": \"string\", \"username\": \"string\", \"download_concurrency\": 1, \"tls_validation\": true, \"pulp_labels\": {}, \"password\": \"string\", \"sock_read_timeout\": 0, \"proxy_url\": \"string\", \"ca_cert\": \"string\", \"total_timeout\": 0, \"sock_connect_timeout\": 0, \"name\": \"string\", \"metadata_only\": true, \"git_ref\": \"string\" }'; const headers = { 'Content-Type':'application/json', 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/remotes/ansible/git/{pulp_id}/', { method: 'PUT', body: inputBody, headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Content-Type': 'application/json', 'Accept': 'application/json' } r = requests.put('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/remotes/ansible/git/{pulp_id}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Content-Type' => 'application/json', 'Accept' => 'application/json' } result = RestClient.put 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/remotes/ansible/git/{pulp_id}/', params: { }, headers: headers p JSON.parse(result) PUT /api/automation-hub/pulp/api/v3/remotes/ansible/git/{pulp_id}/ Update a git remote Trigger an asynchronous update task Body parameter { \"max_retries\": 0, \"client_cert\": \"string\", \"rate_limit\": 0, \"headers\": [ {} ], \"proxy_password\": \"string\", \"connect_timeout\": 0, \"client_key\": \"string\", \"url\": \"string\", \"proxy_username\": \"string\", \"username\": \"string\", \"download_concurrency\": 1, \"tls_validation\": true, \"pulp_labels\": {}, \"password\": \"string\", \"sock_read_timeout\": 0, \"proxy_url\": \"string\", \"ca_cert\": \"string\", \"total_timeout\": 0, \"sock_connect_timeout\": 0, \"name\": \"string\", \"metadata_only\": true, \"git_ref\": \"string\" } max_retries: 0 client_cert: string rate_limit: 0 headers: - {} proxy_password: string connect_timeout: 0 client_key: string url: string proxy_username: string username: string download_concurrency: 1 tls_validation: true pulp_labels: {} password: string sock_read_timeout: 0 proxy_url: string ca_cert: string total_timeout: 0 sock_connect_timeout: 0 name: string metadata_only: true git_ref: string","title":"remotes_ansible_git_update"},{"location":"automation-hub/#remotes_ansible_git_partial_update","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Content-Type\": []string{\"application/json\"}, \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"PATCH\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/remotes/ansible/git/{pulp_id}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const inputBody = '{ \"max_retries\": 0, \"client_cert\": \"string\", \"rate_limit\": 0, \"headers\": [ {} ], \"proxy_password\": \"string\", \"connect_timeout\": 0, \"client_key\": \"string\", \"url\": \"string\", \"proxy_username\": \"string\", \"username\": \"string\", \"download_concurrency\": 1, \"tls_validation\": true, \"pulp_labels\": {}, \"password\": \"string\", \"sock_read_timeout\": 0, \"proxy_url\": \"string\", \"ca_cert\": \"string\", \"total_timeout\": 0, \"sock_connect_timeout\": 0, \"name\": \"string\", \"metadata_only\": true, \"git_ref\": \"string\" }'; const headers = { 'Content-Type':'application/json', 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/remotes/ansible/git/{pulp_id}/', { method: 'PATCH', body: inputBody, headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Content-Type': 'application/json', 'Accept': 'application/json' } r = requests.patch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/remotes/ansible/git/{pulp_id}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Content-Type' => 'application/json', 'Accept' => 'application/json' } result = RestClient.patch 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/remotes/ansible/git/{pulp_id}/', params: { }, headers: headers p JSON.parse(result) PATCH /api/automation-hub/pulp/api/v3/remotes/ansible/git/{pulp_id}/ Update a git remote Trigger an asynchronous partial update task Body parameter { \"max_retries\": 0, \"client_cert\": \"string\", \"rate_limit\": 0, \"headers\": [ {} ], \"proxy_password\": \"string\", \"connect_timeout\": 0, \"client_key\": \"string\", \"url\": \"string\", \"proxy_username\": \"string\", \"username\": \"string\", \"download_concurrency\": 1, \"tls_validation\": true, \"pulp_labels\": {}, \"password\": \"string\", \"sock_read_timeout\": 0, \"proxy_url\": \"string\", \"ca_cert\": \"string\", \"total_timeout\": 0, \"sock_connect_timeout\": 0, \"name\": \"string\", \"metadata_only\": true, \"git_ref\": \"string\" } max_retries: 0 client_cert: string rate_limit: 0 headers: - {} proxy_password: string connect_timeout: 0 client_key: string url: string proxy_username: string username: string download_concurrency: 1 tls_validation: true pulp_labels: {} password: string sock_read_timeout: 0 proxy_url: string ca_cert: string total_timeout: 0 sock_connect_timeout: 0 name: string metadata_only: true git_ref: string","title":"remotes_ansible_git_partial_update"},{"location":"automation-hub/#remotes_ansible_git_delete","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"DELETE\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/remotes/ansible/git/{pulp_id}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/remotes/ansible/git/{pulp_id}/', { method: 'DELETE', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.delete('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/remotes/ansible/git/{pulp_id}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.delete 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/remotes/ansible/git/{pulp_id}/', params: { }, headers: headers p JSON.parse(result) DELETE /api/automation-hub/pulp/api/v3/remotes/ansible/git/{pulp_id}/ Delete a git remote Trigger an asynchronous delete task","title":"remotes_ansible_git_delete"},{"location":"automation-hub/#remotes_ansible_role_list","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/remotes/ansible/role/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/remotes/ansible/role/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/remotes/ansible/role/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/remotes/ansible/role/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/pulp/api/v3/remotes/ansible/role/ List role remotes ViewSet for Role Remotes.","title":"remotes_ansible_role_list"},{"location":"automation-hub/#enumerated-values_46","text":"Parameter Value ordering -alternatecontentsource ordering -ansible_collectionremote ordering -ansible_gitremote ordering -ansible_roleremote ordering -basedistribution ordering -ca_cert ordering -client_cert ordering -client_key ordering -connect_timeout ordering -container_containerremote ordering -distribution ordering -download_concurrency ordering -galaxy_containerregistryremote ordering -group_roles ordering -headers ordering -max_retries ordering -name ordering -password ordering -pk ordering -policy ordering -proxy_password ordering -proxy_url ordering -proxy_username ordering -pulp_created ordering -pulp_id ordering -pulp_labels ordering -pulp_last_updated ordering -pulp_type ordering -rate_limit ordering -remoteartifact ordering -repository ordering -sock_connect_timeout ordering -sock_read_timeout ordering -tls_validation ordering -total_timeout ordering -url ordering -user_roles ordering -username ordering alternatecontentsource ordering ansible_collectionremote ordering ansible_gitremote ordering ansible_roleremote ordering basedistribution ordering ca_cert ordering client_cert ordering client_key ordering connect_timeout ordering container_containerremote ordering distribution ordering download_concurrency ordering galaxy_containerregistryremote ordering group_roles ordering headers ordering max_retries ordering name ordering password ordering pk ordering policy ordering proxy_password ordering proxy_url ordering proxy_username ordering pulp_created ordering pulp_id ordering pulp_labels ordering pulp_last_updated ordering pulp_type ordering rate_limit ordering remoteartifact ordering repository ordering sock_connect_timeout ordering sock_read_timeout ordering tls_validation ordering total_timeout ordering url ordering user_roles ordering username Example responses 200 Response { \"count\": 123, \"next\": \"http://api.example.org/accounts/?offset=400&limit=100\", \"previous\": \"http://api.example.org/accounts/?offset=200&limit=100\", \"results\": [ { \"pulp_href\": \"http://example.com\", \"pulp_created\": \"2019-08-24T14:15:22Z\", \"name\": \"string\", \"url\": \"string\", \"ca_cert\": \"string\", \"client_cert\": \"string\", \"tls_validation\": true, \"proxy_url\": \"string\", \"pulp_labels\": {}, \"pulp_last_updated\": \"2019-08-24T14:15:22Z\", \"download_concurrency\": 1, \"max_retries\": 0, \"policy\": \"immediate\", \"total_timeout\": 0, \"connect_timeout\": 0, \"sock_connect_timeout\": 0, \"sock_read_timeout\": 0, \"headers\": [ {} ], \"rate_limit\": 0 } ] }","title":"Enumerated Values"},{"location":"automation-hub/#remotes_ansible_role_create","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Content-Type\": []string{\"application/json\"}, \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"POST\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/remotes/ansible/role/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const inputBody = '{ \"name\": \"string\", \"url\": \"string\", \"ca_cert\": \"string\", \"client_cert\": \"string\", \"client_key\": \"string\", \"tls_validation\": true, \"proxy_url\": \"string\", \"proxy_username\": \"string\", \"proxy_password\": \"string\", \"username\": \"string\", \"password\": \"string\", \"pulp_labels\": {}, \"download_concurrency\": 1, \"max_retries\": 0, \"policy\": \"immediate\", \"total_timeout\": 0, \"connect_timeout\": 0, \"sock_connect_timeout\": 0, \"sock_read_timeout\": 0, \"headers\": [ {} ], \"rate_limit\": 0 }'; const headers = { 'Content-Type':'application/json', 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/remotes/ansible/role/', { method: 'POST', body: inputBody, headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Content-Type': 'application/json', 'Accept': 'application/json' } r = requests.post('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/remotes/ansible/role/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Content-Type' => 'application/json', 'Accept' => 'application/json' } result = RestClient.post 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/remotes/ansible/role/', params: { }, headers: headers p JSON.parse(result) POST /api/automation-hub/pulp/api/v3/remotes/ansible/role/ Create a role remote ViewSet for Role Remotes. Body parameter { \"name\": \"string\", \"url\": \"string\", \"ca_cert\": \"string\", \"client_cert\": \"string\", \"client_key\": \"string\", \"tls_validation\": true, \"proxy_url\": \"string\", \"proxy_username\": \"string\", \"proxy_password\": \"string\", \"username\": \"string\", \"password\": \"string\", \"pulp_labels\": {}, \"download_concurrency\": 1, \"max_retries\": 0, \"policy\": \"immediate\", \"total_timeout\": 0, \"connect_timeout\": 0, \"sock_connect_timeout\": 0, \"sock_read_timeout\": 0, \"headers\": [ {} ], \"rate_limit\": 0 } name: string url: string ca_cert: string client_cert: string client_key: string tls_validation: true proxy_url: string proxy_username: string proxy_password: string username: string password: string pulp_labels: {} download_concurrency: 1 max_retries: 0 policy: immediate total_timeout: 0 connect_timeout: 0 sock_connect_timeout: 0 sock_read_timeout: 0 headers: - {} rate_limit: 0","title":"remotes_ansible_role_create"},{"location":"automation-hub/#remotes_ansible_role_read","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/remotes/ansible/role/{pulp_id}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/remotes/ansible/role/{pulp_id}/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/remotes/ansible/role/{pulp_id}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/remotes/ansible/role/{pulp_id}/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/pulp/api/v3/remotes/ansible/role/{pulp_id}/ Inspect a role remote ViewSet for Role Remotes.","title":"remotes_ansible_role_read"},{"location":"automation-hub/#remotes_ansible_role_update","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Content-Type\": []string{\"application/json\"}, \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"PUT\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/remotes/ansible/role/{pulp_id}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const inputBody = '{ \"name\": \"string\", \"url\": \"string\", \"ca_cert\": \"string\", \"client_cert\": \"string\", \"client_key\": \"string\", \"tls_validation\": true, \"proxy_url\": \"string\", \"proxy_username\": \"string\", \"proxy_password\": \"string\", \"username\": \"string\", \"password\": \"string\", \"pulp_labels\": {}, \"download_concurrency\": 1, \"max_retries\": 0, \"policy\": \"immediate\", \"total_timeout\": 0, \"connect_timeout\": 0, \"sock_connect_timeout\": 0, \"sock_read_timeout\": 0, \"headers\": [ {} ], \"rate_limit\": 0 }'; const headers = { 'Content-Type':'application/json', 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/remotes/ansible/role/{pulp_id}/', { method: 'PUT', body: inputBody, headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Content-Type': 'application/json', 'Accept': 'application/json' } r = requests.put('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/remotes/ansible/role/{pulp_id}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Content-Type' => 'application/json', 'Accept' => 'application/json' } result = RestClient.put 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/remotes/ansible/role/{pulp_id}/', params: { }, headers: headers p JSON.parse(result) PUT /api/automation-hub/pulp/api/v3/remotes/ansible/role/{pulp_id}/ Update a role remote Trigger an asynchronous update task Body parameter { \"name\": \"string\", \"url\": \"string\", \"ca_cert\": \"string\", \"client_cert\": \"string\", \"client_key\": \"string\", \"tls_validation\": true, \"proxy_url\": \"string\", \"proxy_username\": \"string\", \"proxy_password\": \"string\", \"username\": \"string\", \"password\": \"string\", \"pulp_labels\": {}, \"download_concurrency\": 1, \"max_retries\": 0, \"policy\": \"immediate\", \"total_timeout\": 0, \"connect_timeout\": 0, \"sock_connect_timeout\": 0, \"sock_read_timeout\": 0, \"headers\": [ {} ], \"rate_limit\": 0 } name: string url: string ca_cert: string client_cert: string client_key: string tls_validation: true proxy_url: string proxy_username: string proxy_password: string username: string password: string pulp_labels: {} download_concurrency: 1 max_retries: 0 policy: immediate total_timeout: 0 connect_timeout: 0 sock_connect_timeout: 0 sock_read_timeout: 0 headers: - {} rate_limit: 0","title":"remotes_ansible_role_update"},{"location":"automation-hub/#remotes_ansible_role_partial_update","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Content-Type\": []string{\"application/json\"}, \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"PATCH\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/remotes/ansible/role/{pulp_id}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const inputBody = '{ \"name\": \"string\", \"url\": \"string\", \"ca_cert\": \"string\", \"client_cert\": \"string\", \"client_key\": \"string\", \"tls_validation\": true, \"proxy_url\": \"string\", \"proxy_username\": \"string\", \"proxy_password\": \"string\", \"username\": \"string\", \"password\": \"string\", \"pulp_labels\": {}, \"download_concurrency\": 1, \"max_retries\": 0, \"policy\": \"immediate\", \"total_timeout\": 0, \"connect_timeout\": 0, \"sock_connect_timeout\": 0, \"sock_read_timeout\": 0, \"headers\": [ {} ], \"rate_limit\": 0 }'; const headers = { 'Content-Type':'application/json', 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/remotes/ansible/role/{pulp_id}/', { method: 'PATCH', body: inputBody, headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Content-Type': 'application/json', 'Accept': 'application/json' } r = requests.patch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/remotes/ansible/role/{pulp_id}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Content-Type' => 'application/json', 'Accept' => 'application/json' } result = RestClient.patch 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/remotes/ansible/role/{pulp_id}/', params: { }, headers: headers p JSON.parse(result) PATCH /api/automation-hub/pulp/api/v3/remotes/ansible/role/{pulp_id}/ Update a role remote Trigger an asynchronous partial update task Body parameter { \"name\": \"string\", \"url\": \"string\", \"ca_cert\": \"string\", \"client_cert\": \"string\", \"client_key\": \"string\", \"tls_validation\": true, \"proxy_url\": \"string\", \"proxy_username\": \"string\", \"proxy_password\": \"string\", \"username\": \"string\", \"password\": \"string\", \"pulp_labels\": {}, \"download_concurrency\": 1, \"max_retries\": 0, \"policy\": \"immediate\", \"total_timeout\": 0, \"connect_timeout\": 0, \"sock_connect_timeout\": 0, \"sock_read_timeout\": 0, \"headers\": [ {} ], \"rate_limit\": 0 } name: string url: string ca_cert: string client_cert: string client_key: string tls_validation: true proxy_url: string proxy_username: string proxy_password: string username: string password: string pulp_labels: {} download_concurrency: 1 max_retries: 0 policy: immediate total_timeout: 0 connect_timeout: 0 sock_connect_timeout: 0 sock_read_timeout: 0 headers: - {} rate_limit: 0","title":"remotes_ansible_role_partial_update"},{"location":"automation-hub/#remotes_ansible_role_delete","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"DELETE\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/remotes/ansible/role/{pulp_id}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/remotes/ansible/role/{pulp_id}/', { method: 'DELETE', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.delete('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/remotes/ansible/role/{pulp_id}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.delete 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/remotes/ansible/role/{pulp_id}/', params: { }, headers: headers p JSON.parse(result) DELETE /api/automation-hub/pulp/api/v3/remotes/ansible/role/{pulp_id}/ Delete a role remote Trigger an asynchronous delete task","title":"remotes_ansible_role_delete"},{"location":"automation-hub/#remotes_container_container_list","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/remotes/container/container/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/remotes/container/container/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/remotes/container/container/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/remotes/container/container/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/pulp/api/v3/remotes/container/container/ List container remotes Container remotes represent an external repository that implements the Container Registry API. Container remotes support deferred downloading by configuring the policy field. on_demand and streamed policies can provide significant disk space savings.","title":"remotes_container_container_list"},{"location":"automation-hub/#enumerated-values_47","text":"Parameter Value ordering -alternatecontentsource ordering -ansible_collectionremote ordering -ansible_gitremote ordering -ansible_roleremote ordering -basedistribution ordering -ca_cert ordering -client_cert ordering -client_key ordering -connect_timeout ordering -container_containerremote ordering -distribution ordering -download_concurrency ordering -galaxy_containerregistryremote ordering -group_roles ordering -headers ordering -max_retries ordering -name ordering -password ordering -pk ordering -policy ordering -proxy_password ordering -proxy_url ordering -proxy_username ordering -pulp_created ordering -pulp_id ordering -pulp_labels ordering -pulp_last_updated ordering -pulp_type ordering -rate_limit ordering -remoteartifact ordering -repository ordering -sock_connect_timeout ordering -sock_read_timeout ordering -tls_validation ordering -total_timeout ordering -url ordering -user_roles ordering -username ordering alternatecontentsource ordering ansible_collectionremote ordering ansible_gitremote ordering ansible_roleremote ordering basedistribution ordering ca_cert ordering client_cert ordering client_key ordering connect_timeout ordering container_containerremote ordering distribution ordering download_concurrency ordering galaxy_containerregistryremote ordering group_roles ordering headers ordering max_retries ordering name ordering password ordering pk ordering policy ordering proxy_password ordering proxy_url ordering proxy_username ordering pulp_created ordering pulp_id ordering pulp_labels ordering pulp_last_updated ordering pulp_type ordering rate_limit ordering remoteartifact ordering repository ordering sock_connect_timeout ordering sock_read_timeout ordering tls_validation ordering total_timeout ordering url ordering user_roles ordering username Example responses 200 Response { \"count\": 123, \"next\": \"http://api.example.org/accounts/?offset=400&limit=100\", \"previous\": \"http://api.example.org/accounts/?offset=200&limit=100\", \"results\": [ { \"pulp_href\": \"http://example.com\", \"pulp_created\": \"2019-08-24T14:15:22Z\", \"name\": \"string\", \"url\": \"string\", \"ca_cert\": \"string\", \"client_cert\": \"string\", \"tls_validation\": true, \"proxy_url\": \"string\", \"pulp_labels\": {}, \"pulp_last_updated\": \"2019-08-24T14:15:22Z\", \"download_concurrency\": 1, \"max_retries\": 0, \"policy\": \"immediate\", \"total_timeout\": 0, \"connect_timeout\": 0, \"sock_connect_timeout\": 0, \"sock_read_timeout\": 0, \"headers\": [ {} ], \"rate_limit\": 0, \"upstream_name\": \"string\", \"include_tags\": [ \"string\" ], \"exclude_tags\": [ \"string\" ], \"sigstore\": \"http://example.com\" } ] }","title":"Enumerated Values"},{"location":"automation-hub/#remotes_container_container_create","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Content-Type\": []string{\"application/json\"}, \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"POST\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/remotes/container/container/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const inputBody = '{ \"name\": \"string\", \"url\": \"string\", \"ca_cert\": \"string\", \"client_cert\": \"string\", \"client_key\": \"string\", \"tls_validation\": true, \"proxy_url\": \"string\", \"proxy_username\": \"string\", \"proxy_password\": \"string\", \"username\": \"string\", \"password\": \"string\", \"pulp_labels\": {}, \"download_concurrency\": 1, \"max_retries\": 0, \"policy\": \"immediate\", \"total_timeout\": 0, \"connect_timeout\": 0, \"sock_connect_timeout\": 0, \"sock_read_timeout\": 0, \"headers\": [ {} ], \"rate_limit\": 0, \"upstream_name\": \"string\", \"include_tags\": [ \"string\" ], \"exclude_tags\": [ \"string\" ], \"sigstore\": \"http://example.com\" }'; const headers = { 'Content-Type':'application/json', 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/remotes/container/container/', { method: 'POST', body: inputBody, headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Content-Type': 'application/json', 'Accept': 'application/json' } r = requests.post('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/remotes/container/container/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Content-Type' => 'application/json', 'Accept' => 'application/json' } result = RestClient.post 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/remotes/container/container/', params: { }, headers: headers p JSON.parse(result) POST /api/automation-hub/pulp/api/v3/remotes/container/container/ Create a container remote Container remotes represent an external repository that implements the Container Registry API. Container remotes support deferred downloading by configuring the policy field. on_demand and streamed policies can provide significant disk space savings. Body parameter { \"name\": \"string\", \"url\": \"string\", \"ca_cert\": \"string\", \"client_cert\": \"string\", \"client_key\": \"string\", \"tls_validation\": true, \"proxy_url\": \"string\", \"proxy_username\": \"string\", \"proxy_password\": \"string\", \"username\": \"string\", \"password\": \"string\", \"pulp_labels\": {}, \"download_concurrency\": 1, \"max_retries\": 0, \"policy\": \"immediate\", \"total_timeout\": 0, \"connect_timeout\": 0, \"sock_connect_timeout\": 0, \"sock_read_timeout\": 0, \"headers\": [ {} ], \"rate_limit\": 0, \"upstream_name\": \"string\", \"include_tags\": [ \"string\" ], \"exclude_tags\": [ \"string\" ], \"sigstore\": \"http://example.com\" } name: string url: string ca_cert: string client_cert: string client_key: string tls_validation: true proxy_url: string proxy_username: string proxy_password: string username: string password: string pulp_labels: {} download_concurrency: 1 max_retries: 0 policy: immediate total_timeout: 0 connect_timeout: 0 sock_connect_timeout: 0 sock_read_timeout: 0 headers: - {} rate_limit: 0 upstream_name: string include_tags: - string exclude_tags: - string sigstore: http://example.com","title":"remotes_container_container_create"},{"location":"automation-hub/#remotes_container_container_read","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/remotes/container/container/{pulp_id}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/remotes/container/container/{pulp_id}/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/remotes/container/container/{pulp_id}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/remotes/container/container/{pulp_id}/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/pulp/api/v3/remotes/container/container/{pulp_id}/ Inspect a container remote Container remotes represent an external repository that implements the Container Registry API. Container remotes support deferred downloading by configuring the policy field. on_demand and streamed policies can provide significant disk space savings.","title":"remotes_container_container_read"},{"location":"automation-hub/#remotes_container_container_update","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Content-Type\": []string{\"application/json\"}, \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"PUT\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/remotes/container/container/{pulp_id}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const inputBody = '{ \"name\": \"string\", \"url\": \"string\", \"ca_cert\": \"string\", \"client_cert\": \"string\", \"client_key\": \"string\", \"tls_validation\": true, \"proxy_url\": \"string\", \"proxy_username\": \"string\", \"proxy_password\": \"string\", \"username\": \"string\", \"password\": \"string\", \"pulp_labels\": {}, \"download_concurrency\": 1, \"max_retries\": 0, \"policy\": \"immediate\", \"total_timeout\": 0, \"connect_timeout\": 0, \"sock_connect_timeout\": 0, \"sock_read_timeout\": 0, \"headers\": [ {} ], \"rate_limit\": 0, \"upstream_name\": \"string\", \"include_tags\": [ \"string\" ], \"exclude_tags\": [ \"string\" ], \"sigstore\": \"http://example.com\" }'; const headers = { 'Content-Type':'application/json', 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/remotes/container/container/{pulp_id}/', { method: 'PUT', body: inputBody, headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Content-Type': 'application/json', 'Accept': 'application/json' } r = requests.put('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/remotes/container/container/{pulp_id}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Content-Type' => 'application/json', 'Accept' => 'application/json' } result = RestClient.put 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/remotes/container/container/{pulp_id}/', params: { }, headers: headers p JSON.parse(result) PUT /api/automation-hub/pulp/api/v3/remotes/container/container/{pulp_id}/ Update a container remote Trigger an asynchronous update task Body parameter { \"name\": \"string\", \"url\": \"string\", \"ca_cert\": \"string\", \"client_cert\": \"string\", \"client_key\": \"string\", \"tls_validation\": true, \"proxy_url\": \"string\", \"proxy_username\": \"string\", \"proxy_password\": \"string\", \"username\": \"string\", \"password\": \"string\", \"pulp_labels\": {}, \"download_concurrency\": 1, \"max_retries\": 0, \"policy\": \"immediate\", \"total_timeout\": 0, \"connect_timeout\": 0, \"sock_connect_timeout\": 0, \"sock_read_timeout\": 0, \"headers\": [ {} ], \"rate_limit\": 0, \"upstream_name\": \"string\", \"include_tags\": [ \"string\" ], \"exclude_tags\": [ \"string\" ], \"sigstore\": \"http://example.com\" } name: string url: string ca_cert: string client_cert: string client_key: string tls_validation: true proxy_url: string proxy_username: string proxy_password: string username: string password: string pulp_labels: {} download_concurrency: 1 max_retries: 0 policy: immediate total_timeout: 0 connect_timeout: 0 sock_connect_timeout: 0 sock_read_timeout: 0 headers: - {} rate_limit: 0 upstream_name: string include_tags: - string exclude_tags: - string sigstore: http://example.com","title":"remotes_container_container_update"},{"location":"automation-hub/#remotes_container_container_partial_update","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Content-Type\": []string{\"application/json\"}, \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"PATCH\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/remotes/container/container/{pulp_id}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const inputBody = '{ \"name\": \"string\", \"url\": \"string\", \"ca_cert\": \"string\", \"client_cert\": \"string\", \"client_key\": \"string\", \"tls_validation\": true, \"proxy_url\": \"string\", \"proxy_username\": \"string\", \"proxy_password\": \"string\", \"username\": \"string\", \"password\": \"string\", \"pulp_labels\": {}, \"download_concurrency\": 1, \"max_retries\": 0, \"policy\": \"immediate\", \"total_timeout\": 0, \"connect_timeout\": 0, \"sock_connect_timeout\": 0, \"sock_read_timeout\": 0, \"headers\": [ {} ], \"rate_limit\": 0, \"upstream_name\": \"string\", \"include_tags\": [ \"string\" ], \"exclude_tags\": [ \"string\" ], \"sigstore\": \"http://example.com\" }'; const headers = { 'Content-Type':'application/json', 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/remotes/container/container/{pulp_id}/', { method: 'PATCH', body: inputBody, headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Content-Type': 'application/json', 'Accept': 'application/json' } r = requests.patch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/remotes/container/container/{pulp_id}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Content-Type' => 'application/json', 'Accept' => 'application/json' } result = RestClient.patch 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/remotes/container/container/{pulp_id}/', params: { }, headers: headers p JSON.parse(result) PATCH /api/automation-hub/pulp/api/v3/remotes/container/container/{pulp_id}/ Update a container remote Trigger an asynchronous partial update task Body parameter { \"name\": \"string\", \"url\": \"string\", \"ca_cert\": \"string\", \"client_cert\": \"string\", \"client_key\": \"string\", \"tls_validation\": true, \"proxy_url\": \"string\", \"proxy_username\": \"string\", \"proxy_password\": \"string\", \"username\": \"string\", \"password\": \"string\", \"pulp_labels\": {}, \"download_concurrency\": 1, \"max_retries\": 0, \"policy\": \"immediate\", \"total_timeout\": 0, \"connect_timeout\": 0, \"sock_connect_timeout\": 0, \"sock_read_timeout\": 0, \"headers\": [ {} ], \"rate_limit\": 0, \"upstream_name\": \"string\", \"include_tags\": [ \"string\" ], \"exclude_tags\": [ \"string\" ], \"sigstore\": \"http://example.com\" } name: string url: string ca_cert: string client_cert: string client_key: string tls_validation: true proxy_url: string proxy_username: string proxy_password: string username: string password: string pulp_labels: {} download_concurrency: 1 max_retries: 0 policy: immediate total_timeout: 0 connect_timeout: 0 sock_connect_timeout: 0 sock_read_timeout: 0 headers: - {} rate_limit: 0 upstream_name: string include_tags: - string exclude_tags: - string sigstore: http://example.com","title":"remotes_container_container_partial_update"},{"location":"automation-hub/#remotes_container_container_delete","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"DELETE\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/remotes/container/container/{pulp_id}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/remotes/container/container/{pulp_id}/', { method: 'DELETE', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.delete('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/remotes/container/container/{pulp_id}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.delete 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/remotes/container/container/{pulp_id}/', params: { }, headers: headers p JSON.parse(result) DELETE /api/automation-hub/pulp/api/v3/remotes/container/container/{pulp_id}/ Delete a container remote Trigger an asynchronous delete task","title":"remotes_container_container_delete"},{"location":"automation-hub/#remotes_container_container_add_role","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Content-Type\": []string{\"application/json\"}, \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"POST\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/remotes/container/container/{pulp_id}/add_role/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const inputBody = '{ \"users\": [], \"groups\": [], \"role\": \"string\" }'; const headers = { 'Content-Type':'application/json', 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/remotes/container/container/{pulp_id}/add_role/', { method: 'POST', body: inputBody, headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Content-Type': 'application/json', 'Accept': 'application/json' } r = requests.post('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/remotes/container/container/{pulp_id}/add_role/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Content-Type' => 'application/json', 'Accept' => 'application/json' } result = RestClient.post 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/remotes/container/container/{pulp_id}/add_role/', params: { }, headers: headers p JSON.parse(result) POST /api/automation-hub/pulp/api/v3/remotes/container/container/{pulp_id}/add_role/ Add a role for this object to users/groups. Body parameter { \"users\": [], \"groups\": [], \"role\": \"string\" } users: [] groups: [] role: string","title":"remotes_container_container_add_role"},{"location":"automation-hub/#remotes_container_container_list_roles","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/remotes/container/container/{pulp_id}/list_roles/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/remotes/container/container/{pulp_id}/list_roles/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/remotes/container/container/{pulp_id}/list_roles/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/remotes/container/container/{pulp_id}/list_roles/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/pulp/api/v3/remotes/container/container/{pulp_id}/list_roles/ List roles assigned to this object.","title":"remotes_container_container_list_roles"},{"location":"automation-hub/#remotes_container_container_my_permissions","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/remotes/container/container/{pulp_id}/my_permissions/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/remotes/container/container/{pulp_id}/my_permissions/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/remotes/container/container/{pulp_id}/my_permissions/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/remotes/container/container/{pulp_id}/my_permissions/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/pulp/api/v3/remotes/container/container/{pulp_id}/my_permissions/ List permissions available to the current user on this object.","title":"remotes_container_container_my_permissions"},{"location":"automation-hub/#remotes_container_container_remove_role","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Content-Type\": []string{\"application/json\"}, \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"POST\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/remotes/container/container/{pulp_id}/remove_role/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const inputBody = '{ \"users\": [], \"groups\": [], \"role\": \"string\" }'; const headers = { 'Content-Type':'application/json', 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/remotes/container/container/{pulp_id}/remove_role/', { method: 'POST', body: inputBody, headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Content-Type': 'application/json', 'Accept': 'application/json' } r = requests.post('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/remotes/container/container/{pulp_id}/remove_role/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Content-Type' => 'application/json', 'Accept' => 'application/json' } result = RestClient.post 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/remotes/container/container/{pulp_id}/remove_role/', params: { }, headers: headers p JSON.parse(result) POST /api/automation-hub/pulp/api/v3/remotes/container/container/{pulp_id}/remove_role/ Remove a role for this object from users/groups. Body parameter { \"users\": [], \"groups\": [], \"role\": \"string\" } users: [] groups: [] role: string","title":"remotes_container_container_remove_role"},{"location":"automation-hub/#repair_post","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Content-Type\": []string{\"application/json\"}, \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"POST\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repair/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const inputBody = '{ \"verify_checksums\": true }'; const headers = { 'Content-Type':'application/json', 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repair/', { method: 'POST', body: inputBody, headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Content-Type': 'application/json', 'Accept': 'application/json' } r = requests.post('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repair/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Content-Type' => 'application/json', 'Accept' => 'application/json' } result = RestClient.post 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repair/', params: { }, headers: headers p JSON.parse(result) POST /api/automation-hub/pulp/api/v3/repair/ Repair Artifact Storage Trigger an asynchronous task that checks for missing or corrupted artifacts, and attempts to redownload them. Body parameter { \"verify_checksums\": true } verify_checksums: true","title":"repair_post"},{"location":"automation-hub/#repositories_list","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/pulp/api/v3/repositories/ List repositories Endpoint to list all repositories.","title":"repositories_list"},{"location":"automation-hub/#enumerated-values_48","text":"Parameter Value ordering -alternatecontentsourcepath ordering -ansible_ansiblerepository ordering -container_containerpushrepository ordering -container_containerrepository ordering -content ordering -core_pulp_exporter ordering -description ordering -distributions ordering -download_logs ordering -group_roles ordering -name ordering -next_version ordering -pk ordering -pulp_created ordering -pulp_id ordering -pulp_labels ordering -pulp_last_updated ordering -pulp_type ordering -pulpimporterrepository ordering -remote ordering -repositorycontent ordering -retain_repo_versions ordering -uploads ordering -user_hidden ordering -user_roles ordering -versions ordering alternatecontentsourcepath ordering ansible_ansiblerepository ordering container_containerpushrepository ordering container_containerrepository ordering content ordering core_pulp_exporter ordering description ordering distributions ordering download_logs ordering group_roles ordering name ordering next_version ordering pk ordering pulp_created ordering pulp_id ordering pulp_labels ordering pulp_last_updated ordering pulp_type ordering pulpimporterrepository ordering remote ordering repositorycontent ordering retain_repo_versions ordering uploads ordering user_hidden ordering user_roles ordering versions Example responses 200 Response { \"count\": 123, \"next\": \"http://api.example.org/accounts/?offset=400&limit=100\", \"previous\": \"http://api.example.org/accounts/?offset=200&limit=100\", \"results\": [ { \"name\": \"string\", \"description\": \"string\", \"pulp_id\": \"f3ad2d41-3c12-4e29-ba19-4d3927e49b47\", \"pulp_last_updated\": \"2019-08-24T14:15:22Z\", \"content_count\": 0, \"gpgkey\": \"string\" } ] }","title":"Enumerated Values"},{"location":"automation-hub/#repositories_ansible_ansible_list","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/ansible/ansible/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/ansible/ansible/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/ansible/ansible/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/ansible/ansible/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/pulp/api/v3/repositories/ansible/ansible/ List ansible repositorys ViewSet for Ansible Repositories.","title":"repositories_ansible_ansible_list"},{"location":"automation-hub/#enumerated-values_49","text":"Parameter Value ordering -alternatecontentsourcepath ordering -ansible_ansiblerepository ordering -container_containerpushrepository ordering -container_containerrepository ordering -content ordering -core_pulp_exporter ordering -description ordering -distributions ordering -download_logs ordering -group_roles ordering -name ordering -next_version ordering -pk ordering -pulp_created ordering -pulp_id ordering -pulp_labels ordering -pulp_last_updated ordering -pulp_type ordering -pulpimporterrepository ordering -remote ordering -repositorycontent ordering -retain_repo_versions ordering -uploads ordering -user_hidden ordering -user_roles ordering -versions ordering alternatecontentsourcepath ordering ansible_ansiblerepository ordering container_containerpushrepository ordering container_containerrepository ordering content ordering core_pulp_exporter ordering description ordering distributions ordering download_logs ordering group_roles ordering name ordering next_version ordering pk ordering pulp_created ordering pulp_id ordering pulp_labels ordering pulp_last_updated ordering pulp_type ordering pulpimporterrepository ordering remote ordering repositorycontent ordering retain_repo_versions ordering uploads ordering user_hidden ordering user_roles ordering versions Example responses 200 Response { \"count\": 123, \"next\": \"http://api.example.org/accounts/?offset=400&limit=100\", \"previous\": \"http://api.example.org/accounts/?offset=200&limit=100\", \"results\": [ { \"pulp_href\": \"http://example.com\", \"pulp_created\": \"2019-08-24T14:15:22Z\", \"versions_href\": \"http://example.com\", \"pulp_labels\": {}, \"latest_version_href\": \"http://example.com\", \"name\": \"string\", \"description\": \"string\", \"retain_repo_versions\": 1, \"remote\": \"http://example.com\", \"last_synced_metadata_time\": \"2019-08-24T14:15:22Z\", \"gpgkey\": \"string\" } ] }","title":"Enumerated Values"},{"location":"automation-hub/#repositories_ansible_ansible_create","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Content-Type\": []string{\"application/json\"}, \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"POST\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/ansible/ansible/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const inputBody = '{ \"pulp_labels\": {}, \"name\": \"string\", \"description\": \"string\", \"retain_repo_versions\": 1, \"remote\": \"http://example.com\", \"last_synced_metadata_time\": \"2019-08-24T14:15:22Z\", \"gpgkey\": \"string\" }'; const headers = { 'Content-Type':'application/json', 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/ansible/ansible/', { method: 'POST', body: inputBody, headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Content-Type': 'application/json', 'Accept': 'application/json' } r = requests.post('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/ansible/ansible/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Content-Type' => 'application/json', 'Accept' => 'application/json' } result = RestClient.post 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/ansible/ansible/', params: { }, headers: headers p JSON.parse(result) POST /api/automation-hub/pulp/api/v3/repositories/ansible/ansible/ Create an ansible repository ViewSet for Ansible Repositories. Body parameter { \"pulp_labels\": {}, \"name\": \"string\", \"description\": \"string\", \"retain_repo_versions\": 1, \"remote\": \"http://example.com\", \"last_synced_metadata_time\": \"2019-08-24T14:15:22Z\", \"gpgkey\": \"string\" } pulp_labels: {} name: string description: string retain_repo_versions: 1 remote: http://example.com last_synced_metadata_time: 2019-08-24T14:15:22Z gpgkey: string","title":"repositories_ansible_ansible_create"},{"location":"automation-hub/#repositories_ansible_ansible_read","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/ansible/ansible/{pulp_id}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/ansible/ansible/{pulp_id}/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/ansible/ansible/{pulp_id}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/ansible/ansible/{pulp_id}/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/pulp/api/v3/repositories/ansible/ansible/{pulp_id}/ Inspect an ansible repository ViewSet for Ansible Repositories.","title":"repositories_ansible_ansible_read"},{"location":"automation-hub/#repositories_ansible_ansible_update","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Content-Type\": []string{\"application/json\"}, \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"PUT\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/ansible/ansible/{pulp_id}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const inputBody = '{ \"pulp_labels\": {}, \"name\": \"string\", \"description\": \"string\", \"retain_repo_versions\": 1, \"remote\": \"http://example.com\", \"last_synced_metadata_time\": \"2019-08-24T14:15:22Z\", \"gpgkey\": \"string\" }'; const headers = { 'Content-Type':'application/json', 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/ansible/ansible/{pulp_id}/', { method: 'PUT', body: inputBody, headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Content-Type': 'application/json', 'Accept': 'application/json' } r = requests.put('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/ansible/ansible/{pulp_id}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Content-Type' => 'application/json', 'Accept' => 'application/json' } result = RestClient.put 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/ansible/ansible/{pulp_id}/', params: { }, headers: headers p JSON.parse(result) PUT /api/automation-hub/pulp/api/v3/repositories/ansible/ansible/{pulp_id}/ Update an ansible repository Trigger an asynchronous update task Body parameter { \"pulp_labels\": {}, \"name\": \"string\", \"description\": \"string\", \"retain_repo_versions\": 1, \"remote\": \"http://example.com\", \"last_synced_metadata_time\": \"2019-08-24T14:15:22Z\", \"gpgkey\": \"string\" } pulp_labels: {} name: string description: string retain_repo_versions: 1 remote: http://example.com last_synced_metadata_time: 2019-08-24T14:15:22Z gpgkey: string","title":"repositories_ansible_ansible_update"},{"location":"automation-hub/#repositories_ansible_ansible_partial_update","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Content-Type\": []string{\"application/json\"}, \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"PATCH\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/ansible/ansible/{pulp_id}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const inputBody = '{ \"pulp_labels\": {}, \"name\": \"string\", \"description\": \"string\", \"retain_repo_versions\": 1, \"remote\": \"http://example.com\", \"last_synced_metadata_time\": \"2019-08-24T14:15:22Z\", \"gpgkey\": \"string\" }'; const headers = { 'Content-Type':'application/json', 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/ansible/ansible/{pulp_id}/', { method: 'PATCH', body: inputBody, headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Content-Type': 'application/json', 'Accept': 'application/json' } r = requests.patch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/ansible/ansible/{pulp_id}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Content-Type' => 'application/json', 'Accept' => 'application/json' } result = RestClient.patch 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/ansible/ansible/{pulp_id}/', params: { }, headers: headers p JSON.parse(result) PATCH /api/automation-hub/pulp/api/v3/repositories/ansible/ansible/{pulp_id}/ Update an ansible repository Trigger an asynchronous partial update task Body parameter { \"pulp_labels\": {}, \"name\": \"string\", \"description\": \"string\", \"retain_repo_versions\": 1, \"remote\": \"http://example.com\", \"last_synced_metadata_time\": \"2019-08-24T14:15:22Z\", \"gpgkey\": \"string\" } pulp_labels: {} name: string description: string retain_repo_versions: 1 remote: http://example.com last_synced_metadata_time: 2019-08-24T14:15:22Z gpgkey: string","title":"repositories_ansible_ansible_partial_update"},{"location":"automation-hub/#repositories_ansible_ansible_delete","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"DELETE\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/ansible/ansible/{pulp_id}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/ansible/ansible/{pulp_id}/', { method: 'DELETE', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.delete('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/ansible/ansible/{pulp_id}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.delete 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/ansible/ansible/{pulp_id}/', params: { }, headers: headers p JSON.parse(result) DELETE /api/automation-hub/pulp/api/v3/repositories/ansible/ansible/{pulp_id}/ Delete an ansible repository Trigger an asynchronous delete task","title":"repositories_ansible_ansible_delete"},{"location":"automation-hub/#repositories_ansible_ansible_modify","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Content-Type\": []string{\"application/json\"}, \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"POST\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/ansible/ansible/{pulp_id}/modify/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const inputBody = '{ \"add_content_units\": [ null ], \"remove_content_units\": [ null ], \"base_version\": \"http://example.com\" }'; const headers = { 'Content-Type':'application/json', 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/ansible/ansible/{pulp_id}/modify/', { method: 'POST', body: inputBody, headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Content-Type': 'application/json', 'Accept': 'application/json' } r = requests.post('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/ansible/ansible/{pulp_id}/modify/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Content-Type' => 'application/json', 'Accept' => 'application/json' } result = RestClient.post 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/ansible/ansible/{pulp_id}/modify/', params: { }, headers: headers p JSON.parse(result) POST /api/automation-hub/pulp/api/v3/repositories/ansible/ansible/{pulp_id}/modify/ Modify Repository Content Trigger an asynchronous task to create a new repository version. Body parameter { \"add_content_units\": [ null ], \"remove_content_units\": [ null ], \"base_version\": \"http://example.com\" } add_content_units: - null remove_content_units: - null base_version: http://example.com","title":"repositories_ansible_ansible_modify"},{"location":"automation-hub/#repositories_ansible_ansible_rebuild_metadata","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Content-Type\": []string{\"application/json\"}, \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"POST\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/ansible/ansible/{pulp_id}/rebuild_metadata/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const inputBody = '{ \"namespace\": \"string\", \"name\": \"string\", \"version\": \"string\" }'; const headers = { 'Content-Type':'application/json', 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/ansible/ansible/{pulp_id}/rebuild_metadata/', { method: 'POST', body: inputBody, headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Content-Type': 'application/json', 'Accept': 'application/json' } r = requests.post('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/ansible/ansible/{pulp_id}/rebuild_metadata/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Content-Type' => 'application/json', 'Accept' => 'application/json' } result = RestClient.post 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/ansible/ansible/{pulp_id}/rebuild_metadata/', params: { }, headers: headers p JSON.parse(result) POST /api/automation-hub/pulp/api/v3/repositories/ansible/ansible/{pulp_id}/rebuild_metadata/ Trigger an asynchronous task to rebuild Ansible content meta. Body parameter { \"namespace\": \"string\", \"name\": \"string\", \"version\": \"string\" } namespace: string name: string version: string","title":"repositories_ansible_ansible_rebuild_metadata"},{"location":"automation-hub/#repositories_ansible_ansible_sign","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Content-Type\": []string{\"application/json\"}, \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"POST\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/ansible/ansible/{pulp_id}/sign/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const inputBody = '{ \"content_units\": [ null ], \"signing_service\": \"http://example.com\" }'; const headers = { 'Content-Type':'application/json', 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/ansible/ansible/{pulp_id}/sign/', { method: 'POST', body: inputBody, headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Content-Type': 'application/json', 'Accept': 'application/json' } r = requests.post('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/ansible/ansible/{pulp_id}/sign/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Content-Type' => 'application/json', 'Accept' => 'application/json' } result = RestClient.post 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/ansible/ansible/{pulp_id}/sign/', params: { }, headers: headers p JSON.parse(result) POST /api/automation-hub/pulp/api/v3/repositories/ansible/ansible/{pulp_id}/sign/ Trigger an asynchronous task to sign Ansible content. Body parameter { \"content_units\": [ null ], \"signing_service\": \"http://example.com\" } content_units: - null signing_service: http://example.com","title":"repositories_ansible_ansible_sign"},{"location":"automation-hub/#repositories_ansible_ansible_sync","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Content-Type\": []string{\"application/json\"}, \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"POST\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/ansible/ansible/{pulp_id}/sync/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const inputBody = '{ \"remote\": \"http://example.com\", \"mirror\": false, \"optimize\": true }'; const headers = { 'Content-Type':'application/json', 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/ansible/ansible/{pulp_id}/sync/', { method: 'POST', body: inputBody, headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Content-Type': 'application/json', 'Accept': 'application/json' } r = requests.post('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/ansible/ansible/{pulp_id}/sync/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Content-Type' => 'application/json', 'Accept' => 'application/json' } result = RestClient.post 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/ansible/ansible/{pulp_id}/sync/', params: { }, headers: headers p JSON.parse(result) POST /api/automation-hub/pulp/api/v3/repositories/ansible/ansible/{pulp_id}/sync/ Trigger an asynchronous task to sync Ansible content. Body parameter { \"remote\": \"http://example.com\", \"mirror\": false, \"optimize\": true } remote: http://example.com mirror: false optimize: true","title":"repositories_ansible_ansible_sync"},{"location":"automation-hub/#repositories_ansible_ansible_versions_list","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/ansible/ansible/{repository_pk}/versions/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/ansible/ansible/{repository_pk}/versions/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/ansible/ansible/{repository_pk}/versions/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/ansible/ansible/{repository_pk}/versions/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/pulp/api/v3/repositories/ansible/ansible/{repository_pk}/versions/ List repository versions AnsibleRepositoryVersion represents a single file repository version.","title":"repositories_ansible_ansible_versions_list"},{"location":"automation-hub/#enumerated-values_50","text":"Parameter Value ordering -added_memberships ordering -base_version ordering -complete ordering -counts ordering -distribution ordering -download_logs ordering -group_roles ordering -info ordering -number ordering -pk ordering -publication ordering -pulp_created ordering -pulp_id ordering -pulp_labels ordering -pulp_last_updated ordering -removed_memberships ordering -repository ordering -user_roles ordering -versions ordering added_memberships ordering base_version ordering complete ordering counts ordering distribution ordering download_logs ordering group_roles ordering info ordering number ordering pk ordering publication ordering pulp_created ordering pulp_id ordering pulp_labels ordering pulp_last_updated ordering removed_memberships ordering repository ordering user_roles ordering versions Example responses 200 Response { \"count\": 123, \"next\": \"http://api.example.org/accounts/?offset=400&limit=100\", \"previous\": \"http://api.example.org/accounts/?offset=200&limit=100\", \"results\": [ { \"pulp_href\": \"http://example.com\", \"pulp_created\": \"2019-08-24T14:15:22Z\", \"number\": 0, \"repository\": \"http://example.com\", \"base_version\": \"http://example.com\", \"content_summary\": { \"added\": { \"property1\": {}, \"property2\": {} }, \"removed\": { \"property1\": {}, \"property2\": {} }, \"present\": { \"property1\": {}, \"property2\": {} } } } ] }","title":"Enumerated Values"},{"location":"automation-hub/#repositories_ansible_ansible_versions_read","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/ansible/ansible/{repository_pk}/versions/{number}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/ansible/ansible/{repository_pk}/versions/{number}/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/ansible/ansible/{repository_pk}/versions/{number}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/ansible/ansible/{repository_pk}/versions/{number}/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/pulp/api/v3/repositories/ansible/ansible/{repository_pk}/versions/{number}/ Inspect a repository version AnsibleRepositoryVersion represents a single file repository version.","title":"repositories_ansible_ansible_versions_read"},{"location":"automation-hub/#repositories_ansible_ansible_versions_delete","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"DELETE\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/ansible/ansible/{repository_pk}/versions/{number}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/ansible/ansible/{repository_pk}/versions/{number}/', { method: 'DELETE', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.delete('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/ansible/ansible/{repository_pk}/versions/{number}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.delete 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/ansible/ansible/{repository_pk}/versions/{number}/', params: { }, headers: headers p JSON.parse(result) DELETE /api/automation-hub/pulp/api/v3/repositories/ansible/ansible/{repository_pk}/versions/{number}/ Delete a repository version Trigger an asynchronous task to delete a repository version.","title":"repositories_ansible_ansible_versions_delete"},{"location":"automation-hub/#repositories_ansible_ansible_versions_rebuild_metadata","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Content-Type\": []string{\"application/json\"}, \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"POST\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/ansible/ansible/{repository_pk}/versions/{number}/rebuild_metadata/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const inputBody = '{ \"namespace\": \"string\", \"name\": \"string\", \"version\": \"string\" }'; const headers = { 'Content-Type':'application/json', 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/ansible/ansible/{repository_pk}/versions/{number}/rebuild_metadata/', { method: 'POST', body: inputBody, headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Content-Type': 'application/json', 'Accept': 'application/json' } r = requests.post('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/ansible/ansible/{repository_pk}/versions/{number}/rebuild_metadata/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Content-Type' => 'application/json', 'Accept' => 'application/json' } result = RestClient.post 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/ansible/ansible/{repository_pk}/versions/{number}/rebuild_metadata/', params: { }, headers: headers p JSON.parse(result) POST /api/automation-hub/pulp/api/v3/repositories/ansible/ansible/{repository_pk}/versions/{number}/rebuild_metadata/ Trigger an asynchronous task to rebuild Ansible content meta. Body parameter { \"namespace\": \"string\", \"name\": \"string\", \"version\": \"string\" } namespace: string name: string version: string","title":"repositories_ansible_ansible_versions_rebuild_metadata"},{"location":"automation-hub/#repositories_ansible_ansible_versions_repair","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Content-Type\": []string{\"application/json\"}, \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"POST\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/ansible/ansible/{repository_pk}/versions/{number}/repair/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const inputBody = '{ \"verify_checksums\": true }'; const headers = { 'Content-Type':'application/json', 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/ansible/ansible/{repository_pk}/versions/{number}/repair/', { method: 'POST', body: inputBody, headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Content-Type': 'application/json', 'Accept': 'application/json' } r = requests.post('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/ansible/ansible/{repository_pk}/versions/{number}/repair/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Content-Type' => 'application/json', 'Accept' => 'application/json' } result = RestClient.post 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/ansible/ansible/{repository_pk}/versions/{number}/repair/', params: { }, headers: headers p JSON.parse(result) POST /api/automation-hub/pulp/api/v3/repositories/ansible/ansible/{repository_pk}/versions/{number}/repair/ Trigger an asynchronous task to repair a repository version. Body parameter { \"verify_checksums\": true } verify_checksums: true","title":"repositories_ansible_ansible_versions_repair"},{"location":"automation-hub/#repositories_container_container_list","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/container/container/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/container/container/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/container/container/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/container/container/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/pulp/api/v3/repositories/container/container/ List container repositorys ViewSet for container repo.","title":"repositories_container_container_list"},{"location":"automation-hub/#enumerated-values_51","text":"Parameter Value ordering -alternatecontentsourcepath ordering -ansible_ansiblerepository ordering -container_containerpushrepository ordering -container_containerrepository ordering -content ordering -core_pulp_exporter ordering -description ordering -distributions ordering -download_logs ordering -group_roles ordering -name ordering -next_version ordering -pk ordering -pulp_created ordering -pulp_id ordering -pulp_labels ordering -pulp_last_updated ordering -pulp_type ordering -pulpimporterrepository ordering -remote ordering -repositorycontent ordering -retain_repo_versions ordering -uploads ordering -user_hidden ordering -user_roles ordering -versions ordering alternatecontentsourcepath ordering ansible_ansiblerepository ordering container_containerpushrepository ordering container_containerrepository ordering content ordering core_pulp_exporter ordering description ordering distributions ordering download_logs ordering group_roles ordering name ordering next_version ordering pk ordering pulp_created ordering pulp_id ordering pulp_labels ordering pulp_last_updated ordering pulp_type ordering pulpimporterrepository ordering remote ordering repositorycontent ordering retain_repo_versions ordering uploads ordering user_hidden ordering user_roles ordering versions Example responses 200 Response { \"count\": 123, \"next\": \"http://api.example.org/accounts/?offset=400&limit=100\", \"previous\": \"http://api.example.org/accounts/?offset=200&limit=100\", \"results\": [ { \"pulp_href\": \"http://example.com\", \"pulp_created\": \"2019-08-24T14:15:22Z\", \"versions_href\": \"http://example.com\", \"pulp_labels\": {}, \"latest_version_href\": \"http://example.com\", \"name\": \"string\", \"description\": \"string\", \"retain_repo_versions\": 1, \"remote\": \"http://example.com\", \"manifest_signing_service\": \"http://example.com\" } ] }","title":"Enumerated Values"},{"location":"automation-hub/#repositories_container_container_create","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Content-Type\": []string{\"application/json\"}, \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"POST\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/container/container/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const inputBody = '{ \"pulp_labels\": {}, \"name\": \"string\", \"description\": \"string\", \"retain_repo_versions\": 1, \"remote\": \"http://example.com\", \"manifest_signing_service\": \"http://example.com\" }'; const headers = { 'Content-Type':'application/json', 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/container/container/', { method: 'POST', body: inputBody, headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Content-Type': 'application/json', 'Accept': 'application/json' } r = requests.post('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/container/container/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Content-Type' => 'application/json', 'Accept' => 'application/json' } result = RestClient.post 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/container/container/', params: { }, headers: headers p JSON.parse(result) POST /api/automation-hub/pulp/api/v3/repositories/container/container/ Create a container repository ViewSet for container repo. Body parameter { \"pulp_labels\": {}, \"name\": \"string\", \"description\": \"string\", \"retain_repo_versions\": 1, \"remote\": \"http://example.com\", \"manifest_signing_service\": \"http://example.com\" } pulp_labels: {} name: string description: string retain_repo_versions: 1 remote: http://example.com manifest_signing_service: http://example.com","title":"repositories_container_container_create"},{"location":"automation-hub/#repositories_container_container_read","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/container/container/{pulp_id}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/container/container/{pulp_id}/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/container/container/{pulp_id}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/container/container/{pulp_id}/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/pulp/api/v3/repositories/container/container/{pulp_id}/ Inspect a container repository ViewSet for container repo.","title":"repositories_container_container_read"},{"location":"automation-hub/#repositories_container_container_update","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Content-Type\": []string{\"application/json\"}, \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"PUT\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/container/container/{pulp_id}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const inputBody = '{ \"pulp_labels\": {}, \"name\": \"string\", \"description\": \"string\", \"retain_repo_versions\": 1, \"remote\": \"http://example.com\", \"manifest_signing_service\": \"http://example.com\" }'; const headers = { 'Content-Type':'application/json', 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/container/container/{pulp_id}/', { method: 'PUT', body: inputBody, headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Content-Type': 'application/json', 'Accept': 'application/json' } r = requests.put('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/container/container/{pulp_id}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Content-Type' => 'application/json', 'Accept' => 'application/json' } result = RestClient.put 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/container/container/{pulp_id}/', params: { }, headers: headers p JSON.parse(result) PUT /api/automation-hub/pulp/api/v3/repositories/container/container/{pulp_id}/ Update a container repository Trigger an asynchronous update task Body parameter { \"pulp_labels\": {}, \"name\": \"string\", \"description\": \"string\", \"retain_repo_versions\": 1, \"remote\": \"http://example.com\", \"manifest_signing_service\": \"http://example.com\" } pulp_labels: {} name: string description: string retain_repo_versions: 1 remote: http://example.com manifest_signing_service: http://example.com","title":"repositories_container_container_update"},{"location":"automation-hub/#repositories_container_container_partial_update","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Content-Type\": []string{\"application/json\"}, \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"PATCH\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/container/container/{pulp_id}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const inputBody = '{ \"pulp_labels\": {}, \"name\": \"string\", \"description\": \"string\", \"retain_repo_versions\": 1, \"remote\": \"http://example.com\", \"manifest_signing_service\": \"http://example.com\" }'; const headers = { 'Content-Type':'application/json', 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/container/container/{pulp_id}/', { method: 'PATCH', body: inputBody, headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Content-Type': 'application/json', 'Accept': 'application/json' } r = requests.patch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/container/container/{pulp_id}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Content-Type' => 'application/json', 'Accept' => 'application/json' } result = RestClient.patch 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/container/container/{pulp_id}/', params: { }, headers: headers p JSON.parse(result) PATCH /api/automation-hub/pulp/api/v3/repositories/container/container/{pulp_id}/ Update a container repository Trigger an asynchronous partial update task Body parameter { \"pulp_labels\": {}, \"name\": \"string\", \"description\": \"string\", \"retain_repo_versions\": 1, \"remote\": \"http://example.com\", \"manifest_signing_service\": \"http://example.com\" } pulp_labels: {} name: string description: string retain_repo_versions: 1 remote: http://example.com manifest_signing_service: http://example.com","title":"repositories_container_container_partial_update"},{"location":"automation-hub/#repositories_container_container_delete","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"DELETE\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/container/container/{pulp_id}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/container/container/{pulp_id}/', { method: 'DELETE', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.delete('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/container/container/{pulp_id}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.delete 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/container/container/{pulp_id}/', params: { }, headers: headers p JSON.parse(result) DELETE /api/automation-hub/pulp/api/v3/repositories/container/container/{pulp_id}/ Delete a container repository Trigger an asynchronous delete task","title":"repositories_container_container_delete"},{"location":"automation-hub/#repositories_container_container_add","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Content-Type\": []string{\"application/json\"}, \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"POST\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/container/container/{pulp_id}/add/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const inputBody = '{ \"content_units\": [ null ] }'; const headers = { 'Content-Type':'application/json', 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/container/container/{pulp_id}/add/', { method: 'POST', body: inputBody, headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Content-Type': 'application/json', 'Accept': 'application/json' } r = requests.post('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/container/container/{pulp_id}/add/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Content-Type' => 'application/json', 'Accept' => 'application/json' } result = RestClient.post 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/container/container/{pulp_id}/add/', params: { }, headers: headers p JSON.parse(result) POST /api/automation-hub/pulp/api/v3/repositories/container/container/{pulp_id}/add/ Add content Trigger an asynchronous task to recursively add container content. Body parameter { \"content_units\": [ null ] } content_units: - null","title":"repositories_container_container_add"},{"location":"automation-hub/#repositories_container_container_add_role","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Content-Type\": []string{\"application/json\"}, \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"POST\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/container/container/{pulp_id}/add_role/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const inputBody = '{ \"users\": [], \"groups\": [], \"role\": \"string\" }'; const headers = { 'Content-Type':'application/json', 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/container/container/{pulp_id}/add_role/', { method: 'POST', body: inputBody, headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Content-Type': 'application/json', 'Accept': 'application/json' } r = requests.post('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/container/container/{pulp_id}/add_role/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Content-Type' => 'application/json', 'Accept' => 'application/json' } result = RestClient.post 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/container/container/{pulp_id}/add_role/', params: { }, headers: headers p JSON.parse(result) POST /api/automation-hub/pulp/api/v3/repositories/container/container/{pulp_id}/add_role/ Add a role for this object to users/groups. Body parameter { \"users\": [], \"groups\": [], \"role\": \"string\" } users: [] groups: [] role: string","title":"repositories_container_container_add_role"},{"location":"automation-hub/#repositories_container_container_build_image","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Content-Type\": []string{\"multipart/form-data\"}, \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"POST\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/container/container/{pulp_id}/build_image/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const inputBody = '{ \"containerfile_artifact\": \"http://example.com\", \"containerfile\": \"string\", \"tag\": \"latest\", \"artifacts\": {} }'; const headers = { 'Content-Type':'multipart/form-data', 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/container/container/{pulp_id}/build_image/', { method: 'POST', body: inputBody, headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Content-Type': 'multipart/form-data', 'Accept': 'application/json' } r = requests.post('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/container/container/{pulp_id}/build_image/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Content-Type' => 'multipart/form-data', 'Accept' => 'application/json' } result = RestClient.post 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/container/container/{pulp_id}/build_image/', params: { }, headers: headers p JSON.parse(result) POST /api/automation-hub/pulp/api/v3/repositories/container/container/{pulp_id}/build_image/ Build an Image Trigger an asynchronous task to build an OCI image from a Containerfile. A new repository version is created with the new image and tag. This API is tech preview in Pulp Container 1.1. Backwards compatibility when upgrading is not guaranteed. Body parameter containerfile_artifact: http://example.com containerfile: string tag: latest artifacts: {}","title":"repositories_container_container_build_image"},{"location":"automation-hub/#repositories_container_container_copy_manifests","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Content-Type\": []string{\"application/json\"}, \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"POST\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/container/container/{pulp_id}/copy_manifests/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const inputBody = '{ \"source_repository\": \"http://example.com\", \"source_repository_version\": \"http://example.com\", \"digests\": [ null ], \"media_types\": [ \"application/vnd.docker.distribution.manifest.v1+json\" ] }'; const headers = { 'Content-Type':'application/json', 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/container/container/{pulp_id}/copy_manifests/', { method: 'POST', body: inputBody, headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Content-Type': 'application/json', 'Accept': 'application/json' } r = requests.post('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/container/container/{pulp_id}/copy_manifests/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Content-Type' => 'application/json', 'Accept' => 'application/json' } result = RestClient.post 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/container/container/{pulp_id}/copy_manifests/', params: { }, headers: headers p JSON.parse(result) POST /api/automation-hub/pulp/api/v3/repositories/container/container/{pulp_id}/copy_manifests/ Copy manifests Trigger an asynchronous task to copy manifests Body parameter { \"source_repository\": \"http://example.com\", \"source_repository_version\": \"http://example.com\", \"digests\": [ null ], \"media_types\": [ \"application/vnd.docker.distribution.manifest.v1+json\" ] } source_repository: http://example.com source_repository_version: http://example.com digests: - null media_types: - application/vnd.docker.distribution.manifest.v1+json","title":"repositories_container_container_copy_manifests"},{"location":"automation-hub/#repositories_container_container_copy_tags","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Content-Type\": []string{\"application/json\"}, \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"POST\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/container/container/{pulp_id}/copy_tags/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const inputBody = '{ \"source_repository\": \"http://example.com\", \"source_repository_version\": \"http://example.com\", \"names\": [ null ] }'; const headers = { 'Content-Type':'application/json', 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/container/container/{pulp_id}/copy_tags/', { method: 'POST', body: inputBody, headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Content-Type': 'application/json', 'Accept': 'application/json' } r = requests.post('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/container/container/{pulp_id}/copy_tags/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Content-Type' => 'application/json', 'Accept' => 'application/json' } result = RestClient.post 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/container/container/{pulp_id}/copy_tags/', params: { }, headers: headers p JSON.parse(result) POST /api/automation-hub/pulp/api/v3/repositories/container/container/{pulp_id}/copy_tags/ Copy tags Trigger an asynchronous task to copy tags Body parameter { \"source_repository\": \"http://example.com\", \"source_repository_version\": \"http://example.com\", \"names\": [ null ] } source_repository: http://example.com source_repository_version: http://example.com names: - null","title":"repositories_container_container_copy_tags"},{"location":"automation-hub/#repositories_container_container_list_roles","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/container/container/{pulp_id}/list_roles/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/container/container/{pulp_id}/list_roles/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/container/container/{pulp_id}/list_roles/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/container/container/{pulp_id}/list_roles/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/pulp/api/v3/repositories/container/container/{pulp_id}/list_roles/ List roles assigned to this object.","title":"repositories_container_container_list_roles"},{"location":"automation-hub/#repositories_container_container_my_permissions","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/container/container/{pulp_id}/my_permissions/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/container/container/{pulp_id}/my_permissions/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/container/container/{pulp_id}/my_permissions/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/container/container/{pulp_id}/my_permissions/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/pulp/api/v3/repositories/container/container/{pulp_id}/my_permissions/ List permissions available to the current user on this object.","title":"repositories_container_container_my_permissions"},{"location":"automation-hub/#repositories_container_container_remove","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Content-Type\": []string{\"application/json\"}, \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"POST\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/container/container/{pulp_id}/remove/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const inputBody = '{ \"content_units\": [ null ] }'; const headers = { 'Content-Type':'application/json', 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/container/container/{pulp_id}/remove/', { method: 'POST', body: inputBody, headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Content-Type': 'application/json', 'Accept': 'application/json' } r = requests.post('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/container/container/{pulp_id}/remove/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Content-Type' => 'application/json', 'Accept' => 'application/json' } result = RestClient.post 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/container/container/{pulp_id}/remove/', params: { }, headers: headers p JSON.parse(result) POST /api/automation-hub/pulp/api/v3/repositories/container/container/{pulp_id}/remove/ Remove content Trigger an async task to recursively remove container content. Body parameter { \"content_units\": [ null ] } content_units: - null","title":"repositories_container_container_remove"},{"location":"automation-hub/#repositories_container_container_remove_role","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Content-Type\": []string{\"application/json\"}, \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"POST\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/container/container/{pulp_id}/remove_role/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const inputBody = '{ \"users\": [], \"groups\": [], \"role\": \"string\" }'; const headers = { 'Content-Type':'application/json', 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/container/container/{pulp_id}/remove_role/', { method: 'POST', body: inputBody, headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Content-Type': 'application/json', 'Accept': 'application/json' } r = requests.post('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/container/container/{pulp_id}/remove_role/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Content-Type' => 'application/json', 'Accept' => 'application/json' } result = RestClient.post 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/container/container/{pulp_id}/remove_role/', params: { }, headers: headers p JSON.parse(result) POST /api/automation-hub/pulp/api/v3/repositories/container/container/{pulp_id}/remove_role/ Remove a role for this object from users/groups. Body parameter { \"users\": [], \"groups\": [], \"role\": \"string\" } users: [] groups: [] role: string","title":"repositories_container_container_remove_role"},{"location":"automation-hub/#repositories_container_container_sign","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Content-Type\": []string{\"application/json\"}, \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"POST\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/container/container/{pulp_id}/sign/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const inputBody = '{ \"manifest_signing_service\": \"http://example.com\", \"future_base_path\": \"string\", \"tags_list\": [ null ] }'; const headers = { 'Content-Type':'application/json', 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/container/container/{pulp_id}/sign/', { method: 'POST', body: inputBody, headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Content-Type': 'application/json', 'Accept': 'application/json' } r = requests.post('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/container/container/{pulp_id}/sign/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Content-Type' => 'application/json', 'Accept' => 'application/json' } result = RestClient.post 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/container/container/{pulp_id}/sign/', params: { }, headers: headers p JSON.parse(result) POST /api/automation-hub/pulp/api/v3/repositories/container/container/{pulp_id}/sign/ Sign images in the repo Trigger an asynchronous task to sign content. Body parameter { \"manifest_signing_service\": \"http://example.com\", \"future_base_path\": \"string\", \"tags_list\": [ null ] } manifest_signing_service: http://example.com future_base_path: string tags_list: - null","title":"repositories_container_container_sign"},{"location":"automation-hub/#repositories_container_container_sync","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Content-Type\": []string{\"application/json\"}, \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"POST\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/container/container/{pulp_id}/sync/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const inputBody = '{ \"remote\": \"http://example.com\", \"mirror\": false, \"signed_only\": false }'; const headers = { 'Content-Type':'application/json', 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/container/container/{pulp_id}/sync/', { method: 'POST', body: inputBody, headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Content-Type': 'application/json', 'Accept': 'application/json' } r = requests.post('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/container/container/{pulp_id}/sync/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Content-Type' => 'application/json', 'Accept' => 'application/json' } result = RestClient.post 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/container/container/{pulp_id}/sync/', params: { }, headers: headers p JSON.parse(result) POST /api/automation-hub/pulp/api/v3/repositories/container/container/{pulp_id}/sync/ Sync from a remote Trigger an asynchronous task to sync content. Body parameter { \"remote\": \"http://example.com\", \"mirror\": false, \"signed_only\": false } remote: http://example.com mirror: false signed_only: false","title":"repositories_container_container_sync"},{"location":"automation-hub/#repositories_container_container_tag","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Content-Type\": []string{\"application/json\"}, \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"POST\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/container/container/{pulp_id}/tag/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const inputBody = '{ \"tag\": \"string\", \"digest\": \"string\" }'; const headers = { 'Content-Type':'application/json', 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/container/container/{pulp_id}/tag/', { method: 'POST', body: inputBody, headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Content-Type': 'application/json', 'Accept': 'application/json' } r = requests.post('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/container/container/{pulp_id}/tag/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Content-Type' => 'application/json', 'Accept' => 'application/json' } result = RestClient.post 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/container/container/{pulp_id}/tag/', params: { }, headers: headers p JSON.parse(result) POST /api/automation-hub/pulp/api/v3/repositories/container/container/{pulp_id}/tag/ Create a Tag Trigger an asynchronous task to tag an image in the repository Body parameter { \"tag\": \"string\", \"digest\": \"string\" } tag: string digest: string","title":"repositories_container_container_tag"},{"location":"automation-hub/#repositories_container_container_untag","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Content-Type\": []string{\"application/json\"}, \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"POST\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/container/container/{pulp_id}/untag/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const inputBody = '{ \"tag\": \"string\" }'; const headers = { 'Content-Type':'application/json', 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/container/container/{pulp_id}/untag/', { method: 'POST', body: inputBody, headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Content-Type': 'application/json', 'Accept': 'application/json' } r = requests.post('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/container/container/{pulp_id}/untag/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Content-Type' => 'application/json', 'Accept' => 'application/json' } result = RestClient.post 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/container/container/{pulp_id}/untag/', params: { }, headers: headers p JSON.parse(result) POST /api/automation-hub/pulp/api/v3/repositories/container/container/{pulp_id}/untag/ Delete a tag Trigger an asynchronous task to untag an image in the repository Body parameter { \"tag\": \"string\" } tag: string","title":"repositories_container_container_untag"},{"location":"automation-hub/#repositories_container_container_push_list","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/container/container-push/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/container/container-push/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/container/container-push/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/container/container-push/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/pulp/api/v3/repositories/container/container-push/ List container push repositorys ViewSet for a container push repository. POST and DELETE are disallowed because a push repository is tightly coupled with a ContainerDistribution which handles it automatically. Created - during push operation, removed - with ContainerDistribution removal.","title":"repositories_container_container_push_list"},{"location":"automation-hub/#enumerated-values_52","text":"Parameter Value ordering -alternatecontentsourcepath ordering -ansible_ansiblerepository ordering -container_containerpushrepository ordering -container_containerrepository ordering -content ordering -core_pulp_exporter ordering -description ordering -distributions ordering -download_logs ordering -group_roles ordering -name ordering -next_version ordering -pk ordering -pulp_created ordering -pulp_id ordering -pulp_labels ordering -pulp_last_updated ordering -pulp_type ordering -pulpimporterrepository ordering -remote ordering -repositorycontent ordering -retain_repo_versions ordering -uploads ordering -user_hidden ordering -user_roles ordering -versions ordering alternatecontentsourcepath ordering ansible_ansiblerepository ordering container_containerpushrepository ordering container_containerrepository ordering content ordering core_pulp_exporter ordering description ordering distributions ordering download_logs ordering group_roles ordering name ordering next_version ordering pk ordering pulp_created ordering pulp_id ordering pulp_labels ordering pulp_last_updated ordering pulp_type ordering pulpimporterrepository ordering remote ordering repositorycontent ordering retain_repo_versions ordering uploads ordering user_hidden ordering user_roles ordering versions Example responses 200 Response { \"count\": 123, \"next\": \"http://api.example.org/accounts/?offset=400&limit=100\", \"previous\": \"http://api.example.org/accounts/?offset=200&limit=100\", \"results\": [ { \"pulp_labels\": {}, \"pulp_created\": \"2019-08-24T14:15:22Z\", \"manifest_signing_service\": \"http://example.com\", \"description\": \"string\", \"pulp_href\": \"http://example.com\", \"versions_href\": \"http://example.com\", \"retain_repo_versions\": 1, \"latest_version_href\": \"http://example.com\", \"name\": \"string\" } ] }","title":"Enumerated Values"},{"location":"automation-hub/#repositories_container_container_push_read","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/container/container-push/{pulp_id}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/container/container-push/{pulp_id}/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/container/container-push/{pulp_id}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/container/container-push/{pulp_id}/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/pulp/api/v3/repositories/container/container-push/{pulp_id}/ Inspect a container push repository ViewSet for a container push repository. POST and DELETE are disallowed because a push repository is tightly coupled with a ContainerDistribution which handles it automatically. Created - during push operation, removed - with ContainerDistribution removal.","title":"repositories_container_container_push_read"},{"location":"automation-hub/#repositories_container_container_push_update","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Content-Type\": []string{\"application/json\"}, \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"PUT\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/container/container-push/{pulp_id}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const inputBody = '{ \"pulp_labels\": {}, \"manifest_signing_service\": \"http://example.com\", \"description\": \"string\", \"retain_repo_versions\": 1, \"name\": \"string\" }'; const headers = { 'Content-Type':'application/json', 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/container/container-push/{pulp_id}/', { method: 'PUT', body: inputBody, headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Content-Type': 'application/json', 'Accept': 'application/json' } r = requests.put('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/container/container-push/{pulp_id}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Content-Type' => 'application/json', 'Accept' => 'application/json' } result = RestClient.put 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/container/container-push/{pulp_id}/', params: { }, headers: headers p JSON.parse(result) PUT /api/automation-hub/pulp/api/v3/repositories/container/container-push/{pulp_id}/ Update a container push repository Trigger an asynchronous update task Body parameter { \"pulp_labels\": {}, \"manifest_signing_service\": \"http://example.com\", \"description\": \"string\", \"retain_repo_versions\": 1, \"name\": \"string\" } pulp_labels: {} manifest_signing_service: http://example.com description: string retain_repo_versions: 1 name: string","title":"repositories_container_container_push_update"},{"location":"automation-hub/#repositories_container_container_push_partial_update","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Content-Type\": []string{\"application/json\"}, \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"PATCH\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/container/container-push/{pulp_id}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const inputBody = '{ \"pulp_labels\": {}, \"manifest_signing_service\": \"http://example.com\", \"description\": \"string\", \"retain_repo_versions\": 1, \"name\": \"string\" }'; const headers = { 'Content-Type':'application/json', 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/container/container-push/{pulp_id}/', { method: 'PATCH', body: inputBody, headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Content-Type': 'application/json', 'Accept': 'application/json' } r = requests.patch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/container/container-push/{pulp_id}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Content-Type' => 'application/json', 'Accept' => 'application/json' } result = RestClient.patch 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/container/container-push/{pulp_id}/', params: { }, headers: headers p JSON.parse(result) PATCH /api/automation-hub/pulp/api/v3/repositories/container/container-push/{pulp_id}/ Update a container push repository Trigger an asynchronous partial update task Body parameter { \"pulp_labels\": {}, \"manifest_signing_service\": \"http://example.com\", \"description\": \"string\", \"retain_repo_versions\": 1, \"name\": \"string\" } pulp_labels: {} manifest_signing_service: http://example.com description: string retain_repo_versions: 1 name: string","title":"repositories_container_container_push_partial_update"},{"location":"automation-hub/#repositories_container_container_push_add_role","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Content-Type\": []string{\"application/json\"}, \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"POST\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/container/container-push/{pulp_id}/add_role/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const inputBody = '{ \"users\": [], \"groups\": [], \"role\": \"string\" }'; const headers = { 'Content-Type':'application/json', 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/container/container-push/{pulp_id}/add_role/', { method: 'POST', body: inputBody, headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Content-Type': 'application/json', 'Accept': 'application/json' } r = requests.post('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/container/container-push/{pulp_id}/add_role/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Content-Type' => 'application/json', 'Accept' => 'application/json' } result = RestClient.post 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/container/container-push/{pulp_id}/add_role/', params: { }, headers: headers p JSON.parse(result) POST /api/automation-hub/pulp/api/v3/repositories/container/container-push/{pulp_id}/add_role/ Add a role for this object to users/groups. Body parameter { \"users\": [], \"groups\": [], \"role\": \"string\" } users: [] groups: [] role: string","title":"repositories_container_container_push_add_role"},{"location":"automation-hub/#repositories_container_container_push_list_roles","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/container/container-push/{pulp_id}/list_roles/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/container/container-push/{pulp_id}/list_roles/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/container/container-push/{pulp_id}/list_roles/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/container/container-push/{pulp_id}/list_roles/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/pulp/api/v3/repositories/container/container-push/{pulp_id}/list_roles/ List roles assigned to this object.","title":"repositories_container_container_push_list_roles"},{"location":"automation-hub/#repositories_container_container_push_my_permissions","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/container/container-push/{pulp_id}/my_permissions/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/container/container-push/{pulp_id}/my_permissions/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/container/container-push/{pulp_id}/my_permissions/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/container/container-push/{pulp_id}/my_permissions/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/pulp/api/v3/repositories/container/container-push/{pulp_id}/my_permissions/ List permissions available to the current user on this object.","title":"repositories_container_container_push_my_permissions"},{"location":"automation-hub/#repositories_container_container_push_remove_image","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Content-Type\": []string{\"application/json\"}, \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"POST\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/container/container-push/{pulp_id}/remove_image/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const inputBody = '{ \"digest\": \"string\" }'; const headers = { 'Content-Type':'application/json', 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/container/container-push/{pulp_id}/remove_image/', { method: 'POST', body: inputBody, headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Content-Type': 'application/json', 'Accept': 'application/json' } r = requests.post('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/container/container-push/{pulp_id}/remove_image/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Content-Type' => 'application/json', 'Accept' => 'application/json' } result = RestClient.post 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/container/container-push/{pulp_id}/remove_image/', params: { }, headers: headers p JSON.parse(result) POST /api/automation-hub/pulp/api/v3/repositories/container/container-push/{pulp_id}/remove_image/ Delete an image from a repository Trigger an asynchronous task to remove a manifest and all its associated data by a digest Body parameter { \"digest\": \"string\" } digest: string","title":"repositories_container_container_push_remove_image"},{"location":"automation-hub/#repositories_container_container_push_remove_role","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Content-Type\": []string{\"application/json\"}, \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"POST\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/container/container-push/{pulp_id}/remove_role/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const inputBody = '{ \"users\": [], \"groups\": [], \"role\": \"string\" }'; const headers = { 'Content-Type':'application/json', 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/container/container-push/{pulp_id}/remove_role/', { method: 'POST', body: inputBody, headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Content-Type': 'application/json', 'Accept': 'application/json' } r = requests.post('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/container/container-push/{pulp_id}/remove_role/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Content-Type' => 'application/json', 'Accept' => 'application/json' } result = RestClient.post 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/container/container-push/{pulp_id}/remove_role/', params: { }, headers: headers p JSON.parse(result) POST /api/automation-hub/pulp/api/v3/repositories/container/container-push/{pulp_id}/remove_role/ Remove a role for this object from users/groups. Body parameter { \"users\": [], \"groups\": [], \"role\": \"string\" } users: [] groups: [] role: string","title":"repositories_container_container_push_remove_role"},{"location":"automation-hub/#repositories_container_container_push_remove_signatures","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Content-Type\": []string{\"application/json\"}, \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"POST\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/container/container-push/{pulp_id}/remove_signatures/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const inputBody = '{ \"signed_with_key_id\": \"string\" }'; const headers = { 'Content-Type':'application/json', 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/container/container-push/{pulp_id}/remove_signatures/', { method: 'POST', body: inputBody, headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Content-Type': 'application/json', 'Accept': 'application/json' } r = requests.post('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/container/container-push/{pulp_id}/remove_signatures/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Content-Type' => 'application/json', 'Accept' => 'application/json' } result = RestClient.post 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/container/container-push/{pulp_id}/remove_signatures/', params: { }, headers: headers p JSON.parse(result) POST /api/automation-hub/pulp/api/v3/repositories/container/container-push/{pulp_id}/remove_signatures/ Create a task which deletes signatures by the passed key_id. Body parameter { \"signed_with_key_id\": \"string\" } signed_with_key_id: string","title":"repositories_container_container_push_remove_signatures"},{"location":"automation-hub/#repositories_container_container_push_sign","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Content-Type\": []string{\"application/json\"}, \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"POST\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/container/container-push/{pulp_id}/sign/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const inputBody = '{ \"manifest_signing_service\": \"http://example.com\", \"future_base_path\": \"string\", \"tags_list\": [ null ] }'; const headers = { 'Content-Type':'application/json', 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/container/container-push/{pulp_id}/sign/', { method: 'POST', body: inputBody, headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Content-Type': 'application/json', 'Accept': 'application/json' } r = requests.post('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/container/container-push/{pulp_id}/sign/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Content-Type' => 'application/json', 'Accept' => 'application/json' } result = RestClient.post 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/container/container-push/{pulp_id}/sign/', params: { }, headers: headers p JSON.parse(result) POST /api/automation-hub/pulp/api/v3/repositories/container/container-push/{pulp_id}/sign/ Sign images in the repo Trigger an asynchronous task to sign content. Body parameter { \"manifest_signing_service\": \"http://example.com\", \"future_base_path\": \"string\", \"tags_list\": [ null ] } manifest_signing_service: http://example.com future_base_path: string tags_list: - null","title":"repositories_container_container_push_sign"},{"location":"automation-hub/#repositories_container_container_push_tag","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Content-Type\": []string{\"application/json\"}, \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"POST\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/container/container-push/{pulp_id}/tag/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const inputBody = '{ \"tag\": \"string\", \"digest\": \"string\" }'; const headers = { 'Content-Type':'application/json', 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/container/container-push/{pulp_id}/tag/', { method: 'POST', body: inputBody, headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Content-Type': 'application/json', 'Accept': 'application/json' } r = requests.post('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/container/container-push/{pulp_id}/tag/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Content-Type' => 'application/json', 'Accept' => 'application/json' } result = RestClient.post 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/container/container-push/{pulp_id}/tag/', params: { }, headers: headers p JSON.parse(result) POST /api/automation-hub/pulp/api/v3/repositories/container/container-push/{pulp_id}/tag/ Create a Tag Trigger an asynchronous task to tag an image in the repository Body parameter { \"tag\": \"string\", \"digest\": \"string\" } tag: string digest: string","title":"repositories_container_container_push_tag"},{"location":"automation-hub/#repositories_container_container_push_untag","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Content-Type\": []string{\"application/json\"}, \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"POST\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/container/container-push/{pulp_id}/untag/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const inputBody = '{ \"tag\": \"string\" }'; const headers = { 'Content-Type':'application/json', 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/container/container-push/{pulp_id}/untag/', { method: 'POST', body: inputBody, headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Content-Type': 'application/json', 'Accept': 'application/json' } r = requests.post('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/container/container-push/{pulp_id}/untag/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Content-Type' => 'application/json', 'Accept' => 'application/json' } result = RestClient.post 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/container/container-push/{pulp_id}/untag/', params: { }, headers: headers p JSON.parse(result) POST /api/automation-hub/pulp/api/v3/repositories/container/container-push/{pulp_id}/untag/ Delete a tag Trigger an asynchronous task to untag an image in the repository Body parameter { \"tag\": \"string\" } tag: string","title":"repositories_container_container_push_untag"},{"location":"automation-hub/#repositories_container_container_push_versions_list","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/container/container-push/{repository_pk}/versions/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/container/container-push/{repository_pk}/versions/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/container/container-push/{repository_pk}/versions/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/container/container-push/{repository_pk}/versions/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/pulp/api/v3/repositories/container/container-push/{repository_pk}/versions/ List repository versions ContainerPushRepositoryVersion represents a single container push repository version. Repository versions of a push repository are not allowed to be deleted. Versioning of such repositories, as well as creation/removal, happens automatically without explicit user actions. Users could make a repository not functional by accident if allowed to delete repository versions.","title":"repositories_container_container_push_versions_list"},{"location":"automation-hub/#enumerated-values_53","text":"Parameter Value ordering -added_memberships ordering -base_version ordering -complete ordering -counts ordering -distribution ordering -download_logs ordering -group_roles ordering -info ordering -number ordering -pk ordering -publication ordering -pulp_created ordering -pulp_id ordering -pulp_labels ordering -pulp_last_updated ordering -removed_memberships ordering -repository ordering -user_roles ordering -versions ordering added_memberships ordering base_version ordering complete ordering counts ordering distribution ordering download_logs ordering group_roles ordering info ordering number ordering pk ordering publication ordering pulp_created ordering pulp_id ordering pulp_labels ordering pulp_last_updated ordering removed_memberships ordering repository ordering user_roles ordering versions Example responses 200 Response { \"count\": 123, \"next\": \"http://api.example.org/accounts/?offset=400&limit=100\", \"previous\": \"http://api.example.org/accounts/?offset=200&limit=100\", \"results\": [ { \"pulp_href\": \"http://example.com\", \"pulp_created\": \"2019-08-24T14:15:22Z\", \"number\": 0, \"repository\": \"http://example.com\", \"base_version\": \"http://example.com\", \"content_summary\": { \"added\": { \"property1\": {}, \"property2\": {} }, \"removed\": { \"property1\": {}, \"property2\": {} }, \"present\": { \"property1\": {}, \"property2\": {} } } } ] }","title":"Enumerated Values"},{"location":"automation-hub/#repositories_container_container_push_versions_read","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/container/container-push/{repository_pk}/versions/{number}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/container/container-push/{repository_pk}/versions/{number}/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/container/container-push/{repository_pk}/versions/{number}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/container/container-push/{repository_pk}/versions/{number}/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/pulp/api/v3/repositories/container/container-push/{repository_pk}/versions/{number}/ Inspect a repository version ContainerPushRepositoryVersion represents a single container push repository version. Repository versions of a push repository are not allowed to be deleted. Versioning of such repositories, as well as creation/removal, happens automatically without explicit user actions. Users could make a repository not functional by accident if allowed to delete repository versions.","title":"repositories_container_container_push_versions_read"},{"location":"automation-hub/#repositories_container_container_push_versions_delete","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"DELETE\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/container/container-push/{repository_pk}/versions/{number}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/container/container-push/{repository_pk}/versions/{number}/', { method: 'DELETE', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.delete('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/container/container-push/{repository_pk}/versions/{number}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.delete 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/container/container-push/{repository_pk}/versions/{number}/', params: { }, headers: headers p JSON.parse(result) DELETE /api/automation-hub/pulp/api/v3/repositories/container/container-push/{repository_pk}/versions/{number}/ Delete a repository version Trigger an asynchronous task to delete a repository version.","title":"repositories_container_container_push_versions_delete"},{"location":"automation-hub/#repositories_container_container_push_versions_repair","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Content-Type\": []string{\"application/json\"}, \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"POST\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/container/container-push/{repository_pk}/versions/{number}/repair/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const inputBody = '{ \"verify_checksums\": true }'; const headers = { 'Content-Type':'application/json', 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/container/container-push/{repository_pk}/versions/{number}/repair/', { method: 'POST', body: inputBody, headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Content-Type': 'application/json', 'Accept': 'application/json' } r = requests.post('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/container/container-push/{repository_pk}/versions/{number}/repair/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Content-Type' => 'application/json', 'Accept' => 'application/json' } result = RestClient.post 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/container/container-push/{repository_pk}/versions/{number}/repair/', params: { }, headers: headers p JSON.parse(result) POST /api/automation-hub/pulp/api/v3/repositories/container/container-push/{repository_pk}/versions/{number}/repair/ Trigger an asynchronous task to repair a repository version. Body parameter { \"verify_checksums\": true } verify_checksums: true","title":"repositories_container_container_push_versions_repair"},{"location":"automation-hub/#repositories_container_container_versions_list","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/container/container/{repository_pk}/versions/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/container/container/{repository_pk}/versions/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/container/container/{repository_pk}/versions/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/container/container/{repository_pk}/versions/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/pulp/api/v3/repositories/container/container/{repository_pk}/versions/ List repository versions ContainerRepositoryVersion represents a single container repository version.","title":"repositories_container_container_versions_list"},{"location":"automation-hub/#enumerated-values_54","text":"Parameter Value ordering -added_memberships ordering -base_version ordering -complete ordering -counts ordering -distribution ordering -download_logs ordering -group_roles ordering -info ordering -number ordering -pk ordering -publication ordering -pulp_created ordering -pulp_id ordering -pulp_labels ordering -pulp_last_updated ordering -removed_memberships ordering -repository ordering -user_roles ordering -versions ordering added_memberships ordering base_version ordering complete ordering counts ordering distribution ordering download_logs ordering group_roles ordering info ordering number ordering pk ordering publication ordering pulp_created ordering pulp_id ordering pulp_labels ordering pulp_last_updated ordering removed_memberships ordering repository ordering user_roles ordering versions Example responses 200 Response { \"count\": 123, \"next\": \"http://api.example.org/accounts/?offset=400&limit=100\", \"previous\": \"http://api.example.org/accounts/?offset=200&limit=100\", \"results\": [ { \"pulp_href\": \"http://example.com\", \"pulp_created\": \"2019-08-24T14:15:22Z\", \"number\": 0, \"repository\": \"http://example.com\", \"base_version\": \"http://example.com\", \"content_summary\": { \"added\": { \"property1\": {}, \"property2\": {} }, \"removed\": { \"property1\": {}, \"property2\": {} }, \"present\": { \"property1\": {}, \"property2\": {} } } } ] }","title":"Enumerated Values"},{"location":"automation-hub/#repositories_container_container_versions_read","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/container/container/{repository_pk}/versions/{number}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/container/container/{repository_pk}/versions/{number}/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/container/container/{repository_pk}/versions/{number}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/container/container/{repository_pk}/versions/{number}/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/pulp/api/v3/repositories/container/container/{repository_pk}/versions/{number}/ Inspect a repository version ContainerRepositoryVersion represents a single container repository version.","title":"repositories_container_container_versions_read"},{"location":"automation-hub/#repositories_container_container_versions_delete","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"DELETE\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/container/container/{repository_pk}/versions/{number}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/container/container/{repository_pk}/versions/{number}/', { method: 'DELETE', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.delete('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/container/container/{repository_pk}/versions/{number}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.delete 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/container/container/{repository_pk}/versions/{number}/', params: { }, headers: headers p JSON.parse(result) DELETE /api/automation-hub/pulp/api/v3/repositories/container/container/{repository_pk}/versions/{number}/ Delete a repository version Trigger an asynchronous task to delete a repository version.","title":"repositories_container_container_versions_delete"},{"location":"automation-hub/#repositories_container_container_versions_repair","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Content-Type\": []string{\"application/json\"}, \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"POST\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/container/container/{repository_pk}/versions/{number}/repair/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const inputBody = '{ \"verify_checksums\": true }'; const headers = { 'Content-Type':'application/json', 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/container/container/{repository_pk}/versions/{number}/repair/', { method: 'POST', body: inputBody, headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Content-Type': 'application/json', 'Accept': 'application/json' } r = requests.post('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/container/container/{repository_pk}/versions/{number}/repair/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Content-Type' => 'application/json', 'Accept' => 'application/json' } result = RestClient.post 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/container/container/{repository_pk}/versions/{number}/repair/', params: { }, headers: headers p JSON.parse(result) POST /api/automation-hub/pulp/api/v3/repositories/container/container/{repository_pk}/versions/{number}/repair/ Trigger an asynchronous task to repair a repository version. Body parameter { \"verify_checksums\": true } verify_checksums: true","title":"repositories_container_container_versions_repair"},{"location":"automation-hub/#repositories_reclaim_space_reclaim","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Content-Type\": []string{\"application/json\"}, \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"POST\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/reclaim_space/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const inputBody = '{ \"repo_hrefs\": [ null ], \"repo_versions_keeplist\": [ \"http://example.com\" ] }'; const headers = { 'Content-Type':'application/json', 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/reclaim_space/', { method: 'POST', body: inputBody, headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Content-Type': 'application/json', 'Accept': 'application/json' } r = requests.post('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/reclaim_space/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Content-Type' => 'application/json', 'Accept' => 'application/json' } result = RestClient.post 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repositories/reclaim_space/', params: { }, headers: headers p JSON.parse(result) POST /api/automation-hub/pulp/api/v3/repositories/reclaim_space/ Trigger an asynchronous space reclaim operation. Body parameter { \"repo_hrefs\": [ null ], \"repo_versions_keeplist\": [ \"http://example.com\" ] } repo_hrefs: - null repo_versions_keeplist: - http://example.com","title":"repositories_reclaim_space_reclaim"},{"location":"automation-hub/#repository_versions_list","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repository_versions/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repository_versions/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repository_versions/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/repository_versions/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/pulp/api/v3/repository_versions/ List repository versions","title":"repository_versions_list"},{"location":"automation-hub/#enumerated-values_55","text":"Parameter Value ordering -added_memberships ordering -base_version ordering -complete ordering -counts ordering -distribution ordering -download_logs ordering -group_roles ordering -info ordering -number ordering -pk ordering -publication ordering -pulp_created ordering -pulp_id ordering -pulp_labels ordering -pulp_last_updated ordering -removed_memberships ordering -repository ordering -user_roles ordering -versions ordering added_memberships ordering base_version ordering complete ordering counts ordering distribution ordering download_logs ordering group_roles ordering info ordering number ordering pk ordering publication ordering pulp_created ordering pulp_id ordering pulp_labels ordering pulp_last_updated ordering removed_memberships ordering repository ordering user_roles ordering versions Example responses 200 Response { \"count\": 123, \"next\": \"http://api.example.org/accounts/?offset=400&limit=100\", \"previous\": \"http://api.example.org/accounts/?offset=200&limit=100\", \"results\": [ { \"pulp_href\": \"http://example.com\", \"pulp_created\": \"2019-08-24T14:15:22Z\", \"number\": 0, \"repository\": \"http://example.com\", \"base_version\": \"http://example.com\", \"content_summary\": { \"added\": { \"property1\": {}, \"property2\": {} }, \"removed\": { \"property1\": {}, \"property2\": {} }, \"present\": { \"property1\": {}, \"property2\": {} } } } ] }","title":"Enumerated Values"},{"location":"automation-hub/#roles_list","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/roles/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/roles/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/roles/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/roles/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/pulp/api/v3/roles/ List roles ViewSet for Role. NOTE: This API endpoint is in \"tech preview\" and subject to change","title":"roles_list"},{"location":"automation-hub/#enumerated-values_56","text":"Parameter Value ordering -description ordering -group_roles ordering -locked ordering -name ordering -object_groups ordering -object_users ordering -permissions ordering -pk ordering -pulp_created ordering -pulp_id ordering -pulp_labels ordering -pulp_last_updated ordering -user_roles ordering description ordering group_roles ordering locked ordering name ordering object_groups ordering object_users ordering permissions ordering pk ordering pulp_created ordering pulp_id ordering pulp_labels ordering pulp_last_updated ordering user_roles Example responses 200 Response { \"count\": 123, \"next\": \"http://api.example.org/accounts/?offset=400&limit=100\", \"previous\": \"http://api.example.org/accounts/?offset=200&limit=100\", \"results\": [ { \"pulp_href\": \"http://example.com\", \"pulp_created\": \"2019-08-24T14:15:22Z\", \"name\": \"string\", \"description\": \"string\", \"permissions\": [ \"string\" ], \"locked\": true } ] }","title":"Enumerated Values"},{"location":"automation-hub/#roles_create","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Content-Type\": []string{\"application/json\"}, \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"POST\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/roles/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const inputBody = '{ \"name\": \"string\", \"description\": \"string\", \"permissions\": [ \"string\" ] }'; const headers = { 'Content-Type':'application/json', 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/roles/', { method: 'POST', body: inputBody, headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Content-Type': 'application/json', 'Accept': 'application/json' } r = requests.post('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/roles/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Content-Type' => 'application/json', 'Accept' => 'application/json' } result = RestClient.post 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/roles/', params: { }, headers: headers p JSON.parse(result) POST /api/automation-hub/pulp/api/v3/roles/ Create a role ViewSet for Role. NOTE: This API endpoint is in \"tech preview\" and subject to change Body parameter { \"name\": \"string\", \"description\": \"string\", \"permissions\": [ \"string\" ] } name: string description: string permissions: - string","title":"roles_create"},{"location":"automation-hub/#roles_read","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/roles/{pulp_id}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/roles/{pulp_id}/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/roles/{pulp_id}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/roles/{pulp_id}/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/pulp/api/v3/roles/{pulp_id}/ Inspect a role ViewSet for Role. NOTE: This API endpoint is in \"tech preview\" and subject to change","title":"roles_read"},{"location":"automation-hub/#roles_update","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Content-Type\": []string{\"application/json\"}, \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"PUT\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/roles/{pulp_id}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const inputBody = '{ \"name\": \"string\", \"description\": \"string\", \"permissions\": [ \"string\" ] }'; const headers = { 'Content-Type':'application/json', 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/roles/{pulp_id}/', { method: 'PUT', body: inputBody, headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Content-Type': 'application/json', 'Accept': 'application/json' } r = requests.put('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/roles/{pulp_id}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Content-Type' => 'application/json', 'Accept' => 'application/json' } result = RestClient.put 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/roles/{pulp_id}/', params: { }, headers: headers p JSON.parse(result) PUT /api/automation-hub/pulp/api/v3/roles/{pulp_id}/ Update a role ViewSet for Role. NOTE: This API endpoint is in \"tech preview\" and subject to change Body parameter { \"name\": \"string\", \"description\": \"string\", \"permissions\": [ \"string\" ] } name: string description: string permissions: - string","title":"roles_update"},{"location":"automation-hub/#roles_partial_update","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Content-Type\": []string{\"application/json\"}, \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"PATCH\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/roles/{pulp_id}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const inputBody = '{ \"name\": \"string\", \"description\": \"string\", \"permissions\": [ \"string\" ] }'; const headers = { 'Content-Type':'application/json', 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/roles/{pulp_id}/', { method: 'PATCH', body: inputBody, headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Content-Type': 'application/json', 'Accept': 'application/json' } r = requests.patch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/roles/{pulp_id}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Content-Type' => 'application/json', 'Accept' => 'application/json' } result = RestClient.patch 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/roles/{pulp_id}/', params: { }, headers: headers p JSON.parse(result) PATCH /api/automation-hub/pulp/api/v3/roles/{pulp_id}/ Update a role ViewSet for Role. NOTE: This API endpoint is in \"tech preview\" and subject to change Body parameter { \"name\": \"string\", \"description\": \"string\", \"permissions\": [ \"string\" ] } name: string description: string permissions: - string","title":"roles_partial_update"},{"location":"automation-hub/#roles_delete","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"DELETE\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/roles/{pulp_id}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/roles/{pulp_id}/', { method: 'DELETE' }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests r = requests.delete('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/roles/{pulp_id}/') print(r.json()) require 'rest-client' require 'json' result = RestClient.delete 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/roles/{pulp_id}/', params: { } p JSON.parse(result) DELETE /api/automation-hub/pulp/api/v3/roles/{pulp_id}/ Delete a role ViewSet for Role. NOTE: This API endpoint is in \"tech preview\" and subject to change","title":"roles_delete"},{"location":"automation-hub/#signing_services_list","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/signing-services/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/signing-services/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/signing-services/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/signing-services/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/pulp/api/v3/signing-services/ List signing services A ViewSet that supports browsing of existing signing services.","title":"signing_services_list"},{"location":"automation-hub/#signing_services_read","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/signing-services/{pulp_id}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/signing-services/{pulp_id}/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/signing-services/{pulp_id}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/signing-services/{pulp_id}/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/pulp/api/v3/signing-services/{pulp_id}/ Inspect a signing service A ViewSet that supports browsing of existing signing services.","title":"signing_services_read"},{"location":"automation-hub/#status_read","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/status/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/status/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/status/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/status/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/pulp/api/v3/status/ Inspect status of Pulp Returns status and app information about Pulp. Information includes: * version of pulpcore and loaded pulp plugins * known workers * known content apps * database connection status * redis connection status * disk usage information Example responses 200 Response { \"versions\": [ { \"component\": \"string\", \"version\": \"string\", \"package\": \"string\" } ], \"online_workers\": [ { \"pulp_href\": \"http://example.com\", \"pulp_created\": \"2019-08-24T14:15:22Z\", \"name\": \"string\", \"last_heartbeat\": \"2019-08-24T14:15:22Z\", \"current_task\": \"http://example.com\" } ], \"online_content_apps\": [ { \"name\": \"string\", \"last_heartbeat\": \"2019-08-24T14:15:22Z\" } ], \"database_connection\": { \"connected\": true }, \"redis_connection\": { \"connected\": true }, \"storage\": { \"total\": 0, \"used\": 0, \"free\": 0 } }","title":"status_read"},{"location":"automation-hub/#task_groups_list","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/task-groups/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/task-groups/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/task-groups/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/task-groups/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/pulp/api/v3/task-groups/ List task groups A customized named ModelViewSet that knows how to register itself with the Pulp API router. This viewset is discoverable by its name. \"Normal\" Django Models and Master/Detail models are supported by the register_with method. Attributes: lookup_field (str): The name of the field by which an object should be looked up, in addition to any parent lookups if this ViewSet is nested. Defaults to 'pk' endpoint_name (str): The name of the final path segment that should identify the ViewSet's collection endpoint. nest_prefix (str): Optional prefix under which this ViewSet should be nested. This must correspond to the \"parent_prefix\" of a router with rest_framework_nested.NestedMixin. None indicates this ViewSet should not be nested. parent_lookup_kwargs (dict): Optional mapping of key names that would appear in self.kwargs to django model filter expressions that can be used with the corresponding value from self.kwargs, used only by a nested ViewSet to filter based on the parent object's identity. schema (DefaultSchema): The schema class to use by default in a viewset.","title":"task_groups_list"},{"location":"automation-hub/#enumerated-values_57","text":"Parameter Value ordering -all_tasks_dispatched ordering -description ordering -group_progress_reports ordering -group_roles ordering -pk ordering -pulp_created ordering -pulp_id ordering -pulp_labels ordering -pulp_last_updated ordering -tasks ordering -user_roles ordering all_tasks_dispatched ordering description ordering group_progress_reports ordering group_roles ordering pk ordering pulp_created ordering pulp_id ordering pulp_labels ordering pulp_last_updated ordering tasks ordering user_roles Example responses 200 Response { \"count\": 123, \"next\": \"http://api.example.org/accounts/?offset=400&limit=100\", \"previous\": \"http://api.example.org/accounts/?offset=200&limit=100\", \"results\": [ { \"pulp_href\": \"http://example.com\", \"description\": \"string\", \"all_tasks_dispatched\": true, \"waiting\": 0, \"skipped\": 0, \"running\": 0, \"completed\": 0, \"canceled\": 0, \"failed\": 0, \"canceling\": 0, \"group_progress_reports\": [ { \"message\": \"string\", \"code\": \"string\", \"total\": 0, \"done\": 0, \"suffix\": \"string\" } ], \"tasks\": [ { \"pulp_href\": \"http://example.com\", \"pulp_created\": \"2019-08-24T14:15:22Z\", \"name\": \"string\", \"state\": \"string\", \"started_at\": \"2019-08-24T14:15:22Z\", \"finished_at\": \"2019-08-24T14:15:22Z\", \"worker\": \"http://example.com\" } ] } ] }","title":"Enumerated Values"},{"location":"automation-hub/#task_groups_read","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/task-groups/{pulp_id}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/task-groups/{pulp_id}/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/task-groups/{pulp_id}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/task-groups/{pulp_id}/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/pulp/api/v3/task-groups/{pulp_id}/ Inspect a task group A customized named ModelViewSet that knows how to register itself with the Pulp API router. This viewset is discoverable by its name. \"Normal\" Django Models and Master/Detail models are supported by the register_with method. Attributes: lookup_field (str): The name of the field by which an object should be looked up, in addition to any parent lookups if this ViewSet is nested. Defaults to 'pk' endpoint_name (str): The name of the final path segment that should identify the ViewSet's collection endpoint. nest_prefix (str): Optional prefix under which this ViewSet should be nested. This must correspond to the \"parent_prefix\" of a router with rest_framework_nested.NestedMixin. None indicates this ViewSet should not be nested. parent_lookup_kwargs (dict): Optional mapping of key names that would appear in self.kwargs to django model filter expressions that can be used with the corresponding value from self.kwargs, used only by a nested ViewSet to filter based on the parent object's identity. schema (DefaultSchema): The schema class to use by default in a viewset.","title":"task_groups_read"},{"location":"automation-hub/#task_schedules_list","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/task-schedules/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/task-schedules/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/task-schedules/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/task-schedules/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/pulp/api/v3/task-schedules/ List task schedules ViewSet to monitor task schedules. NOTE: This feature is in tech-preview and may change in backwards incompatible ways.","title":"task_schedules_list"},{"location":"automation-hub/#enumerated-values_58","text":"Parameter Value ordering -dispatch_interval ordering -group_roles ordering -last_task ordering -name ordering -next_dispatch ordering -pk ordering -pulp_created ordering -pulp_id ordering -pulp_labels ordering -pulp_last_updated ordering -task_name ordering -user_roles ordering dispatch_interval ordering group_roles ordering last_task ordering name ordering next_dispatch ordering pk ordering pulp_created ordering pulp_id ordering pulp_labels ordering pulp_last_updated ordering task_name ordering user_roles Example responses 200 Response { \"count\": 123, \"next\": \"http://api.example.org/accounts/?offset=400&limit=100\", \"previous\": \"http://api.example.org/accounts/?offset=200&limit=100\", \"results\": [ { \"pulp_href\": \"http://example.com\", \"pulp_created\": \"2019-08-24T14:15:22Z\", \"name\": \"string\", \"task_name\": \"string\", \"dispatch_interval\": \"string\", \"next_dispatch\": \"2019-08-24T14:15:22Z\", \"last_task\": \"http://example.com\" } ] }","title":"Enumerated Values"},{"location":"automation-hub/#task_schedules_read","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/task-schedules/{pulp_id}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/task-schedules/{pulp_id}/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/task-schedules/{pulp_id}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/task-schedules/{pulp_id}/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/pulp/api/v3/task-schedules/{pulp_id}/ Inspect a task schedule ViewSet to monitor task schedules. NOTE: This feature is in tech-preview and may change in backwards incompatible ways.","title":"task_schedules_read"},{"location":"automation-hub/#task_schedules_add_role","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Content-Type\": []string{\"application/json\"}, \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"POST\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/task-schedules/{pulp_id}/add_role/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const inputBody = '{ \"users\": [], \"groups\": [], \"role\": \"string\" }'; const headers = { 'Content-Type':'application/json', 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/task-schedules/{pulp_id}/add_role/', { method: 'POST', body: inputBody, headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Content-Type': 'application/json', 'Accept': 'application/json' } r = requests.post('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/task-schedules/{pulp_id}/add_role/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Content-Type' => 'application/json', 'Accept' => 'application/json' } result = RestClient.post 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/task-schedules/{pulp_id}/add_role/', params: { }, headers: headers p JSON.parse(result) POST /api/automation-hub/pulp/api/v3/task-schedules/{pulp_id}/add_role/ Add a role for this object to users/groups. Body parameter { \"users\": [], \"groups\": [], \"role\": \"string\" } users: [] groups: [] role: string","title":"task_schedules_add_role"},{"location":"automation-hub/#task_schedules_list_roles","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/task-schedules/{pulp_id}/list_roles/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/task-schedules/{pulp_id}/list_roles/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/task-schedules/{pulp_id}/list_roles/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/task-schedules/{pulp_id}/list_roles/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/pulp/api/v3/task-schedules/{pulp_id}/list_roles/ List roles assigned to this object.","title":"task_schedules_list_roles"},{"location":"automation-hub/#task_schedules_my_permissions","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/task-schedules/{pulp_id}/my_permissions/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/task-schedules/{pulp_id}/my_permissions/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/task-schedules/{pulp_id}/my_permissions/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/task-schedules/{pulp_id}/my_permissions/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/pulp/api/v3/task-schedules/{pulp_id}/my_permissions/ List permissions available to the current user on this object.","title":"task_schedules_my_permissions"},{"location":"automation-hub/#task_schedules_remove_role","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Content-Type\": []string{\"application/json\"}, \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"POST\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/task-schedules/{pulp_id}/remove_role/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const inputBody = '{ \"users\": [], \"groups\": [], \"role\": \"string\" }'; const headers = { 'Content-Type':'application/json', 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/task-schedules/{pulp_id}/remove_role/', { method: 'POST', body: inputBody, headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Content-Type': 'application/json', 'Accept': 'application/json' } r = requests.post('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/task-schedules/{pulp_id}/remove_role/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Content-Type' => 'application/json', 'Accept' => 'application/json' } result = RestClient.post 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/task-schedules/{pulp_id}/remove_role/', params: { }, headers: headers p JSON.parse(result) POST /api/automation-hub/pulp/api/v3/task-schedules/{pulp_id}/remove_role/ Remove a role for this object from users/groups. Body parameter { \"users\": [], \"groups\": [], \"role\": \"string\" } users: [] groups: [] role: string","title":"task_schedules_remove_role"},{"location":"automation-hub/#uploads_list","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/uploads/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/uploads/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/uploads/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/uploads/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/pulp/api/v3/uploads/ List uploads View for chunked uploads.","title":"uploads_list"},{"location":"automation-hub/#uploads_create","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Content-Type\": []string{\"application/json\"}, \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"POST\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/uploads/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const inputBody = '{ \"size\": 0 }'; const headers = { 'Content-Type':'application/json', 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/uploads/', { method: 'POST', body: inputBody, headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Content-Type': 'application/json', 'Accept': 'application/json' } r = requests.post('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/uploads/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Content-Type' => 'application/json', 'Accept' => 'application/json' } result = RestClient.post 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/uploads/', params: { }, headers: headers p JSON.parse(result) POST /api/automation-hub/pulp/api/v3/uploads/ Create an upload View for chunked uploads. Body parameter { \"size\": 0 } size: 0","title":"uploads_create"},{"location":"automation-hub/#uploads_read","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/uploads/{pulp_id}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/uploads/{pulp_id}/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/uploads/{pulp_id}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/uploads/{pulp_id}/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/pulp/api/v3/uploads/{pulp_id}/ Inspect an upload View for chunked uploads.","title":"uploads_read"},{"location":"automation-hub/#uploads_update","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Content-Type\": []string{\"multipart/form-data\"}, \"Accept\": []string{\"application/json\"}, \"Content-Range\": []string{\"string\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"PUT\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/uploads/{pulp_id}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const inputBody = '{ \"file\": \"string\", \"sha256\": \"string\" }'; const headers = { 'Content-Type':'multipart/form-data', 'Accept':'application/json', 'Content-Range':'string' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/uploads/{pulp_id}/', { method: 'PUT', body: inputBody, headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Content-Type': 'multipart/form-data', 'Accept': 'application/json', 'Content-Range': 'string' } r = requests.put('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/uploads/{pulp_id}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Content-Type' => 'multipart/form-data', 'Accept' => 'application/json', 'Content-Range' => 'string' } result = RestClient.put 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/uploads/{pulp_id}/', params: { }, headers: headers p JSON.parse(result) PUT /api/automation-hub/pulp/api/v3/uploads/{pulp_id}/ Upload a file chunk Upload a chunk for an upload. Body parameter file: string sha256: string","title":"uploads_update"},{"location":"automation-hub/#uploads_delete","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"DELETE\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/uploads/{pulp_id}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/uploads/{pulp_id}/', { method: 'DELETE' }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests r = requests.delete('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/uploads/{pulp_id}/') print(r.json()) require 'rest-client' require 'json' result = RestClient.delete 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/uploads/{pulp_id}/', params: { } p JSON.parse(result) DELETE /api/automation-hub/pulp/api/v3/uploads/{pulp_id}/ Delete an upload View for chunked uploads.","title":"uploads_delete"},{"location":"automation-hub/#uploads_add_role","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Content-Type\": []string{\"application/json\"}, \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"POST\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/uploads/{pulp_id}/add_role/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const inputBody = '{ \"size\": 0 }'; const headers = { 'Content-Type':'application/json', 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/uploads/{pulp_id}/add_role/', { method: 'POST', body: inputBody, headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Content-Type': 'application/json', 'Accept': 'application/json' } r = requests.post('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/uploads/{pulp_id}/add_role/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Content-Type' => 'application/json', 'Accept' => 'application/json' } result = RestClient.post 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/uploads/{pulp_id}/add_role/', params: { }, headers: headers p JSON.parse(result) POST /api/automation-hub/pulp/api/v3/uploads/{pulp_id}/add_role/ Add a role for this object to users/groups. Body parameter { \"size\": 0 } size: 0","title":"uploads_add_role"},{"location":"automation-hub/#uploads_commit","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Content-Type\": []string{\"application/json\"}, \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"POST\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/uploads/{pulp_id}/commit/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const inputBody = '{ \"sha256\": \"string\" }'; const headers = { 'Content-Type':'application/json', 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/uploads/{pulp_id}/commit/', { method: 'POST', body: inputBody, headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Content-Type': 'application/json', 'Accept': 'application/json' } r = requests.post('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/uploads/{pulp_id}/commit/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Content-Type' => 'application/json', 'Accept' => 'application/json' } result = RestClient.post 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/uploads/{pulp_id}/commit/', params: { }, headers: headers p JSON.parse(result) POST /api/automation-hub/pulp/api/v3/uploads/{pulp_id}/commit/ Finish an Upload Queues a Task that creates an Artifact, and the Upload gets deleted and cannot be re-used. Body parameter { \"sha256\": \"string\" } sha256: string","title":"uploads_commit"},{"location":"automation-hub/#uploads_list_roles","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/uploads/{pulp_id}/list_roles/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/uploads/{pulp_id}/list_roles/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/uploads/{pulp_id}/list_roles/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/uploads/{pulp_id}/list_roles/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/pulp/api/v3/uploads/{pulp_id}/list_roles/ List roles assigned to this object.","title":"uploads_list_roles"},{"location":"automation-hub/#uploads_my_permissions","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/uploads/{pulp_id}/my_permissions/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/uploads/{pulp_id}/my_permissions/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/uploads/{pulp_id}/my_permissions/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/uploads/{pulp_id}/my_permissions/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/pulp/api/v3/uploads/{pulp_id}/my_permissions/ List permissions available to the current user on this object.","title":"uploads_my_permissions"},{"location":"automation-hub/#uploads_remove_role","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Content-Type\": []string{\"application/json\"}, \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"POST\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/uploads/{pulp_id}/remove_role/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const inputBody = '{ \"size\": 0 }'; const headers = { 'Content-Type':'application/json', 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/uploads/{pulp_id}/remove_role/', { method: 'POST', body: inputBody, headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Content-Type': 'application/json', 'Accept': 'application/json' } r = requests.post('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/uploads/{pulp_id}/remove_role/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Content-Type' => 'application/json', 'Accept' => 'application/json' } result = RestClient.post 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/uploads/{pulp_id}/remove_role/', params: { }, headers: headers p JSON.parse(result) POST /api/automation-hub/pulp/api/v3/uploads/{pulp_id}/remove_role/ Remove a role for this object from users/groups. Body parameter { \"size\": 0 } size: 0","title":"uploads_remove_role"},{"location":"automation-hub/#users_list","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/users/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/users/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/users/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/users/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/pulp/api/v3/users/ List users ViewSet for User. NOTE: This API endpoint is in \"tech preview\" and subject to change","title":"users_list"},{"location":"automation-hub/#enumerated-values_59","text":"Parameter Value ordering -auth_token ordering -date_joined ordering -download_logs ordering -email ordering -first_name ordering -groups ordering -id ordering -is_active ordering -is_staff ordering -is_superuser ordering -last_login ordering -last_name ordering -legacynamespace ordering -object_roles ordering -password ordering -pk ordering -user_permissions ordering -username ordering auth_token ordering date_joined ordering download_logs ordering email ordering first_name ordering groups ordering id ordering is_active ordering is_staff ordering is_superuser ordering last_login ordering last_name ordering legacynamespace ordering object_roles ordering password ordering pk ordering user_permissions ordering username Example responses 200 Response { \"meta\": { \"count\": 123 }, \"links\": { \"first\": \"string\", \"previous\": \"string\", \"next\": \"string\", \"last\": \"string\" }, \"data\": [ { \"id\": 0, \"username\": \"string\", \"first_name\": \"string\", \"last_name\": \"string\", \"email\": \"user@example.com\", \"groups\": [ 0 ], \"date_joined\": \"2019-08-24T14:15:22Z\", \"is_superuser\": true, \"auth_provider\": \"string\" } ] }","title":"Enumerated Values"},{"location":"automation-hub/#users_create","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Content-Type\": []string{\"application/json\"}, \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"POST\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/users/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const inputBody = '{ \"username\": \"string\", \"first_name\": \"string\", \"last_name\": \"string\", \"email\": \"user@example.com\", \"groups\": [ 0 ], \"password\": \"string\", \"is_superuser\": true }'; const headers = { 'Content-Type':'application/json', 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/users/', { method: 'POST', body: inputBody, headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Content-Type': 'application/json', 'Accept': 'application/json' } r = requests.post('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/users/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Content-Type' => 'application/json', 'Accept' => 'application/json' } result = RestClient.post 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/users/', params: { }, headers: headers p JSON.parse(result) POST /api/automation-hub/pulp/api/v3/users/ Create an user ViewSet for User. NOTE: This API endpoint is in \"tech preview\" and subject to change Body parameter { \"username\": \"string\", \"first_name\": \"string\", \"last_name\": \"string\", \"email\": \"user@example.com\", \"groups\": [ 0 ], \"password\": \"string\", \"is_superuser\": true } username: string first_name: string last_name: string email: user@example.com groups: - 0 password: string is_superuser: true","title":"users_create"},{"location":"automation-hub/#users_read","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/users/{id}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/users/{id}/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/users/{id}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/users/{id}/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/pulp/api/v3/users/{id}/ Inspect an user ViewSet for User. NOTE: This API endpoint is in \"tech preview\" and subject to change","title":"users_read"},{"location":"automation-hub/#users_update","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Content-Type\": []string{\"application/json\"}, \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"PUT\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/users/{id}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const inputBody = '{ \"username\": \"string\", \"first_name\": \"string\", \"last_name\": \"string\", \"email\": \"user@example.com\", \"groups\": [ 0 ], \"password\": \"string\", \"is_superuser\": true }'; const headers = { 'Content-Type':'application/json', 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/users/{id}/', { method: 'PUT', body: inputBody, headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Content-Type': 'application/json', 'Accept': 'application/json' } r = requests.put('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/users/{id}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Content-Type' => 'application/json', 'Accept' => 'application/json' } result = RestClient.put 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/users/{id}/', params: { }, headers: headers p JSON.parse(result) PUT /api/automation-hub/pulp/api/v3/users/{id}/ Update an user ViewSet for User. NOTE: This API endpoint is in \"tech preview\" and subject to change Body parameter { \"username\": \"string\", \"first_name\": \"string\", \"last_name\": \"string\", \"email\": \"user@example.com\", \"groups\": [ 0 ], \"password\": \"string\", \"is_superuser\": true } username: string first_name: string last_name: string email: user@example.com groups: - 0 password: string is_superuser: true","title":"users_update"},{"location":"automation-hub/#users_partial_update","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Content-Type\": []string{\"application/json\"}, \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"PATCH\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/users/{id}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const inputBody = '{ \"username\": \"string\", \"first_name\": \"string\", \"last_name\": \"string\", \"email\": \"user@example.com\", \"groups\": [ 0 ], \"password\": \"string\", \"is_superuser\": true }'; const headers = { 'Content-Type':'application/json', 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/users/{id}/', { method: 'PATCH', body: inputBody, headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Content-Type': 'application/json', 'Accept': 'application/json' } r = requests.patch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/users/{id}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Content-Type' => 'application/json', 'Accept' => 'application/json' } result = RestClient.patch 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/users/{id}/', params: { }, headers: headers p JSON.parse(result) PATCH /api/automation-hub/pulp/api/v3/users/{id}/ Update an user ViewSet for User. NOTE: This API endpoint is in \"tech preview\" and subject to change Body parameter { \"username\": \"string\", \"first_name\": \"string\", \"last_name\": \"string\", \"email\": \"user@example.com\", \"groups\": [ 0 ], \"password\": \"string\", \"is_superuser\": true } username: string first_name: string last_name: string email: user@example.com groups: - 0 password: string is_superuser: true","title":"users_partial_update"},{"location":"automation-hub/#users_delete","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"DELETE\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/users/{id}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/users/{id}/', { method: 'DELETE' }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests r = requests.delete('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/users/{id}/') print(r.json()) require 'rest-client' require 'json' result = RestClient.delete 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/users/{id}/', params: { } p JSON.parse(result) DELETE /api/automation-hub/pulp/api/v3/users/{id}/ Delete an user ViewSet for User. NOTE: This API endpoint is in \"tech preview\" and subject to change","title":"users_delete"},{"location":"automation-hub/#users_roles_list","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/users/{user_pk}/roles/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/users/{user_pk}/roles/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/users/{user_pk}/roles/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/users/{user_pk}/roles/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/pulp/api/v3/users/{user_pk}/roles/ List user roles ViewSet for UserRole. NOTE: This API endpoint is in \"tech preview\" and subject to change","title":"users_roles_list"},{"location":"automation-hub/#enumerated-values_60","text":"Parameter Value ordering -description ordering -pk ordering -pulp_created ordering -role ordering description ordering pk ordering pulp_created ordering role Example responses 200 Response { \"count\": 123, \"next\": \"http://api.example.org/accounts/?offset=400&limit=100\", \"previous\": \"http://api.example.org/accounts/?offset=200&limit=100\", \"results\": [ { \"pulp_href\": \"http://example.com\", \"pulp_created\": \"2019-08-24T14:15:22Z\", \"role\": \"string\", \"content_object\": \"string\", \"description\": \"string\", \"permissions\": [ \"string\" ] } ] }","title":"Enumerated Values"},{"location":"automation-hub/#users_roles_create","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Content-Type\": []string{\"application/json\"}, \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"POST\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/users/{user_pk}/roles/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const inputBody = '{ \"role\": \"string\", \"content_object\": \"string\" }'; const headers = { 'Content-Type':'application/json', 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/users/{user_pk}/roles/', { method: 'POST', body: inputBody, headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Content-Type': 'application/json', 'Accept': 'application/json' } r = requests.post('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/users/{user_pk}/roles/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Content-Type' => 'application/json', 'Accept' => 'application/json' } result = RestClient.post 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/users/{user_pk}/roles/', params: { }, headers: headers p JSON.parse(result) POST /api/automation-hub/pulp/api/v3/users/{user_pk}/roles/ Create an user role ViewSet for UserRole. NOTE: This API endpoint is in \"tech preview\" and subject to change Body parameter { \"role\": \"string\", \"content_object\": \"string\" } role: string content_object: string","title":"users_roles_create"},{"location":"automation-hub/#users_roles_read","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/users/{user_pk}/roles/{pulp_id}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/users/{user_pk}/roles/{pulp_id}/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/users/{user_pk}/roles/{pulp_id}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/users/{user_pk}/roles/{pulp_id}/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/pulp/api/v3/users/{user_pk}/roles/{pulp_id}/ Inspect an user role ViewSet for UserRole. NOTE: This API endpoint is in \"tech preview\" and subject to change","title":"users_roles_read"},{"location":"automation-hub/#users_roles_delete","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"DELETE\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/users/{user_pk}/roles/{pulp_id}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/users/{user_pk}/roles/{pulp_id}/', { method: 'DELETE' }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests r = requests.delete('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/users/{user_pk}/roles/{pulp_id}/') print(r.json()) require 'rest-client' require 'json' result = RestClient.delete 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/users/{user_pk}/roles/{pulp_id}/', params: { } p JSON.parse(result) DELETE /api/automation-hub/pulp/api/v3/users/{user_pk}/roles/{pulp_id}/ Delete an user role ViewSet for UserRole. NOTE: This API endpoint is in \"tech preview\" and subject to change","title":"users_roles_delete"},{"location":"automation-hub/#workers_list","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/workers/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/workers/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/workers/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/workers/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/pulp/api/v3/workers/ List workers A customized named ModelViewSet that knows how to register itself with the Pulp API router. This viewset is discoverable by its name. \"Normal\" Django Models and Master/Detail models are supported by the register_with method. Attributes: lookup_field (str): The name of the field by which an object should be looked up, in addition to any parent lookups if this ViewSet is nested. Defaults to 'pk' endpoint_name (str): The name of the final path segment that should identify the ViewSet's collection endpoint. nest_prefix (str): Optional prefix under which this ViewSet should be nested. This must correspond to the \"parent_prefix\" of a router with rest_framework_nested.NestedMixin. None indicates this ViewSet should not be nested. parent_lookup_kwargs (dict): Optional mapping of key names that would appear in self.kwargs to django model filter expressions that can be used with the corresponding value from self.kwargs, used only by a nested ViewSet to filter based on the parent object's identity. schema (DefaultSchema): The schema class to use by default in a viewset.","title":"workers_list"},{"location":"automation-hub/#enumerated-values_61","text":"Parameter Value ordering -group_roles ordering -last_heartbeat ordering -name ordering -pk ordering -pulp_created ordering -pulp_id ordering -pulp_labels ordering -pulp_last_updated ordering -tasks ordering -user_roles ordering group_roles ordering last_heartbeat ordering name ordering pk ordering pulp_created ordering pulp_id ordering pulp_labels ordering pulp_last_updated ordering tasks ordering user_roles Example responses 200 Response { \"count\": 123, \"next\": \"http://api.example.org/accounts/?offset=400&limit=100\", \"previous\": \"http://api.example.org/accounts/?offset=200&limit=100\", \"results\": [ { \"pulp_href\": \"http://example.com\", \"pulp_created\": \"2019-08-24T14:15:22Z\", \"name\": \"string\", \"last_heartbeat\": \"2019-08-24T14:15:22Z\", \"current_task\": \"http://example.com\" } ] }","title":"Enumerated Values"},{"location":"automation-hub/#workers_read","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/workers/{pulp_id}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/workers/{pulp_id}/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/workers/{pulp_id}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/pulp/api/v3/workers/{pulp_id}/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/pulp/api/v3/workers/{pulp_id}/ Inspect a worker A customized named ModelViewSet that knows how to register itself with the Pulp API router. This viewset is discoverable by its name. \"Normal\" Django Models and Master/Detail models are supported by the register_with method. Attributes: lookup_field (str): The name of the field by which an object should be looked up, in addition to any parent lookups if this ViewSet is nested. Defaults to 'pk' endpoint_name (str): The name of the final path segment that should identify the ViewSet's collection endpoint. nest_prefix (str): Optional prefix under which this ViewSet should be nested. This must correspond to the \"parent_prefix\" of a router with rest_framework_nested.NestedMixin. None indicates this ViewSet should not be nested. parent_lookup_kwargs (dict): Optional mapping of key names that would appear in self.kwargs to django model filter expressions that can be used with the corresponding value from self.kwargs, used only by a nested ViewSet to filter based on the parent object's identity. schema (DefaultSchema): The schema class to use by default in a viewset.","title":"workers_read"},{"location":"automation-hub/#api_automation_hub_v3_read","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/v3/ Legacy v3 endpoint. Example responses 202 Response { \"published\": \"2019-08-24T14:15:22Z\" }","title":"api_automation_hub_v3_read"},{"location":"automation-hub/#api_automation_hub_v3_artifacts_collections_get","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/artifacts/collections/{path}/{filename}\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/artifacts/collections/{path}/{filename}', { method: 'GET' }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/artifacts/collections/{path}/{filename}') print(r.json()) require 'rest-client' require 'json' result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/artifacts/collections/{path}/{filename}', params: { } p JSON.parse(result) GET /api/automation-hub/v3/artifacts/collections/{path}/{filename} Download collection.","title":"api_automation_hub_v3_artifacts_collections_get"},{"location":"automation-hub/#api_automation_hub_v3_auth_token_post","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"POST\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/auth/token/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/auth/token/', { method: 'POST' }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests r = requests.post('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/auth/token/') print(r.json()) require 'rest-client' require 'json' result = RestClient.post 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/auth/token/', params: { } p JSON.parse(result) POST /api/automation-hub/v3/auth/token/ Create or refresh user token.","title":"api_automation_hub_v3_auth_token_post"},{"location":"automation-hub/#api_automation_hub_v3_auth_token_delete","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"DELETE\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/auth/token/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/auth/token/', { method: 'DELETE' }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests r = requests.delete('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/auth/token/') print(r.json()) require 'rest-client' require 'json' result = RestClient.delete 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/auth/token/', params: { } p JSON.parse(result) DELETE /api/automation-hub/v3/auth/token/ Invalidate user token.","title":"api_automation_hub_v3_auth_token_delete"},{"location":"automation-hub/#api_automation_hub_v3_collection_versions_all_get","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/collection_versions/all/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/collection_versions/all/', { method: 'GET' }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/collection_versions/all/') print(r.json()) require 'rest-client' require 'json' result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/collection_versions/all/', params: { } p JSON.parse(result) GET /api/automation-hub/v3/collection_versions/all/","title":"api_automation_hub_v3_collection_versions_all_get"},{"location":"automation-hub/#api_automation_hub_v3_collections_list","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/collections/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/collections/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/collections/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/collections/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/v3/collections/ Legacy v3 endpoint.","title":"api_automation_hub_v3_collections_list"},{"location":"automation-hub/#enumerated-values_62","text":"Parameter Value ordering -group_roles ordering -name ordering -namespace ordering -pk ordering -pulp_created ordering -pulp_id ordering -pulp_labels ordering -pulp_last_updated ordering -synclist ordering -user_roles ordering -versions ordering group_roles ordering name ordering namespace ordering pk ordering pulp_created ordering pulp_id ordering pulp_labels ordering pulp_last_updated ordering synclist ordering user_roles ordering versions Example responses 202 Response { \"meta\": { \"count\": 123 }, \"links\": { \"first\": \"string\", \"previous\": \"string\", \"next\": \"string\", \"last\": \"string\" }, \"data\": [ { \"href\": \"string\", \"namespace\": \"string\", \"name\": \"string\", \"deprecated\": true, \"versions_url\": \"string\", \"highest_version\": {}, \"created_at\": \"2019-08-24T14:15:22Z\", \"updated_at\": \"2019-08-24T14:15:22Z\" } ] }","title":"Enumerated Values"},{"location":"automation-hub/#api_automation_hub_v3_collections_read","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/collections/{namespace}/{name}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/collections/{namespace}/{name}/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/collections/{namespace}/{name}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/collections/{namespace}/{name}/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/v3/collections/{namespace}/{name}/ Legacy v3 endpoint.","title":"api_automation_hub_v3_collections_read"},{"location":"automation-hub/#api_automation_hub_v3_collections_update","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Content-Type\": []string{\"application/json\"}, \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"PATCH\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/collections/{namespace}/{name}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const inputBody = '{}'; const headers = { 'Content-Type':'application/json', 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/collections/{namespace}/{name}/', { method: 'PATCH', body: inputBody, headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Content-Type': 'application/json', 'Accept': 'application/json' } r = requests.patch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/collections/{namespace}/{name}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Content-Type' => 'application/json', 'Accept' => 'application/json' } result = RestClient.patch 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/collections/{namespace}/{name}/', params: { }, headers: headers p JSON.parse(result) PATCH /api/automation-hub/v3/collections/{namespace}/{name}/ Legacy v3 endpoint. Body parameter {} {}","title":"api_automation_hub_v3_collections_update"},{"location":"automation-hub/#api_automation_hub_v3_collections_delete","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"DELETE\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/collections/{namespace}/{name}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/collections/{namespace}/{name}/', { method: 'DELETE', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.delete('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/collections/{namespace}/{name}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.delete 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/collections/{namespace}/{name}/', params: { }, headers: headers p JSON.parse(result) DELETE /api/automation-hub/v3/collections/{namespace}/{name}/ Legacy v3 endpoint.","title":"api_automation_hub_v3_collections_delete"},{"location":"automation-hub/#api_automation_hub_v3_collections_versions_list","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/collections/{namespace}/{name}/versions/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/collections/{namespace}/{name}/versions/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/collections/{namespace}/{name}/versions/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/collections/{namespace}/{name}/versions/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/v3/collections/{namespace}/{name}/versions/ Legacy v3 endpoint.","title":"api_automation_hub_v3_collections_versions_list"},{"location":"automation-hub/#enumerated-values_63","text":"Parameter Value ordering -_artifacts ordering -authors ordering -collection ordering -content_ptr ordering -contentartifact ordering -contents ordering -dependencies ordering -description ordering -docs_blob ordering -documentation ordering -download_logs ordering -files ordering -group_roles ordering -homepage ordering -is_highest ordering -issues ordering -license ordering -manifest ordering -name ordering -namespace ordering -pk ordering -pulp_created ordering -pulp_id ordering -pulp_labels ordering -pulp_last_updated ordering -pulp_type ordering -repositories ordering -repository ordering -requires_ansible ordering -search_vector ordering -signatures ordering -tags ordering -timestamp_of_interest ordering -upstream_id ordering -user_roles ordering -version ordering -version_memberships ordering _artifacts ordering authors ordering collection ordering content_ptr ordering contentartifact ordering contents ordering dependencies ordering description ordering docs_blob ordering documentation ordering download_logs ordering files ordering group_roles ordering homepage ordering is_highest ordering issues ordering license ordering manifest ordering name ordering namespace ordering pk ordering pulp_created ordering pulp_id ordering pulp_labels ordering pulp_last_updated ordering pulp_type ordering repositories ordering repository ordering requires_ansible ordering search_vector ordering signatures ordering tags ordering timestamp_of_interest ordering upstream_id ordering user_roles ordering version ordering version_memberships Example responses 202 Response { \"meta\": { \"count\": 123 }, \"links\": { \"first\": \"string\", \"previous\": \"string\", \"next\": \"string\", \"last\": \"string\" }, \"data\": [ { \"version\": \"string\", \"href\": \"string\", \"created_at\": \"2019-08-24T14:15:22Z\", \"updated_at\": \"2019-08-24T14:15:22Z\", \"requires_ansible\": \"string\" } ] }","title":"Enumerated Values"},{"location":"automation-hub/#api_automation_hub_v3_collections_versions_read","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/collections/{namespace}/{name}/versions/{version}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/collections/{namespace}/{name}/versions/{version}/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/collections/{namespace}/{name}/versions/{version}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/collections/{namespace}/{name}/versions/{version}/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/v3/collections/{namespace}/{name}/versions/{version}/ Legacy v3 endpoint.","title":"api_automation_hub_v3_collections_versions_read"},{"location":"automation-hub/#api_automation_hub_v3_collections_versions_delete","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"DELETE\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/collections/{namespace}/{name}/versions/{version}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/collections/{namespace}/{name}/versions/{version}/', { method: 'DELETE', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.delete('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/collections/{namespace}/{name}/versions/{version}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.delete 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/collections/{namespace}/{name}/versions/{version}/', params: { }, headers: headers p JSON.parse(result) DELETE /api/automation-hub/v3/collections/{namespace}/{name}/versions/{version}/ Legacy v3 endpoint.","title":"api_automation_hub_v3_collections_versions_delete"},{"location":"automation-hub/#api_automation_hub_v3_collections_versions_copy_copy_content","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"POST\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/collections/{namespace}/{name}/versions/{version}/copy/{source_path}/{dest_path}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/collections/{namespace}/{name}/versions/{version}/copy/{source_path}/{dest_path}/', { method: 'POST' }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests r = requests.post('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/collections/{namespace}/{name}/versions/{version}/copy/{source_path}/{dest_path}/') print(r.json()) require 'rest-client' require 'json' result = RestClient.post 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/collections/{namespace}/{name}/versions/{version}/copy/{source_path}/{dest_path}/', params: { } p JSON.parse(result) POST /api/automation-hub/v3/collections/{namespace}/{name}/versions/{version}/copy/{source_path}/{dest_path}/ Copy collection version from one repository to another.","title":"api_automation_hub_v3_collections_versions_copy_copy_content"},{"location":"automation-hub/#api_automation_hub_v3_collections_versions_docs_blob_read","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/collections/{namespace}/{name}/versions/{version}/docs-blob/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/collections/{namespace}/{name}/versions/{version}/docs-blob/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/collections/{namespace}/{name}/versions/{version}/docs-blob/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/collections/{namespace}/{name}/versions/{version}/docs-blob/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/v3/collections/{namespace}/{name}/versions/{version}/docs-blob/ Legacy v3 endpoint.","title":"api_automation_hub_v3_collections_versions_docs_blob_read"},{"location":"automation-hub/#api_automation_hub_v3_collections_versions_move_move_content","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"POST\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/collections/{namespace}/{name}/versions/{version}/move/{source_path}/{dest_path}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/collections/{namespace}/{name}/versions/{version}/move/{source_path}/{dest_path}/', { method: 'POST' }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests r = requests.post('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/collections/{namespace}/{name}/versions/{version}/move/{source_path}/{dest_path}/') print(r.json()) require 'rest-client' require 'json' result = RestClient.post 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/collections/{namespace}/{name}/versions/{version}/move/{source_path}/{dest_path}/', params: { } p JSON.parse(result) POST /api/automation-hub/v3/collections/{namespace}/{name}/versions/{version}/move/{source_path}/{dest_path}/ Remove content from source repo and add to destination repo. Creates new RepositoryVersion of source repo without content included. Creates new RepositoryVersion of destination repo with content included.","title":"api_automation_hub_v3_collections_versions_move_move_content"},{"location":"automation-hub/#api_automation_hub_v3_collections_all_get","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/collections/all/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/collections/all/', { method: 'GET' }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/collections/all/') print(r.json()) require 'rest-client' require 'json' result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/collections/all/', params: { } p JSON.parse(result) GET /api/automation-hub/v3/collections/all/","title":"api_automation_hub_v3_collections_all_get"},{"location":"automation-hub/#api_automation_hub_v3_excludes_read","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/excludes/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/excludes/', { method: 'GET' }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/excludes/') print(r.json()) require 'rest-client' require 'json' result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/excludes/', params: { } p JSON.parse(result) GET /api/automation-hub/v3/excludes/","title":"api_automation_hub_v3_excludes_read"},{"location":"automation-hub/#enumerated-values_64","text":"Parameter Value format json format yaml","title":"Enumerated Values"},{"location":"automation-hub/#api_automation_hub_v3_imports_collections_read","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/imports/collections/{task}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/imports/collections/{task}/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/imports/collections/{task}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/imports/collections/{task}/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/v3/imports/collections/{task}/ Inspect a collection import Legacy v3 endpoint.","title":"api_automation_hub_v3_imports_collections_read"},{"location":"automation-hub/#api_automation_hub_v3_namespaces_list","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/namespaces/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/namespaces/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/namespaces/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/namespaces/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/v3/namespaces/ List namespaces","title":"api_automation_hub_v3_namespaces_list"},{"location":"automation-hub/#enumerated-values_65","text":"Parameter Value sort -company sort -id sort -name sort company sort id sort name Example responses 200 Response { \"meta\": { \"count\": 123 }, \"links\": { \"first\": \"string\", \"previous\": \"string\", \"next\": \"string\", \"last\": \"string\" }, \"data\": [ { \"pulp_href\": \"http://example.com\", \"id\": 0, \"name\": \"string\", \"company\": \"string\", \"email\": \"string\", \"avatar_url\": \"http://example.com\", \"description\": \"string\", \"groups\": \"string\", \"related_fields\": { \"my_permissions\": {} } } ] }","title":"Enumerated Values"},{"location":"automation-hub/#api_automation_hub_v3_namespaces_create","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Content-Type\": []string{\"application/json\"}, \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"POST\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/namespaces/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const inputBody = '{ \"name\": \"string\", \"company\": \"string\", \"email\": \"string\", \"avatar_url\": \"http://example.com\", \"description\": \"string\", \"links\": [ { \"name\": \"string\", \"url\": \"string\" } ], \"groups\": \"string\", \"resources\": \"string\" }'; const headers = { 'Content-Type':'application/json', 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/namespaces/', { method: 'POST', body: inputBody, headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Content-Type': 'application/json', 'Accept': 'application/json' } r = requests.post('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/namespaces/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Content-Type' => 'application/json', 'Accept' => 'application/json' } result = RestClient.post 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/namespaces/', params: { }, headers: headers p JSON.parse(result) POST /api/automation-hub/v3/namespaces/ Create a namespace Override to validate for name duplication before serializer validation. Body parameter { \"name\": \"string\", \"company\": \"string\", \"email\": \"string\", \"avatar_url\": \"http://example.com\", \"description\": \"string\", \"links\": [ { \"name\": \"string\", \"url\": \"string\" } ], \"groups\": \"string\", \"resources\": \"string\" } name: string company: string email: string avatar_url: http://example.com description: string links: - name: string url: string groups: string resources: string","title":"api_automation_hub_v3_namespaces_create"},{"location":"automation-hub/#api_automation_hub_v3_namespaces_read","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/namespaces/{name}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/namespaces/{name}/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/namespaces/{name}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/namespaces/{name}/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/v3/namespaces/{name}/ Inspect a namespace","title":"api_automation_hub_v3_namespaces_read"},{"location":"automation-hub/#api_automation_hub_v3_namespaces_update","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Content-Type\": []string{\"application/json\"}, \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"PUT\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/namespaces/{name}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const inputBody = '{ \"name\": \"string\", \"company\": \"string\", \"email\": \"string\", \"avatar_url\": \"http://example.com\", \"description\": \"string\", \"links\": [ { \"name\": \"string\", \"url\": \"string\" } ], \"groups\": \"string\", \"resources\": \"string\" }'; const headers = { 'Content-Type':'application/json', 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/namespaces/{name}/', { method: 'PUT', body: inputBody, headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Content-Type': 'application/json', 'Accept': 'application/json' } r = requests.put('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/namespaces/{name}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Content-Type' => 'application/json', 'Accept' => 'application/json' } result = RestClient.put 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/namespaces/{name}/', params: { }, headers: headers p JSON.parse(result) PUT /api/automation-hub/v3/namespaces/{name}/ Update a namespace Body parameter { \"name\": \"string\", \"company\": \"string\", \"email\": \"string\", \"avatar_url\": \"http://example.com\", \"description\": \"string\", \"links\": [ { \"name\": \"string\", \"url\": \"string\" } ], \"groups\": \"string\", \"resources\": \"string\" } name: string company: string email: string avatar_url: http://example.com description: string links: - name: string url: string groups: string resources: string","title":"api_automation_hub_v3_namespaces_update"},{"location":"automation-hub/#api_automation_hub_v3_namespaces_partial_update","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Content-Type\": []string{\"application/json\"}, \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"PATCH\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/namespaces/{name}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const inputBody = '{ \"name\": \"string\", \"company\": \"string\", \"email\": \"string\", \"avatar_url\": \"http://example.com\", \"description\": \"string\", \"links\": [ { \"name\": \"string\", \"url\": \"string\" } ], \"groups\": \"string\", \"resources\": \"string\" }'; const headers = { 'Content-Type':'application/json', 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/namespaces/{name}/', { method: 'PATCH', body: inputBody, headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Content-Type': 'application/json', 'Accept': 'application/json' } r = requests.patch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/namespaces/{name}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Content-Type' => 'application/json', 'Accept' => 'application/json' } result = RestClient.patch 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/namespaces/{name}/', params: { }, headers: headers p JSON.parse(result) PATCH /api/automation-hub/v3/namespaces/{name}/ Update a namespace Body parameter { \"name\": \"string\", \"company\": \"string\", \"email\": \"string\", \"avatar_url\": \"http://example.com\", \"description\": \"string\", \"links\": [ { \"name\": \"string\", \"url\": \"string\" } ], \"groups\": \"string\", \"resources\": \"string\" } name: string company: string email: string avatar_url: http://example.com description: string links: - name: string url: string groups: string resources: string","title":"api_automation_hub_v3_namespaces_partial_update"},{"location":"automation-hub/#api_automation_hub_v3_namespaces_delete","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"DELETE\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/namespaces/{name}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/namespaces/{name}/', { method: 'DELETE' }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests r = requests.delete('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/namespaces/{name}/') print(r.json()) require 'rest-client' require 'json' result = RestClient.delete 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/namespaces/{name}/', params: { } p JSON.parse(result) DELETE /api/automation-hub/v3/namespaces/{name}/ Delete a namespace Delete a namespace. Perform a check to see if there are any collections in the namespace. If there are, return a failure. Delete the inbound pulp distro and repository Delete the namespace object. return: Response(status=204)","title":"api_automation_hub_v3_namespaces_delete"},{"location":"automation-hub/#api_automation_hub_v3_openapijson_get","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/vnd.oai.openapi+json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/openapi.json\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/vnd.oai.openapi+json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/openapi.json', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/vnd.oai.openapi+json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/openapi.json', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/vnd.oai.openapi+json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/openapi.json', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/v3/openapi.json OpenApi3 schema for this API. Format can be selected via content negotiation. YAML: application/vnd.oai.openapi JSON: application/vnd.oai.openapi+json","title":"api_automation_hub_v3_openapi.json_get"},{"location":"automation-hub/#enumerated-values_66","text":"Parameter Value lang en-us lang es lang fr lang ja lang ko lang nl lang zh-hans Example responses 200 Response {}","title":"Enumerated Values"},{"location":"automation-hub/#api_automation_hub_v3_openapiyaml_get","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/vnd.oai.openapi\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/openapi.yaml\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/vnd.oai.openapi' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/openapi.yaml', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/vnd.oai.openapi' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/openapi.yaml', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/vnd.oai.openapi' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/openapi.yaml', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/v3/openapi.yaml OpenApi3 schema for this API. Format can be selected via content negotiation. YAML: application/vnd.oai.openapi JSON: application/vnd.oai.openapi+json","title":"api_automation_hub_v3_openapi.yaml_get"},{"location":"automation-hub/#enumerated-values_67","text":"Parameter Value lang en-us lang es lang fr lang ja lang ko lang nl lang zh-hans Example responses 200 Response","title":"Enumerated Values"},{"location":"automation-hub/#api_automation_hub_v3_plugin_ansible_client_configuration_get","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/plugin/ansible/client-configuration/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/plugin/ansible/client-configuration/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/plugin/ansible/client-configuration/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/plugin/ansible/client-configuration/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/v3/plugin/ansible/client-configuration/ Get the client configs. Example responses 200 Response { \"default_distribution_path\": \"string\" }","title":"api_automation_hub_v3_plugin_ansible_client_configuration_get"},{"location":"automation-hub/#api_automation_hub_v3_plugin_ansible_content_collections_read","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/plugin/ansible/content/{distro_base_path}/collections/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/plugin/ansible/content/{distro_base_path}/collections/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/plugin/ansible/content/{distro_base_path}/collections/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/plugin/ansible/content/{distro_base_path}/collections/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/v3/plugin/ansible/content/{distro_base_path}/collections/ ViewSet for Repository Metadata.","title":"api_automation_hub_v3_plugin_ansible_content_collections_read"},{"location":"automation-hub/#api_automation_hub_v3_plugin_ansible_content_collections_all_collections_list","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/plugin/ansible/content/{distro_base_path}/collections/all-collections/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/plugin/ansible/content/{distro_base_path}/collections/all-collections/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/plugin/ansible/content/{distro_base_path}/collections/all-collections/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/plugin/ansible/content/{distro_base_path}/collections/all-collections/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/v3/plugin/ansible/content/{distro_base_path}/collections/all-collections/ Unpaginated ViewSet for Collections.","title":"api_automation_hub_v3_plugin_ansible_content_collections_all_collections_list"},{"location":"automation-hub/#enumerated-values_68","text":"Parameter Value ordering -group_roles ordering -name ordering -namespace ordering -pk ordering -pulp_created ordering -pulp_id ordering -pulp_labels ordering -pulp_last_updated ordering -synclist ordering -user_roles ordering -versions ordering group_roles ordering name ordering namespace ordering pk ordering pulp_created ordering pulp_id ordering pulp_labels ordering pulp_last_updated ordering synclist ordering user_roles ordering versions Example responses 200 Response [ { \"href\": \"string\", \"namespace\": \"string\", \"name\": \"string\", \"deprecated\": true, \"versions_url\": \"string\", \"highest_version\": {}, \"created_at\": \"2019-08-24T14:15:22Z\", \"updated_at\": \"2019-08-24T14:15:22Z\" } ]","title":"Enumerated Values"},{"location":"automation-hub/#api_automation_hub_v3_plugin_ansible_content_collections_all_versions_list","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/plugin/ansible/content/{distro_base_path}/collections/all-versions/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/plugin/ansible/content/{distro_base_path}/collections/all-versions/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/plugin/ansible/content/{distro_base_path}/collections/all-versions/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/plugin/ansible/content/{distro_base_path}/collections/all-versions/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/v3/plugin/ansible/content/{distro_base_path}/collections/all-versions/ Returns paginated CollectionVersions list.","title":"api_automation_hub_v3_plugin_ansible_content_collections_all_versions_list"},{"location":"automation-hub/#api_automation_hub_v3_plugin_ansible_content_collections_artifacts_download","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/plugin/ansible/content/{distro_base_path}/collections/artifacts/{filename}\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/plugin/ansible/content/{distro_base_path}/collections/artifacts/{filename}', { method: 'GET' }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/plugin/ansible/content/{distro_base_path}/collections/artifacts/{filename}') print(r.json()) require 'rest-client' require 'json' result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/plugin/ansible/content/{distro_base_path}/collections/artifacts/{filename}', params: { } p JSON.parse(result) GET /api/automation-hub/v3/plugin/ansible/content/{distro_base_path}/collections/artifacts/{filename}","title":"api_automation_hub_v3_plugin_ansible_content_collections_artifacts_download"},{"location":"automation-hub/#api_automation_hub_v3_plugin_ansible_content_collections_index_list","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/plugin/ansible/content/{distro_base_path}/collections/index/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/plugin/ansible/content/{distro_base_path}/collections/index/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/plugin/ansible/content/{distro_base_path}/collections/index/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/plugin/ansible/content/{distro_base_path}/collections/index/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/v3/plugin/ansible/content/{distro_base_path}/collections/index/ ViewSet for Collections.","title":"api_automation_hub_v3_plugin_ansible_content_collections_index_list"},{"location":"automation-hub/#enumerated-values_69","text":"Parameter Value ordering -group_roles ordering -name ordering -namespace ordering -pk ordering -pulp_created ordering -pulp_id ordering -pulp_labels ordering -pulp_last_updated ordering -synclist ordering -user_roles ordering -versions ordering group_roles ordering name ordering namespace ordering pk ordering pulp_created ordering pulp_id ordering pulp_labels ordering pulp_last_updated ordering synclist ordering user_roles ordering versions Example responses 200 Response { \"meta\": { \"count\": 123 }, \"links\": { \"first\": \"string\", \"previous\": \"string\", \"next\": \"string\", \"last\": \"string\" }, \"data\": [ { \"href\": \"string\", \"namespace\": \"string\", \"name\": \"string\", \"deprecated\": true, \"versions_url\": \"string\", \"highest_version\": {}, \"created_at\": \"2019-08-24T14:15:22Z\", \"updated_at\": \"2019-08-24T14:15:22Z\" } ] }","title":"Enumerated Values"},{"location":"automation-hub/#api_automation_hub_v3_plugin_ansible_content_collections_index_read","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/plugin/ansible/content/{distro_base_path}/collections/index/{namespace}/{name}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/plugin/ansible/content/{distro_base_path}/collections/index/{namespace}/{name}/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/plugin/ansible/content/{distro_base_path}/collections/index/{namespace}/{name}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/plugin/ansible/content/{distro_base_path}/collections/index/{namespace}/{name}/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/v3/plugin/ansible/content/{distro_base_path}/collections/index/{namespace}/{name}/ ViewSet for Collections.","title":"api_automation_hub_v3_plugin_ansible_content_collections_index_read"},{"location":"automation-hub/#api_automation_hub_v3_plugin_ansible_content_collections_index_update","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Content-Type\": []string{\"application/json\"}, \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"PATCH\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/plugin/ansible/content/{distro_base_path}/collections/index/{namespace}/{name}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const inputBody = '{}'; const headers = { 'Content-Type':'application/json', 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/plugin/ansible/content/{distro_base_path}/collections/index/{namespace}/{name}/', { method: 'PATCH', body: inputBody, headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Content-Type': 'application/json', 'Accept': 'application/json' } r = requests.patch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/plugin/ansible/content/{distro_base_path}/collections/index/{namespace}/{name}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Content-Type' => 'application/json', 'Accept' => 'application/json' } result = RestClient.patch 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/plugin/ansible/content/{distro_base_path}/collections/index/{namespace}/{name}/', params: { }, headers: headers p JSON.parse(result) PATCH /api/automation-hub/v3/plugin/ansible/content/{distro_base_path}/collections/index/{namespace}/{name}/ Trigger an asynchronous update task Body parameter {} {}","title":"api_automation_hub_v3_plugin_ansible_content_collections_index_update"},{"location":"automation-hub/#api_automation_hub_v3_plugin_ansible_content_collections_index_delete","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"DELETE\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/plugin/ansible/content/{distro_base_path}/collections/index/{namespace}/{name}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/plugin/ansible/content/{distro_base_path}/collections/index/{namespace}/{name}/', { method: 'DELETE', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.delete('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/plugin/ansible/content/{distro_base_path}/collections/index/{namespace}/{name}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.delete 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/plugin/ansible/content/{distro_base_path}/collections/index/{namespace}/{name}/', params: { }, headers: headers p JSON.parse(result) DELETE /api/automation-hub/v3/plugin/ansible/content/{distro_base_path}/collections/index/{namespace}/{name}/ Trigger an asynchronous delete task","title":"api_automation_hub_v3_plugin_ansible_content_collections_index_delete"},{"location":"automation-hub/#api_automation_hub_v3_plugin_ansible_content_collections_index_versions_list","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/plugin/ansible/content/{distro_base_path}/collections/index/{namespace}/{name}/versions/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/plugin/ansible/content/{distro_base_path}/collections/index/{namespace}/{name}/versions/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/plugin/ansible/content/{distro_base_path}/collections/index/{namespace}/{name}/versions/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/plugin/ansible/content/{distro_base_path}/collections/index/{namespace}/{name}/versions/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/v3/plugin/ansible/content/{distro_base_path}/collections/index/{namespace}/{name}/versions/ Returns paginated CollectionVersions list.","title":"api_automation_hub_v3_plugin_ansible_content_collections_index_versions_list"},{"location":"automation-hub/#enumerated-values_70","text":"Parameter Value ordering -_artifacts ordering -authors ordering -collection ordering -content_ptr ordering -contentartifact ordering -contents ordering -dependencies ordering -description ordering -docs_blob ordering -documentation ordering -download_logs ordering -files ordering -group_roles ordering -homepage ordering -is_highest ordering -issues ordering -license ordering -manifest ordering -name ordering -namespace ordering -pk ordering -pulp_created ordering -pulp_id ordering -pulp_labels ordering -pulp_last_updated ordering -pulp_type ordering -repositories ordering -repository ordering -requires_ansible ordering -search_vector ordering -signatures ordering -tags ordering -timestamp_of_interest ordering -upstream_id ordering -user_roles ordering -version ordering -version_memberships ordering _artifacts ordering authors ordering collection ordering content_ptr ordering contentartifact ordering contents ordering dependencies ordering description ordering docs_blob ordering documentation ordering download_logs ordering files ordering group_roles ordering homepage ordering is_highest ordering issues ordering license ordering manifest ordering name ordering namespace ordering pk ordering pulp_created ordering pulp_id ordering pulp_labels ordering pulp_last_updated ordering pulp_type ordering repositories ordering repository ordering requires_ansible ordering search_vector ordering signatures ordering tags ordering timestamp_of_interest ordering upstream_id ordering user_roles ordering version ordering version_memberships Example responses 202 Response { \"meta\": { \"count\": 123 }, \"links\": { \"first\": \"string\", \"previous\": \"string\", \"next\": \"string\", \"last\": \"string\" }, \"data\": [ { \"version\": \"string\", \"href\": \"string\", \"created_at\": \"2019-08-24T14:15:22Z\", \"updated_at\": \"2019-08-24T14:15:22Z\", \"requires_ansible\": \"string\" } ] }","title":"Enumerated Values"},{"location":"automation-hub/#api_automation_hub_v3_plugin_ansible_content_collections_index_versions_read","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/plugin/ansible/content/{distro_base_path}/collections/index/{namespace}/{name}/versions/{version}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/plugin/ansible/content/{distro_base_path}/collections/index/{namespace}/{name}/versions/{version}/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/plugin/ansible/content/{distro_base_path}/collections/index/{namespace}/{name}/versions/{version}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/plugin/ansible/content/{distro_base_path}/collections/index/{namespace}/{name}/versions/{version}/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/v3/plugin/ansible/content/{distro_base_path}/collections/index/{namespace}/{name}/versions/{version}/ Returns a CollectionVersion object.","title":"api_automation_hub_v3_plugin_ansible_content_collections_index_versions_read"},{"location":"automation-hub/#api_automation_hub_v3_plugin_ansible_content_collections_index_versions_delete","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"DELETE\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/plugin/ansible/content/{distro_base_path}/collections/index/{namespace}/{name}/versions/{version}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/plugin/ansible/content/{distro_base_path}/collections/index/{namespace}/{name}/versions/{version}/', { method: 'DELETE', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.delete('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/plugin/ansible/content/{distro_base_path}/collections/index/{namespace}/{name}/versions/{version}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.delete 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/plugin/ansible/content/{distro_base_path}/collections/index/{namespace}/{name}/versions/{version}/', params: { }, headers: headers p JSON.parse(result) DELETE /api/automation-hub/v3/plugin/ansible/content/{distro_base_path}/collections/index/{namespace}/{name}/versions/{version}/ Trigger an asynchronous delete task","title":"api_automation_hub_v3_plugin_ansible_content_collections_index_versions_delete"},{"location":"automation-hub/#api_automation_hub_v3_plugin_ansible_content_collections_index_versions_docs_blob_read","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/plugin/ansible/content/{distro_base_path}/collections/index/{namespace}/{name}/versions/{version}/docs-blob/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/plugin/ansible/content/{distro_base_path}/collections/index/{namespace}/{name}/versions/{version}/docs-blob/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/plugin/ansible/content/{distro_base_path}/collections/index/{namespace}/{name}/versions/{version}/docs-blob/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/plugin/ansible/content/{distro_base_path}/collections/index/{namespace}/{name}/versions/{version}/docs-blob/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/v3/plugin/ansible/content/{distro_base_path}/collections/index/{namespace}/{name}/versions/{version}/docs-blob/ Returns a CollectionVersion object.","title":"api_automation_hub_v3_plugin_ansible_content_collections_index_versions_docs_blob_read"},{"location":"automation-hub/#api_automation_hub_v3_plugin_ansible_imports_collections_read","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/plugin/ansible/imports/collections/{task}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/plugin/ansible/imports/collections/{task}/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/plugin/ansible/imports/collections/{task}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/api/automation-hub/v3/plugin/ansible/imports/collections/{task}/', params: { }, headers: headers p JSON.parse(result) GET /api/automation-hub/v3/plugin/ansible/imports/collections/{task}/ Inspect a collection import Returns a CollectionImport object.","title":"api_automation_hub_v3_plugin_ansible_imports_collections_read"},{"location":"automation-hub/#pulp_api_get","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp/api/{api_path}\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp/api/{api_path}', { method: 'GET' }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp/api/{api_path}') print(r.json()) require 'rest-client' require 'json' result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp/api/{api_path}', params: { } p JSON.parse(result) GET /pulp/api/{api_path}","title":"pulp_api_get"},{"location":"automation-hub/#copy_content","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Content-Type\": []string{\"application/json\"}, \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"POST\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp/api/v3/ansible/copy/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const inputBody = '{ \"config\": {} }'; const headers = { 'Content-Type':'application/json', 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp/api/v3/ansible/copy/', { method: 'POST', body: inputBody, headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Content-Type': 'application/json', 'Accept': 'application/json' } r = requests.post('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp/api/v3/ansible/copy/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Content-Type' => 'application/json', 'Accept' => 'application/json' } result = RestClient.post 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp/api/v3/ansible/copy/', params: { }, headers: headers p JSON.parse(result) POST /pulp/api/v3/ansible/copy/ Copy content Trigger an asynchronous task to copy ansible content from one repository into another, creating a new repository version. Body parameter { \"config\": {} } config: {}","title":"copy_content"},{"location":"automation-hub/#pulp_ansible_galaxy_api_get","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/{path}/api/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/{path}/api/', { method: 'GET' }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/{path}/api/') print(r.json()) require 'rest-client' require 'json' result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/{path}/api/', params: { } p JSON.parse(result) GET /pulp_ansible/galaxy/{path}/api/ Return a response to the \"GET\" action.","title":"pulp_ansible_galaxy_api_get"},{"location":"automation-hub/#pulp_ansible_galaxy_api_v1_roles_get","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/{path}/api/v1/roles/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/{path}/api/v1/roles/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/{path}/api/v1/roles/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/{path}/api/v1/roles/', params: { }, headers: headers p JSON.parse(result) GET /pulp_ansible/galaxy/{path}/api/v1/roles/ APIView for Roles.","title":"pulp_ansible_galaxy_api_v1_roles_get"},{"location":"automation-hub/#pulp_ansible_galaxy_api_v1_roles_versions_get","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/{path}/api/v1/roles/{role_pk}/versions/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/{path}/api/v1/roles/{role_pk}/versions/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/{path}/api/v1/roles/{role_pk}/versions/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/{path}/api/v1/roles/{role_pk}/versions/', params: { }, headers: headers p JSON.parse(result) GET /pulp_ansible/galaxy/{path}/api/v1/roles/{role_pk}/versions/ APIView for Role Versions.","title":"pulp_ansible_galaxy_api_v1_roles_versions_get"},{"location":"automation-hub/#pulp_ansible_galaxy_api_v2_collection_imports_read","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/{path}/api/v2/collection-imports/{task}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/{path}/api/v2/collection-imports/{task}/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/{path}/api/v2/collection-imports/{task}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/{path}/api/v2/collection-imports/{task}/', params: { }, headers: headers p JSON.parse(result) GET /pulp_ansible/galaxy/{path}/api/v2/collection-imports/{task}/ Inspect a collection import Returns a CollectionImport object.","title":"pulp_ansible_galaxy_api_v2_collection_imports_read"},{"location":"automation-hub/#pulp_ansible_galaxypath_api_v2_collections_pulp_ansible_galaxy_api_v2_collections_get","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/{path}/api/v2/collections/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/{path}/api/v2/collections/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/{path}/api/v2/collections/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/{path}/api/v2/collections/', params: { }, headers: headers p JSON.parse(result) GET /pulp_ansible/galaxy/{path}/api/v2/collections/ View for Collection models.","title":"pulp_ansible_galaxy{path}_api_v2_collections_pulp_ansible_galaxy_api_v2_collections_get"},{"location":"automation-hub/#pulp_ansible_galaxy_api_v2_collections_post","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Content-Type\": []string{\"application/json\"}, \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"POST\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/{path}/api/v2/collections/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const inputBody = '{ \"id\": \"string\", \"name\": \"string\", \"created\": \"2019-08-24T14:15:22Z\", \"modified\": \"2019-08-24T14:15:22Z\" }'; const headers = { 'Content-Type':'application/json', 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/{path}/api/v2/collections/', { method: 'POST', body: inputBody, headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Content-Type': 'application/json', 'Accept': 'application/json' } r = requests.post('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/{path}/api/v2/collections/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Content-Type' => 'application/json', 'Accept' => 'application/json' } result = RestClient.post 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/{path}/api/v2/collections/', params: { }, headers: headers p JSON.parse(result) POST /pulp_ansible/galaxy/{path}/api/v2/collections/ Queues a task that creates a new Collection from an uploaded artifact. Body parameter { \"id\": \"string\", \"name\": \"string\", \"created\": \"2019-08-24T14:15:22Z\", \"modified\": \"2019-08-24T14:15:22Z\" } id: string name: string created: 2019-08-24T14:15:22Z modified: 2019-08-24T14:15:22Z","title":"pulp_ansible_galaxy_api_v2_collections_post"},{"location":"automation-hub/#pulp_ansible_galaxypathapi_v2_collectionsnamespace_name_pulp_ansible_galaxy_api_v2_collections_get","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/{path}/api/v2/collections/{namespace}/{name}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/{path}/api/v2/collections/{namespace}/{name}/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/{path}/api/v2/collections/{namespace}/{name}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/{path}/api/v2/collections/{namespace}/{name}/', params: { }, headers: headers p JSON.parse(result) GET /pulp_ansible/galaxy/{path}/api/v2/collections/{namespace}/{name}/ Get the detail view of a Collection.","title":"pulp_ansible_galaxy{path}api_v2_collections{namespace}_{name}_pulp_ansible_galaxy_api_v2_collections_get"},{"location":"automation-hub/#pulp_ansible_galaxypathapi_v2_collectionsnamespace_name_versions_pulp_ansible_galaxy_api_v2_collections_versions_get","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/{path}/api/v2/collections/{namespace}/{name}/versions/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/{path}/api/v2/collections/{namespace}/{name}/versions/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/{path}/api/v2/collections/{namespace}/{name}/versions/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/{path}/api/v2/collections/{namespace}/{name}/versions/', params: { }, headers: headers p JSON.parse(result) GET /pulp_ansible/galaxy/{path}/api/v2/collections/{namespace}/{name}/versions/ APIView for Collections by namespace/name.","title":"pulp_ansible_galaxy{path}api_v2_collections{namespace}_{name}_versions_pulp_ansible_galaxy_api_v2_collections_versions_get"},{"location":"automation-hub/#pulp_ansible_galaxypathapi_v2_collectionsnamespacename_versionsversion_pulp_ansible_galaxy_api_v2_collections_versions_get","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/{path}/api/v2/collections/{namespace}/{name}/versions/{version}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/{path}/api/v2/collections/{namespace}/{name}/versions/{version}/', { method: 'GET' }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/{path}/api/v2/collections/{namespace}/{name}/versions/{version}/') print(r.json()) require 'rest-client' require 'json' result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/{path}/api/v2/collections/{namespace}/{name}/versions/{version}/', params: { } p JSON.parse(result) GET /pulp_ansible/galaxy/{path}/api/v2/collections/{namespace}/{name}/versions/{version}/ Return a response to the \"GET\" action.","title":"pulp_ansible_galaxy{path}api_v2_collections{namespace}{name}_versions{version}_pulp_ansible_galaxy_api_v2_collections_versions_get"},{"location":"automation-hub/#pulp_ansible_galaxy_api_v3_read","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/{path}/api/v3/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/{path}/api/v3/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/{path}/api/v3/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/{path}/api/v3/', params: { }, headers: headers p JSON.parse(result) GET /pulp_ansible/galaxy/{path}/api/v3/ Legacy v3 endpoint.","title":"pulp_ansible_galaxy_api_v3_read"},{"location":"automation-hub/#pulp_ansible_galaxy_api_v3_artifacts_collections_get","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/{path}/api/v3/artifacts/collections/{path}/{filename}\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/{path}/api/v3/artifacts/collections/{path}/{filename}', { method: 'GET' }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/{path}/api/v3/artifacts/collections/{path}/{filename}') print(r.json()) require 'rest-client' require 'json' result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/{path}/api/v3/artifacts/collections/{path}/{filename}', params: { } p JSON.parse(result) GET /pulp_ansible/galaxy/{path}/api/v3/artifacts/collections/{path}/{filename} Download collection.","title":"pulp_ansible_galaxy_api_v3_artifacts_collections_get"},{"location":"automation-hub/#pulp_ansible_galaxy_api_v3_collection_versions_all_list","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/{path}/api/v3/collection_versions/all/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/{path}/api/v3/collection_versions/all/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/{path}/api/v3/collection_versions/all/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/{path}/api/v3/collection_versions/all/', params: { }, headers: headers p JSON.parse(result) GET /pulp_ansible/galaxy/{path}/api/v3/collection_versions/all/ Legacy v3 endpoint.","title":"pulp_ansible_galaxy_api_v3_collection_versions_all_list"},{"location":"automation-hub/#pulp_ansible_galaxy_api_v3_collections_list","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/{path}/api/v3/collections/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/{path}/api/v3/collections/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/{path}/api/v3/collections/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/{path}/api/v3/collections/', params: { }, headers: headers p JSON.parse(result) GET /pulp_ansible/galaxy/{path}/api/v3/collections/ Legacy v3 endpoint.","title":"pulp_ansible_galaxy_api_v3_collections_list"},{"location":"automation-hub/#enumerated-values_71","text":"Parameter Value ordering -group_roles ordering -name ordering -namespace ordering -pk ordering -pulp_created ordering -pulp_id ordering -pulp_labels ordering -pulp_last_updated ordering -synclist ordering -user_roles ordering -versions ordering group_roles ordering name ordering namespace ordering pk ordering pulp_created ordering pulp_id ordering pulp_labels ordering pulp_last_updated ordering synclist ordering user_roles ordering versions Example responses 202 Response { \"meta\": { \"count\": 123 }, \"links\": { \"first\": \"string\", \"previous\": \"string\", \"next\": \"string\", \"last\": \"string\" }, \"data\": [ { \"href\": \"string\", \"namespace\": \"string\", \"name\": \"string\", \"deprecated\": true, \"versions_url\": \"string\", \"highest_version\": {}, \"created_at\": \"2019-08-24T14:15:22Z\", \"updated_at\": \"2019-08-24T14:15:22Z\" } ] }","title":"Enumerated Values"},{"location":"automation-hub/#pulp_ansible_galaxy_api_v3_collections_read","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/{path}/api/v3/collections/{namespace}/{name}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/{path}/api/v3/collections/{namespace}/{name}/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/{path}/api/v3/collections/{namespace}/{name}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/{path}/api/v3/collections/{namespace}/{name}/', params: { }, headers: headers p JSON.parse(result) GET /pulp_ansible/galaxy/{path}/api/v3/collections/{namespace}/{name}/ Legacy v3 endpoint.","title":"pulp_ansible_galaxy_api_v3_collections_read"},{"location":"automation-hub/#pulp_ansible_galaxy_api_v3_collections_update","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Content-Type\": []string{\"application/json\"}, \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"PATCH\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/{path}/api/v3/collections/{namespace}/{name}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const inputBody = '{}'; const headers = { 'Content-Type':'application/json', 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/{path}/api/v3/collections/{namespace}/{name}/', { method: 'PATCH', body: inputBody, headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Content-Type': 'application/json', 'Accept': 'application/json' } r = requests.patch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/{path}/api/v3/collections/{namespace}/{name}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Content-Type' => 'application/json', 'Accept' => 'application/json' } result = RestClient.patch 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/{path}/api/v3/collections/{namespace}/{name}/', params: { }, headers: headers p JSON.parse(result) PATCH /pulp_ansible/galaxy/{path}/api/v3/collections/{namespace}/{name}/ Legacy v3 endpoint. Body parameter {} {}","title":"pulp_ansible_galaxy_api_v3_collections_update"},{"location":"automation-hub/#pulp_ansible_galaxy_api_v3_collections_delete","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"DELETE\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/{path}/api/v3/collections/{namespace}/{name}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/{path}/api/v3/collections/{namespace}/{name}/', { method: 'DELETE', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.delete('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/{path}/api/v3/collections/{namespace}/{name}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.delete 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/{path}/api/v3/collections/{namespace}/{name}/', params: { }, headers: headers p JSON.parse(result) DELETE /pulp_ansible/galaxy/{path}/api/v3/collections/{namespace}/{name}/ Legacy v3 endpoint.","title":"pulp_ansible_galaxy_api_v3_collections_delete"},{"location":"automation-hub/#pulp_ansible_galaxy_api_v3_collections_versions_list","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/{path}/api/v3/collections/{namespace}/{name}/versions/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/{path}/api/v3/collections/{namespace}/{name}/versions/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/{path}/api/v3/collections/{namespace}/{name}/versions/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/{path}/api/v3/collections/{namespace}/{name}/versions/', params: { }, headers: headers p JSON.parse(result) GET /pulp_ansible/galaxy/{path}/api/v3/collections/{namespace}/{name}/versions/ Legacy v3 endpoint.","title":"pulp_ansible_galaxy_api_v3_collections_versions_list"},{"location":"automation-hub/#enumerated-values_72","text":"Parameter Value ordering -_artifacts ordering -authors ordering -collection ordering -content_ptr ordering -contentartifact ordering -contents ordering -dependencies ordering -description ordering -docs_blob ordering -documentation ordering -download_logs ordering -files ordering -group_roles ordering -homepage ordering -is_highest ordering -issues ordering -license ordering -manifest ordering -name ordering -namespace ordering -pk ordering -pulp_created ordering -pulp_id ordering -pulp_labels ordering -pulp_last_updated ordering -pulp_type ordering -repositories ordering -repository ordering -requires_ansible ordering -search_vector ordering -signatures ordering -tags ordering -timestamp_of_interest ordering -upstream_id ordering -user_roles ordering -version ordering -version_memberships ordering _artifacts ordering authors ordering collection ordering content_ptr ordering contentartifact ordering contents ordering dependencies ordering description ordering docs_blob ordering documentation ordering download_logs ordering files ordering group_roles ordering homepage ordering is_highest ordering issues ordering license ordering manifest ordering name ordering namespace ordering pk ordering pulp_created ordering pulp_id ordering pulp_labels ordering pulp_last_updated ordering pulp_type ordering repositories ordering repository ordering requires_ansible ordering search_vector ordering signatures ordering tags ordering timestamp_of_interest ordering upstream_id ordering user_roles ordering version ordering version_memberships Example responses 202 Response { \"meta\": { \"count\": 123 }, \"links\": { \"first\": \"string\", \"previous\": \"string\", \"next\": \"string\", \"last\": \"string\" }, \"data\": [ { \"version\": \"string\", \"href\": \"string\", \"created_at\": \"2019-08-24T14:15:22Z\", \"updated_at\": \"2019-08-24T14:15:22Z\", \"requires_ansible\": \"string\" } ] }","title":"Enumerated Values"},{"location":"automation-hub/#pulp_ansible_galaxy_api_v3_collections_versions_read","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/{path}/api/v3/collections/{namespace}/{name}/versions/{version}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/{path}/api/v3/collections/{namespace}/{name}/versions/{version}/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/{path}/api/v3/collections/{namespace}/{name}/versions/{version}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/{path}/api/v3/collections/{namespace}/{name}/versions/{version}/', params: { }, headers: headers p JSON.parse(result) GET /pulp_ansible/galaxy/{path}/api/v3/collections/{namespace}/{name}/versions/{version}/ Legacy v3 endpoint.","title":"pulp_ansible_galaxy_api_v3_collections_versions_read"},{"location":"automation-hub/#pulp_ansible_galaxy_api_v3_collections_versions_delete","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"DELETE\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/{path}/api/v3/collections/{namespace}/{name}/versions/{version}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/{path}/api/v3/collections/{namespace}/{name}/versions/{version}/', { method: 'DELETE', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.delete('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/{path}/api/v3/collections/{namespace}/{name}/versions/{version}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.delete 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/{path}/api/v3/collections/{namespace}/{name}/versions/{version}/', params: { }, headers: headers p JSON.parse(result) DELETE /pulp_ansible/galaxy/{path}/api/v3/collections/{namespace}/{name}/versions/{version}/ Legacy v3 endpoint.","title":"pulp_ansible_galaxy_api_v3_collections_versions_delete"},{"location":"automation-hub/#pulp_ansible_galaxy_api_v3_collections_versions_docs_blob_read","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/{path}/api/v3/collections/{namespace}/{name}/versions/{version}/docs-blob/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/{path}/api/v3/collections/{namespace}/{name}/versions/{version}/docs-blob/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/{path}/api/v3/collections/{namespace}/{name}/versions/{version}/docs-blob/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/{path}/api/v3/collections/{namespace}/{name}/versions/{version}/docs-blob/', params: { }, headers: headers p JSON.parse(result) GET /pulp_ansible/galaxy/{path}/api/v3/collections/{namespace}/{name}/versions/{version}/docs-blob/ Legacy v3 endpoint.","title":"pulp_ansible_galaxy_api_v3_collections_versions_docs_blob_read"},{"location":"automation-hub/#pulp_ansible_galaxy_api_v3_collections_all_list","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/{path}/api/v3/collections/all/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/{path}/api/v3/collections/all/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/{path}/api/v3/collections/all/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/{path}/api/v3/collections/all/', params: { }, headers: headers p JSON.parse(result) GET /pulp_ansible/galaxy/{path}/api/v3/collections/all/ Legacy v3 endpoint.","title":"pulp_ansible_galaxy_api_v3_collections_all_list"},{"location":"automation-hub/#enumerated-values_73","text":"Parameter Value ordering -group_roles ordering -name ordering -namespace ordering -pk ordering -pulp_created ordering -pulp_id ordering -pulp_labels ordering -pulp_last_updated ordering -synclist ordering -user_roles ordering -versions ordering group_roles ordering name ordering namespace ordering pk ordering pulp_created ordering pulp_id ordering pulp_labels ordering pulp_last_updated ordering synclist ordering user_roles ordering versions Example responses 202 Response [ { \"href\": \"string\", \"namespace\": \"string\", \"name\": \"string\", \"deprecated\": true, \"versions_url\": \"string\", \"highest_version\": {}, \"created_at\": \"2019-08-24T14:15:22Z\", \"updated_at\": \"2019-08-24T14:15:22Z\" } ]","title":"Enumerated Values"},{"location":"automation-hub/#pulp_ansible_galaxy_api_v3_imports_collections_read","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/{path}/api/v3/imports/collections/{task}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/{path}/api/v3/imports/collections/{task}/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/{path}/api/v3/imports/collections/{task}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/{path}/api/v3/imports/collections/{task}/', params: { }, headers: headers p JSON.parse(result) GET /pulp_ansible/galaxy/{path}/api/v3/imports/collections/{task}/ Inspect a collection import Legacy v3 endpoint.","title":"pulp_ansible_galaxy_api_v3_imports_collections_read"},{"location":"automation-hub/#pulp_ansible_galaxy_api_v3_plugin_ansible_client_configuration_get","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/{path}/api/v3/plugin/ansible/client-configuration/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/{path}/api/v3/plugin/ansible/client-configuration/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/{path}/api/v3/plugin/ansible/client-configuration/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/{path}/api/v3/plugin/ansible/client-configuration/', params: { }, headers: headers p JSON.parse(result) GET /pulp_ansible/galaxy/{path}/api/v3/plugin/ansible/client-configuration/ Get the client configs.","title":"pulp_ansible_galaxy_api_v3_plugin_ansible_client_configuration_get"},{"location":"automation-hub/#pulp_ansible_galaxy_api_v3_plugin_ansible_content_collections_read","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/{path}/api/v3/plugin/ansible/content/{distro_base_path}/collections/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/{path}/api/v3/plugin/ansible/content/{distro_base_path}/collections/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/{path}/api/v3/plugin/ansible/content/{distro_base_path}/collections/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/{path}/api/v3/plugin/ansible/content/{distro_base_path}/collections/', params: { }, headers: headers p JSON.parse(result) GET /pulp_ansible/galaxy/{path}/api/v3/plugin/ansible/content/{distro_base_path}/collections/ ViewSet for Repository Metadata.","title":"pulp_ansible_galaxy_api_v3_plugin_ansible_content_collections_read"},{"location":"automation-hub/#pulp_ansible_galaxy_api_v3_plugin_ansible_content_collections_all_collections_list","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/{path}/api/v3/plugin/ansible/content/{distro_base_path}/collections/all-collections/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/{path}/api/v3/plugin/ansible/content/{distro_base_path}/collections/all-collections/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/{path}/api/v3/plugin/ansible/content/{distro_base_path}/collections/all-collections/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/{path}/api/v3/plugin/ansible/content/{distro_base_path}/collections/all-collections/', params: { }, headers: headers p JSON.parse(result) GET /pulp_ansible/galaxy/{path}/api/v3/plugin/ansible/content/{distro_base_path}/collections/all-collections/ Unpaginated ViewSet for Collections.","title":"pulp_ansible_galaxy_api_v3_plugin_ansible_content_collections_all_collections_list"},{"location":"automation-hub/#enumerated-values_74","text":"Parameter Value ordering -group_roles ordering -name ordering -namespace ordering -pk ordering -pulp_created ordering -pulp_id ordering -pulp_labels ordering -pulp_last_updated ordering -synclist ordering -user_roles ordering -versions ordering group_roles ordering name ordering namespace ordering pk ordering pulp_created ordering pulp_id ordering pulp_labels ordering pulp_last_updated ordering synclist ordering user_roles ordering versions Example responses 200 Response [ { \"href\": \"string\", \"namespace\": \"string\", \"name\": \"string\", \"deprecated\": true, \"versions_url\": \"string\", \"highest_version\": {}, \"created_at\": \"2019-08-24T14:15:22Z\", \"updated_at\": \"2019-08-24T14:15:22Z\" } ]","title":"Enumerated Values"},{"location":"automation-hub/#pulp_ansible_galaxy_api_v3_plugin_ansible_content_collections_all_versions_list","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/{path}/api/v3/plugin/ansible/content/{distro_base_path}/collections/all-versions/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/{path}/api/v3/plugin/ansible/content/{distro_base_path}/collections/all-versions/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/{path}/api/v3/plugin/ansible/content/{distro_base_path}/collections/all-versions/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/{path}/api/v3/plugin/ansible/content/{distro_base_path}/collections/all-versions/', params: { }, headers: headers p JSON.parse(result) GET /pulp_ansible/galaxy/{path}/api/v3/plugin/ansible/content/{distro_base_path}/collections/all-versions/ Returns paginated CollectionVersions list.","title":"pulp_ansible_galaxy_api_v3_plugin_ansible_content_collections_all_versions_list"},{"location":"automation-hub/#pulp_ansible_galaxy_api_v3_plugin_ansible_content_collections_artifacts_download","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/{path}/api/v3/plugin/ansible/content/{distro_base_path}/collections/artifacts/{filename}\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/{path}/api/v3/plugin/ansible/content/{distro_base_path}/collections/artifacts/{filename}', { method: 'GET' }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/{path}/api/v3/plugin/ansible/content/{distro_base_path}/collections/artifacts/{filename}') print(r.json()) require 'rest-client' require 'json' result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/{path}/api/v3/plugin/ansible/content/{distro_base_path}/collections/artifacts/{filename}', params: { } p JSON.parse(result) GET /pulp_ansible/galaxy/{path}/api/v3/plugin/ansible/content/{distro_base_path}/collections/artifacts/{filename} Collection download endpoint.","title":"pulp_ansible_galaxy_api_v3_plugin_ansible_content_collections_artifacts_download"},{"location":"automation-hub/#pulp_ansible_galaxy_api_v3_plugin_ansible_content_collections_index_list","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/{path}/api/v3/plugin/ansible/content/{distro_base_path}/collections/index/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/{path}/api/v3/plugin/ansible/content/{distro_base_path}/collections/index/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/{path}/api/v3/plugin/ansible/content/{distro_base_path}/collections/index/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/{path}/api/v3/plugin/ansible/content/{distro_base_path}/collections/index/', params: { }, headers: headers p JSON.parse(result) GET /pulp_ansible/galaxy/{path}/api/v3/plugin/ansible/content/{distro_base_path}/collections/index/ ViewSet for Collections.","title":"pulp_ansible_galaxy_api_v3_plugin_ansible_content_collections_index_list"},{"location":"automation-hub/#enumerated-values_75","text":"Parameter Value ordering -group_roles ordering -name ordering -namespace ordering -pk ordering -pulp_created ordering -pulp_id ordering -pulp_labels ordering -pulp_last_updated ordering -synclist ordering -user_roles ordering -versions ordering group_roles ordering name ordering namespace ordering pk ordering pulp_created ordering pulp_id ordering pulp_labels ordering pulp_last_updated ordering synclist ordering user_roles ordering versions Example responses 200 Response { \"meta\": { \"count\": 123 }, \"links\": { \"first\": \"string\", \"previous\": \"string\", \"next\": \"string\", \"last\": \"string\" }, \"data\": [ { \"href\": \"string\", \"namespace\": \"string\", \"name\": \"string\", \"deprecated\": true, \"versions_url\": \"string\", \"highest_version\": {}, \"created_at\": \"2019-08-24T14:15:22Z\", \"updated_at\": \"2019-08-24T14:15:22Z\" } ] }","title":"Enumerated Values"},{"location":"automation-hub/#pulp_ansible_galaxy_api_v3_plugin_ansible_content_collections_index_read","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/{path}/api/v3/plugin/ansible/content/{distro_base_path}/collections/index/{namespace}/{name}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/{path}/api/v3/plugin/ansible/content/{distro_base_path}/collections/index/{namespace}/{name}/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/{path}/api/v3/plugin/ansible/content/{distro_base_path}/collections/index/{namespace}/{name}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/{path}/api/v3/plugin/ansible/content/{distro_base_path}/collections/index/{namespace}/{name}/', params: { }, headers: headers p JSON.parse(result) GET /pulp_ansible/galaxy/{path}/api/v3/plugin/ansible/content/{distro_base_path}/collections/index/{namespace}/{name}/ ViewSet for Collections.","title":"pulp_ansible_galaxy_api_v3_plugin_ansible_content_collections_index_read"},{"location":"automation-hub/#pulp_ansible_galaxy_api_v3_plugin_ansible_content_collections_index_update","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Content-Type\": []string{\"application/json\"}, \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"PATCH\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/{path}/api/v3/plugin/ansible/content/{distro_base_path}/collections/index/{namespace}/{name}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const inputBody = '{}'; const headers = { 'Content-Type':'application/json', 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/{path}/api/v3/plugin/ansible/content/{distro_base_path}/collections/index/{namespace}/{name}/', { method: 'PATCH', body: inputBody, headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Content-Type': 'application/json', 'Accept': 'application/json' } r = requests.patch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/{path}/api/v3/plugin/ansible/content/{distro_base_path}/collections/index/{namespace}/{name}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Content-Type' => 'application/json', 'Accept' => 'application/json' } result = RestClient.patch 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/{path}/api/v3/plugin/ansible/content/{distro_base_path}/collections/index/{namespace}/{name}/', params: { }, headers: headers p JSON.parse(result) PATCH /pulp_ansible/galaxy/{path}/api/v3/plugin/ansible/content/{distro_base_path}/collections/index/{namespace}/{name}/ Trigger an asynchronous update task Body parameter {} {}","title":"pulp_ansible_galaxy_api_v3_plugin_ansible_content_collections_index_update"},{"location":"automation-hub/#pulp_ansible_galaxy_api_v3_plugin_ansible_content_collections_index_delete","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"DELETE\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/{path}/api/v3/plugin/ansible/content/{distro_base_path}/collections/index/{namespace}/{name}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/{path}/api/v3/plugin/ansible/content/{distro_base_path}/collections/index/{namespace}/{name}/', { method: 'DELETE', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.delete('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/{path}/api/v3/plugin/ansible/content/{distro_base_path}/collections/index/{namespace}/{name}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.delete 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/{path}/api/v3/plugin/ansible/content/{distro_base_path}/collections/index/{namespace}/{name}/', params: { }, headers: headers p JSON.parse(result) DELETE /pulp_ansible/galaxy/{path}/api/v3/plugin/ansible/content/{distro_base_path}/collections/index/{namespace}/{name}/ Trigger an asynchronous delete task","title":"pulp_ansible_galaxy_api_v3_plugin_ansible_content_collections_index_delete"},{"location":"automation-hub/#pulp_ansible_galaxy_api_v3_plugin_ansible_content_collections_index_versions_list","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/{path}/api/v3/plugin/ansible/content/{distro_base_path}/collections/index/{namespace}/{name}/versions/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/{path}/api/v3/plugin/ansible/content/{distro_base_path}/collections/index/{namespace}/{name}/versions/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/{path}/api/v3/plugin/ansible/content/{distro_base_path}/collections/index/{namespace}/{name}/versions/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/{path}/api/v3/plugin/ansible/content/{distro_base_path}/collections/index/{namespace}/{name}/versions/', params: { }, headers: headers p JSON.parse(result) GET /pulp_ansible/galaxy/{path}/api/v3/plugin/ansible/content/{distro_base_path}/collections/index/{namespace}/{name}/versions/ Returns paginated CollectionVersions list.","title":"pulp_ansible_galaxy_api_v3_plugin_ansible_content_collections_index_versions_list"},{"location":"automation-hub/#enumerated-values_76","text":"Parameter Value ordering -_artifacts ordering -authors ordering -collection ordering -content_ptr ordering -contentartifact ordering -contents ordering -dependencies ordering -description ordering -docs_blob ordering -documentation ordering -download_logs ordering -files ordering -group_roles ordering -homepage ordering -is_highest ordering -issues ordering -license ordering -manifest ordering -name ordering -namespace ordering -pk ordering -pulp_created ordering -pulp_id ordering -pulp_labels ordering -pulp_last_updated ordering -pulp_type ordering -repositories ordering -repository ordering -requires_ansible ordering -search_vector ordering -signatures ordering -tags ordering -timestamp_of_interest ordering -upstream_id ordering -user_roles ordering -version ordering -version_memberships ordering _artifacts ordering authors ordering collection ordering content_ptr ordering contentartifact ordering contents ordering dependencies ordering description ordering docs_blob ordering documentation ordering download_logs ordering files ordering group_roles ordering homepage ordering is_highest ordering issues ordering license ordering manifest ordering name ordering namespace ordering pk ordering pulp_created ordering pulp_id ordering pulp_labels ordering pulp_last_updated ordering pulp_type ordering repositories ordering repository ordering requires_ansible ordering search_vector ordering signatures ordering tags ordering timestamp_of_interest ordering upstream_id ordering user_roles ordering version ordering version_memberships Example responses 202 Response { \"meta\": { \"count\": 123 }, \"links\": { \"first\": \"string\", \"previous\": \"string\", \"next\": \"string\", \"last\": \"string\" }, \"data\": [ { \"version\": \"string\", \"href\": \"string\", \"created_at\": \"2019-08-24T14:15:22Z\", \"updated_at\": \"2019-08-24T14:15:22Z\", \"requires_ansible\": \"string\" } ] }","title":"Enumerated Values"},{"location":"automation-hub/#pulp_ansible_galaxy_api_v3_plugin_ansible_content_collections_index_versions_read","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/{path}/api/v3/plugin/ansible/content/{distro_base_path}/collections/index/{namespace}/{name}/versions/{version}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/{path}/api/v3/plugin/ansible/content/{distro_base_path}/collections/index/{namespace}/{name}/versions/{version}/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/{path}/api/v3/plugin/ansible/content/{distro_base_path}/collections/index/{namespace}/{name}/versions/{version}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/{path}/api/v3/plugin/ansible/content/{distro_base_path}/collections/index/{namespace}/{name}/versions/{version}/', params: { }, headers: headers p JSON.parse(result) GET /pulp_ansible/galaxy/{path}/api/v3/plugin/ansible/content/{distro_base_path}/collections/index/{namespace}/{name}/versions/{version}/ Returns a CollectionVersion object.","title":"pulp_ansible_galaxy_api_v3_plugin_ansible_content_collections_index_versions_read"},{"location":"automation-hub/#pulp_ansible_galaxy_api_v3_plugin_ansible_content_collections_index_versions_delete","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"DELETE\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/{path}/api/v3/plugin/ansible/content/{distro_base_path}/collections/index/{namespace}/{name}/versions/{version}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/{path}/api/v3/plugin/ansible/content/{distro_base_path}/collections/index/{namespace}/{name}/versions/{version}/', { method: 'DELETE', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.delete('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/{path}/api/v3/plugin/ansible/content/{distro_base_path}/collections/index/{namespace}/{name}/versions/{version}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.delete 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/{path}/api/v3/plugin/ansible/content/{distro_base_path}/collections/index/{namespace}/{name}/versions/{version}/', params: { }, headers: headers p JSON.parse(result) DELETE /pulp_ansible/galaxy/{path}/api/v3/plugin/ansible/content/{distro_base_path}/collections/index/{namespace}/{name}/versions/{version}/ Trigger an asynchronous delete task","title":"pulp_ansible_galaxy_api_v3_plugin_ansible_content_collections_index_versions_delete"},{"location":"automation-hub/#pulp_ansible_galaxy_api_v3_plugin_ansible_content_collections_index_versions_docs_blob_read","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/{path}/api/v3/plugin/ansible/content/{distro_base_path}/collections/index/{namespace}/{name}/versions/{version}/docs-blob/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/{path}/api/v3/plugin/ansible/content/{distro_base_path}/collections/index/{namespace}/{name}/versions/{version}/docs-blob/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/{path}/api/v3/plugin/ansible/content/{distro_base_path}/collections/index/{namespace}/{name}/versions/{version}/docs-blob/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/{path}/api/v3/plugin/ansible/content/{distro_base_path}/collections/index/{namespace}/{name}/versions/{version}/docs-blob/', params: { }, headers: headers p JSON.parse(result) GET /pulp_ansible/galaxy/{path}/api/v3/plugin/ansible/content/{distro_base_path}/collections/index/{namespace}/{name}/versions/{version}/docs-blob/ Returns a CollectionVersion object.","title":"pulp_ansible_galaxy_api_v3_plugin_ansible_content_collections_index_versions_docs_blob_read"},{"location":"automation-hub/#pulp_ansible_galaxy_api_v3_plugin_ansible_imports_collections_read","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/{path}/api/v3/plugin/ansible/imports/collections/{task}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/{path}/api/v3/plugin/ansible/imports/collections/{task}/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/{path}/api/v3/plugin/ansible/imports/collections/{task}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/{path}/api/v3/plugin/ansible/imports/collections/{task}/', params: { }, headers: headers p JSON.parse(result) GET /pulp_ansible/galaxy/{path}/api/v3/plugin/ansible/imports/collections/{task}/ Inspect a collection import Returns a CollectionImport object.","title":"pulp_ansible_galaxy_api_v3_plugin_ansible_imports_collections_read"},{"location":"automation-hub/#pulp_ansible_galaxy_default_api_get","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/default/api/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/default/api/', { method: 'GET' }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/default/api/') print(r.json()) require 'rest-client' require 'json' result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/default/api/', params: { } p JSON.parse(result) GET /pulp_ansible/galaxy/default/api/ Return a response to the \"GET\" action.","title":"pulp_ansible_galaxy_default_api_get"},{"location":"automation-hub/#pulp_ansible_galaxy_default_api_v3_read","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/default/api/v3/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/default/api/v3/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/default/api/v3/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/default/api/v3/', params: { }, headers: headers p JSON.parse(result) GET /pulp_ansible/galaxy/default/api/v3/ Legacy v3 endpoint. Example responses 202 Response { \"published\": \"2019-08-24T14:15:22Z\" }","title":"pulp_ansible_galaxy_default_api_v3_read"},{"location":"automation-hub/#pulp_ansible_galaxy_default_api_v3_artifacts_collections_get","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/default/api/v3/artifacts/collections/{path}/{filename}\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/default/api/v3/artifacts/collections/{path}/{filename}', { method: 'GET' }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/default/api/v3/artifacts/collections/{path}/{filename}') print(r.json()) require 'rest-client' require 'json' result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/default/api/v3/artifacts/collections/{path}/{filename}', params: { } p JSON.parse(result) GET /pulp_ansible/galaxy/default/api/v3/artifacts/collections/{path}/{filename} Download collection.","title":"pulp_ansible_galaxy_default_api_v3_artifacts_collections_get"},{"location":"automation-hub/#pulp_ansible_galaxy_default_api_v3_collection_versions_all_list","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/default/api/v3/collection_versions/all/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/default/api/v3/collection_versions/all/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/default/api/v3/collection_versions/all/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/default/api/v3/collection_versions/all/', params: { }, headers: headers p JSON.parse(result) GET /pulp_ansible/galaxy/default/api/v3/collection_versions/all/ Legacy v3 endpoint. Example responses 202 Response [ { \"version\": \"string\", \"href\": \"string\", \"created_at\": \"2019-08-24T14:15:22Z\", \"updated_at\": \"2019-08-24T14:15:22Z\", \"requires_ansible\": \"string\", \"artifact\": { \"filename\": \"string\", \"sha256\": \"string\", \"size\": 0 }, \"collection\": { \"id\": \"string\", \"name\": \"string\", \"href\": \"string\" }, \"download_url\": \"string\", \"name\": \"string\", \"namespace\": { \"name\": \"string\" }, \"signatures\": \"string\", \"metadata\": { \"authors\": [ \"string\" ], \"contents\": {}, \"dependencies\": {}, \"description\": \"string\", \"documentation\": \"string\", \"homepage\": \"string\", \"issues\": \"string\", \"license\": [ \"string\" ], \"repository\": \"string\", \"tags\": [ \"string\" ] }, \"git_url\": \"string\", \"git_commit_sha\": \"string\" } ]","title":"pulp_ansible_galaxy_default_api_v3_collection_versions_all_list"},{"location":"automation-hub/#pulp_ansible_galaxy_default_api_v3_collections_list","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/default/api/v3/collections/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/default/api/v3/collections/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/default/api/v3/collections/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/default/api/v3/collections/', params: { }, headers: headers p JSON.parse(result) GET /pulp_ansible/galaxy/default/api/v3/collections/ Legacy v3 endpoint.","title":"pulp_ansible_galaxy_default_api_v3_collections_list"},{"location":"automation-hub/#enumerated-values_77","text":"Parameter Value ordering -group_roles ordering -name ordering -namespace ordering -pk ordering -pulp_created ordering -pulp_id ordering -pulp_labels ordering -pulp_last_updated ordering -synclist ordering -user_roles ordering -versions ordering group_roles ordering name ordering namespace ordering pk ordering pulp_created ordering pulp_id ordering pulp_labels ordering pulp_last_updated ordering synclist ordering user_roles ordering versions Example responses 202 Response { \"meta\": { \"count\": 123 }, \"links\": { \"first\": \"string\", \"previous\": \"string\", \"next\": \"string\", \"last\": \"string\" }, \"data\": [ { \"href\": \"string\", \"namespace\": \"string\", \"name\": \"string\", \"deprecated\": true, \"versions_url\": \"string\", \"highest_version\": {}, \"created_at\": \"2019-08-24T14:15:22Z\", \"updated_at\": \"2019-08-24T14:15:22Z\" } ] }","title":"Enumerated Values"},{"location":"automation-hub/#pulp_ansible_galaxy_default_api_v3_collections_read","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/default/api/v3/collections/{namespace}/{name}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/default/api/v3/collections/{namespace}/{name}/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/default/api/v3/collections/{namespace}/{name}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/default/api/v3/collections/{namespace}/{name}/', params: { }, headers: headers p JSON.parse(result) GET /pulp_ansible/galaxy/default/api/v3/collections/{namespace}/{name}/ Legacy v3 endpoint.","title":"pulp_ansible_galaxy_default_api_v3_collections_read"},{"location":"automation-hub/#pulp_ansible_galaxy_default_api_v3_collections_update","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Content-Type\": []string{\"application/json\"}, \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"PATCH\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/default/api/v3/collections/{namespace}/{name}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const inputBody = '{}'; const headers = { 'Content-Type':'application/json', 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/default/api/v3/collections/{namespace}/{name}/', { method: 'PATCH', body: inputBody, headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Content-Type': 'application/json', 'Accept': 'application/json' } r = requests.patch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/default/api/v3/collections/{namespace}/{name}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Content-Type' => 'application/json', 'Accept' => 'application/json' } result = RestClient.patch 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/default/api/v3/collections/{namespace}/{name}/', params: { }, headers: headers p JSON.parse(result) PATCH /pulp_ansible/galaxy/default/api/v3/collections/{namespace}/{name}/ Legacy v3 endpoint. Body parameter {} {}","title":"pulp_ansible_galaxy_default_api_v3_collections_update"},{"location":"automation-hub/#pulp_ansible_galaxy_default_api_v3_collections_delete","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"DELETE\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/default/api/v3/collections/{namespace}/{name}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/default/api/v3/collections/{namespace}/{name}/', { method: 'DELETE', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.delete('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/default/api/v3/collections/{namespace}/{name}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.delete 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/default/api/v3/collections/{namespace}/{name}/', params: { }, headers: headers p JSON.parse(result) DELETE /pulp_ansible/galaxy/default/api/v3/collections/{namespace}/{name}/ Legacy v3 endpoint.","title":"pulp_ansible_galaxy_default_api_v3_collections_delete"},{"location":"automation-hub/#pulp_ansible_galaxy_default_api_v3_collections_versions_list","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/default/api/v3/collections/{namespace}/{name}/versions/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/default/api/v3/collections/{namespace}/{name}/versions/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/default/api/v3/collections/{namespace}/{name}/versions/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/default/api/v3/collections/{namespace}/{name}/versions/', params: { }, headers: headers p JSON.parse(result) GET /pulp_ansible/galaxy/default/api/v3/collections/{namespace}/{name}/versions/ Legacy v3 endpoint.","title":"pulp_ansible_galaxy_default_api_v3_collections_versions_list"},{"location":"automation-hub/#enumerated-values_78","text":"Parameter Value ordering -_artifacts ordering -authors ordering -collection ordering -content_ptr ordering -contentartifact ordering -contents ordering -dependencies ordering -description ordering -docs_blob ordering -documentation ordering -download_logs ordering -files ordering -group_roles ordering -homepage ordering -is_highest ordering -issues ordering -license ordering -manifest ordering -name ordering -namespace ordering -pk ordering -pulp_created ordering -pulp_id ordering -pulp_labels ordering -pulp_last_updated ordering -pulp_type ordering -repositories ordering -repository ordering -requires_ansible ordering -search_vector ordering -signatures ordering -tags ordering -timestamp_of_interest ordering -upstream_id ordering -user_roles ordering -version ordering -version_memberships ordering _artifacts ordering authors ordering collection ordering content_ptr ordering contentartifact ordering contents ordering dependencies ordering description ordering docs_blob ordering documentation ordering download_logs ordering files ordering group_roles ordering homepage ordering is_highest ordering issues ordering license ordering manifest ordering name ordering namespace ordering pk ordering pulp_created ordering pulp_id ordering pulp_labels ordering pulp_last_updated ordering pulp_type ordering repositories ordering repository ordering requires_ansible ordering search_vector ordering signatures ordering tags ordering timestamp_of_interest ordering upstream_id ordering user_roles ordering version ordering version_memberships Example responses 202 Response { \"meta\": { \"count\": 123 }, \"links\": { \"first\": \"string\", \"previous\": \"string\", \"next\": \"string\", \"last\": \"string\" }, \"data\": [ { \"version\": \"string\", \"href\": \"string\", \"created_at\": \"2019-08-24T14:15:22Z\", \"updated_at\": \"2019-08-24T14:15:22Z\", \"requires_ansible\": \"string\" } ] }","title":"Enumerated Values"},{"location":"automation-hub/#pulp_ansible_galaxy_default_api_v3_collections_versions_read","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/default/api/v3/collections/{namespace}/{name}/versions/{version}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/default/api/v3/collections/{namespace}/{name}/versions/{version}/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/default/api/v3/collections/{namespace}/{name}/versions/{version}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/default/api/v3/collections/{namespace}/{name}/versions/{version}/', params: { }, headers: headers p JSON.parse(result) GET /pulp_ansible/galaxy/default/api/v3/collections/{namespace}/{name}/versions/{version}/ Legacy v3 endpoint.","title":"pulp_ansible_galaxy_default_api_v3_collections_versions_read"},{"location":"automation-hub/#pulp_ansible_galaxy_default_api_v3_collections_versions_delete","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"DELETE\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/default/api/v3/collections/{namespace}/{name}/versions/{version}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/default/api/v3/collections/{namespace}/{name}/versions/{version}/', { method: 'DELETE', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.delete('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/default/api/v3/collections/{namespace}/{name}/versions/{version}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.delete 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/default/api/v3/collections/{namespace}/{name}/versions/{version}/', params: { }, headers: headers p JSON.parse(result) DELETE /pulp_ansible/galaxy/default/api/v3/collections/{namespace}/{name}/versions/{version}/ Legacy v3 endpoint.","title":"pulp_ansible_galaxy_default_api_v3_collections_versions_delete"},{"location":"automation-hub/#pulp_ansible_galaxy_default_api_v3_collections_versions_docs_blob_read","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/default/api/v3/collections/{namespace}/{name}/versions/{version}/docs-blob/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/default/api/v3/collections/{namespace}/{name}/versions/{version}/docs-blob/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/default/api/v3/collections/{namespace}/{name}/versions/{version}/docs-blob/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/default/api/v3/collections/{namespace}/{name}/versions/{version}/docs-blob/', params: { }, headers: headers p JSON.parse(result) GET /pulp_ansible/galaxy/default/api/v3/collections/{namespace}/{name}/versions/{version}/docs-blob/ Legacy v3 endpoint.","title":"pulp_ansible_galaxy_default_api_v3_collections_versions_docs_blob_read"},{"location":"automation-hub/#pulp_ansible_galaxy_default_api_v3_collections_all_list","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/default/api/v3/collections/all/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/default/api/v3/collections/all/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/default/api/v3/collections/all/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/default/api/v3/collections/all/', params: { }, headers: headers p JSON.parse(result) GET /pulp_ansible/galaxy/default/api/v3/collections/all/ Legacy v3 endpoint.","title":"pulp_ansible_galaxy_default_api_v3_collections_all_list"},{"location":"automation-hub/#enumerated-values_79","text":"Parameter Value ordering -group_roles ordering -name ordering -namespace ordering -pk ordering -pulp_created ordering -pulp_id ordering -pulp_labels ordering -pulp_last_updated ordering -synclist ordering -user_roles ordering -versions ordering group_roles ordering name ordering namespace ordering pk ordering pulp_created ordering pulp_id ordering pulp_labels ordering pulp_last_updated ordering synclist ordering user_roles ordering versions Example responses 202 Response [ { \"href\": \"string\", \"namespace\": \"string\", \"name\": \"string\", \"deprecated\": true, \"versions_url\": \"string\", \"highest_version\": {}, \"created_at\": \"2019-08-24T14:15:22Z\", \"updated_at\": \"2019-08-24T14:15:22Z\" } ]","title":"Enumerated Values"},{"location":"automation-hub/#pulp_ansible_galaxy_default_api_v3_imports_collections_read","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/default/api/v3/imports/collections/{task}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/default/api/v3/imports/collections/{task}/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/default/api/v3/imports/collections/{task}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/default/api/v3/imports/collections/{task}/', params: { }, headers: headers p JSON.parse(result) GET /pulp_ansible/galaxy/default/api/v3/imports/collections/{task}/ Inspect a collection import Legacy v3 endpoint.","title":"pulp_ansible_galaxy_default_api_v3_imports_collections_read"},{"location":"automation-hub/#pulp_ansible_galaxy_default_api_v3_plugin_ansible_client_configuration_get","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/default/api/v3/plugin/ansible/client-configuration/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/default/api/v3/plugin/ansible/client-configuration/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/default/api/v3/plugin/ansible/client-configuration/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/default/api/v3/plugin/ansible/client-configuration/', params: { }, headers: headers p JSON.parse(result) GET /pulp_ansible/galaxy/default/api/v3/plugin/ansible/client-configuration/ Get the client configs. Example responses 200 Response { \"default_distribution_path\": \"string\" }","title":"pulp_ansible_galaxy_default_api_v3_plugin_ansible_client_configuration_get"},{"location":"automation-hub/#pulp_ansible_galaxy_default_api_v3_plugin_ansible_content_collections_read","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/default/api/v3/plugin/ansible/content/{distro_base_path}/collections/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/default/api/v3/plugin/ansible/content/{distro_base_path}/collections/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/default/api/v3/plugin/ansible/content/{distro_base_path}/collections/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/default/api/v3/plugin/ansible/content/{distro_base_path}/collections/', params: { }, headers: headers p JSON.parse(result) GET /pulp_ansible/galaxy/default/api/v3/plugin/ansible/content/{distro_base_path}/collections/ ViewSet for Repository Metadata.","title":"pulp_ansible_galaxy_default_api_v3_plugin_ansible_content_collections_read"},{"location":"automation-hub/#pulp_ansible_galaxy_default_api_v3_plugin_ansible_content_collections_all_collections_list","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/default/api/v3/plugin/ansible/content/{distro_base_path}/collections/all-collections/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/default/api/v3/plugin/ansible/content/{distro_base_path}/collections/all-collections/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/default/api/v3/plugin/ansible/content/{distro_base_path}/collections/all-collections/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/default/api/v3/plugin/ansible/content/{distro_base_path}/collections/all-collections/', params: { }, headers: headers p JSON.parse(result) GET /pulp_ansible/galaxy/default/api/v3/plugin/ansible/content/{distro_base_path}/collections/all-collections/ Unpaginated ViewSet for Collections.","title":"pulp_ansible_galaxy_default_api_v3_plugin_ansible_content_collections_all_collections_list"},{"location":"automation-hub/#enumerated-values_80","text":"Parameter Value ordering -group_roles ordering -name ordering -namespace ordering -pk ordering -pulp_created ordering -pulp_id ordering -pulp_labels ordering -pulp_last_updated ordering -synclist ordering -user_roles ordering -versions ordering group_roles ordering name ordering namespace ordering pk ordering pulp_created ordering pulp_id ordering pulp_labels ordering pulp_last_updated ordering synclist ordering user_roles ordering versions Example responses 200 Response [ { \"href\": \"string\", \"namespace\": \"string\", \"name\": \"string\", \"deprecated\": true, \"versions_url\": \"string\", \"highest_version\": {}, \"created_at\": \"2019-08-24T14:15:22Z\", \"updated_at\": \"2019-08-24T14:15:22Z\" } ]","title":"Enumerated Values"},{"location":"automation-hub/#pulp_ansible_galaxy_default_api_v3_plugin_ansible_content_collections_all_versions_list","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/default/api/v3/plugin/ansible/content/{distro_base_path}/collections/all-versions/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/default/api/v3/plugin/ansible/content/{distro_base_path}/collections/all-versions/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/default/api/v3/plugin/ansible/content/{distro_base_path}/collections/all-versions/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/default/api/v3/plugin/ansible/content/{distro_base_path}/collections/all-versions/', params: { }, headers: headers p JSON.parse(result) GET /pulp_ansible/galaxy/default/api/v3/plugin/ansible/content/{distro_base_path}/collections/all-versions/ Returns paginated CollectionVersions list.","title":"pulp_ansible_galaxy_default_api_v3_plugin_ansible_content_collections_all_versions_list"},{"location":"automation-hub/#pulp_ansible_galaxy_default_api_v3_plugin_ansible_content_collections_artifacts_download","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/default/api/v3/plugin/ansible/content/{distro_base_path}/collections/artifacts/{filename}\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/default/api/v3/plugin/ansible/content/{distro_base_path}/collections/artifacts/{filename}', { method: 'GET' }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/default/api/v3/plugin/ansible/content/{distro_base_path}/collections/artifacts/{filename}') print(r.json()) require 'rest-client' require 'json' result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/default/api/v3/plugin/ansible/content/{distro_base_path}/collections/artifacts/{filename}', params: { } p JSON.parse(result) GET /pulp_ansible/galaxy/default/api/v3/plugin/ansible/content/{distro_base_path}/collections/artifacts/{filename} Collection download endpoint.","title":"pulp_ansible_galaxy_default_api_v3_plugin_ansible_content_collections_artifacts_download"},{"location":"automation-hub/#pulp_ansible_galaxy_default_api_v3_plugin_ansible_content_collections_index_list","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/default/api/v3/plugin/ansible/content/{distro_base_path}/collections/index/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/default/api/v3/plugin/ansible/content/{distro_base_path}/collections/index/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/default/api/v3/plugin/ansible/content/{distro_base_path}/collections/index/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/default/api/v3/plugin/ansible/content/{distro_base_path}/collections/index/', params: { }, headers: headers p JSON.parse(result) GET /pulp_ansible/galaxy/default/api/v3/plugin/ansible/content/{distro_base_path}/collections/index/ ViewSet for Collections.","title":"pulp_ansible_galaxy_default_api_v3_plugin_ansible_content_collections_index_list"},{"location":"automation-hub/#enumerated-values_81","text":"Parameter Value ordering -group_roles ordering -name ordering -namespace ordering -pk ordering -pulp_created ordering -pulp_id ordering -pulp_labels ordering -pulp_last_updated ordering -synclist ordering -user_roles ordering -versions ordering group_roles ordering name ordering namespace ordering pk ordering pulp_created ordering pulp_id ordering pulp_labels ordering pulp_last_updated ordering synclist ordering user_roles ordering versions Example responses 200 Response { \"meta\": { \"count\": 123 }, \"links\": { \"first\": \"string\", \"previous\": \"string\", \"next\": \"string\", \"last\": \"string\" }, \"data\": [ { \"href\": \"string\", \"namespace\": \"string\", \"name\": \"string\", \"deprecated\": true, \"versions_url\": \"string\", \"highest_version\": {}, \"created_at\": \"2019-08-24T14:15:22Z\", \"updated_at\": \"2019-08-24T14:15:22Z\" } ] }","title":"Enumerated Values"},{"location":"automation-hub/#pulp_ansible_galaxy_default_api_v3_plugin_ansible_content_collections_index_read","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/default/api/v3/plugin/ansible/content/{distro_base_path}/collections/index/{namespace}/{name}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/default/api/v3/plugin/ansible/content/{distro_base_path}/collections/index/{namespace}/{name}/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/default/api/v3/plugin/ansible/content/{distro_base_path}/collections/index/{namespace}/{name}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/default/api/v3/plugin/ansible/content/{distro_base_path}/collections/index/{namespace}/{name}/', params: { }, headers: headers p JSON.parse(result) GET /pulp_ansible/galaxy/default/api/v3/plugin/ansible/content/{distro_base_path}/collections/index/{namespace}/{name}/ ViewSet for Collections.","title":"pulp_ansible_galaxy_default_api_v3_plugin_ansible_content_collections_index_read"},{"location":"automation-hub/#pulp_ansible_galaxy_default_api_v3_plugin_ansible_content_collections_index_update","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Content-Type\": []string{\"application/json\"}, \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"PATCH\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/default/api/v3/plugin/ansible/content/{distro_base_path}/collections/index/{namespace}/{name}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const inputBody = '{}'; const headers = { 'Content-Type':'application/json', 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/default/api/v3/plugin/ansible/content/{distro_base_path}/collections/index/{namespace}/{name}/', { method: 'PATCH', body: inputBody, headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Content-Type': 'application/json', 'Accept': 'application/json' } r = requests.patch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/default/api/v3/plugin/ansible/content/{distro_base_path}/collections/index/{namespace}/{name}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Content-Type' => 'application/json', 'Accept' => 'application/json' } result = RestClient.patch 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/default/api/v3/plugin/ansible/content/{distro_base_path}/collections/index/{namespace}/{name}/', params: { }, headers: headers p JSON.parse(result) PATCH /pulp_ansible/galaxy/default/api/v3/plugin/ansible/content/{distro_base_path}/collections/index/{namespace}/{name}/ Trigger an asynchronous update task Body parameter {} {}","title":"pulp_ansible_galaxy_default_api_v3_plugin_ansible_content_collections_index_update"},{"location":"automation-hub/#pulp_ansible_galaxy_default_api_v3_plugin_ansible_content_collections_index_delete","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"DELETE\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/default/api/v3/plugin/ansible/content/{distro_base_path}/collections/index/{namespace}/{name}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/default/api/v3/plugin/ansible/content/{distro_base_path}/collections/index/{namespace}/{name}/', { method: 'DELETE', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.delete('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/default/api/v3/plugin/ansible/content/{distro_base_path}/collections/index/{namespace}/{name}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.delete 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/default/api/v3/plugin/ansible/content/{distro_base_path}/collections/index/{namespace}/{name}/', params: { }, headers: headers p JSON.parse(result) DELETE /pulp_ansible/galaxy/default/api/v3/plugin/ansible/content/{distro_base_path}/collections/index/{namespace}/{name}/ Trigger an asynchronous delete task","title":"pulp_ansible_galaxy_default_api_v3_plugin_ansible_content_collections_index_delete"},{"location":"automation-hub/#pulp_ansible_galaxy_default_api_v3_plugin_ansible_content_collections_index_versions_list","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/default/api/v3/plugin/ansible/content/{distro_base_path}/collections/index/{namespace}/{name}/versions/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/default/api/v3/plugin/ansible/content/{distro_base_path}/collections/index/{namespace}/{name}/versions/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/default/api/v3/plugin/ansible/content/{distro_base_path}/collections/index/{namespace}/{name}/versions/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/default/api/v3/plugin/ansible/content/{distro_base_path}/collections/index/{namespace}/{name}/versions/', params: { }, headers: headers p JSON.parse(result) GET /pulp_ansible/galaxy/default/api/v3/plugin/ansible/content/{distro_base_path}/collections/index/{namespace}/{name}/versions/ Returns paginated CollectionVersions list.","title":"pulp_ansible_galaxy_default_api_v3_plugin_ansible_content_collections_index_versions_list"},{"location":"automation-hub/#enumerated-values_82","text":"Parameter Value ordering -_artifacts ordering -authors ordering -collection ordering -content_ptr ordering -contentartifact ordering -contents ordering -dependencies ordering -description ordering -docs_blob ordering -documentation ordering -download_logs ordering -files ordering -group_roles ordering -homepage ordering -is_highest ordering -issues ordering -license ordering -manifest ordering -name ordering -namespace ordering -pk ordering -pulp_created ordering -pulp_id ordering -pulp_labels ordering -pulp_last_updated ordering -pulp_type ordering -repositories ordering -repository ordering -requires_ansible ordering -search_vector ordering -signatures ordering -tags ordering -timestamp_of_interest ordering -upstream_id ordering -user_roles ordering -version ordering -version_memberships ordering _artifacts ordering authors ordering collection ordering content_ptr ordering contentartifact ordering contents ordering dependencies ordering description ordering docs_blob ordering documentation ordering download_logs ordering files ordering group_roles ordering homepage ordering is_highest ordering issues ordering license ordering manifest ordering name ordering namespace ordering pk ordering pulp_created ordering pulp_id ordering pulp_labels ordering pulp_last_updated ordering pulp_type ordering repositories ordering repository ordering requires_ansible ordering search_vector ordering signatures ordering tags ordering timestamp_of_interest ordering upstream_id ordering user_roles ordering version ordering version_memberships Example responses 202 Response { \"meta\": { \"count\": 123 }, \"links\": { \"first\": \"string\", \"previous\": \"string\", \"next\": \"string\", \"last\": \"string\" }, \"data\": [ { \"version\": \"string\", \"href\": \"string\", \"created_at\": \"2019-08-24T14:15:22Z\", \"updated_at\": \"2019-08-24T14:15:22Z\", \"requires_ansible\": \"string\" } ] }","title":"Enumerated Values"},{"location":"automation-hub/#pulp_ansible_galaxy_default_api_v3_plugin_ansible_content_collections_index_versions_read","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/default/api/v3/plugin/ansible/content/{distro_base_path}/collections/index/{namespace}/{name}/versions/{version}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/default/api/v3/plugin/ansible/content/{distro_base_path}/collections/index/{namespace}/{name}/versions/{version}/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/default/api/v3/plugin/ansible/content/{distro_base_path}/collections/index/{namespace}/{name}/versions/{version}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/default/api/v3/plugin/ansible/content/{distro_base_path}/collections/index/{namespace}/{name}/versions/{version}/', params: { }, headers: headers p JSON.parse(result) GET /pulp_ansible/galaxy/default/api/v3/plugin/ansible/content/{distro_base_path}/collections/index/{namespace}/{name}/versions/{version}/ Returns a CollectionVersion object.","title":"pulp_ansible_galaxy_default_api_v3_plugin_ansible_content_collections_index_versions_read"},{"location":"automation-hub/#pulp_ansible_galaxy_default_api_v3_plugin_ansible_content_collections_index_versions_delete","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"DELETE\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/default/api/v3/plugin/ansible/content/{distro_base_path}/collections/index/{namespace}/{name}/versions/{version}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/default/api/v3/plugin/ansible/content/{distro_base_path}/collections/index/{namespace}/{name}/versions/{version}/', { method: 'DELETE', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.delete('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/default/api/v3/plugin/ansible/content/{distro_base_path}/collections/index/{namespace}/{name}/versions/{version}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.delete 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/default/api/v3/plugin/ansible/content/{distro_base_path}/collections/index/{namespace}/{name}/versions/{version}/', params: { }, headers: headers p JSON.parse(result) DELETE /pulp_ansible/galaxy/default/api/v3/plugin/ansible/content/{distro_base_path}/collections/index/{namespace}/{name}/versions/{version}/ Trigger an asynchronous delete task","title":"pulp_ansible_galaxy_default_api_v3_plugin_ansible_content_collections_index_versions_delete"},{"location":"automation-hub/#pulp_ansible_galaxy_default_api_v3_plugin_ansible_content_collections_index_versions_docs_blob_read","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/default/api/v3/plugin/ansible/content/{distro_base_path}/collections/index/{namespace}/{name}/versions/{version}/docs-blob/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/default/api/v3/plugin/ansible/content/{distro_base_path}/collections/index/{namespace}/{name}/versions/{version}/docs-blob/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/default/api/v3/plugin/ansible/content/{distro_base_path}/collections/index/{namespace}/{name}/versions/{version}/docs-blob/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/default/api/v3/plugin/ansible/content/{distro_base_path}/collections/index/{namespace}/{name}/versions/{version}/docs-blob/', params: { }, headers: headers p JSON.parse(result) GET /pulp_ansible/galaxy/default/api/v3/plugin/ansible/content/{distro_base_path}/collections/index/{namespace}/{name}/versions/{version}/docs-blob/ Returns a CollectionVersion object.","title":"pulp_ansible_galaxy_default_api_v3_plugin_ansible_content_collections_index_versions_docs_blob_read"},{"location":"automation-hub/#pulp_ansible_galaxy_default_api_v3_plugin_ansible_imports_collections_read","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { headers := map[string][]string{ \"Accept\": []string{\"application/json\"}, } data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/default/api/v3/plugin/ansible/imports/collections/{task}/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } const headers = { 'Accept':'application/json' }; fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/default/api/v3/plugin/ansible/imports/collections/{task}/', { method: 'GET', headers: headers }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests headers = { 'Accept': 'application/json' } r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/default/api/v3/plugin/ansible/imports/collections/{task}/', headers = headers) print(r.json()) require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/pulp_ansible/galaxy/default/api/v3/plugin/ansible/imports/collections/{task}/', params: { }, headers: headers p JSON.parse(result) GET /pulp_ansible/galaxy/default/api/v3/plugin/ansible/imports/collections/{task}/ Inspect a collection import Returns a CollectionImport object.","title":"pulp_ansible_galaxy_default_api_v3_plugin_ansible_imports_collections_read"},{"location":"automation-hub/#token_get","text":"Code samples package main import ( \"bytes\" \"net/http\" ) func main() { data := bytes.NewBuffer([]byte{jsonReq}) req, err := http.NewRequest(\"GET\", \"http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/token/\", data) req.Header = headers client := &http.Client{} resp, err := client.Do(req) // ... } fetch('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/token/', { method: 'GET' }) .then(function(res) { return res.json(); }).then(function(body) { console.log(body); }); import requests r = requests.get('http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/token/') print(r.json()) require 'rest-client' require 'json' result = RestClient.get 'http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/token/', params: { } p JSON.parse(result) GET /token/ Handles GET requests for the /token/ endpoint.","title":"token_get"},{"location":"automation-hub/#schemas","text":"","title":"Schemas"},{"location":"automation-hub/#properties","text":"Name Type Required Restrictions Description permissions_assignment [object] false none List of callables that define the new permissions to be created for new objects.This is deprecated. Use creation_hooks instead. creation_hooks [object] false none List of callables that may associate user roles for new objects. statements [object] true none List of policy statements defining the policy. queryset_scoping object false none A callable for performing queryset scoping. See plugin documentation for valid callables. Set to blank to turn off queryset scoping.","title":"Properties"},{"location":"automation-hub/#properties_1","text":"Name Type Required Restrictions Description pulp_href string(uri) false read-only none pulp_created string(date-time) false read-only Timestamp of creation. permissions_assignment [object] false none List of callables that define the new permissions to be created for new objects.This is deprecated. Use creation_hooks instead. creation_hooks [object] false none List of callables that may associate user roles for new objects. statements [object] true none List of policy statements defining the policy. viewset_name string false read-only The name of ViewSet this AccessPolicy authorizes. customized boolean false read-only True if the AccessPolicy has been user-modified. False otherwise. queryset_scoping object false none A callable for performing queryset scoping. See plugin documentation for valid callables. Set to blank to turn off queryset scoping.","title":"Properties"},{"location":"automation-hub/#properties_2","text":"Name Type Required Restrictions Description name string true none none base_path string true none none content_guard string(uuid)\u00a6null false none none created_at string(date-time) true none none updated_at string(date-time) true none none","title":"Properties"},{"location":"automation-hub/#properties_3","text":"Name Type Required Restrictions Description namespace string\u00a6null false none none name string\u00a6null false none none version string\u00a6null false none none","title":"Properties"},{"location":"automation-hub/#properties_4","text":"Name Type Required Restrictions Description name string true none none description string\u00a6null false none none next_version integer false none none distributions [ AnsibleDistributionResponse ] false read-only none created_at string(date-time) true none none updated_at string(date-time) true none none last_sync_task string false read-only none","title":"Properties"},{"location":"automation-hub/#properties_5","text":"Name Type Required Restrictions Description content_units [any] true none List of collection version hrefs to sign, use * to sign all content in repository signing_service string(uri) true none A signing service to use to sign the collections","title":"Properties"},{"location":"automation-hub/#properties_6","text":"Name Type Required Restrictions Description remote string(uri) false none A remote to sync from. This will override a remote set on repository. mirror boolean false none If True , synchronization will remove all content that is not present in the remote repository. If False , sync will be additive only. optimize boolean false none Whether to optimize sync or not.","title":"Properties"},{"location":"automation-hub/#properties_7","text":"Name Type Required Restrictions Description file string(binary) true none The stored file. size integer false none The size of the file in bytes. md5 string\u00a6null false none The MD5 checksum of the file if available. sha1 string\u00a6null false none The SHA-1 checksum of the file if available. sha224 string\u00a6null false none The SHA-224 checksum of the file if available. sha256 string\u00a6null false none The SHA-256 checksum of the file if available. sha384 string\u00a6null false none The SHA-384 checksum of the file if available. sha512 string\u00a6null false none The SHA-512 checksum of the file if available.","title":"Properties"},{"location":"automation-hub/#properties_8","text":"Name Type Required Restrictions Description filename string true none none sha256 string true none none size integer true none none","title":"Properties"},{"location":"automation-hub/#properties_9","text":"Name Type Required Restrictions Description pulp_href string(uri) false read-only none pulp_created string(date-time) false read-only Timestamp of creation. file string true none The stored file. size integer false none The size of the file in bytes. md5 string\u00a6null false none The MD5 checksum of the file if available. sha1 string\u00a6null false none The SHA-1 checksum of the file if available. sha224 string\u00a6null false none The SHA-224 checksum of the file if available. sha256 string\u00a6null false none The SHA-256 checksum of the file if available. sha384 string\u00a6null false none The SHA-384 checksum of the file if available. sha512 string\u00a6null false none The SHA-512 checksum of the file if available.","title":"Properties"},{"location":"automation-hub/#properties_10","text":"Name Type Required Restrictions Description task string(uri) true none The href of the task.","title":"Properties"},{"location":"automation-hub/#properties_11","text":"Name Type Required Restrictions Description default_distribution_path string\u00a6null true none none","title":"Properties"},{"location":"automation-hub/#properties_12","text":"Name Type Required Restrictions Description id string(uuid) true none none state string true none none created_at string(date-time) true none none updated_at string(date-time) true none none started_at string(date-time) true none none finished_at string(date-time) false none none error object false none none messages object true none none","title":"Properties"},{"location":"automation-hub/#properties_13","text":"Name Type Required Restrictions Description authors [string] false read-only none contents object false read-only none dependencies object false read-only none description string false read-only none documentation string false read-only none homepage string false read-only none issues string false read-only none license [string] false read-only none repository string false read-only none tags [string] true none none","title":"Properties"},{"location":"automation-hub/#properties_14","text":"Name Type Required Restrictions Description name string true none none","title":"Properties"},{"location":"automation-hub/#properties_15","text":"Name Type Required Restrictions Description file string(binary) true none The Collection tarball. sha256 string false none An optional sha256 checksum of the uploaded file. expected_namespace string false none The expected 'namespace' of the Collection to be verified against the metadata during import. expected_name string false none The expected 'name' of the Collection to be verified against the metadata during import. expected_version string false none The expected version of the Collection to be verified against the metadata during import.","title":"Properties"},{"location":"automation-hub/#properties_16","text":"Name Type Required Restrictions Description id string true none none name string true none none href string false read-only none","title":"Properties"},{"location":"automation-hub/#properties_17","text":"Name Type Required Restrictions Description href string false read-only none namespace string false read-only none name string false read-only none deprecated boolean false read-only none versions_url string false read-only none highest_version object false read-only none created_at string(date-time) false read-only none updated_at string(date-time) false read-only none","title":"Properties"},{"location":"automation-hub/#properties_18","text":"Name Type Required Restrictions Description file string(binary) true none none sha256 string false none none","title":"Properties"},{"location":"automation-hub/#properties_19","text":"Name Type Required Restrictions Description docs_blob object true none none","title":"Properties"},{"location":"automation-hub/#properties_20","text":"Name Type Required Restrictions Description version string false read-only none href string false read-only none created_at string(date-time) true none none updated_at string(date-time) true none none requires_ansible string\u00a6null false none none","title":"Properties"},{"location":"automation-hub/#properties_21","text":"Name Type Required Restrictions Description version string false read-only none href string false read-only none created_at string(date-time) true none none updated_at string(date-time) true none none requires_ansible string\u00a6null false none none artifact ArtifactRefResponse false read-only A serializer for an Artifact reference. collection CollectionRefResponse false read-only A serializer for a Collection reference. download_url string false read-only none name string false read-only none namespace CollectionNamespaceResponse false read-only A serializer for a Collection Version namespace field. signatures string false read-only none metadata CollectionMetadataResponse false read-only A serializer for a CollectionVersion metadata. git_url string false read-only none git_commit_sha string false read-only none manifest object false read-only A JSON field holding MANIFEST.json data. files object false read-only A JSON field holding FILES.json data.","title":"Properties"},{"location":"automation-hub/#properties_22","text":"Name Type Required Restrictions Description id string(uuid) true none none pulp_href string(uri) false read-only none name string false read-only none my_permissions MyPermissionsFieldResponse false read-only none owners [any] false read-only none created_at string(date-time) true none none updated_at string(date-time) true none none","title":"Properties"},{"location":"automation-hub/#properties_23","text":"Name Type Required Restrictions Description id string(uuid) false read-only none pulp_href string(uri) false read-only none name string false read-only none pulp object false read-only none namespace ContainerNamespaceResponse true none none description string\u00a6null false read-only none created_at string(date-time) false read-only none updated_at string(date-time) false read-only none","title":"Properties"},{"location":"automation-hub/#properties_24","text":"Name Type Required Restrictions Description remote string(uri) false none A remote to sync from. This will override a remote set on repository. mirror boolean false none If True , synchronization will remove all content that is not present in the remote repository. If False , sync will be additive only. signed_only boolean false none If True , only signed content will be synced. Signatures are not verified.","title":"Properties"},{"location":"automation-hub/#properties_25","text":"Name Type Required Restrictions Description name string false read-only The name of the worker. last_heartbeat string(date-time) false read-only Timestamp of the last time the worker talked to the service.","title":"Properties"},{"location":"automation-hub/#properties_26","text":"Name Type Required Restrictions Description pulp_href string(uri) false read-only none pulp_created string(date-time) false read-only Timestamp of creation. name string true none The unique name. description string\u00a6null false none An optional description.","title":"Properties"},{"location":"automation-hub/#properties_27","text":"Name Type Required Restrictions Description name string true none The unique name. description string\u00a6null false none An optional description.","title":"Properties"},{"location":"automation-hub/#properties_28","text":"Name Type Required Restrictions Description pulp_href string(uri) false read-only none pulp_created string(date-time) false read-only Timestamp of creation. name string true none The unique name. description string\u00a6null false none An optional description.","title":"Properties"},{"location":"automation-hub/#properties_29","text":"Name Type Required Restrictions Description added object true none none \u00bb additionalProperties object false none none removed object true none none \u00bb additionalProperties object false none none present object true none none \u00bb additionalProperties object false none none","title":"Properties"},{"location":"automation-hub/#properties_30","text":"Name Type Required Restrictions Description config object true none A JSON document describing sources, destinations, and content to be copied","title":"Properties"},{"location":"automation-hub/#properties_31","text":"Name Type Required Restrictions Description username string true none Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only. first_name string false none none last_name string false none none email string(email) false none none password string false write-only none is_superuser boolean false none Designates that this user has all permissions without explicitly assigning them.","title":"Properties"},{"location":"automation-hub/#properties_32","text":"Name Type Required Restrictions Description id integer false read-only none username string true none Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only. first_name string false none none last_name string false none none email string(email) false none none groups [integer] false read-only The groups this user belongs to. A user will get all permissions granted to each of their groups. date_joined string(date-time) false read-only none is_superuser boolean false none Designates that this user has all permissions without explicitly assigning them. auth_provider string false read-only none model_permissions object false read-only none is_anonymous string false read-only none","title":"Properties"},{"location":"automation-hub/#properties_33","text":"Name Type Required Restrictions Description connected boolean true none Info about whether the app can connect to the database","title":"Properties"},{"location":"automation-hub/#properties_34","text":"Name Type Required Restrictions Description pulp_id string(uuid) false read-only none name string true none none base_path string true none none repository RepositoryResponse true none none","title":"Properties"},{"location":"automation-hub/#properties_35","text":"Name Type Required Restrictions Description context string true none Parameter value being evaluated. is_valid boolean true none True if evaluation passed, false otherwise. messages [string] true none Messages describing results of all evaluations done. May be an empty list.","title":"Properties"},{"location":"automation-hub/#properties_36","text":"Name Type Required Restrictions Description task string(uri)\u00a6null false none A URI of the task that ran the Export. publication string(uri) false write-only A URI of the publication to be exported. repository_version string(uri) false write-only A URI of the repository version export.","title":"Properties"},{"location":"automation-hub/#properties_37","text":"Name Type Required Restrictions Description pulp_href string(uri) false read-only none pulp_created string(date-time) false read-only Timestamp of creation. task string(uri)\u00a6null false none A URI of the task that ran the Export. exported_resources [string] false read-only Resources that were exported. params object false read-only Any additional parameters that were used to create the export.","title":"Properties"},{"location":"automation-hub/#properties_38","text":"Name Type Required Restrictions Description name string true none Unique name of the file system exporter. path string true none File system location to export to. method MethodEnum false none Method of exporting","title":"Properties"},{"location":"automation-hub/#properties_39","text":"Name Type Required Restrictions Description pulp_href string(uri) false read-only none pulp_created string(date-time) false read-only Timestamp of creation. name string true none Unique name of the file system exporter. path string true none File system location to export to. method MethodEnum false none Method of exporting","title":"Properties"},{"location":"automation-hub/#properties_40","text":"Name Type Required Restrictions Description id string true none none name string true none none created string(date-time) true none none modified string(date-time) true none none","title":"Properties"},{"location":"automation-hub/#properties_41","text":"Name Type Required Restrictions Description id string true none none name string true none none namespace object false read-only none href string false read-only none versions_url string false read-only none created string(date-time) true none none modified string(date-time) true none none latest_version object false read-only none","title":"Properties"},{"location":"automation-hub/#properties_42","text":"Name Type Required Restrictions Description version string true none none href string false read-only none namespace object false read-only none collection object false read-only none artifact object false read-only none metadata CollectionMetadataResponse true none A serializer for a CollectionVersion metadata.","title":"Properties"},{"location":"automation-hub/#properties_43","text":"Name Type Required Restrictions Description id string false read-only none name string true none none namespace string true none none","title":"Properties"},{"location":"automation-hub/#properties_44","text":"Name Type Required Restrictions Description name string true none none source string false read-only none","title":"Properties"},{"location":"automation-hub/#properties_45","text":"Name Type Required Restrictions Description name string true none Name","title":"Properties"},{"location":"automation-hub/#properties_46","text":"Name Type Required Restrictions Description message string false read-only The message shown to the user for the group progress report. code string false read-only Identifies the type of group progress report'. total integer false read-only The total count of items. done integer false read-only The count of items already processed. Defaults to 0. suffix string\u00a6null false read-only The suffix to be shown with the group progress report.","title":"Properties"},{"location":"automation-hub/#properties_47","text":"Name Type Required Restrictions Description name string true none Name pulp_href string(uri) false read-only none id integer false read-only none","title":"Properties"},{"location":"automation-hub/#properties_48","text":"Name Type Required Restrictions Description role string true none none content_object string\u00a6null true none pulp_href of the object for which role permissions should be asserted. If set to 'null', permissions will act on the model-level.","title":"Properties"},{"location":"automation-hub/#properties_49","text":"Name Type Required Restrictions Description pulp_href string(uri) false read-only none pulp_created string(date-time) false read-only Timestamp of creation. role string true none none content_object string\u00a6null true none pulp_href of the object for which role permissions should be asserted. If set to 'null', permissions will act on the model-level. description string false read-only none permissions [string] false read-only none","title":"Properties"},{"location":"automation-hub/#properties_50","text":"Name Type Required Restrictions Description username string true none Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.","title":"Properties"},{"location":"automation-hub/#properties_51","text":"Name Type Required Restrictions Description username string true none Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only. pulp_href string(uri) false read-only none","title":"Properties"},{"location":"automation-hub/#properties_52","text":"Name Type Required Restrictions Description pulp_href string(uri) false read-only none pulp_created string(date-time) false read-only Timestamp of creation. task string(uri) true none A URI of the Task that ran the Import. params object true none Any parameters that were used to create the import.","title":"Properties"},{"location":"automation-hub/#properties_53","text":"Name Type Required Restrictions Description id string(uuid) true none none state string true none none namespace string true none none name string true none none version string true none none created_at string(date-time) true none none updated_at string(date-time) true none none started_at string(date-time) true none none finished_at string(date-time) true none none error object true none none messages object true none none","title":"Properties"},{"location":"automation-hub/#properties_54","text":"Name Type Required Restrictions Description id string(uuid) true none none state string true none none namespace string true none none name string true none none version string true none none created_at string(date-time) true none none updated_at string(date-time) true none none started_at string(date-time) true none none finished_at string(date-time) true none none","title":"Properties"},{"location":"automation-hub/#properties_55","text":"Name Type Required Restrictions Description source_repository string(uri) false none A URI of the repository to copy content from. source_repository_version string(uri) false none A URI of the repository version to copy content from. digests [any] false none A list of manifest digests to copy. media_types [ MediaTypesEnum ] false none A list of media_types to copy.","title":"Properties"},{"location":"automation-hub/#properties_56","text":"Name Type Required Restrictions Description anonymous string false none none","title":"Properties"},{"location":"automation-hub/#enumerated-values_83","text":"Property Value anonymous application/vnd.docker.distribution.manifest.v1+json anonymous application/vnd.docker.distribution.manifest.v2+json anonymous application/vnd.docker.distribution.manifest.list.v2+json anonymous application/vnd.oci.image.manifest.v1+json anonymous application/vnd.oci.image.index.v1+json","title":"Enumerated Values"},{"location":"automation-hub/#properties_57","text":"Name Type Required Restrictions Description anonymous string false none none","title":"Properties"},{"location":"automation-hub/#enumerated-values_84","text":"Property Value anonymous write anonymous hardlink anonymous symlink","title":"Enumerated Values"},{"location":"automation-hub/#properties_58","text":"Name Type Required Restrictions Description pulp_href string(uri) false read-only none pulp_created string(date-time) false read-only Timestamp of creation. name string true none The name of task. state string false read-only The current state of the task. The possible values include: 'waiting', 'skipped', 'running', 'completed', 'failed', 'canceled' and 'canceling'. started_at string(date-time) false read-only Timestamp of the when this task started execution. finished_at string(date-time) false read-only Timestamp of the when this task stopped execution. worker string(uri) false read-only The worker associated with this task. This field is empty if a worker is not yet assigned.","title":"Properties"},{"location":"automation-hub/#properties_59","text":"Name Type Required Restrictions Description pulp_href string(uri) false read-only none pulp_created string(date-time) false read-only Timestamp of creation. artifacts object true none A dict mapping relative paths inside the Content to the correspondingArtifact URLs. E.g.: {'relative/path': '/artifacts/1/'","title":"Properties"},{"location":"automation-hub/#properties_60","text":"None","title":"Properties"},{"location":"automation-hub/#properties_61","text":"None","title":"Properties"},{"location":"automation-hub/#properties_62","text":"Name Type Required Restrictions Description permissions [string] true none none","title":"Properties"},{"location":"automation-hub/#properties_63","text":"Name Type Required Restrictions Description name string true none none company string false none none email string false none none avatar_url string(uri) false none none description string false none none links [ NamespaceLink ] false none none groups string true none none resources string false none none","title":"Properties"},{"location":"automation-hub/#properties_64","text":"Name Type Required Restrictions Description name string true none none url string true none none","title":"Properties"},{"location":"automation-hub/#properties_65","text":"Name Type Required Restrictions Description name string true none none url string true none none","title":"Properties"},{"location":"automation-hub/#properties_66","text":"None","title":"Properties"},{"location":"automation-hub/#properties_67","text":"Name Type Required Restrictions Description my_permissions MyPermissionsFieldResponse false read-only none","title":"Properties"},{"location":"automation-hub/#properties_68","text":"Name Type Required Restrictions Description pulp_href string(uri) false read-only none id integer false read-only none name string true none none company string false none none email string false none none avatar_url string(uri) false none none description string false none none links [ NamespaceLinkResponse ] false none none groups string true none none resources string false none none related_fields NamespaceRelatedFieldResponse false read-only Serializer only returns fields specified in 'include_related' query param. This allows for fields that require more database queries to be optionally included in API responses, which lowers the load on the backend. This is intended as a way to include extra data in list views. Usage: This functions the same as DRF's base serializers.Serializer class with the exception that it will only return fields specified in the ?include_related= query parameter. Example: MySerializer(RelatedFieldsBaseSerializer): foo = CharField() bar = CharField() MySerializer will return: {\"foo\": None} when called with ?include_related=foo and {\"foo\": None, \"bar\" None} when called with ?include_related=foo&include_related=bar .","title":"Properties"},{"location":"automation-hub/#properties_69","text":"Name Type Required Restrictions Description pulp_href string(uri) false read-only none id integer false read-only none name string false read-only none company string false none none email string false none none avatar_url string(uri) false none none description string false none none groups string true none none related_fields NamespaceRelatedFieldResponse false read-only Serializer only returns fields specified in 'include_related' query param. This allows for fields that require more database queries to be optionally included in API responses, which lowers the load on the backend. This is intended as a way to include extra data in list views. Usage: This functions the same as DRF's base serializers.Serializer class with the exception that it will only return fields specified in the ?include_related= query parameter. Example: MySerializer(RelatedFieldsBaseSerializer): foo = CharField() bar = CharField() MySerializer will return: {\"foo\": None} when called with ?include_related=foo and {\"foo\": None, \"bar\" None} when called with ?include_related=foo&include_related=bar .","title":"Properties"},{"location":"automation-hub/#properties_70","text":"Name Type Required Restrictions Description users [string] false none none groups [string] false none none role string true none none","title":"Properties"},{"location":"automation-hub/#properties_71","text":"Name Type Required Restrictions Description users [string] false none none groups [string] false none none role string true none none","title":"Properties"},{"location":"automation-hub/#properties_72","text":"Name Type Required Restrictions Description containerfile_artifact string(uri) false none Artifact representing the Containerfile that should be used to run podman-build. containerfile string(binary) false none An uploaded Containerfile that should be used to run podman-build. tag string false none A tag name for the new image being built. artifacts object false none A JSON string where each key is an artifact href and the value is it's relative path (name) inside the /pulp_working_directory of the build container executing the Containerfile.","title":"Properties"},{"location":"automation-hub/#properties_73","text":"Name Type Required Restrictions Description roles [ NestedRoleResponse ] true none [Serializer to add/remove object roles to/from users/groups. This is used in conjunction with pulpcore.app.viewsets.base.RolesMixin and requires the underlying object to be passed as content_object in the context.]","title":"Properties"},{"location":"automation-hub/#properties_74","text":"Name Type Required Restrictions Description content_hrefs [any] false none Will delete specified content and associated Artifacts if they are orphans. orphan_protection_time integer\u00a6null false none The time in minutes for how long Pulp will hold orphan Content and Artifacts before they become candidates for deletion by this orphan cleanup task. This should ideally be longer than your longest running task otherwise any content created during that task could be cleaned up before the task finishes. If not specified, a default value is taken from the setting ORPHAN_PROTECTION_TIME.","title":"Properties"},{"location":"automation-hub/#properties_75","text":"Name Type Required Restrictions Description count integer false none none next string(uri)\u00a6null false none none previous string(uri)\u00a6null false none none results [ AccessPolicyResponse ] false none [Serializer for AccessPolicy.]","title":"Properties"},{"location":"automation-hub/#properties_76","text":"Name Type Required Restrictions Description count integer false none none next string(uri)\u00a6null false none none previous string(uri)\u00a6null false none none results [ ArtifactResponse ] false none [Base serializer for use with :class: pulpcore.app.models.Model This ensures that all Serializers provide values for the 'pulp_href` field. The class provides a default for the ref_name attribute in the ModelSerializers's Meta class. This ensures that the OpenAPI definitions of plugins are namespaced properly.]","title":"Properties"},{"location":"automation-hub/#properties_77","text":"Name Type Required Restrictions Description meta object false none none \u00bb count integer false none none links object false none none \u00bb first string\u00a6null false none none \u00bb previous string\u00a6null false none none \u00bb next string\u00a6null false none none \u00bb last string\u00a6null false none none data [ CollectionResponse ] false none [A serializer for a Collection.]","title":"Properties"},{"location":"automation-hub/#properties_78","text":"Name Type Required Restrictions Description meta object false none none \u00bb count integer false none none links object false none none \u00bb first string\u00a6null false none none \u00bb previous string\u00a6null false none none \u00bb next string\u00a6null false none none \u00bb last string\u00a6null false none none data [ CollectionVersionListResponse ] false none [A serializer for a CollectionVersion list item.]","title":"Properties"},{"location":"automation-hub/#properties_79","text":"Name Type Required Restrictions Description count integer false none none next string(uri)\u00a6null false none none previous string(uri)\u00a6null false none none results [ ContentGuardResponse ] false none [Base serializer for use with :class: pulpcore.app.models.Model This ensures that all Serializers provide values for the 'pulp_href` field. The class provides a default for the ref_name attribute in the ModelSerializers's Meta class. This ensures that the OpenAPI definitions of plugins are namespaced properly.]","title":"Properties"},{"location":"automation-hub/#properties_80","text":"Name Type Required Restrictions Description count integer false none none next string(uri)\u00a6null false none none previous string(uri)\u00a6null false none none results [ ContentRedirectContentGuardResponse ] false none [A serializer for ContentRedirectContentGuard.]","title":"Properties"},{"location":"automation-hub/#properties_81","text":"Name Type Required Restrictions Description meta object false none none \u00bb count integer false none none links object false none none \u00bb first string\u00a6null false none none \u00bb previous string\u00a6null false none none \u00bb next string\u00a6null false none none \u00bb last string\u00a6null false none none data [ DistributionResponse ] false none none","title":"Properties"},{"location":"automation-hub/#properties_82","text":"Name Type Required Restrictions Description count integer false none none next string(uri)\u00a6null false none none previous string(uri)\u00a6null false none none results [ FilesystemExportResponse ] false none [Serializer for FilesystemExports.]","title":"Properties"},{"location":"automation-hub/#properties_83","text":"Name Type Required Restrictions Description count integer false none none next string(uri)\u00a6null false none none previous string(uri)\u00a6null false none none results [ FilesystemExporterResponse ] false none [Serializer for FilesystemExporters.]","title":"Properties"},{"location":"automation-hub/#properties_84","text":"Name Type Required Restrictions Description count integer false none none next string(uri)\u00a6null false none none previous string(uri)\u00a6null false none none results [ GalaxyCollectionResponse ] false none [A serializer for a Collection.]","title":"Properties"},{"location":"automation-hub/#properties_85","text":"Name Type Required Restrictions Description count integer false none none next string(uri)\u00a6null false none none previous string(uri)\u00a6null false none none results [ GalaxyCollectionVersionResponse ] false none [A serializer for a CollectionVersion.]","title":"Properties"},{"location":"automation-hub/#properties_86","text":"Name Type Required Restrictions Description count integer false none none next string(uri)\u00a6null false none none previous string(uri)\u00a6null false none none results [ GalaxyRoleResponse ] false none [A serializer for Galaxy's representation of Roles.]","title":"Properties"},{"location":"automation-hub/#properties_87","text":"Name Type Required Restrictions Description count integer false none none next string(uri)\u00a6null false none none previous string(uri)\u00a6null false none none results [ GalaxyRoleVersionResponse ] false none [A serializer for Galaxy's representation of Role versions.]","title":"Properties"},{"location":"automation-hub/#properties_88","text":"Name Type Required Restrictions Description meta object false none none \u00bb count integer false none none links object false none none \u00bb first string\u00a6null false none none \u00bb previous string\u00a6null false none none \u00bb next string\u00a6null false none none \u00bb last string\u00a6null false none none data [ GroupResponse ] false none [Serializer for Group.]","title":"Properties"},{"location":"automation-hub/#properties_89","text":"Name Type Required Restrictions Description count integer false none none next string(uri)\u00a6null false none none previous string(uri)\u00a6null false none none results [ GroupRoleResponse ] false none [Serializer for GroupRole.]","title":"Properties"},{"location":"automation-hub/#properties_90","text":"Name Type Required Restrictions Description meta object false none none \u00bb count integer false none none links object false none none \u00bb first string\u00a6null false none none \u00bb previous string\u00a6null false none none \u00bb next string\u00a6null false none none \u00bb last string\u00a6null false none none data [ GroupUserResponse ] false none [Serializer for Users that belong to a Group.]","title":"Properties"},{"location":"automation-hub/#properties_91","text":"Name Type Required Restrictions Description count integer false none none next string(uri)\u00a6null false none none previous string(uri)\u00a6null false none none results [ ImportResponse ] false none [Serializer for Imports.]","title":"Properties"},{"location":"automation-hub/#properties_92","text":"Name Type Required Restrictions Description meta object false none none \u00bb count integer false none none links object false none none \u00bb first string\u00a6null false none none \u00bb previous string\u00a6null false none none \u00bb next string\u00a6null false none none \u00bb last string\u00a6null false none none data [ ImportTaskListResponse ] false none [A serializer for a CollectionImport list view.]","title":"Properties"},{"location":"automation-hub/#properties_93","text":"Name Type Required Restrictions Description count integer false none none next string(uri)\u00a6null false none none previous string(uri)\u00a6null false none none results [ MultipleArtifactContentResponse ] false none [Base serializer for use with :class: pulpcore.app.models.Model This ensures that all Serializers provide values for the 'pulp_href` field. The class provides a default for the ref_name attribute in the ModelSerializers's Meta class. This ensures that the OpenAPI definitions of plugins are namespaced properly.]","title":"Properties"},{"location":"automation-hub/#properties_94","text":"Name Type Required Restrictions Description meta object false none none \u00bb count integer false none none links object false none none \u00bb first string\u00a6null false none none \u00bb previous string\u00a6null false none none \u00bb next string\u00a6null false none none \u00bb last string\u00a6null false none none data [ NamespaceSummaryResponse ] false none [NamespaceSerializer but without 'links' or 'resources'. For use in _ui/collection detail views.]","title":"Properties"},{"location":"automation-hub/#properties_95","text":"Name Type Required Restrictions Description count integer false none none next string(uri)\u00a6null false none none previous string(uri)\u00a6null false none none results [ PublicationResponse ] false none [Base serializer for use with :class: pulpcore.app.models.Model This ensures that all Serializers provide values for the 'pulp_href` field. The class provides a default for the ref_name attribute in the ModelSerializers's Meta class. This ensures that the OpenAPI definitions of plugins are namespaced properly.]","title":"Properties"},{"location":"automation-hub/#properties_96","text":"Name Type Required Restrictions Description count integer false none none next string(uri)\u00a6null false none none previous string(uri)\u00a6null false none none results [ PulpExportResponse ] false none [Serializer for PulpExports.]","title":"Properties"},{"location":"automation-hub/#properties_97","text":"Name Type Required Restrictions Description count integer false none none next string(uri)\u00a6null false none none previous string(uri)\u00a6null false none none results [ PulpExporterResponse ] false none [Serializer for pulp exporters.]","title":"Properties"},{"location":"automation-hub/#properties_98","text":"Name Type Required Restrictions Description count integer false none none next string(uri)\u00a6null false none none previous string(uri)\u00a6null false none none results [ PulpImporterResponse ] false none [Serializer for PulpImporters.]","title":"Properties"},{"location":"automation-hub/#properties_99","text":"Name Type Required Restrictions Description count integer false none none next string(uri)\u00a6null false none none previous string(uri)\u00a6null false none none results [ RBACContentGuardResponse ] false none [Base serializer for use with :class: pulpcore.app.models.Model This ensures that all Serializers provide values for the 'pulp_href` field. The class provides a default for the ref_name attribute in the ModelSerializers's Meta class. This ensures that the OpenAPI definitions of plugins are namespaced properly.]","title":"Properties"},{"location":"automation-hub/#properties_100","text":"Name Type Required Restrictions Description count integer false none none next string(uri)\u00a6null false none none previous string(uri)\u00a6null false none none results [ RemoteResponse ] false none [Every remote defined by a plugin should have a Remote serializer that inherits from this class. Please import from pulpcore.plugin.serializers rather than from this module directly.]","title":"Properties"},{"location":"automation-hub/#properties_101","text":"Name Type Required Restrictions Description count integer false none none next string(uri)\u00a6null false none none previous string(uri)\u00a6null false none none results [ RepositoryResponse ] false none none","title":"Properties"},{"location":"automation-hub/#properties_102","text":"Name Type Required Restrictions Description count integer false none none next string(uri)\u00a6null false none none previous string(uri)\u00a6null false none none results [ RepositoryVersionResponse ] false none [Base serializer for use with :class: pulpcore.app.models.Model This ensures that all Serializers provide values for the 'pulp_href` field. The class provides a default for the ref_name attribute in the ModelSerializers's Meta class. This ensures that the OpenAPI definitions of plugins are namespaced properly.]","title":"Properties"},{"location":"automation-hub/#properties_103","text":"Name Type Required Restrictions Description count integer false none none next string(uri)\u00a6null false none none previous string(uri)\u00a6null false none none results [ RoleResponse ] false none [Serializer for Role.]","title":"Properties"},{"location":"automation-hub/#properties_104","text":"Name Type Required Restrictions Description count integer false none none next string(uri)\u00a6null false none none previous string(uri)\u00a6null false none none results [ SigningServiceResponse ] false none [A serializer for the model declaring a signing service.]","title":"Properties"},{"location":"automation-hub/#properties_105","text":"Name Type Required Restrictions Description meta object false none none \u00bb count integer false none none links object false none none \u00bb first string\u00a6null false none none \u00bb previous string\u00a6null false none none \u00bb next string\u00a6null false none none \u00bb last string\u00a6null false none none data [ SyncListResponse ] false none none","title":"Properties"},{"location":"automation-hub/#properties_106","text":"Name Type Required Restrictions Description meta object false none none \u00bb count integer false none none links object false none none \u00bb first string\u00a6null false none none \u00bb previous string\u00a6null false none none \u00bb next string\u00a6null false none none \u00bb last string\u00a6null false none none data [ TagResponse ] false none [A serializer for the Tag model.]","title":"Properties"},{"location":"automation-hub/#properties_107","text":"Name Type Required Restrictions Description count integer false none none next string(uri)\u00a6null false none none previous string(uri)\u00a6null false none none results [ TaskGroupResponse ] false none [Base serializer for use with :class: pulpcore.app.models.Model This ensures that all Serializers provide values for the 'pulp_href` field. The class provides a default for the ref_name attribute in the ModelSerializers's Meta class. This ensures that the OpenAPI definitions of plugins are namespaced properly.]","title":"Properties"},{"location":"automation-hub/#properties_108","text":"Name Type Required Restrictions Description count integer false none none next string(uri)\u00a6null false none none previous string(uri)\u00a6null false none none results [ TaskResponse ] false none none","title":"Properties"},{"location":"automation-hub/#properties_109","text":"Name Type Required Restrictions Description count integer false none none next string(uri)\u00a6null false none none previous string(uri)\u00a6null false none none results [ TaskScheduleResponse ] false none [Base serializer for use with :class: pulpcore.app.models.Model This ensures that all Serializers provide values for the 'pulp_href` field. The class provides a default for the ref_name attribute in the ModelSerializers's Meta class. This ensures that the OpenAPI definitions of plugins are namespaced properly.]","title":"Properties"},{"location":"automation-hub/#properties_110","text":"Name Type Required Restrictions Description meta object false none none \u00bb count integer false none none links object false none none \u00bb first string\u00a6null false none none \u00bb previous string\u00a6null false none none \u00bb next string\u00a6null false none none \u00bb last string\u00a6null false none none data [ TaskSummaryResponse ] false none [TaskSerializer but without detail fields. For use in /tasks/ / detail views.]","title":"Properties"},{"location":"automation-hub/#properties_111","text":"Name Type Required Restrictions Description count integer false none none next string(uri)\u00a6null false none none previous string(uri)\u00a6null false none none results [ UploadResponse ] false none [Serializer for chunked uploads.]","title":"Properties"},{"location":"automation-hub/#properties_112","text":"Name Type Required Restrictions Description meta object false none none \u00bb count integer false none none links object false none none \u00bb first string\u00a6null false none none \u00bb previous string\u00a6null false none none \u00bb next string\u00a6null false none none \u00bb last string\u00a6null false none none data [ UserResponse ] false none none","title":"Properties"},{"location":"automation-hub/#properties_113","text":"Name Type Required Restrictions Description count integer false none none next string(uri)\u00a6null false none none previous string(uri)\u00a6null false none none results [ UserRoleResponse ] false none [Serializer for UserRole.]","title":"Properties"},{"location":"automation-hub/#properties_114","text":"Name Type Required Restrictions Description count integer false none none next string(uri)\u00a6null false none none previous string(uri)\u00a6null false none none results [ WorkerResponse ] false none [Base serializer for use with :class: pulpcore.app.models.Model This ensures that all Serializers provide values for the 'pulp_href` field. The class provides a default for the ref_name attribute in the ModelSerializers's Meta class. This ensures that the OpenAPI definitions of plugins are namespaced properly.]","title":"Properties"},{"location":"automation-hub/#properties_115","text":"Name Type Required Restrictions Description count integer false none none next string(uri)\u00a6null false none none previous string(uri)\u00a6null false none none results [ ansible.AnsibleDistributionResponse ] false none [Serializer for Ansible Distributions.]","title":"Properties"},{"location":"automation-hub/#properties_116","text":"Name Type Required Restrictions Description count integer false none none next string(uri)\u00a6null false none none previous string(uri)\u00a6null false none none results [ ansible.AnsibleRepositoryResponse ] false none [Serializer for Ansible Repositories.]","title":"Properties"},{"location":"automation-hub/#properties_117","text":"Name Type Required Restrictions Description meta object false none none \u00bb count integer false none none links object false none none \u00bb first string\u00a6null false none none \u00bb previous string\u00a6null false none none \u00bb next string\u00a6null false none none \u00bb last string\u00a6null false none none data [ ansible.CollectionRemoteResponse ] false none [A serializer for Collection Remotes.]","title":"Properties"},{"location":"automation-hub/#properties_118","text":"Name Type Required Restrictions Description count integer false none none next string(uri)\u00a6null false none none previous string(uri)\u00a6null false none none results [ ansible.CollectionResponse ] false none [A serializer for Ansible Collections.]","title":"Properties"},{"location":"automation-hub/#properties_119","text":"Name Type Required Restrictions Description count integer false none none next string(uri)\u00a6null false none none previous string(uri)\u00a6null false none none results [ ansible.CollectionVersionResponse ] false none [A serializer for CollectionVersion Content.]","title":"Properties"},{"location":"automation-hub/#properties_120","text":"Name Type Required Restrictions Description count integer false none none next string(uri)\u00a6null false none none previous string(uri)\u00a6null false none none results [ ansible.CollectionVersionSignatureResponse ] false none [A serializer for signature models.]","title":"Properties"},{"location":"automation-hub/#properties_121","text":"Name Type Required Restrictions Description count integer false none none next string(uri)\u00a6null false none none previous string(uri)\u00a6null false none none results [ ansible.GitRemoteResponse ] false none [A serializer for Git Collection Remotes.]","title":"Properties"},{"location":"automation-hub/#properties_122","text":"Name Type Required Restrictions Description count integer false none none next string(uri)\u00a6null false none none previous string(uri)\u00a6null false none none results [ ansible.RoleRemoteResponse ] false none [A serializer for Ansible Remotes.]","title":"Properties"},{"location":"automation-hub/#properties_123","text":"Name Type Required Restrictions Description count integer false none none next string(uri)\u00a6null false none none previous string(uri)\u00a6null false none none results [ ansible.RoleResponse ] false none [A serializer for Role versions.]","title":"Properties"},{"location":"automation-hub/#properties_124","text":"Name Type Required Restrictions Description count integer false none none next string(uri)\u00a6null false none none previous string(uri)\u00a6null false none none results [ container.BlobResponse ] false none [Serializer for Blobs.]","title":"Properties"},{"location":"automation-hub/#properties_125","text":"Name Type Required Restrictions Description count integer false none none next string(uri)\u00a6null false none none previous string(uri)\u00a6null false none none results [ container.ContainerDistributionResponse ] false none [A serializer for ContainerDistribution.]","title":"Properties"},{"location":"automation-hub/#properties_126","text":"Name Type Required Restrictions Description count integer false none none next string(uri)\u00a6null false none none previous string(uri)\u00a6null false none none results [ container.ContainerNamespaceResponse ] false none [Serializer for ContainerNamespaces.]","title":"Properties"},{"location":"automation-hub/#properties_127","text":"Name Type Required Restrictions Description count integer false none none next string(uri)\u00a6null false none none previous string(uri)\u00a6null false none none results [ container.ContainerPushRepositoryResponse ] false none [Serializer for Container Push Repositories.]","title":"Properties"},{"location":"automation-hub/#properties_128","text":"Name Type Required Restrictions Description count integer false none none next string(uri)\u00a6null false none none previous string(uri)\u00a6null false none none results [ container.ContainerRemoteResponse ] false none [A Serializer for ContainerRemote.]","title":"Properties"},{"location":"automation-hub/#properties_129","text":"Name Type Required Restrictions Description count integer false none none next string(uri)\u00a6null false none none previous string(uri)\u00a6null false none none results [ container.ContainerRepositoryResponse ] false none [Serializer for Container Repositories.]","title":"Properties"},{"location":"automation-hub/#properties_130","text":"Name Type Required Restrictions Description count integer false none none next string(uri)\u00a6null false none none previous string(uri)\u00a6null false none none results [ container.ManifestResponse ] false none [Serializer for Manifests.]","title":"Properties"},{"location":"automation-hub/#properties_131","text":"Name Type Required Restrictions Description count integer false none none next string(uri)\u00a6null false none none previous string(uri)\u00a6null false none none results [ container.ManifestSignatureResponse ] false none [Serializer for image manifest signatures.]","title":"Properties"},{"location":"automation-hub/#properties_132","text":"Name Type Required Restrictions Description count integer false none none next string(uri)\u00a6null false none none previous string(uri)\u00a6null false none none results [ container.TagResponse ] false none [Serializer for Tags.]","title":"Properties"},{"location":"automation-hub/#properties_133","text":"Name Type Required Restrictions Description meta object false none none \u00bb count integer false none none links object false none none \u00bb first string\u00a6null false none none \u00bb previous string\u00a6null false none none \u00bb next string\u00a6null false none none \u00bb last string\u00a6null false none none data [ galaxy.LoginResponse ] false none none","title":"Properties"},{"location":"automation-hub/#properties_134","text":"Name Type Required Restrictions Description permissions_assignment [object] false none List of callables that define the new permissions to be created for new objects.This is deprecated. Use creation_hooks instead. creation_hooks [object] false none List of callables that may associate user roles for new objects. statements [object] false none List of policy statements defining the policy. queryset_scoping object false none A callable for performing queryset scoping. See plugin documentation for valid callables. Set to blank to turn off queryset scoping.","title":"Properties"},{"location":"automation-hub/#properties_135","text":"None","title":"Properties"},{"location":"automation-hub/#properties_136","text":"Name Type Required Restrictions Description name string false none The unique name. description string\u00a6null false none An optional description.","title":"Properties"},{"location":"automation-hub/#properties_137","text":"Name Type Required Restrictions Description name string false none Unique name of the file system exporter. path string false none File system location to export to. method MethodEnum false none Method of exporting","title":"Properties"},{"location":"automation-hub/#properties_138","text":"Name Type Required Restrictions Description name string false none Name","title":"Properties"},{"location":"automation-hub/#properties_139","text":"Name Type Required Restrictions Description name string false none none company string false none none email string false none none avatar_url string(uri) false none none description string false none none links [ NamespaceLink ] false none none groups string false none none resources string false none none","title":"Properties"},{"location":"automation-hub/#properties_140","text":"Name Type Required Restrictions Description name string false none Unique name of the file system exporter. path string false none File system directory to store exported tar.gzs. repositories [string] false none none last_export string(uri)\u00a6null false none Last attempted export for this PulpExporter","title":"Properties"},{"location":"automation-hub/#properties_141","text":"Name Type Required Restrictions Description name string false none Unique name of the Importer. repo_mapping object false none Mapping of repo names in an export file to the repo names in Pulp. For example, if the export has a repo named 'foo' and the repo to import content into was 'bar', the mapping would be \"{'foo': 'bar'}\". \u00bb additionalProperties string false none none","title":"Properties"},{"location":"automation-hub/#properties_142","text":"Name Type Required Restrictions Description name string false none The unique name. description string\u00a6null false none An optional description.","title":"Properties"},{"location":"automation-hub/#properties_143","text":"Name Type Required Restrictions Description name string false none The name of this role. description string\u00a6null false none An optional description. permissions [string] false none List of permissions defining the role.","title":"Properties"},{"location":"automation-hub/#properties_144","text":"Name Type Required Restrictions Description name string false none none policy Policy8baEnum false none none upstream_repository string(uuid)\u00a6null false none none distribution string(uuid)\u00a6null false none none collections [ SyncListCollectionSummary ] false none none namespaces [string] false none none groups string false none none","title":"Properties"},{"location":"automation-hub/#properties_145","text":"Name Type Required Restrictions Description state string false none The desired state of the task. Only 'canceled' is accepted.","title":"Properties"},{"location":"automation-hub/#properties_146","text":"Name Type Required Restrictions Description username string false none Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only. first_name string false none none last_name string false none none email string(email) false none none groups [integer] false none The groups this user belongs to. A user will get all permissions granted to each of their groups. password string false write-only none is_superuser boolean false none Designates that this user has all permissions without explicitly assigning them.","title":"Properties"},{"location":"automation-hub/#properties_147","text":"Name Type Required Restrictions Description base_path string false none The base (relative) path component of the published url. Avoid paths that overlap with other distribution base paths (e.g. \"foo\" and \"foo/bar\") content_guard string(uri)\u00a6null false none An optional content-guard. name string false none A unique name. Ex, rawhide and stable . repository string(uri)\u00a6null false none The latest RepositoryVersion for this Repository will be served. repository_version string(uri)\u00a6null false none RepositoryVersion to be served pulp_labels object false none none","title":"Properties"},{"location":"automation-hub/#properties_148","text":"Name Type Required Restrictions Description pulp_labels object false none none name string false none A unique name for this repository. description string\u00a6null false none An optional description. retain_repo_versions integer\u00a6null false none Retain X versions of the repository. Default is null which retains all versions. This is provided as a tech preview in Pulp 3 and may change in the future. remote string(uri)\u00a6null false none An optional remote to use by default when syncing. last_synced_metadata_time string(date-time)\u00a6null false none Last synced metadata time. gpgkey string\u00a6null false none Gpg public key to verify collection signatures against","title":"Properties"},{"location":"automation-hub/#properties_149","text":"Name Type Required Restrictions Description url string false none The URL of an external content source. auth_url string\u00a6null false none The URL to receive a session token from, e.g. used with Automation Hub. token string\u00a6null false write-only none policy PolicyDb6Enum false none The policy to use when downloading content. requirements_file string\u00a6null false none The string version of Collection requirements yaml. created_at string(date-time) false none none updated_at string(date-time) false none none username string\u00a6null false none Remote user. password string\u00a6null false write-only Remote password. tls_validation boolean false none If True, TLS peer validation must be performed. client_key string\u00a6null false write-only A PEM encoded private key used for authentication. client_cert string\u00a6null false none A PEM encoded client certificate used for authentication. ca_cert string\u00a6null false none A PEM encoded CA certificate used to validate the server certificate presented by the remote server. download_concurrency integer\u00a6null false none Total number of simultaneous connections. If not set then the default value will be used. proxy_url string\u00a6null false none The proxy URL. Format: scheme://host:port proxy_username string\u00a6null false none User for proxy authentication. proxy_password string\u00a6null false write-only Password for proxy authentication. rate_limit integer\u00a6null false none Limits requests per second for each concurrent downloader signed_only boolean false none Sync only collections that have a signature","title":"Properties"},{"location":"automation-hub/#properties_150","text":"Name Type Required Restrictions Description max_retries integer\u00a6null false none Maximum number of retry attempts after a download failure. If not set then the default value (3) will be used. client_cert string\u00a6null false none A PEM encoded client certificate used for authentication. rate_limit integer\u00a6null false none Limits requests per second for each concurrent downloader headers [object] false none Headers for aiohttp.Clientsession proxy_password string\u00a6null false write-only The password to authenticate to the proxy. Extra leading and trailing whitespace characters are not trimmed. connect_timeout number(double)\u00a6null false none aiohttp.ClientTimeout.connect (q.v.) for download-connections. The default is null, which will cause the default from the aiohttp library to be used. client_key string\u00a6null false write-only A PEM encoded private key used for authentication. url string false none The URL of an external content source. proxy_username string\u00a6null false write-only The username to authenticte to the proxy. username string\u00a6null false write-only The username to be used for authentication when syncing. download_concurrency integer\u00a6null false none Total number of simultaneous connections. If not set then the default value will be used. tls_validation boolean false none If True, TLS peer validation must be performed. pulp_labels object false none none password string\u00a6null false write-only The password to be used for authentication when syncing. Extra leading and trailing whitespace characters are not trimmed. sock_read_timeout number(double)\u00a6null false none aiohttp.ClientTimeout.sock_read (q.v.) for download-connections. The default is null, which will cause the default from the aiohttp library to be used. proxy_url string\u00a6null false none The proxy URL. Format: scheme://host:port ca_cert string\u00a6null false none A PEM encoded CA certificate used to validate the server certificate presented by the remote server. total_timeout number(double)\u00a6null false none aiohttp.ClientTimeout.total (q.v.) for download-connections. The default is null, which will cause the default from the aiohttp library to be used. sock_connect_timeout number(double)\u00a6null false none aiohttp.ClientTimeout.sock_connect (q.v.) for download-connections. The default is null, which will cause the default from the aiohttp library to be used. name string false none A unique name for this remote. metadata_only boolean false none If True, only metadata about the content will be stored in Pulp. Clients will retrieve content from the remote URL. git_ref string false none A git ref. e.g.: branch, tag, or commit sha.","title":"Properties"},{"location":"automation-hub/#properties_151","text":"Name Type Required Restrictions Description name string false none A unique name for this remote. url string false none The URL of an external content source. ca_cert string\u00a6null false none A PEM encoded CA certificate used to validate the server certificate presented by the remote server. client_cert string\u00a6null false none A PEM encoded client certificate used for authentication. client_key string\u00a6null false write-only A PEM encoded private key used for authentication. tls_validation boolean false none If True, TLS peer validation must be performed. proxy_url string\u00a6null false none The proxy URL. Format: scheme://host:port proxy_username string\u00a6null false write-only The username to authenticte to the proxy. proxy_password string\u00a6null false write-only The password to authenticate to the proxy. Extra leading and trailing whitespace characters are not trimmed. username string\u00a6null false write-only The username to be used for authentication when syncing. password string\u00a6null false write-only The password to be used for authentication when syncing. Extra leading and trailing whitespace characters are not trimmed. pulp_labels object false none none download_concurrency integer\u00a6null false none Total number of simultaneous connections. If not set then the default value will be used. max_retries integer\u00a6null false none Maximum number of retry attempts after a download failure. If not set then the default value (3) will be used. policy PolicyDb6Enum false none The policy to use when downloading content. total_timeout number(double)\u00a6null false none aiohttp.ClientTimeout.total (q.v.) for download-connections. The default is null, which will cause the default from the aiohttp library to be used. connect_timeout number(double)\u00a6null false none aiohttp.ClientTimeout.connect (q.v.) for download-connections. The default is null, which will cause the default from the aiohttp library to be used. sock_connect_timeout number(double)\u00a6null false none aiohttp.ClientTimeout.sock_connect (q.v.) for download-connections. The default is null, which will cause the default from the aiohttp library to be used. sock_read_timeout number(double)\u00a6null false none aiohttp.ClientTimeout.sock_read (q.v.) for download-connections. The default is null, which will cause the default from the aiohttp library to be used. headers [object] false none Headers for aiohttp.Clientsession rate_limit integer\u00a6null false none Limits requests per second for each concurrent downloader","title":"Properties"},{"location":"automation-hub/#properties_152","text":"Name Type Required Restrictions Description content_guard string(uri) false none An optional content-guard. If none is specified, a default one will be used. pulp_labels object false none none base_path string false none The base (relative) path component of the published url. Avoid paths that overlap with other distribution base paths (e.g. \"foo\" and \"foo/bar\") repository string(uri)\u00a6null false none The latest RepositoryVersion for this Repository will be served. name string false none A unique name. Ex, rawhide and stable . repository_version string(uri)\u00a6null false none RepositoryVersion to be served private boolean false none Restrict pull access to explicitly authorized users. Defaults to unrestricted pull access. description string\u00a6null false none An optional description.","title":"Properties"},{"location":"automation-hub/#properties_153","text":"Name Type Required Restrictions Description pulp_labels object false none none manifest_signing_service string(uri)\u00a6null false none A reference to an associated signing service. description string\u00a6null false none An optional description. retain_repo_versions integer\u00a6null false none Retain X versions of the repository. Default is null which retains all versions. This is provided as a tech preview in Pulp 3 and may change in the future. name string false none A unique name for this repository.","title":"Properties"},{"location":"automation-hub/#properties_154","text":"Name Type Required Restrictions Description name string false none A unique name for this remote. url string false none The URL of an external content source. ca_cert string\u00a6null false none A PEM encoded CA certificate used to validate the server certificate presented by the remote server. client_cert string\u00a6null false none A PEM encoded client certificate used for authentication. client_key string\u00a6null false write-only A PEM encoded private key used for authentication. tls_validation boolean false none If True, TLS peer validation must be performed. proxy_url string\u00a6null false none The proxy URL. Format: scheme://host:port proxy_username string\u00a6null false write-only The username to authenticte to the proxy. proxy_password string\u00a6null false write-only The password to authenticate to the proxy. Extra leading and trailing whitespace characters are not trimmed. username string\u00a6null false write-only The username to be used for authentication when syncing. password string\u00a6null false write-only The password to be used for authentication when syncing. Extra leading and trailing whitespace characters are not trimmed. pulp_labels object false none none download_concurrency integer\u00a6null false none Total number of simultaneous connections. If not set then the default value will be used. max_retries integer\u00a6null false none Maximum number of retry attempts after a download failure. If not set then the default value (3) will be used. policy Policy762Enum false none immediate - All manifests and blobs are downloaded and saved during a sync. on_demand - Only tags and manifests are downloaded. Blobs are not downloaded until they are requested for the first time by a client. streamed - Blobs are streamed to the client with every request and never saved. total_timeout number(double)\u00a6null false none aiohttp.ClientTimeout.total (q.v.) for download-connections. The default is null, which will cause the default from the aiohttp library to be used. connect_timeout number(double)\u00a6null false none aiohttp.ClientTimeout.connect (q.v.) for download-connections. The default is null, which will cause the default from the aiohttp library to be used. sock_connect_timeout number(double)\u00a6null false none aiohttp.ClientTimeout.sock_connect (q.v.) for download-connections. The default is null, which will cause the default from the aiohttp library to be used. sock_read_timeout number(double)\u00a6null false none aiohttp.ClientTimeout.sock_read (q.v.) for download-connections. The default is null, which will cause the default from the aiohttp library to be used. headers [object] false none Headers for aiohttp.Clientsession rate_limit integer\u00a6null false none Limits requests per second for each concurrent downloader upstream_name string false none Name of the upstream repository include_tags [string]\u00a6null false none A list of tags to include during sync. Wildcards *, ? are recognized. 'include_tags' is evaluated before 'exclude_tags'. exclude_tags [string]\u00a6null false none A list of tags to exclude during sync. Wildcards *, ? are recognized. 'exclude_tags' is evaluated after 'include_tags'. sigstore string(uri) false none A URL to a sigstore to download image signatures from","title":"Properties"},{"location":"automation-hub/#properties_155","text":"Name Type Required Restrictions Description pulp_labels object false none none name string false none A unique name for this repository. description string\u00a6null false none An optional description. retain_repo_versions integer\u00a6null false none Retain X versions of the repository. Default is null which retains all versions. This is provided as a tech preview in Pulp 3 and may change in the future. remote string(uri)\u00a6null false none An optional remote to use by default when syncing. manifest_signing_service string(uri)\u00a6null false none A reference to an associated signing service.","title":"Properties"},{"location":"automation-hub/#properties_156","text":"Name Type Required Restrictions Description anonymous string false none none","title":"Properties"},{"location":"automation-hub/#enumerated-values_85","text":"Property Value anonymous immediate anonymous on_demand anonymous streamed","title":"Enumerated Values"},{"location":"automation-hub/#properties_157","text":"Name Type Required Restrictions Description anonymous string false none none","title":"Properties"},{"location":"automation-hub/#enumerated-values_86","text":"Property Value anonymous exclude anonymous include","title":"Enumerated Values"},{"location":"automation-hub/#properties_158","text":"Name Type Required Restrictions Description anonymous string false none none","title":"Properties"},{"location":"automation-hub/#enumerated-values_87","text":"Property Value anonymous immediate anonymous When syncing, download all metadata and content now.","title":"Enumerated Values"},{"location":"automation-hub/#properties_159","text":"Name Type Required Restrictions Description message string false read-only The message shown to the user for the progress report. code string false read-only Identifies the type of progress report'. state string false read-only The current state of the progress report. The possible values are: 'waiting', 'skipped', 'running', 'completed', 'failed', 'canceled' and 'canceling'. The default is 'waiting'. total integer false read-only The total count of items. done integer false read-only The count of items already processed. Defaults to 0. suffix string\u00a6null false read-only The suffix to be shown with the progress report.","title":"Properties"},{"location":"automation-hub/#properties_160","text":"Name Type Required Restrictions Description pulp_href string(uri) false read-only none pulp_created string(date-time) false read-only Timestamp of creation. repository_version string(uri) false none none repository string(uri) false none A URI of the repository to be published.","title":"Properties"},{"location":"automation-hub/#properties_161","text":"Name Type Required Restrictions Description task string(uri)\u00a6null false none A URI of the task that ran the Export. full boolean false write-only Do a Full (true) or Incremental (false) export. dry_run boolean false write-only Generate report on what would be exported and disk-space required. versions [string] false write-only List of explicit repo-version hrefs to export (replaces current_version). chunk_size string false write-only Chunk export-tarfile into pieces of chunk_size bytes. Recognizes units of B/KB/MB/GB/TB. A chunk has a maximum size of 1TB. start_versions [string] false write-only List of explicit last-exported-repo-version hrefs (replaces last_export).","title":"Properties"},{"location":"automation-hub/#properties_162","text":"Name Type Required Restrictions Description pulp_href string(uri) false read-only none pulp_created string(date-time) false read-only Timestamp of creation. task string(uri)\u00a6null false none A URI of the task that ran the Export. exported_resources [string] false read-only Resources that were exported. params object false read-only Any additional parameters that were used to create the export. output_file_info object false read-only Dictionary of filename: sha256hash entries for export-output-file(s) toc_info object false read-only Filename and sha256-checksum of table-of-contents for this export","title":"Properties"},{"location":"automation-hub/#properties_163","text":"Name Type Required Restrictions Description name string true none Unique name of the file system exporter. path string true none File system directory to store exported tar.gzs. repositories [string] true none none last_export string(uri)\u00a6null false none Last attempted export for this PulpExporter","title":"Properties"},{"location":"automation-hub/#properties_164","text":"Name Type Required Restrictions Description pulp_href string(uri) false read-only none pulp_created string(date-time) false read-only Timestamp of creation. name string true none Unique name of the file system exporter. path string true none File system directory to store exported tar.gzs. repositories [string] true none none last_export string(uri)\u00a6null false none Last attempted export for this PulpExporter","title":"Properties"},{"location":"automation-hub/#properties_165","text":"Name Type Required Restrictions Description path string false none Path to export that will be imported. toc string false none Path to a table-of-contents file describing chunks to be validated, reassembled, and imported. create_repositories boolean false none If True, missing repositories will be automatically created during the import.","title":"Properties"},{"location":"automation-hub/#properties_166","text":"Name Type Required Restrictions Description path string false none Path to export-tar-gz that will be imported. toc string false none Path to a table-of-contents file describing chunks to be validated, reassembled, and imported. repo_mapping string false none Mapping of repo names in an export file to the repo names in Pulp. For example, if the export has a repo named 'foo' and the repo to import content into was 'bar', the mapping would be \"{'foo': 'bar'}\".","title":"Properties"},{"location":"automation-hub/#properties_167","text":"Name Type Required Restrictions Description toc EvaluationResponse false none Evaluation of proposed 'toc' file for PulpImport path EvaluationResponse false none Evaluation of proposed 'path' file for PulpImport repo_mapping EvaluationResponse false none Evaluation of proposed 'repo_mapping' file for PulpImport","title":"Properties"},{"location":"automation-hub/#properties_168","text":"Name Type Required Restrictions Description name string true none Unique name of the Importer. repo_mapping object false none Mapping of repo names in an export file to the repo names in Pulp. For example, if the export has a repo named 'foo' and the repo to import content into was 'bar', the mapping would be \"{'foo': 'bar'}\". \u00bb additionalProperties string false none none","title":"Properties"},{"location":"automation-hub/#properties_169","text":"Name Type Required Restrictions Description pulp_href string(uri) false read-only none pulp_created string(date-time) false read-only Timestamp of creation. name string true none Unique name of the Importer. repo_mapping object false none Mapping of repo names in an export file to the repo names in Pulp. For example, if the export has a repo named 'foo' and the repo to import content into was 'bar', the mapping would be \"{'foo': 'bar'}\". \u00bb additionalProperties string false none none","title":"Properties"},{"location":"automation-hub/#properties_170","text":"Name Type Required Restrictions Description finished_before string(date-time) false none Purge tasks completed earlier than this timestamp. Format '%Y-%m-%d[T%H:%M:%S]' states [ StatesEnum ] false none List of task-states to be purged. Only 'final' states are allowed.","title":"Properties"},{"location":"automation-hub/#properties_171","text":"Name Type Required Restrictions Description name string true none The unique name. description string\u00a6null false none An optional description.","title":"Properties"},{"location":"automation-hub/#properties_172","text":"Name Type Required Restrictions Description pulp_href string(uri) false read-only none pulp_created string(date-time) false read-only Timestamp of creation. name string true none The unique name. description string\u00a6null false none An optional description. users [ GroupUserResponse ] false read-only [Serializer for Users that belong to a Group.] groups [ GroupResponse ] false read-only [Serializer for Group.]","title":"Properties"},{"location":"automation-hub/#properties_173","text":"Name Type Required Restrictions Description repo_hrefs [any] true none Will reclaim space for the specified list of repos. Use ['*'] to specify all repos. repo_versions_keeplist [string] false none Will exclude repo versions from space reclaim.","title":"Properties"},{"location":"automation-hub/#properties_174","text":"Name Type Required Restrictions Description content_units [any] false none A list of content units to operate on.","title":"Properties"},{"location":"automation-hub/#properties_175","text":"Name Type Required Restrictions Description connected boolean true none Info about whether the app can connect to Redis","title":"Properties"},{"location":"automation-hub/#properties_176","text":"Name Type Required Restrictions Description pulp_href string(uri) false read-only none pulp_created string(date-time) false read-only Timestamp of creation. name string true none A unique name for this remote. url string true none The URL of an external content source. ca_cert string\u00a6null false none A PEM encoded CA certificate used to validate the server certificate presented by the remote server. client_cert string\u00a6null false none A PEM encoded client certificate used for authentication. tls_validation boolean false none If True, TLS peer validation must be performed. proxy_url string\u00a6null false none The proxy URL. Format: scheme://host:port pulp_labels object false none none pulp_last_updated string(date-time) false read-only Timestamp of the most recent update of the remote. download_concurrency integer\u00a6null false none Total number of simultaneous connections. If not set then the default value will be used. max_retries integer\u00a6null false none Maximum number of retry attempts after a download failure. If not set then the default value (3) will be used. policy PolicyDb6Enum false none The policy to use when downloading content. total_timeout number(double)\u00a6null false none aiohttp.ClientTimeout.total (q.v.) for download-connections. The default is null, which will cause the default from the aiohttp library to be used. connect_timeout number(double)\u00a6null false none aiohttp.ClientTimeout.connect (q.v.) for download-connections. The default is null, which will cause the default from the aiohttp library to be used. sock_connect_timeout number(double)\u00a6null false none aiohttp.ClientTimeout.sock_connect (q.v.) for download-connections. The default is null, which will cause the default from the aiohttp library to be used. sock_read_timeout number(double)\u00a6null false none aiohttp.ClientTimeout.sock_read (q.v.) for download-connections. The default is null, which will cause the default from the aiohttp library to be used. headers [object] false none Headers for aiohttp.Clientsession rate_limit integer\u00a6null false none Limits requests per second for each concurrent downloader","title":"Properties"},{"location":"automation-hub/#properties_177","text":"Name Type Required Restrictions Description digest string true none sha256 of the Manifest file","title":"Properties"},{"location":"automation-hub/#properties_178","text":"Name Type Required Restrictions Description signed_with_key_id string true none key_id of the key the signatures were produced with","title":"Properties"},{"location":"automation-hub/#properties_179","text":"Name Type Required Restrictions Description signed_with_key_id string true none key_id of the key the signatures were produced with","title":"Properties"},{"location":"automation-hub/#properties_180","text":"Name Type Required Restrictions Description verify_checksums boolean false none Will verify that the checksum of all stored files matches what saved in the database. Otherwise only the existence of the files will be checked. Enabled by default","title":"Properties"},{"location":"automation-hub/#properties_181","text":"Name Type Required Restrictions Description published string(date-time) true none none","title":"Properties"},{"location":"automation-hub/#properties_182","text":"Name Type Required Restrictions Description add_content_units [any] false none A list of content units to add to a new repository version. This content is added after remove_content_units are removed. remove_content_units [any] false none A list of content units to remove from the latest repository version. You may also specify '*' as an entry to remove all content. This content is removed before add_content_units are added. base_version string(uri) false none A repository version whose content will be used as the initial set of content for the new repository version","title":"Properties"},{"location":"automation-hub/#properties_183","text":"Name Type Required Restrictions Description name string true none none description string\u00a6null false none none pulp_id string(uuid) false read-only none pulp_last_updated string(date-time) false read-only none content_count integer false read-only none gpgkey string true none none","title":"Properties"},{"location":"automation-hub/#properties_184","text":"Name Type Required Restrictions Description manifest_signing_service string(uri)\u00a6null false none A signing service to sign with. This will override a signing service set on the repo. future_base_path string false none Future base path content will be distributed at for sync repos tags_list [any] false none A list of tags to sign.","title":"Properties"},{"location":"automation-hub/#properties_185","text":"Name Type Required Restrictions Description pulp_href string(uri) false read-only none pulp_created string(date-time) false read-only Timestamp of creation. number integer false read-only none repository string(uri) false read-only none base_version string(uri) false none A repository version whose content was used as the initial set of content for this repository version content_summary ContentSummaryResponse false read-only Various count summaries of the content in the version and the HREF to view them.","title":"Properties"},{"location":"automation-hub/#properties_186","text":"Name Type Required Restrictions Description name string true none The name of this role. description string\u00a6null false none An optional description. permissions [string] true none List of permissions defining the role.","title":"Properties"},{"location":"automation-hub/#properties_187","text":"Name Type Required Restrictions Description pulp_href string(uri) false read-only none pulp_created string(date-time) false read-only Timestamp of creation. name string true none The name of this role. description string\u00a6null false none An optional description. permissions [string] true none List of permissions defining the role. locked boolean false read-only True if the role is system managed.","title":"Properties"},{"location":"automation-hub/#properties_188","text":"Name Type Required Restrictions Description pulp_href string(uri) false read-only none pulp_created string(date-time) false read-only Timestamp of creation. name string true none A unique name used to recognize a script. public_key string true none The value of a public key used for the repository verification. pubkey_fingerprint string true none The fingerprint of the public key. script string true none An absolute path to a script which is going to be used for the signing.","title":"Properties"},{"location":"automation-hub/#properties_189","text":"Name Type Required Restrictions Description anonymous string false none none","title":"Properties"},{"location":"automation-hub/#enumerated-values_88","text":"Property Value anonymous skipped anonymous completed anonymous failed anonymous canceled","title":"Enumerated Values"},{"location":"automation-hub/#properties_190","text":"Name Type Required Restrictions Description versions [ VersionResponse ] true none Version information of Pulp components online_workers [ WorkerResponse ] true none List of online workers known to the application. An online worker is actively heartbeating and can respond to new work online_content_apps [ ContentAppStatusResponse ] true none List of online content apps known to the application. An online content app is actively heartbeating and can serve data to clients database_connection DatabaseConnectionResponse true none Database connection information redis_connection RedisConnectionResponse false none Redis connection information storage StorageResponse false none Storage information","title":"Properties"},{"location":"automation-hub/#properties_191","text":"Name Type Required Restrictions Description total integer true none Total number of bytes used integer true none Number of bytes in use free integer true none Number of free bytes","title":"Properties"},{"location":"automation-hub/#properties_192","text":"Name Type Required Restrictions Description name string true none none policy Policy8baEnum false none none upstream_repository string(uuid)\u00a6null false none none distribution string(uuid)\u00a6null false none none collections [ SyncListCollectionSummary ] true none none namespaces [string] true none none groups string true none none","title":"Properties"},{"location":"automation-hub/#properties_193","text":"Name Type Required Restrictions Description namespace string true none none name string true none none","title":"Properties"},{"location":"automation-hub/#properties_194","text":"Name Type Required Restrictions Description namespace string true none none name string true none none","title":"Properties"},{"location":"automation-hub/#properties_195","text":"Name Type Required Restrictions Description id integer false read-only none name string true none none policy Policy8baEnum false none none upstream_repository string(uuid)\u00a6null false none none repository string(uuid)\u00a6null false read-only none distribution string(uuid)\u00a6null false none none collections [ SyncListCollectionSummaryResponse ] true none none namespaces [string] true none none groups string true none none","title":"Properties"},{"location":"automation-hub/#properties_196","text":"Name Type Required Restrictions Description source_repository string(uri) false none A URI of the repository to copy content from. source_repository_version string(uri) false none A URI of the repository version to copy content from. names [any] false none A list of tag names to copy.","title":"Properties"},{"location":"automation-hub/#properties_197","text":"Name Type Required Restrictions Description tag string true none A tag name digest string true none sha256 of the Manifest file","title":"Properties"},{"location":"automation-hub/#properties_198","text":"Name Type Required Restrictions Description name string false read-only none","title":"Properties"},{"location":"automation-hub/#properties_199","text":"Name Type Required Restrictions Description task_group string(uri) true none The href of the task group.","title":"Properties"},{"location":"automation-hub/#properties_200","text":"Name Type Required Restrictions Description pulp_href string(uri) false read-only none description string true none A description of the task group. all_tasks_dispatched boolean true none Whether all tasks have been spawned for this task group. waiting integer false read-only Number of tasks in the 'waiting' state skipped integer false read-only Number of tasks in the 'skipped' state running integer false read-only Number of tasks in the 'running' state completed integer false read-only Number of tasks in the 'completed' state canceled integer false read-only Number of tasks in the 'canceled' state failed integer false read-only Number of tasks in the 'failed' state canceling integer false read-only Number of tasks in the 'canceling' state group_progress_reports [ GroupProgressReportResponse ] false read-only [Base serializer for use with :class: pulpcore.app.models.Model This ensures that all Serializers provide values for the 'pulp_href` field. The class provides a default for the ref_name attribute in the ModelSerializers's Meta class. This ensures that the OpenAPI definitions of plugins are namespaced properly.] tasks [ MinimalTaskResponse ] false read-only [Base serializer for use with :class: pulpcore.app.models.Model This ensures that all Serializers provide values for the 'pulp_href` field. The class provides a default for the ref_name attribute in the ModelSerializers's Meta class. This ensures that the OpenAPI definitions of plugins are namespaced properly.]","title":"Properties"},{"location":"automation-hub/#properties_201","text":"Name Type Required Restrictions Description pulp_id string(uuid) true none none name string true none none created_at string(date-time) true none none updated_at string(date-time) true none none finished_at string(date-time) true none none started_at string(date-time) true none none state string true none none error object\u00a6null false none none worker object\u00a6null false read-only none parent_task string(uuid)\u00a6null false none none child_tasks [string] true none none progress_reports [ ProgressReportResponse ] false read-only [Base serializer for use with :class: pulpcore.app.models.Model This ensures that all Serializers provide values for the 'pulp_href` field. The class provides a default for the ref_name attribute in the ModelSerializers's Meta class. This ensures that the OpenAPI definitions of plugins are namespaced properly.]","title":"Properties"},{"location":"automation-hub/#properties_202","text":"Name Type Required Restrictions Description pulp_href string(uri) false read-only none pulp_created string(date-time) false read-only Timestamp of creation. name string true none The name of the task schedule. task_name string true none The name of the task to be scheduled. dispatch_interval string true none Periodicity of the schedule. next_dispatch string(date-time) false read-only Timestamp of the next time the task will be dispatched. last_task string(uri) false read-only The last task dispatched by this schedule.","title":"Properties"},{"location":"automation-hub/#properties_203","text":"Name Type Required Restrictions Description pulp_id string(uuid) true none none name string true none none state string true none none started_at string(date-time) true none none finished_at string(date-time) true none none href string false read-only none","title":"Properties"},{"location":"automation-hub/#properties_204","text":"Name Type Required Restrictions Description tag string true none A tag name","title":"Properties"},{"location":"automation-hub/#properties_205","text":"Name Type Required Restrictions Description version string false read-only none href string false read-only none created_at string(date-time) true none none updated_at string(date-time) true none none requires_ansible string\u00a6null false none none artifact ArtifactRefResponse false read-only A serializer for an Artifact reference. collection CollectionRefResponse false read-only A serializer for a Collection reference. download_url string false read-only none name string false read-only none namespace CollectionNamespaceResponse false read-only A serializer for a Collection Version namespace field. signatures string false read-only none metadata CollectionMetadataResponse false read-only A serializer for a CollectionVersion metadata. git_url string false read-only none git_commit_sha string false read-only none","title":"Properties"},{"location":"automation-hub/#properties_206","text":"Name Type Required Restrictions Description size integer true none The size of the upload in bytes.","title":"Properties"},{"location":"automation-hub/#properties_207","text":"Name Type Required Restrictions Description file string(binary) true write-only A chunk of the uploaded file. sha256 string\u00a6null false write-only The SHA-256 checksum of the chunk if available.","title":"Properties"},{"location":"automation-hub/#properties_208","text":"Name Type Required Restrictions Description offset integer false read-only none size integer false read-only none","title":"Properties"},{"location":"automation-hub/#properties_209","text":"Name Type Required Restrictions Description sha256 string true none The expected sha256 checksum for the file.","title":"Properties"},{"location":"automation-hub/#properties_210","text":"Name Type Required Restrictions Description pulp_href string(uri) false read-only none pulp_created string(date-time) false read-only Timestamp of creation. size integer true none The size of the upload in bytes. completed string(date-time) false read-only Timestamp when upload is committed. chunks [ UploadChunkResponse ] false read-only [A mixin for validating unknown serializers' fields.]","title":"Properties"},{"location":"automation-hub/#properties_211","text":"Name Type Required Restrictions Description pulp_href string(uri) false read-only none pulp_created string(date-time) false read-only Timestamp of creation. size integer true none The size of the upload in bytes. completed string(date-time) false read-only Timestamp when upload is committed.","title":"Properties"},{"location":"automation-hub/#properties_212","text":"Name Type Required Restrictions Description username string true none Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only. first_name string false none none last_name string false none none email string(email) false none none groups [integer] false none The groups this user belongs to. A user will get all permissions granted to each of their groups. password string false write-only none is_superuser boolean false none Designates that this user has all permissions without explicitly assigning them.","title":"Properties"},{"location":"automation-hub/#properties_213","text":"Name Type Required Restrictions Description name string true none Name.","title":"Properties"},{"location":"automation-hub/#properties_214","text":"Name Type Required Restrictions Description name string true none Name. pulp_href string(uri) false read-only none","title":"Properties"},{"location":"automation-hub/#properties_215","text":"Name Type Required Restrictions Description id integer false read-only none username string true none Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only. first_name string false none none last_name string false none none email string(email) false none none groups [integer] false none The groups this user belongs to. A user will get all permissions granted to each of their groups. date_joined string(date-time) false read-only none is_superuser boolean false none Designates that this user has all permissions without explicitly assigning them. auth_provider string false read-only none","title":"Properties"},{"location":"automation-hub/#properties_216","text":"Name Type Required Restrictions Description role string true none none content_object string\u00a6null true none pulp_href of the object for which role permissions should be asserted. If set to 'null', permissions will act on the model-level.","title":"Properties"},{"location":"automation-hub/#properties_217","text":"Name Type Required Restrictions Description pulp_href string(uri) false read-only none pulp_created string(date-time) false read-only Timestamp of creation. role string true none none content_object string\u00a6null true none pulp_href of the object for which role permissions should be asserted. If set to 'null', permissions will act on the model-level. description string false read-only none permissions [string] false read-only none","title":"Properties"},{"location":"automation-hub/#properties_218","text":"Name Type Required Restrictions Description component string true none Name of a versioned component of Pulp version string true none Version of the component (e.g. 3.0.0) package string true none Python package name providing the component","title":"Properties"},{"location":"automation-hub/#properties_219","text":"Name Type Required Restrictions Description pulp_href string(uri) false read-only none pulp_created string(date-time) false read-only Timestamp of creation. name string false read-only The name of the worker. last_heartbeat string(date-time) false read-only Timestamp of the last time the worker talked to the service. current_task string(uri) false read-only The task this worker is currently executing, or empty if the worker is not currently assigned to a task.","title":"Properties"},{"location":"automation-hub/#properties_220","text":"Name Type Required Restrictions Description base_path string true none The base (relative) path component of the published url. Avoid paths that overlap with other distribution base paths (e.g. \"foo\" and \"foo/bar\") content_guard string(uri)\u00a6null false none An optional content-guard. name string true none A unique name. Ex, rawhide and stable . repository string(uri)\u00a6null false none The latest RepositoryVersion for this Repository will be served. repository_version string(uri)\u00a6null false none RepositoryVersion to be served pulp_labels object false none none","title":"Properties"},{"location":"automation-hub/#properties_221","text":"Name Type Required Restrictions Description pulp_href string(uri) false read-only none pulp_created string(date-time) false read-only Timestamp of creation. base_path string true none The base (relative) path component of the published url. Avoid paths that overlap with other distribution base paths (e.g. \"foo\" and \"foo/bar\") content_guard string(uri)\u00a6null false none An optional content-guard. name string true none A unique name. Ex, rawhide and stable . repository string(uri)\u00a6null false none The latest RepositoryVersion for this Repository will be served. repository_version string(uri)\u00a6null false none RepositoryVersion to be served client_url string false read-only The URL of a Collection content source. pulp_labels object false none none","title":"Properties"},{"location":"automation-hub/#properties_222","text":"Name Type Required Restrictions Description pulp_labels object false none none name string true none A unique name for this repository. description string\u00a6null false none An optional description. retain_repo_versions integer\u00a6null false none Retain X versions of the repository. Default is null which retains all versions. This is provided as a tech preview in Pulp 3 and may change in the future. remote string(uri)\u00a6null false none An optional remote to use by default when syncing. last_synced_metadata_time string(date-time)\u00a6null false none Last synced metadata time. gpgkey string\u00a6null false none Gpg public key to verify collection signatures against","title":"Properties"},{"location":"automation-hub/#properties_223","text":"Name Type Required Restrictions Description pulp_href string(uri) false read-only none pulp_created string(date-time) false read-only Timestamp of creation. versions_href string(uri) false read-only none pulp_labels object false none none latest_version_href string(uri) false read-only none name string true none A unique name for this repository. description string\u00a6null false none An optional description. retain_repo_versions integer\u00a6null false none Retain X versions of the repository. Default is null which retains all versions. This is provided as a tech preview in Pulp 3 and may change in the future. remote string(uri)\u00a6null false none An optional remote to use by default when syncing. last_synced_metadata_time string(date-time)\u00a6null false none Last synced metadata time. gpgkey string\u00a6null false none Gpg public key to verify collection signatures against","title":"Properties"},{"location":"automation-hub/#properties_224","text":"Name Type Required Restrictions Description name string true none The name of the Collection. namespace string true none The namespace of the Collection.","title":"Properties"},{"location":"automation-hub/#properties_225","text":"Name Type Required Restrictions Description url string true none The URL of an external content source. auth_url string\u00a6null false none The URL to receive a session token from, e.g. used with Automation Hub. token string\u00a6null false write-only none policy PolicyDb6Enum false none The policy to use when downloading content. requirements_file string\u00a6null false none The string version of Collection requirements yaml. created_at string(date-time) false none none updated_at string(date-time) false none none username string\u00a6null false none Remote user. password string\u00a6null false write-only Remote password. tls_validation boolean false none If True, TLS peer validation must be performed. client_key string\u00a6null false write-only A PEM encoded private key used for authentication. client_cert string\u00a6null false none A PEM encoded client certificate used for authentication. ca_cert string\u00a6null false none A PEM encoded CA certificate used to validate the server certificate presented by the remote server. download_concurrency integer\u00a6null false none Total number of simultaneous connections. If not set then the default value will be used. proxy_url string\u00a6null false none The proxy URL. Format: scheme://host:port proxy_username string\u00a6null false none User for proxy authentication. proxy_password string\u00a6null false write-only Password for proxy authentication. rate_limit integer\u00a6null false none Limits requests per second for each concurrent downloader signed_only boolean false none Sync only collections that have a signature","title":"Properties"},{"location":"automation-hub/#properties_226","text":"Name Type Required Restrictions Description pk string(uuid) false read-only none name string false read-only none url string true none The URL of an external content source. auth_url string\u00a6null false none The URL to receive a session token from, e.g. used with Automation Hub. policy PolicyDb6Enum false none The policy to use when downloading content. requirements_file string\u00a6null false none The string version of Collection requirements yaml. created_at string(date-time) false none none updated_at string(date-time) false none none username string\u00a6null false none Remote user. tls_validation boolean false none If True, TLS peer validation must be performed. client_cert string\u00a6null false none A PEM encoded client certificate used for authentication. ca_cert string\u00a6null false none A PEM encoded CA certificate used to validate the server certificate presented by the remote server. last_sync_task string false read-only none repositories [ AnsibleRepositoryResponse ] false read-only none pulp_href string(uri) false read-only none download_concurrency integer\u00a6null false none Total number of simultaneous connections. If not set then the default value will be used. proxy_url string\u00a6null false none The proxy URL. Format: scheme://host:port proxy_username string\u00a6null false none User for proxy authentication. write_only_fields [any] false read-only none rate_limit integer\u00a6null false none Limits requests per second for each concurrent downloader signed_only boolean false none Sync only collections that have a signature","title":"Properties"},{"location":"automation-hub/#properties_227","text":"Name Type Required Restrictions Description name string true none The name of the Collection. namespace string true none The namespace of the Collection.","title":"Properties"},{"location":"automation-hub/#properties_228","text":"Name Type Required Restrictions Description upload string(uri) false write-only An uncommitted upload that may be turned into the artifact of the content unit. repository string(uri) false write-only A URI of a repository the new content unit should be associated with. file string(binary) false write-only An uploaded file that may be turned into the artifact of the content unit. name string true none The name of the collection. namespace string true none The namespace of the collection. version string true none The version of the collection.","title":"Properties"},{"location":"automation-hub/#properties_229","text":"Name Type Required Restrictions Description pulp_href string(uri) false read-only none artifact string(uri) false none Artifact file representing the physical content pulp_created string(date-time) false read-only Timestamp of creation. md5 string false read-only The MD5 checksum if available. sha1 string false read-only The SHA-1 checksum if available. sha224 string false read-only The SHA-224 checksum if available. sha256 string false read-only The SHA-256 checksum if available. sha384 string false read-only The SHA-384 checksum if available. sha512 string false read-only The SHA-512 checksum if available. id string(uuid) true none A collection identifier. authors [string] true none A list of the CollectionVersion content's authors. contents object true none A JSON field with data about the contents. dependencies object true none A dict declaring Collections that this collection requires to be installed for it to be usable. description string true none A short summary description of the collection. docs_blob object true none A JSON field holding the various documentation blobs in the collection. manifest object true none A JSON field holding MANIFEST.json data. files object true none A JSON field holding FILES.json data. documentation string true none The URL to any online docs. homepage string true none The URL to the homepage of the collection/project. issues string true none The URL to the collection issue tracker. license [string] true none A list of licenses for content inside of a collection. name string true none The name of the collection. namespace string true none The namespace of the collection. repository string true none The URL of the originating SCM repository. tags [ ansible.TagResponse ] false read-only [A serializer for nesting in the CollectionVersion model.] version string true none The version of the collection. requires_ansible string\u00a6null false none The version of Ansible required to use the collection. Multiple versions can be separated with a comma.","title":"Properties"},{"location":"automation-hub/#properties_230","text":"Name Type Required Restrictions Description file string(binary) true write-only An uploaded file that may be turned into the artifact of the content unit. repository string(uri) false write-only A URI of a repository the new content unit should be associated with. signed_collection string(uri) true none The content this signature is pointing to.","title":"Properties"},{"location":"automation-hub/#properties_231","text":"Name Type Required Restrictions Description pulp_href string(uri) false read-only none pulp_created string(date-time) false read-only Timestamp of creation. signed_collection string(uri) true none The content this signature is pointing to. pubkey_fingerprint string false read-only The fingerprint of the public key. signing_service string(uri)\u00a6null false read-only The signing service used to create the signature.","title":"Properties"},{"location":"automation-hub/#properties_232","text":"Name Type Required Restrictions Description max_retries integer\u00a6null false none Maximum number of retry attempts after a download failure. If not set then the default value (3) will be used. client_cert string\u00a6null false none A PEM encoded client certificate used for authentication. rate_limit integer\u00a6null false none Limits requests per second for each concurrent downloader headers [object] false none Headers for aiohttp.Clientsession proxy_password string\u00a6null false write-only The password to authenticate to the proxy. Extra leading and trailing whitespace characters are not trimmed. connect_timeout number(double)\u00a6null false none aiohttp.ClientTimeout.connect (q.v.) for download-connections. The default is null, which will cause the default from the aiohttp library to be used. client_key string\u00a6null false write-only A PEM encoded private key used for authentication. url string true none The URL of an external content source. proxy_username string\u00a6null false write-only The username to authenticte to the proxy. username string\u00a6null false write-only The username to be used for authentication when syncing. download_concurrency integer\u00a6null false none Total number of simultaneous connections. If not set then the default value will be used. tls_validation boolean false none If True, TLS peer validation must be performed. pulp_labels object false none none password string\u00a6null false write-only The password to be used for authentication when syncing. Extra leading and trailing whitespace characters are not trimmed. sock_read_timeout number(double)\u00a6null false none aiohttp.ClientTimeout.sock_read (q.v.) for download-connections. The default is null, which will cause the default from the aiohttp library to be used. proxy_url string\u00a6null false none The proxy URL. Format: scheme://host:port ca_cert string\u00a6null false none A PEM encoded CA certificate used to validate the server certificate presented by the remote server. total_timeout number(double)\u00a6null false none aiohttp.ClientTimeout.total (q.v.) for download-connections. The default is null, which will cause the default from the aiohttp library to be used. sock_connect_timeout number(double)\u00a6null false none aiohttp.ClientTimeout.sock_connect (q.v.) for download-connections. The default is null, which will cause the default from the aiohttp library to be used. name string true none A unique name for this remote. metadata_only boolean false none If True, only metadata about the content will be stored in Pulp. Clients will retrieve content from the remote URL. git_ref string false none A git ref. e.g.: branch, tag, or commit sha.","title":"Properties"},{"location":"automation-hub/#properties_233","text":"Name Type Required Restrictions Description max_retries integer\u00a6null false none Maximum number of retry attempts after a download failure. If not set then the default value (3) will be used. client_cert string\u00a6null false none A PEM encoded client certificate used for authentication. rate_limit integer\u00a6null false none Limits requests per second for each concurrent downloader headers [object] false none Headers for aiohttp.Clientsession pulp_created string(date-time) false read-only Timestamp of creation. connect_timeout number(double)\u00a6null false none aiohttp.ClientTimeout.connect (q.v.) for download-connections. The default is null, which will cause the default from the aiohttp library to be used. pulp_last_updated string(date-time) false read-only Timestamp of the most recent update of the remote. url string true none The URL of an external content source. download_concurrency integer\u00a6null false none Total number of simultaneous connections. If not set then the default value will be used. tls_validation boolean false none If True, TLS peer validation must be performed. pulp_labels object false none none pulp_href string(uri) false read-only none sock_read_timeout number(double)\u00a6null false none aiohttp.ClientTimeout.sock_read (q.v.) for download-connections. The default is null, which will cause the default from the aiohttp library to be used. proxy_url string\u00a6null false none The proxy URL. Format: scheme://host:port ca_cert string\u00a6null false none A PEM encoded CA certificate used to validate the server certificate presented by the remote server. total_timeout number(double)\u00a6null false none aiohttp.ClientTimeout.total (q.v.) for download-connections. The default is null, which will cause the default from the aiohttp library to be used. sock_connect_timeout number(double)\u00a6null false none aiohttp.ClientTimeout.sock_connect (q.v.) for download-connections. The default is null, which will cause the default from the aiohttp library to be used. name string true none A unique name for this remote. metadata_only boolean false none If True, only metadata about the content will be stored in Pulp. Clients will retrieve content from the remote URL. git_ref string false none A git ref. e.g.: branch, tag, or commit sha.","title":"Properties"},{"location":"automation-hub/#properties_234","text":"Name Type Required Restrictions Description artifact string(uri) true none Artifact file representing the physical content version string true none none name string true none none namespace string true none none","title":"Properties"},{"location":"automation-hub/#properties_235","text":"Name Type Required Restrictions Description name string true none A unique name for this remote. url string true none The URL of an external content source. ca_cert string\u00a6null false none A PEM encoded CA certificate used to validate the server certificate presented by the remote server. client_cert string\u00a6null false none A PEM encoded client certificate used for authentication. client_key string\u00a6null false write-only A PEM encoded private key used for authentication. tls_validation boolean false none If True, TLS peer validation must be performed. proxy_url string\u00a6null false none The proxy URL. Format: scheme://host:port proxy_username string\u00a6null false write-only The username to authenticte to the proxy. proxy_password string\u00a6null false write-only The password to authenticate to the proxy. Extra leading and trailing whitespace characters are not trimmed. username string\u00a6null false write-only The username to be used for authentication when syncing. password string\u00a6null false write-only The password to be used for authentication when syncing. Extra leading and trailing whitespace characters are not trimmed. pulp_labels object false none none download_concurrency integer\u00a6null false none Total number of simultaneous connections. If not set then the default value will be used. max_retries integer\u00a6null false none Maximum number of retry attempts after a download failure. If not set then the default value (3) will be used. policy PolicyDb6Enum false none The policy to use when downloading content. total_timeout number(double)\u00a6null false none aiohttp.ClientTimeout.total (q.v.) for download-connections. The default is null, which will cause the default from the aiohttp library to be used. connect_timeout number(double)\u00a6null false none aiohttp.ClientTimeout.connect (q.v.) for download-connections. The default is null, which will cause the default from the aiohttp library to be used. sock_connect_timeout number(double)\u00a6null false none aiohttp.ClientTimeout.sock_connect (q.v.) for download-connections. The default is null, which will cause the default from the aiohttp library to be used. sock_read_timeout number(double)\u00a6null false none aiohttp.ClientTimeout.sock_read (q.v.) for download-connections. The default is null, which will cause the default from the aiohttp library to be used. headers [object] false none Headers for aiohttp.Clientsession rate_limit integer\u00a6null false none Limits requests per second for each concurrent downloader","title":"Properties"},{"location":"automation-hub/#properties_236","text":"Name Type Required Restrictions Description pulp_href string(uri) false read-only none pulp_created string(date-time) false read-only Timestamp of creation. name string true none A unique name for this remote. url string true none The URL of an external content source. ca_cert string\u00a6null false none A PEM encoded CA certificate used to validate the server certificate presented by the remote server. client_cert string\u00a6null false none A PEM encoded client certificate used for authentication. tls_validation boolean false none If True, TLS peer validation must be performed. proxy_url string\u00a6null false none The proxy URL. Format: scheme://host:port pulp_labels object false none none pulp_last_updated string(date-time) false read-only Timestamp of the most recent update of the remote. download_concurrency integer\u00a6null false none Total number of simultaneous connections. If not set then the default value will be used. max_retries integer\u00a6null false none Maximum number of retry attempts after a download failure. If not set then the default value (3) will be used. policy PolicyDb6Enum false none The policy to use when downloading content. total_timeout number(double)\u00a6null false none aiohttp.ClientTimeout.total (q.v.) for download-connections. The default is null, which will cause the default from the aiohttp library to be used. connect_timeout number(double)\u00a6null false none aiohttp.ClientTimeout.connect (q.v.) for download-connections. The default is null, which will cause the default from the aiohttp library to be used. sock_connect_timeout number(double)\u00a6null false none aiohttp.ClientTimeout.sock_connect (q.v.) for download-connections. The default is null, which will cause the default from the aiohttp library to be used. sock_read_timeout number(double)\u00a6null false none aiohttp.ClientTimeout.sock_read (q.v.) for download-connections. The default is null, which will cause the default from the aiohttp library to be used. headers [object] false none Headers for aiohttp.Clientsession rate_limit integer\u00a6null false none Limits requests per second for each concurrent downloader","title":"Properties"},{"location":"automation-hub/#properties_237","text":"Name Type Required Restrictions Description pulp_href string(uri) false read-only none artifact string(uri) true none Artifact file representing the physical content pulp_created string(date-time) false read-only Timestamp of creation. version string true none none name string true none none namespace string true none none","title":"Properties"},{"location":"automation-hub/#properties_238","text":"Name Type Required Restrictions Description name string false read-only The name of the Tag.","title":"Properties"},{"location":"automation-hub/#properties_239","text":"Name Type Required Restrictions Description pulp_href string(uri) false read-only none pulp_created string(date-time) false read-only Timestamp of creation. artifact string(uri) true none Artifact file representing the physical content digest string true none sha256 of the Blob file","title":"Properties"},{"location":"automation-hub/#properties_240","text":"Name Type Required Restrictions Description content_guard string(uri) false none An optional content-guard. If none is specified, a default one will be used. pulp_labels object false none none base_path string true none The base (relative) path component of the published url. Avoid paths that overlap with other distribution base paths (e.g. \"foo\" and \"foo/bar\") repository string(uri)\u00a6null false none The latest RepositoryVersion for this Repository will be served. name string true none A unique name. Ex, rawhide and stable . repository_version string(uri)\u00a6null false none RepositoryVersion to be served private boolean false none Restrict pull access to explicitly authorized users. Defaults to unrestricted pull access. description string\u00a6null false none An optional description.","title":"Properties"},{"location":"automation-hub/#properties_241","text":"Name Type Required Restrictions Description content_guard string(uri) false none An optional content-guard. If none is specified, a default one will be used. pulp_labels object false none none pulp_created string(date-time) false read-only Timestamp of creation. base_path string true none The base (relative) path component of the published url. Avoid paths that overlap with other distribution base paths (e.g. \"foo\" and \"foo/bar\") repository string(uri)\u00a6null false none The latest RepositoryVersion for this Repository will be served. pulp_href string(uri) false read-only none name string true none A unique name. Ex, rawhide and stable . repository_version string(uri)\u00a6null false none RepositoryVersion to be served registry_path string false read-only The Registry hostname/name/ to use with docker pull command defined by this distribution. namespace string(uri) false read-only Namespace this distribution belongs to. private boolean false none Restrict pull access to explicitly authorized users. Defaults to unrestricted pull access. description string\u00a6null false none An optional description.","title":"Properties"},{"location":"automation-hub/#properties_242","text":"Name Type Required Restrictions Description name string true none none","title":"Properties"},{"location":"automation-hub/#properties_243","text":"Name Type Required Restrictions Description pulp_href string(uri) false read-only none pulp_created string(date-time) false read-only Timestamp of creation. name string true none none","title":"Properties"},{"location":"automation-hub/#properties_244","text":"Name Type Required Restrictions Description pulp_labels object false none none manifest_signing_service string(uri)\u00a6null false none A reference to an associated signing service. description string\u00a6null false none An optional description. retain_repo_versions integer\u00a6null false none Retain X versions of the repository. Default is null which retains all versions. This is provided as a tech preview in Pulp 3 and may change in the future. name string true none A unique name for this repository.","title":"Properties"},{"location":"automation-hub/#properties_245","text":"Name Type Required Restrictions Description pulp_labels object false none none pulp_created string(date-time) false read-only Timestamp of creation. manifest_signing_service string(uri)\u00a6null false none A reference to an associated signing service. description string\u00a6null false none An optional description. pulp_href string(uri) false read-only none versions_href string(uri) false read-only none retain_repo_versions integer\u00a6null false none Retain X versions of the repository. Default is null which retains all versions. This is provided as a tech preview in Pulp 3 and may change in the future. latest_version_href string(uri) false read-only none name string true none A unique name for this repository.","title":"Properties"},{"location":"automation-hub/#properties_246","text":"Name Type Required Restrictions Description name string true none A unique name for this remote. url string true none The URL of an external content source. ca_cert string\u00a6null false none A PEM encoded CA certificate used to validate the server certificate presented by the remote server. client_cert string\u00a6null false none A PEM encoded client certificate used for authentication. client_key string\u00a6null false write-only A PEM encoded private key used for authentication. tls_validation boolean false none If True, TLS peer validation must be performed. proxy_url string\u00a6null false none The proxy URL. Format: scheme://host:port proxy_username string\u00a6null false write-only The username to authenticte to the proxy. proxy_password string\u00a6null false write-only The password to authenticate to the proxy. Extra leading and trailing whitespace characters are not trimmed. username string\u00a6null false write-only The username to be used for authentication when syncing. password string\u00a6null false write-only The password to be used for authentication when syncing. Extra leading and trailing whitespace characters are not trimmed. pulp_labels object false none none download_concurrency integer\u00a6null false none Total number of simultaneous connections. If not set then the default value will be used. max_retries integer\u00a6null false none Maximum number of retry attempts after a download failure. If not set then the default value (3) will be used. policy Policy762Enum false none immediate - All manifests and blobs are downloaded and saved during a sync. on_demand - Only tags and manifests are downloaded. Blobs are not downloaded until they are requested for the first time by a client. streamed - Blobs are streamed to the client with every request and never saved. total_timeout number(double)\u00a6null false none aiohttp.ClientTimeout.total (q.v.) for download-connections. The default is null, which will cause the default from the aiohttp library to be used. connect_timeout number(double)\u00a6null false none aiohttp.ClientTimeout.connect (q.v.) for download-connections. The default is null, which will cause the default from the aiohttp library to be used. sock_connect_timeout number(double)\u00a6null false none aiohttp.ClientTimeout.sock_connect (q.v.) for download-connections. The default is null, which will cause the default from the aiohttp library to be used. sock_read_timeout number(double)\u00a6null false none aiohttp.ClientTimeout.sock_read (q.v.) for download-connections. The default is null, which will cause the default from the aiohttp library to be used. headers [object] false none Headers for aiohttp.Clientsession rate_limit integer\u00a6null false none Limits requests per second for each concurrent downloader upstream_name string true none Name of the upstream repository include_tags [string]\u00a6null false none A list of tags to include during sync. Wildcards *, ? are recognized. 'include_tags' is evaluated before 'exclude_tags'. exclude_tags [string]\u00a6null false none A list of tags to exclude during sync. Wildcards *, ? are recognized. 'exclude_tags' is evaluated after 'include_tags'. sigstore string(uri) false none A URL to a sigstore to download image signatures from","title":"Properties"},{"location":"automation-hub/#properties_247","text":"Name Type Required Restrictions Description pulp_href string(uri) false read-only none pulp_created string(date-time) false read-only Timestamp of creation. name string true none A unique name for this remote. url string true none The URL of an external content source. ca_cert string\u00a6null false none A PEM encoded CA certificate used to validate the server certificate presented by the remote server. client_cert string\u00a6null false none A PEM encoded client certificate used for authentication. tls_validation boolean false none If True, TLS peer validation must be performed. proxy_url string\u00a6null false none The proxy URL. Format: scheme://host:port pulp_labels object false none none pulp_last_updated string(date-time) false read-only Timestamp of the most recent update of the remote. download_concurrency integer\u00a6null false none Total number of simultaneous connections. If not set then the default value will be used. max_retries integer\u00a6null false none Maximum number of retry attempts after a download failure. If not set then the default value (3) will be used. policy Policy762Enum false none immediate - All manifests and blobs are downloaded and saved during a sync. on_demand - Only tags and manifests are downloaded. Blobs are not downloaded until they are requested for the first time by a client. streamed - Blobs are streamed to the client with every request and never saved. total_timeout number(double)\u00a6null false none aiohttp.ClientTimeout.total (q.v.) for download-connections. The default is null, which will cause the default from the aiohttp library to be used. connect_timeout number(double)\u00a6null false none aiohttp.ClientTimeout.connect (q.v.) for download-connections. The default is null, which will cause the default from the aiohttp library to be used. sock_connect_timeout number(double)\u00a6null false none aiohttp.ClientTimeout.sock_connect (q.v.) for download-connections. The default is null, which will cause the default from the aiohttp library to be used. sock_read_timeout number(double)\u00a6null false none aiohttp.ClientTimeout.sock_read (q.v.) for download-connections. The default is null, which will cause the default from the aiohttp library to be used. headers [object] false none Headers for aiohttp.Clientsession rate_limit integer\u00a6null false none Limits requests per second for each concurrent downloader upstream_name string true none Name of the upstream repository include_tags [string]\u00a6null false none A list of tags to include during sync. Wildcards *, ? are recognized. 'include_tags' is evaluated before 'exclude_tags'. exclude_tags [string]\u00a6null false none A list of tags to exclude during sync. Wildcards *, ? are recognized. 'exclude_tags' is evaluated after 'include_tags'. sigstore string(uri) false none A URL to a sigstore to download image signatures from","title":"Properties"},{"location":"automation-hub/#properties_248","text":"Name Type Required Restrictions Description pulp_labels object false none none name string true none A unique name for this repository. description string\u00a6null false none An optional description. retain_repo_versions integer\u00a6null false none Retain X versions of the repository. Default is null which retains all versions. This is provided as a tech preview in Pulp 3 and may change in the future. remote string(uri)\u00a6null false none An optional remote to use by default when syncing. manifest_signing_service string(uri)\u00a6null false none A reference to an associated signing service.","title":"Properties"},{"location":"automation-hub/#properties_249","text":"Name Type Required Restrictions Description pulp_href string(uri) false read-only none pulp_created string(date-time) false read-only Timestamp of creation. versions_href string(uri) false read-only none pulp_labels object false none none latest_version_href string(uri) false read-only none name string true none A unique name for this repository. description string\u00a6null false none An optional description. retain_repo_versions integer\u00a6null false none Retain X versions of the repository. Default is null which retains all versions. This is provided as a tech preview in Pulp 3 and may change in the future. remote string(uri)\u00a6null false none An optional remote to use by default when syncing. manifest_signing_service string(uri)\u00a6null false none A reference to an associated signing service.","title":"Properties"},{"location":"automation-hub/#properties_250","text":"Name Type Required Restrictions Description pulp_href string(uri) false read-only none pulp_created string(date-time) false read-only Timestamp of creation. artifact string(uri) true none Artifact file representing the physical content digest string true none sha256 of the Manifest file schema_version integer true none Manifest schema version media_type string true none Manifest media type of the file listed_manifests [string] true none Manifests that are referenced by this Manifest List config_blob string(uri) false none Blob that contains configuration for this Manifest blobs [string] true none Blobs that are referenced by this Manifest","title":"Properties"},{"location":"automation-hub/#properties_251","text":"Name Type Required Restrictions Description pulp_href string(uri) false read-only none pulp_created string(date-time) false read-only Timestamp of creation. name string true none Signature name in the format of digest_algo:manifest_digest@random_32_chars digest string true none sha256 digest of the signature blob type string true none Container signature type, e.g. 'atomic' key_id string true none Signing key ID timestamp integer true none Timestamp of a signature creator string true none Signature creator signed_manifest string(uri) true none Manifest that is signed","title":"Properties"},{"location":"automation-hub/#properties_252","text":"Name Type Required Restrictions Description pulp_href string(uri) false read-only none pulp_created string(date-time) false read-only Timestamp of creation. name string true none Tag name tagged_manifest string(uri) true none Manifest that is tagged","title":"Properties"},{"location":"automation-hub/#properties_253","text":"Name Type Required Restrictions Description id string(uuid) false none none pulp_href string(uri) false read-only none name string true none A unique name for this remote. url string true none The URL of an external content source. policy PolicyDb6Enum false none The policy to use when downloading content. created_at string(date-time) false none none updated_at string(date-time) false none none tls_validation boolean false none If True, TLS peer validation must be performed. client_cert string\u00a6null false none A PEM encoded client certificate used for authentication. ca_cert string\u00a6null false none A PEM encoded CA certificate used to validate the server certificate presented by the remote server. last_sync_task string false read-only none download_concurrency integer\u00a6null false none Total number of simultaneous connections. If not set then the default value will be used. proxy_url string\u00a6null false none The proxy URL. Format: scheme://host:port write_only_fields [any] false read-only none rate_limit integer\u00a6null false none Limits requests per second for each concurrent downloader is_indexable boolean false read-only none","title":"Properties"},{"location":"automation-hub/#properties_254","text":"Name Type Required Restrictions Description username string true none none password string true none none","title":"Properties"},{"location":"automation-hub/#properties_255","text":"Name Type Required Restrictions Description username string true none none password string true none none","title":"Properties"}]}